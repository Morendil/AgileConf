--
-- PostgreSQL database dump
--

SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: records; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE records (
    url text NOT NULL,
    session_id integer NOT NULL
);


ALTER TABLE public.records OWNER TO postgres;

--
-- Name: records_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE records_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.records_id_seq OWNER TO postgres;

--
-- Name: records_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('records_id_seq', 497, true);


--
-- Name: session_speakers; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE session_speakers (
    speaker_id integer NOT NULL,
    session_id integer NOT NULL
);


ALTER TABLE public.session_speakers OWNER TO postgres;

--
-- Name: sessions; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE sessions (
    id integer NOT NULL,
    title text,
    description text,
    stage character varying(50),
    type character varying(50),
    year integer
);


ALTER TABLE public.sessions OWNER TO postgres;

--
-- Name: sessions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sessions_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.sessions_id_seq OWNER TO postgres;

--
-- Name: sessions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE sessions_id_seq OWNED BY sessions.id;


--
-- Name: sessions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('sessions_id_seq', 420, true);


--
-- Name: speakers; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE speakers (
    id integer NOT NULL,
    name text
);


ALTER TABLE public.speakers OWNER TO postgres;

--
-- Name: speakers_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE speakers_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.speakers_id_seq OWNER TO postgres;

--
-- Name: speakers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE speakers_id_seq OWNED BY speakers.id;


--
-- Name: speakers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('speakers_id_seq', 1507, true);


--
-- Name: videos; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE videos (
    id integer NOT NULL,
    thumb character varying(500),
    media character varying(500),
    player character varying(50),
    width integer,
    height integer,
    duration character varying(50),
    session_id integer NOT NULL,
    public boolean,
    access integer DEFAULT 3
);


ALTER TABLE public.videos OWNER TO postgres;

--
-- Name: videos_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE videos_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.videos_id_seq OWNER TO postgres;

--
-- Name: videos_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE videos_id_seq OWNED BY videos.id;


--
-- Name: videos_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('videos_id_seq', 46, true);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE sessions ALTER COLUMN id SET DEFAULT nextval('sessions_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE speakers ALTER COLUMN id SET DEFAULT nextval('speakers_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE videos ALTER COLUMN id SET DEFAULT nextval('videos_id_seq'::regclass);


--
-- Data for Name: records; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY records (url, session_id) FROM stdin;
http://agile2007.agilealliance.org/downloads/presentations/watij_921.zip	20070921
http://agile2007.agilealliance.org/downloads/proceedings/006_On the Sustained Use_860.pdf	20070860
http://agile2007.agilealliance.org/downloads/presentations/Rawsthorne_AgileAnalysis_v1d_558.pdf	20070558
http://agile2007.agilealliance.org/downloads/handouts/Rawsthorne_558.pdf	20070558
http://agile2007.agilealliance.org/downloads/proceedings/048_Rollercoaster of Agile Transition_552.pdf	20070552
http://agile2007.agilealliance.org/downloads/presentations/Jochems.Rodgers.The_Rollercoaster_of_Agile_Transition_Final_7.26.07.ppt_552.pdf	20070552
http://agile2007.agilealliance.org/downloads/proceedings/007_Automated Recognition_404.pdf	20070404
http://agile2007.agilealliance.org/downloads/presentations/executable-documents-tutorial-30_730.pdf	20070730
http://agile2007.agilealliance.org/downloads/handouts/Mugridge_730.pdf	20070730
http://agile2007.agilealliance.org/downloads/presentations/globalDev_403.pdf	20070403
http://agile2007.agilealliance.org/downloads/handouts/Little_929.pdf	20070929
http://agile2007.agilealliance.org/downloads/presentations/Cohn_PlanningAndTracking_364.pdf	20070364
http://agile2007.agilealliance.org/downloads/handouts/Cohn_364.pdf	20070364
http://agile2003.agilealliance.org/files/T17Slides.ppt	20030062
http://agile2003.agilealliance.org/files/P1Paper.pdf	20030065
http://agile2003.agilealliance.org/files/P1Slides.pdf	20030065
http://agile2003.agilealliance.org/files/P2Paper.pdf	20030066
http://agile2003.agilealliance.org/files/P3Paper.pdf	20030067
http://agile2003.agilealliance.org/files/P4Paper.pdf	20030068
http://agile2003.agilealliance.org/files/P5Paper.pdf	20030069
http://agile2003.agilealliance.org/files/P6Paper.pdf	20030070
http://agile2003.agilealliance.org/files/R1Paper.pdf	20030071
http://agile2003.agilealliance.org/files/R2Paper.pdf	20030072
http://agile2003.agilealliance.org/files/R3Paper.pdf	20030073
http://agile2003.agilealliance.org/files/R3Slides.pdf	20030073
http://agile2003.agilealliance.org/files/R4Paper.pdf	20030074
http://agile2003.agilealliance.org/files/R5Paper.pdf	20030075
http://agile2003.agilealliance.org/files/R5Slides.ppt	20030075
http://agile2003.agilealliance.org/files/R6Paper.pdf	20030076
http://agile2003.agilealliance.org/files/R7Paper.pdf	20030077
http://agile2003.agilealliance.org/files/R8Paper.pdf	20030078
http://agile2003.agilealliance.org/files/R9Paper.pdf	20030079
http://agile2003.agilealliance.org/files/R10Paper.pdf	20030080
http://agile2003.agilealliance.org/files/R11Paper.pdf	20030081
http://agile2003.agilealliance.org/files/R12Paper.pdf	20030082
http://agile2003.agilealliance.org/files/R13Paper.pdf	20030083
http://agile2003.agilealliance.org/files/R13Slides.ppt	20030083
http://agile2003.agilealliance.org/files/R14Paper.pdf	20030084
http://agile2003.agilealliance.org/files/R14Slides.pdf	20030084
http://agile2003.agilealliance.org/files/R15Paper.pdf	20030085
http://www.poppendieck.com/agilecontracts.htm	20030086
http://agile2003.agilealliance.org/files/E3Paper.pdf	20030088
http://agile2003.agilealliance.org/files/E5Slides.ppt	20030090
http://agile2003.agilealliance.org/files/E13Notes.pdf	20030093
http://www.ebgconsulting.com/images/ADC%20Conference%20-%20Cust%20Involvt%206-27/page_01.htm	20030095
http://trondheim.cs.washington.edu/cgi-bin/agile/BaseQuicki/wiki.cgi?WelcomeVisitors	20030099
http://www.cebase.org/ADCexchange/	20030100
http://agile2003.agilealliance.org/files/E17Slides.ppt	20030101
http://agile2004.agilealliance.org/files/RP1-1.pdf	20040120
http://agile2004.agilealliance.org/files/RP1-2.pdf	20040121
http://agile2004.agilealliance.org/files/RP1-3.pdf	20040122
http://agile2004.agilealliance.org/files/RP2-1.pdf	20040123
http://agile2004.agilealliance.org/files/RP2-2.pdf	20040124
http://agile2004.agilealliance.org/files/XR1-1.pdf	20040125
http://agile2004.agilealliance.org/files/XR1-2.pdf	20040126
http://agile2004.agilealliance.org/files/XR1-3.pdf	20040127
http://agile2004.agilealliance.org/files/XR2-1.pdf	20040128
http://agile2004.agilealliance.org/files/XR2-2.pdf	20040129
http://agile2004.agilealliance.org/files/XR2-3.pdf	20040130
http://agile2004.agilealliance.org/files/XR3-1.pdf	20040131
http://agile2004.agilealliance.org/files/XR3-2.pdf	20040132
http://agile2004.agilealliance.org/files/XR3-3.pdf	20040133
http://agile2004.agilealliance.org/files/XR4-1.pdf	20040134
http://agile2004.agilealliance.org/files/XR4-2.pdf	20040135
http://agile2004.agilealliance.org/files/XR4-3.pdf	20040136
http://agile2004.agilealliance.org/files/XR5-1.pdf	20040137
http://agile2004.agilealliance.org/files/XR5-2.pdf	20040138
TU2 - ExpressingBusinessRulesAgile2005.pdf	20050156
TU2 - ExpressingBusinessRulesAgile2005.ppt	20050156
TU3 - PattonTutorialHandouts.pdf	20050157
TU3 -AgileUserExperienceDesignTutorial.ppt	20050157
TU4 - RetrospectivesED-DL4-1Agile.pdf	20050158
TU7 - Test_Driven_Development_for_Embedded_Systems.ppt	20050161
TU8 - Backlogs for 59-minute Scrum.pdf	20050162
TU8 - Scrum Gathering 59 Minute Simulation v4.pdf	20050162
TU9 - ProfitEngineProcess-June-2005.pdf	20050163
TU10 - Lean Software Development Agile 2005 Handouts.pdf	20050164
TU11 - Tutorial Agile Testing_send.ppt	20050165
TU13 - scalingAgileJutta2005.pdf	20050167
TU14 - Tutorial_Skills for the Agile Designer.pdf	20050168
TU15 - AgileEstimatingAndPlanning_Cohn.pdf	20050169
TU16 - Scripting101_200507.pdf	20050170
TU17 - Collabration Works Tutorial - Gottesdiener for CD.pdf	20050171
TU18 - TestDrivenJ2ee.pdf	20050172
TU20 - APP.pdf	20050174
TU20 - Interview.pdf	20050174
TU22 - Survival Guidev4.ppt	20050176
TU23 SDD-Tutorial-Handouts.pdf	20050177
http://agile2007.agilealliance.org/downloads/presentations/Presenter_First_719.pdf	20070719
http://agile2007.agilealliance.org/downloads/presentations/Succeeding_with_Agile_in_the_US_Federal_Government-2up_559.pdf	20070559
http://agile2007.agilealliance.org/downloads/handouts/Cuellar_559.pdf	20070559
http://agile2007.agilealliance.org/downloads/presentations/The_Gentle_Art_of_Pair_Programming_Agile2007_783.zip	20070783
http://agile2007.agilealliance.org/downloads/proceedings/047_Growth of an Agile Coach_641.pdf	20070641
http://agile2007.agilealliance.org/downloads/presentations/Doss_Silva_Coach_Community_Agile2007_v4_641.pdf	20070641
http://agile2007.agilealliance.org/downloads/proceedings/049_XP and Junior_736.pdf	20070736
http://agile2007.agilealliance.org/downloads/proceedings/052_Adopting a New Methodology_722.pdf	20070722
http://agile2007.agilealliance.org/downloads/presentations/Agile2007_HBS_AdoptionSlides_722.pdf	20070722
http://agile2007.agilealliance.org/downloads/proceedings/010_Does the XP environment_645.pdf	20070645
http://agile2007.agilealliance.org/downloads/proceedings/051_Get Your Agile Freak On_944.pdf	20070944
http://agile2007.agilealliance.org/downloads/presentations/GetYourAgileFreakOnSlides_20070731__944.pdf	20070944
http://agile2007.agilealliance.org/downloads/presentations/suthertut_444.pdf	20070444
http://agile2007.agilealliance.org/downloads/presentations/PlanningIsGoodForYou_749.pdf	20070749
http://agile2007.agilealliance.org/downloads/presentations/simple_steps_Toward_Excellence_543.pdf	20070543
http://agile2007.agilealliance.org/downloads/proceedings/053_Successful Integration_932.pdf	20070932
http://agile2007.agilealliance.org/downloads/presentations/Pragmatics_Presentation_v3_932.pdf	20070932
http://agile2007.agilealliance.org/downloads/proceedings/009_whitworth-SocialNature_627.pdf	20070627
http://agile2007.agilealliance.org/downloads/presentations/But_its_not_on_the_project_plan_-_Agile_for_PMI_PMs_1064.zip	20071064
http://agile2007.agilealliance.org/downloads/presentations/AgileAdoptionAntipatterns_770.zip	20070770
http://agile2007.agilealliance.org/downloads/presentations/AgileBlending_468.pdf	20070468
http://agile2007.agilealliance.org/downloads/proceedings/012_ferreria-AgileDevelopmentIterations-Final_585.pdf	20070585
http://agile2007.agilealliance.org/downloads/proceedings/089_Agile Principles_706.pdf	20070706
http://agile2007.agilealliance.org/downloads/presentations/EmbeddedDiscoverySession2007Outline-v1r1_493.pdf	20070493
http://agile2007.agilealliance.org/downloads/proceedings/055_ISO 9001_833.pdf	20070833
http://agile2007.agilealliance.org/downloads/presentations/ISO_9001_and_Agile_Development_833.pdf	20070833
http://agile2007.agilealliance.org/downloads/presentations/Slides605_PaulKing_Agile2007_OpenSourceTesting_605.pdf	20070605
http://agile2007.agilealliance.org/downloads/proceedings/057_Scrum and CMMI Level 5_425.pdf	20070425
http://agile2007.agilealliance.org/downloads/presentations/sutherexp_425.pdf	20070425
http://agile2007.agilealliance.org/downloads/handouts/WirfsBrock_830.pdf	20070830
http://agile2007.agilealliance.org/downloads/presentations/Agile_2007_Tutorial_Handouts_635.pdf	20070635
http://agile2007.agilealliance.org/downloads/presentations/BradshawS_-_Test_Team_Integration_948.pdf	20070948
http://agile2007.agilealliance.org/downloads/proceedings/056_Agile Maturity Map_825.pdf	20070825
http://agile2007.agilealliance.org/downloads/presentations/Agile_Maturity_Map_-_A_Goal_Oriented_Approach_To_Agile_Impovement_825.zip	20070825
http://agile2007.agilealliance.org/downloads/proceedings/013_Towards ExtremeUsable Software_829.pdf	20070829
http://agile2007.agilealliance.org/downloads/presentations/agile07-slides_829.pdf	20070829
http://agile2007.agilealliance.org/downloads/proceedings/016_Talking the talk_347.pdf	20070347
http://agile2007.agilealliance.org/downloads/presentations/SalsAgilePresentation_347.pdf	20070347
http://agile2007.agilealliance.org/downloads/proceedings/059_Balancing Business Value_896.pdf	20070896
http://agile2007.agilealliance.org/downloads/presentations/Martin_Jul_-_corporate_judo_-_agile_implementation_patterns_738.pdf	20070738
TU27 - AI-LdrshpforAgile2005 v2.ppt	20050181
TU27 - AIBibforAgile2005 v2.doc	20050181
TU27 - Agile Challenge Print 24-Jun-05.ppt	20050181
TU27 - Reference List 24-Jun-05.doc	20050181
TU28 - How to Integrate - Agile 2005.ppt	20050182
TU29 -agile2005-incremental-design.ppt	20050183
TU30 - Stop Super-sizing your Release Plans v7.pdf	20050184
TU31 - Agile2005.ppt	20050185
TU32 - mcf_welc_agile2005.ppt	20050186
XR1 - Agile Database Development Presentation.ppt	20050187
XR1 - Agile Development of the Database.pdf	20050187
XR2 - teaching a goliath to fly - Updated Final.pdf	20050188
XR4 - Promiscuous Pairing and  Beginner's Mind .pdf	20050190
XR5 - estimating in actual time.pdf	20050191
XR6 - Improving Agile Team Learning by Improving Team.pdf	20050192
XR6 - Improving Agile Team Learning.ppt	20050192
XR7 - IBM-WM-exp-final.pdf	20050193
XR7 - Introducing Agile Development-v2.ppt	20050193
XR8 - Experience Report v20.pdf	20050194
XR8 - StayingAgile v20.ppt	20050194
XR9 - agile2005_eckfeldt-madden-horowitz_final.pdf	20050195
XR10 - Gil Broza - Experience Paper - Early Community.pdf	20050196
XR10 - Gil Broza - Presentation - Early Community Building.ppt	20050196
XR11 - UsingOpenspacesf10.pdf	20050197
XR12 - A False Measure of Success.ppt	20050198
XR12 - AFalseMeasureOfSuccessRevised.pdf	20050198
XR13 - Steve Baker XR16 Paper.pdf	20050199
XR13 - Steve Baker XR16 Presentation.ppt	20050199
XR14 - Agile 2005 Paper DJA v1_5.pdf	20050200
XR15 Costs of Compliance FINAL DRAFT.pdf	20050201
XR16 - 2005 Experience Report Paper.ppt	20050202
XR16 - Formalized Agility.pdf	20050202
XR17 - Agile Offshore Techniques - A Case Study.pdf	20050203
XR18 - Agile2005 - Follow the sun XP Paper _IEEE Format_.pdf	20050204
XR18 - Agile2005 - Follow the sun XP Slides.ppt	20050204
XR19 - CaseStudyOfCustomerInput.pdf	20050205
XR25 - 137_3.pdf	20050211
XR20 _ExperiencesIntegratingUEDPractices.pdf	20050206
XR21 - Customer_Developer_Communication_20050624.pdf	20050207
XR21 - Customer_Developer_Communication_20050624.ppt	20050207
XR22 - CreatingALivingSpecificationUsingFitDocuments.pdf	20050208
XR23 - Test-Driven Porting.ppt	20050209
XR23 - TestDrivenPorting.pdf	20050209
XR24 - Ongoing Quality Improvement Agile2005.pdf	20050210
XR24 - Ongoing Quality Improvement Agile2005.ppt	20050210
XR25 - 137_3.ppt	20050211
XR26 - WaltzingWithChanages.ppt	20050212
XR26 - WaltzingWithChanges.pdf	20050212
WK8 - InformativeWorkspaceHandout.doc	20050220
WK9 - Wkshp35HandoutAg2005.pdf	20050221
WK10 - 10 Principles for Leading.pdf	20050222
WK10 - AveryResponsArticle.pdf	20050222
WK10 - Books CA WS 24-Jun-05.doc	20050222
WK10 - ExpertsSayTakeRespons.pdf	20050222
WK10 - Reference List WS 24-Jun-05.doc	20050222
WK10 - citj0604avery.pdf	20050222
WK10 -Microsoft Word - RPM_poster.doc.pdf	20050222
WK17 - HiringAnAgileTesterHandout.doc	20050229
RP1 - Metaphors be with you.pdf	20050234
ES2 - AgileExperiencePaper.pdf	20050236
ES3 - ExperiencesTeachingTDD.pdf	20050237
ES4 - paper_agile2005_final.pdf	20050238
ES6 - StudentExepriencesWithExecutableAcceptanceTesting.pdf	20050240
ES7 - Teaching Agile Project Management to the PMI.pdf	20050241
ES8 - Student Perceptions.pdf	20050242
INTRO1 - Hubert Smits - Getting Started with Agile v5.pdf	20050243
INTRO2 - Agile2005_Intro_to_Agile_Highsmith_Handouts.ppt	20050244
INTRO2 Meszaros - Agile Requirments with User Stories.pdf	20050244
INTRO2 Planning-Cohn.pdf	20050244
INTRO3 - IntroXP Overview.ppt	20050245
INTRO3 - Martin XP Overview.ppt	20050245
INTRO3 Tabaka Handouts Introduction to Scrum Practices V02.ppt	20050245
INTRO4 - Ambler AMDD Overview Agile 2005.ppt	20050246
INTRO4 - Ambler Agile Database Techniques Agile 2005.ppt	20050246
INTRO4 - MClark PragAutoAgile.pdf	20050246
http://agile2007.agilealliance.org/downloads/presentations/roth_From_Analyst_to_Owner_slides_960.pdf	20070960
http://agile2007.agilealliance.org/downloads/proceedings/061_From Waterfall to Agile_554.pdf	20070554
http://agile2007.agilealliance.org/downloads/presentations/From_Waterfall_to_Agile_554.pdf	20070554
http://agile2007.agilealliance.org/downloads/handouts/Poppendieck_423.pdf	20070423
http://agile2007.agilealliance.org/downloads/presentations/The_Agile_Release_Testing_Experience_Agile_2007_931.pdf	20070931
http://agile2007.agilealliance.org/downloads/handouts/McAuliffe_931.pdf	20070931
http://agile2007.agilealliance.org/downloads/proceedings/015_Relationship between Customer_708.pdf	20070708
http://agile2007.agilealliance.org/downloads/presentations/Customer_collaboration_708.pdf	20070708
http://agile2007.agilealliance.org/downloads/proceedings/017_Role of Incremental Change_727.pdf	20070727
http://agile2007.agilealliance.org/downloads/presentations/incremental_change-agile07_presentation_727.zip	20070727
http://agile2007.agilealliance.org/downloads/handouts/Febbraro_727.pdf	20070727
http://agile2007.agilealliance.org/downloads/proceedings/060_UCD Perspective_563.pdf	20070563
http://agile2007.agilealliance.org/downloads/presentations/DotTudor_1074.pdf	20071074
http://agile2007.agilealliance.org/downloads/presentations/Highsmith_Adaptive_Performance_Management_2up_375.pdf	20070375
http://agile2007.agilealliance.org/downloads/presentations/Microsoft_PowerPoint_-_BeginnerSession_final_976.pdf	20070976
http://agile2007.agilealliance.org/downloads/handouts/Crispin_976.pdf	20070976
http://agile2007.agilealliance.org/downloads/proceedings/064_Agility and the Inconceivably Large_841.pdf	20070841
http://agile2007.agilealliance.org/downloads/presentations/Agility_and_the_Inconceivably_Large_841.pdf	20070841
http://agile2007.agilealliance.org/downloads/presentations/Are_We_Done_Yet_070621_1__592.pdf	20070592
http://agile2007.agilealliance.org/downloads/presentations/ci_for_the_web_2.0_guy_or_gal_610.pdf	20070610
http://agile2007.agilealliance.org/downloads/presentations/Play_July_2007_407.pdf	20070407
http://agile2007.agilealliance.org/downloads/handouts/Rising_407b.pdf	20070407
http://agile2007.agilealliance.org/downloads/handouts/Rising_407a.pdf	20070407
http://agile2007.agilealliance.org/downloads/presentations/Agile2007_TraditionalPM_1056.pdf	20071056
http://agile2007.agilealliance.org/downloads/proceedings/063_Managing a Large Agile_820.pdf	20070820
http://agile2007.agilealliance.org/downloads/proceedings/065_Scaling Agile Methodologies_478.pdf	20070478
http://agile2007.agilealliance.org/downloads/presentations/MaurerGrewalAgile2007Presentation_478.pdf	20070478
http://agile2007.agilealliance.org/downloads/presentations/The_Facts_of_Work_Power_and_Politics_417.pdf	20070417
http://agile2007.agilealliance.org/downloads/handouts/Schatz_417.pdf	20070417
TH1 Agilists are Bonobos2.ppt	20060254
BT1 - Smits - Overview of Agile handout.pdf	20060255
BT2 2006-07-Intro-to-APM-Agile-2006.pdf	20060256
BT2 Cohn_PlanningAndTracking.pdf	20060256
BT2 casemaster.pdf	20060256
TH2 Ambler Current State of Union.ppt	20060259
TH3 AgileInLargeTHJuttaEckstein.pdf	20060261
BT3 SutherlandIndividualsAndInteractionsAgile2006.ppt	20060262
TU1 Agile 2006 Exploratory Testing.ppt	20060263
TU2 Patton-UserStoryToUI-handouts.pdf	20060265
TU2 UseStoryToUserInterfaceTutorial.ppt	20060265
TU3 Rawsthorne_TheRoleOfTheCustomerTeam_Agile2006.pdf	20060267
TU4 brushingUpOnFunctionalTestEffectiveness.pdf	20060268
TU4 jennitta_andrea_tutorial4_presentation.ppt	20060268
RP2 Cabri Griffiths - Agile and Earned Value Reporting.pdf	20060271
RP3 haugen-PlanningPoker.pdf	20060272
RP1 Sulaiman-AgileEVM.pdf	20060273
TH4 Avery.Agile2006.pdf	20060276
BT4 DSDM - Go for Nine.ppt	20060277
BT4 FDD_BeginnersOverview.ppt	20060277
BT4 Introduction to Lean for Agile 2006.pdf	20060277
TU5 Agile 2006 - Rapid Testing.ppt	20060278
TU6 Agile 2006 Tutorial Worksheet handout.doc	20060279
TU6 Org_Ready_for_Scrum.ppt	20060279
TU7 lego_xp_game_submitted.ppt	20060280
BT5 Ambler Evolutionary Database Development.ppt	20060281
BT5 Derby Team Dynamics.ppt	20060281
TU8 innovation-games.pdf	20060282
DS6 tracer bullets agile2006.doc	20060283
RP6 feldman-RefactoringContracts.pdf	20060286
RP4 melnik-maurer-chiasson-executable-acceptance-tests.pdf	20060287
RP5 ho-AgilePerformanceSpecAndTesting.pdf	20060288
TH5 Highsmith_George_Keirevsky_Agile2006_LargeAgileTranistions_Handouts_R2.ppt	20060289
RP8 korkala-abrahamsson-agile2006.pdf	20060290
RP7 SharpEtAl-CardsAndWallFinalVersion.pdf	20060291
TH6 LittleA2006Handouts.ppt	20060293
TU10 Fearless Appendix.pdf	20060294
TU10 Interview.pdf	20060294
TU10 Leading Fearless Change.pdf	20060294
TU10 Play June 20 2006.ppt	20060294
TU11 flawless_iterations.ppt	20060295
TU12 handouts bobthinksaboutprojectmanagement.pdf	20060296
TU12 systemsthinkinghandout.pdf	20060296
DS8 Appropriate Agile Metrics - Airplane Simulation.pdf	20060297
DS8 Appropriate Agile Metrics - DS slides.pdf	20060297
DS8 Appropriate Agile Metrics - Heuristics and Template.pdf	20060297
TU13 TDD-Cpp-Agile2006-Tu13-color-2perPage.pdf	20060298
TU13 TDD-Cpp-Agile2006-Tu13.ppt	20060298
TU13 TDD-hands-on-23Jun2006.doc	20060298
TU14 Agile 2006 Storytelling with FIT.pdf	20060299
XR1 AgileMarathon_Submitted_6232006.ppt	20060303
XR1 Schatz-AgileMarathon.pdf	20060303
XR2 Baker-AgileCMMI.pdf	20060304
XR3 A Tale of Two Projects Slides.ppt	20060305
XR3 coffin-ATaleofTwoProjects.pdf	20060305
TH7 Homer Odyssey and Life as an Agile Consultant --TABAKA TH7.pdf	20060307
TU16 ExtremeTeams-Agile2006.ppt	20060308
XR4 PairingSessionsAgile2006.pdf	20060309
XR4 pairingAgile2006Presentation.pdf	20060309
XR5 nocks-MultipleProjectsWithOneXPTeam.pdf	20060310
XR6 yap-ValueBasedExtremeProgramming.pdf	20060311
TU17 Cohn_AgileEstimatingAndPlanning.pdf	20060314
TU18 V4o1DSDMTutorialAgile2006.ppt	20060317
TU19 xUnit Test Patterns and Smells - Handouts.pdf	20060318
TU20 Agile Rqts Workshops for CD.pdf	20060319
TU21 SatirResources.pdf	20060321
TU21 SatirTemperatureReading.pdf	20060321
TU21 TowardsCongruence.pdf	20060321
TU21 satirchangemodel.pdf	20060321
RP11 Adolph 2006 agile lessons_final.pdf	20060323
RP9 Talby-Reflection.pdf	20060324
RP10 agile2006_paper_final.pdf	20060325
TH9 Advanced Principles of class design.ppt	20060326
TU22 agile2006_feathers_coaching.ppt	20060327
AS1 north-deployment.pdf	20060328
AS2 Agile2006Presentation.pdf	20060329
TU23 From Concept to Cash for Agile2006 Handouts.pdf	20060333
TU40 WotW.pdf	20060334
DS28 HandoutsAgile2006-AgileFactorsHandout.pdf	20060335
TU41 dispersed-agile-development.ppt	20060336
XR23 hogan-eXtremelyDistributedProject.pdf	20060338
TU25 XP Geography Handouts, Agile 2006.ppt	20060341
TU26 Agile 2006 handout.pdf	20060342
TU26 Agile 2006.ppt	20060342
DS17 Handouts Agile2006 Session Proposal.pdf	20060344
XR7 mstriebeck-ShtAddingProcess.pdf	20060347
XR8 AgileCoachingInBritishTelecom_v1.2.ppt	20060348
XR8 hanly-AgileCoachingInBritishTelecom.pdf	20060348
XR9 Honious-Clark-SomethingToBelieveIn.pdf	20060349
HO4 CodersDojoHandout.pdf	20060350
TH11 Cohn_UserStories.pdf	20060351
TU28 MakingSenseOfAgile.pdf	20060353
DS20 Agile Conference Presentation.ppt	20060354
XR10 KellyPresentation.pdf	20060355
XR10 weyrauch-FrameworkForDefiningAgile.pdf	20060355
XR11 during-oss_sprints.pdf	20060356
XR12 Parnellklabo Introducing Lean_revised final.pdf	20060357
TH12 History of Lean for Agile 2006 Handouts.pdf	20060359
DS21 Autochthony Intro for Discovery Workshop.pdf	20060360
TU29 Scripting101_200507.pdf	20060361
TU30 TestDrivenJ2EE-XP2006.pdf	20060363
TU31 Martin-TutorialReadings handout.pdf	20060364
XR14 AgileTalk_Yale.pdf	20060368
XR14 YaleFrequency.pdf	20060368
TH13 AgileWaterfallCoop-Sliger.pdf	20060370
DS25 Discussing the need for Agile Certification Handouts.pdf	20060371
DS25 Discussing the need for Agile Certification Presentation.pdf	20060371
TH14 Agile meets Offshore - presentation - new.ppt	20060377
TU32 Agile Database Tutorial.ppt	20060378
TU33 LisaCrispinWhatYouNeed2006.ppt	20060379
TU34 handouts CollWorkplacesAgile2006.pdf	20060380
TU35 Enterprise Scrum.ppt	20060381
DS27 DrawingCarousel_handouts.pdf	20060382
TU36 TheAgileProductOwnerAndCustomerFieldGuide.pdf	20060383
TU37 RSG Agile2006.pdf	20060384
TU38 HIringforagileteam.pdf	20060385
XR19 Meszaros - Adding Usability Testing to Agile.pdf	20060386
XR19 Meszaros-AgileUsabilty.pdf	20060386
XR20 LockeHeimgartnerAgileWriters.pdf	20060387
XR20 locke-Writers.pdf	20060387
XR21 puleio-HowNotToDoAgileTesting.pdf	20060388
HO5 AS_AgileLeanIntroWithGameAndPlay_v2des.ppt	20060390
HO5 AgileSimulationSessionDetail_ForPublication_20060627_v2des.doc	20060390
TU39 Clean Code Args.doc	20060392
TU39 Clean Code.ppt	20060392
XR24 jain-OffshoreAgileMaintenance.pdf	20060393
ES1 grossman-bergin-TeachingAgile.pdf	20060394
ES2 Final-FormingSuccessfulXPTeams.pdf	20060395
ES3 girard-ImpactOfAgility.pdf	20060396
ES4 wainer-ShareCourseProjects.pdf	20060397
ES5 Agile_Camera Ready.doc	20060398
TU42 2006.07b crystal 180min.ppt	20060401
TU43 IntroToAutoAT.pdf	20060402
TU44 Handout Derby-Larsen_Retro.pdf	20060403
TU45 agile2006_feathers_welc.ppt	20060405
TU46 - Tabaka Smits.pdf	20060406
TU48 Holacracy - Agile 2006 - Brian Robertson.pdf	20060409
TU48 Holacracy Handouts for Agile 2006.doc	20060409
XR25 boot camp paper.zip	20060410
XR25 rasmusson-AgileInceptionDeckBootCamp.pdf	20060410
XR26 Poon-Bootstrapping (typos corrected).pdf	20060411
XR27 VanSchooenderwoert_EmbeddedNumbersSlides.pdf	20060412
XR27 VanSchooenderwoert_EmbeddedNumbersSlides.ppt	20060412
XR27 Vanschooenderwoert-EmbeddedNumbers.pdf	20060412
TU49 Pairing Game (Wilson - Provost - Lacey).ppt	20060415
TU50 sell_agile_bean_agile_06.pdf	20060416
XR28 Tudor OCLC-DSDM Presentation pdf(final).pdf	20060417
XR28 tudor&walter-using an agile approach (DSDM) in a large, traditional organization.pdf	20060417
XR29 UsingAn AgileApproachToFreeTheOrganizationFromR_DParalysis.pdf	20060418
XR29 UsingAnAgileApproachToFreeTheOrganizationFromR_DParalysis_presentation.pdf	20060418
XR30 Extreme Selling in the Early Stage Space.pdf	20060419
http://agile2007.agilealliance.org/downloads/proceedings/029_Agile ERP_434.pdf	20070434
http://agile2007.agilealliance.org/downloads/presentations/Meszaros_-_Agile_ERP_-_Slides_434.pdf	20070434
http://agile2007.agilealliance.org/downloads/presentations/session-slides_464.pdf	20070464
http://agile2007.agilealliance.org/downloads/proceedings/028_fry-LargeScaleTransition-final_703.pdf	20070703
http://agile2007.agilealliance.org/downloads/proceedings/027_Consciously Evolving an Agile Team_671.pdf	20070671
http://agile2007.agilealliance.org/downloads/presentations/Ruhnow-ConsciouslyEvolvingTeam-Agile2007_671.pdf	20070671
http://agile2007.agilealliance.org/downloads/presentations/patton_user_story_to_user_interface_430.zip	20070430
http://agile2007.agilealliance.org/downloads/presentations/I_Dont_Like_Mondays_Agile2007_Tabakav1_584.pdf	20070584
http://agile2007.agilealliance.org/downloads/presentations/Introduction_To_Automated_Acceptance_Tests_809.pdf	20070809
http://agile2007.agilealliance.org/downloads/presentations/Agile2007POCourse_891.pdf	20070891
http://agile2007.agilealliance.org/downloads/handouts/Dymond_891.pdf	20070891
http://agile2007.agilealliance.org/downloads/presentations/Submission_796_796.pdf	20070796
http://agile2007.agilealliance.org/downloads/handouts/Smits_495.pdf	20070495
http://agile2007.agilealliance.org/downloads/proceedings/033_Agile Architecture_538.pdf	20070538
http://agile2007.agilealliance.org/downloads/presentations/krunic-AgileArchitecture-2007_538.pdf	20070538
http://agile2007.agilealliance.org/downloads/proceedings/031_Evolving into Embedded Development_757.pdf	20070757
http://agile2007.agilealliance.org/downloads/handouts/Rothman_383.pdf	20070383
http://agile2007.agilealliance.org/downloads/handouts/Poppendieck_422.pdf	20070422
http://agile2007.agilealliance.org/downloads/presentations/Larsen_613_613.pdf	20070613
http://agile2007.agilealliance.org/downloads/handouts/Larsen_613.pdf	20070613
http://agile2007.agilealliance.org/downloads/proceedings/032_Traveling the Open Road_700.pdf	20070700
http://agile2007.agilealliance.org/downloads/presentations/AgileEntrepSlides_459.zip	20070459
http://agile2007.agilealliance.org/downloads/proceedings/035_Overcoming Fear With Trust_704.pdf	20070704
http://agile2007.agilealliance.org/downloads/presentations/buttonb_CustomerFear_704.pdf	20070704
http://agile2007.agilealliance.org/downloads/presentations/Slides642_PaulKing_Agile2007_AgileDeveloperPractices_642.pdf	20070642
http://agile2007.agilealliance.org/downloads/presentations/Enterprise_Agile_Transitional_Leadership_666.pdf	20070666
http://agile2007.agilealliance.org/downloads/proceedings/037_Wisniewski-AgileCloserToLightBulbMoment_806.pdf	20070806
http://agile2007.agilealliance.org/downloads/presentations/DeSteCroix_806_806.pdf	20070806
http://agile2007.agilealliance.org/downloads/presentations/AgileAdoption_489.pdf	20070489
http://agile2007.agilealliance.org/downloads/presentations/Braithwaite_577_577.pdf	20070577
http://agile2007.agilealliance.org/downloads/handouts/Braithwaite_577.pdf	20070577
http://agile2007.agilealliance.org/downloads/proceedings/036_Scrum at a Fortune 500_549.pdf	20070549
http://agile2007.agilealliance.org/downloads/presentations/Agile2007StimTeamSuccess_611.pdf	20070611
http://agile2007.agilealliance.org/downloads/handouts/Larsen_611.pdf	20070611
http://agile2007.agilealliance.org/downloads/presentations/Requirements_Hazards_769.zip	20070769
http://agile2007.agilealliance.org/downloads/handouts/Morsicato_769.pdf	20070769
http://agile2007.agilealliance.org/downloads/presentations/Benefits_Challenges_of_Agile_in_Distributed_Environment_964.pdf	20070964
http://agile2007.agilealliance.org/downloads/proceedings/041_Enabling Agile_535.pdf	20070535
http://agile2007.agilealliance.org/downloads/presentations/Seffernick-YellowBrickRoad_535.pdf	20070535
http://agile2007.agilealliance.org/downloads/proceedings/040_Agile Program Management_574.pdf	20070574
http://agile2007.agilealliance.org/downloads/proceedings/023_Becoming Agile_942.pdf	20070942
http://agile2007.agilealliance.org/downloads/presentations/Bus_Val_-_Doing_-_Aug_14_Part_Two_452.pdf	20070452
http://agile2007.agilealliance.org/downloads/presentations/Submission_for_Agile_2007_-_Customer_Communication_Boot_Camp_856.pdf	20070856
http://agile2007.agilealliance.org/downloads/presentations/Cohn_EffectiveUserStories_361.pdf	20070361
http://agile2007.agilealliance.org/downloads/handouts/Cohn_361.pdf	20070361
http://agile2007.agilealliance.org/downloads/proceedings/039_Establishing the Agile PMO_775.pdf	20070775
http://agile2007.agilealliance.org/downloads/proceedings/021_Experiences In Using Automated Tests_701.pdf	20070701
http://agile2007.agilealliance.org/downloads/handouts/Cockburn_818.pdf	20070818
http://agile2007.agilealliance.org/downloads/proceedings/022_Value of Agile_930.pdf	20070930
http://agile2007.agilealliance.org/downloads/presentations/agile2007_mark.striebeck_713.pdf	20070713
http://agile2007.agilealliance.org/downloads/presentations/Highsmith_Agile_PM_Beginners_Handouts_2up_374.pdf	20070374
http://agile2007.agilealliance.org/downloads/proceedings/043_Common Areas At The Heart_527.pdf	20070527
http://agile2007.agilealliance.org/downloads/proceedings/045_Death of the Cubicle_494.pdf	20070494
http://agile2007.agilealliance.org/downloads/presentations/OpenOfficePresentation_494.pdf	20070494
http://agile2007.agilealliance.org/downloads/presentations/Agile_Methods_Overview_Agile_2007_975.pdf	20070975
http://agile2007.agilealliance.org/downloads/proceedings/044_On Rabbits_630.pdf	20070630
http://agile2007.agilealliance.org/downloads/proceedings/076_large_build_teams-Revised_542.pdf	20070542
http://agile2007.agilealliance.org/downloads/proceedings/075_Performance Testing on an Agile Project_617.pdf	20070617
http://agile2007.agilealliance.org/downloads/proceedings/077_Push to Pull_883.pdf	20070883
http://agile2007.agilealliance.org/downloads/presentations/presentation_883.pdf	20070883
http://agile2007.agilealliance.org/downloads/proceedings/072_Technical Stories_640.pdf	20070640
http://agile2007.agilealliance.org/downloads/presentations/Ag07RetroTutPresMat_448.pdf	20070448
http://agile2007.agilealliance.org/downloads/handouts/Larsen_448.pdf	20070448
http://agile2007.agilealliance.org/downloads/handouts/Hill_462.pdf	20070462
http://agile2007.agilealliance.org/downloads/presentations/greeenpepper_ds_fr_450.pdf	20070450
http://agile2007.agilealliance.org/downloads/proceedings/071_How We Made Onsite Customer_827.pdf	20070827
http://agile2007.agilealliance.org/downloads/presentations/Onsite_Customer_Presentation_-_Sabre_Airline_Solutions_827.pdf	20070827
http://agile2007.agilealliance.org/downloads/presentations/Rawsthorne_IntroToScrum_v2d_600.pdf	20070600
http://agile2007.agilealliance.org/downloads/handouts/Rawsthorne_600.pdf	20070600
http://agile2007.agilealliance.org/downloads/proceedings/073_Octopus_634.pdf	20070634
http://agile2007.agilealliance.org/downloads/presentations/Agile2007DBRefactoring_716.pdf	20070716
http://agile2007.agilealliance.org/downloads/presentations/LeanAgileAgile2007_596.pdf	20070596
http://agile2007.agilealliance.org/downloads/presentations/2007-08-Transitioning-to-APM-Agile-2007_474.zip	20070474
http://agile2007.agilealliance.org/downloads/handouts/Augustine_474.pdf	20070474
http://agile2007.agilealliance.org/downloads/presentations/UAT_and_Beyond_final_451.pdf	20070451
http://agile2007.agilealliance.org/downloads/handouts/Cripsin_451.pdf	20070451
http://agile2007.agilealliance.org/downloads/presentations/XUnit_Test_Patterns_Tutorial_Slides_-_2Up_405.pdf	20070405
http://agile2007.agilealliance.org/downloads/handouts/Meszaros_405.pdf	20070405
http://agile2007.agilealliance.org/downloads/presentations/Enterprise_Agile_Rollout_--_Greening_of_Software_MARTENS_TABAKA_586.pdf	20070586
http://agile2007.agilealliance.org/downloads/presentations/AgileintheWaterfallEnterprisev3_616.pdf	20070616
http://agile2007.agilealliance.org/downloads/handouts/Sliger_616.pdf	20070616
http://agile2007.agilealliance.org/downloads/proceedings/069_Scaling Product Ownership_676.pdf	20070676
http://agile2007.agilealliance.org/downloads/presentations/LoweryM-ScalingProductOwnership_676.pdf	20070676
http://agile2007.agilealliance.org/downloads/presentations/UserStoriesAgile2007_978.pdf	20070978
http://agile2007.agilealliance.org/downloads/proceedings/068_Less Never More_817.pdf	20070817
http://agile2007.agilealliance.org/downloads/proceedings/067_Ript_479.pdf	20070479
http://agile2007.agilealliance.org/downloads/presentations/Agile_Development_For_Enterprise_Software_Dinkelacker_2007_623.pdf	20070623
http://agile2007.agilealliance.org/downloads/proceedings/081_Back to Basics_465.pdf	20070465
http://agile2007.agilealliance.org/downloads/presentations/Agile2007FAST-Berczuk-handouts_465.pdf	20070465
http://agile2007.agilealliance.org/downloads/proceedings/087_Forming to Performing_950.pdf	20070950
http://agile2007.agilealliance.org/downloads/presentations/Slides631_PaulKing_Agile2007_Groovy_2_631.pdf	20070631
http://agile2007.agilealliance.org/downloads/handouts/Rothman_370.pdf	20070370
http://agile2007.agilealliance.org/downloads/proceedings/079_Implementing Scrum_553.pdf	20070553
http://agile2007.agilealliance.org/downloads/presentations/Learning_Kaizen_from_Toyota_426.pdf	20070426
http://agile2007.agilealliance.org/downloads/handouts/Poppendieck_426.pdf	20070426
http://agile2007.agilealliance.org/downloads/presentations/Agile-07_Lost_in__Translation_723.pdf	20070723
http://agile2007.agilealliance.org/downloads/proceedings/080_Offshore XP for PDA development_447.pdf	20070447
http://agile2007.agilealliance.org/downloads/presentations/TDD-Cpp-Agile2007-HandsOnTddInCpp.ppt_801.pdf	20070801
http://agile2007.agilealliance.org/downloads/presentations/Agile_V2_Overview_Sabre_Travelocity_656.pdf	20070656
http://agile2007.agilealliance.org/downloads/handouts/Shoop_656.pdf	20070656
http://agile2007.agilealliance.org/downloads/presentations/Agile_2007_Deception_437.pdf	20070437
http://agile2007.agilealliance.org/downloads/presentations/Agile_is_more_than_Monkey_See_Monkey_Do_901.pdf	20070901
http://agile2007.agilealliance.org/downloads/presentations/springunit_597.pdf	20070597
http://agile2007.agilealliance.org/downloads/presentations/submittedMaterial_382.PDF	20070382
http://agile2007.agilealliance.org/downloads/proceedings/085_Growing a Build Management_678.pdf	20070678
http://agile2007.agilealliance.org/downloads/presentations/GrowingABuildSystem_678.pdf	20070678
http://agile2007.agilealliance.org/downloads/proceedings/083_Over the Waterfall_842.pdf	20070842
http://agile2007.agilealliance.org/downloads/presentations/Scaling_Testing_in_Scrum_v1-1_532.pdf	20070532
http://agile2007.agilealliance.org/downloads/handouts/Galen_532.pdf	20070532
http://agile2007.agilealliance.org/downloads/presentations/Cohn_TransitioningToAgile_366.pdf	20070366
http://agile2007.agilealliance.org/downloads/handouts/Cohn_366.pdf	20070366
http://agile2007.agilealliance.org/downloads/proceedings/084_Transforming a Six Month Release_540.pdf	20070540
http://agile2007.agilealliance.org/downloads/presentations/MyGreatestMisses-handout_414.pdf	20070414
http://agile2007.agilealliance.org/downloads/handouts/Rainsberger_414.pdf	20070414
http://submit2011.agilealliance.org/files/session_pdfs/someAssemblyRequired_betterSoftware_jan2008.pdf	8736
http://submit2011.agilealliance.org/files/session_pdfs/agile-in-a-nutshell-2MB.pdf	8739
http://submit2011.agilealliance.org/files/session_pdfs/PatKua-TighteningTheFeedbackLoop.pdf	8747
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011Prez.pdf	8751
http://submit2011.agilealliance.org/files/session_pdfs/Shu-Ha-Ri Applied to Agile Leadership.pdf	8760
http://submit2011.agilealliance.org/files/session_pdfs/Manager as SM.pdf	8764
http://submit2011.agilealliance.org/files/session_pdfs/Apply systems thinking in large-scale Scrum transformation.pdf	8765
http://submit2011.agilealliance.org/files/session_pdfs/HoorayWereAgileTesters_0.pdf	8797
http://submit2011.agilealliance.org/files/session_pdfs/Agile 2011  - Agile Café Theory and Design For PDF.pdf	8798
http://submit2011.agilealliance.org/files/session_pdfs/FINAL_PDF_Smaller.pdf	8800
http://submit2011.agilealliance.org/files/session_pdfs/The Speed to Cool - Agile Testing & Building Quality In.pdf	8801
http://submit2011.agilealliance.org/files/session_pdfs/Enterprise KSD.pdf	8808
http://submit2011.agilealliance.org/files/session_pdfs/WIP and Kaizen-Key Tools for Enabling Continuous Improvement.pdf	8810
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011_Presentation.pdf	8821
http://submit2011.agilealliance.org/files/session_pdfs/01-AgileNVC Presentation.pdf	8823
http://submit2011.agilealliance.org/files/session_pdfs/AgileDecisionsPublicReleaseLowRes.pdf	8831
http://submit2011.agilealliance.org/files/session_pdfs/TamingCustomerSupportSmall.pdf	8832
http://submit2011.agilealliance.org/files/session_pdfs/Flirting with your customers -final-Agile2011 pdf.pdf	8838
http://submit2011.agilealliance.org/files/session_pdfs/AgileManagementSmall.pdf	8840
http://submit2011.agilealliance.org/files/session_pdfs/TeamCreativity2011 - Public.pdf	8845
http://submit2011.agilealliance.org/files/session_pdfs/DesignThinking.pdf	8848
http://submit2011.agilealliance.org/files/session_pdfs/refactoring_steven_stanly.pdf	8849
http://submit2011.agilealliance.org/files/session_pdfs/cwnchandout_final.pdf.pdf	8854
http://submit2011.agilealliance.org/files/session_pdfs/Teach Your Cucumber Scenarios to Speak Business.pdf	8855
http://submit2011.agilealliance.org/files/session_pdfs/RemovingImpedimentsOutline.pdf	8857
http://submit2011.agilealliance.org/files/session_pdfs/PowerfulQuestionsOutline.pdf	8859
http://submit2011.agilealliance.org/files/session_pdfs/Creaky Platforms - Jonny LeRoy - Agile 2011.pdf	8860
http://submit2011.agilealliance.org/files/session_pdfs/Team Swarming.pdf	8867
http://submit2011.agilealliance.org/files/session_pdfs/MultiSensoryKanban- V 6.0.pdf	8873
http://submit2011.agilealliance.org/files/session_pdfs/Scaling_Agile_to_the_Enterprise_with_Lean_v1_13mbp_forUploadToSite.pdf	8876
http://submit2011.agilealliance.org/files/session_pdfs/Lean_as_a_Scrum_Troubleshooter_1_9_FINAL.pdf	8881
http://submit2011.agilealliance.org/files/session_pdfs/The-Emperor-Long-Version-97-Agile-2011.pdf	8887
http://submit2011.agilealliance.org/files/session_pdfs/EmbeddedTesting.pdf	8890
http://submit2011.agilealliance.org/files/session_pdfs/CodeChristmasTreeAgile2011.pdf	8900
http://submit2011.agilealliance.org/files/session_pdfs/TenTalesofPositiveChange.pdf	8901
http://submit2011.agilealliance.org/files/session_pdfs/Agile 2.0 - Rebooting A Raccoon In An Imperfect World.pdf	8912
http://submit2011.agilealliance.org/files/session_pdfs/Howard Deiner - Reverting to Form - How to Make Sure That Agile Sticks.pdf	8917
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011 When the Coaches Leave.pdf	8920
http://submit2011.agilealliance.org/files/session_pdfs/embedded tdd cycle.pdf	8923
http://submit2011.agilealliance.org/files/session_pdfs/Technical_Debt_Workshop_Gat.pdf	8924
http://submit2011.agilealliance.org/files/session_pdfs/The Agile Leadership Kata - Discovering the Practice of Leadership.pdf	8939
http://submit2011.agilealliance.org/files/session_pdfs/Product Stewardship.pdf	8954
http://submit2011.agilealliance.org/files/session_pdfs/Process Increments_1.pdf	8968
http://submit2011.agilealliance.org/files/session_pdfs/Agile 2011 Presentation by Dean Leffingwell.pdf	8969
http://submit2011.agilealliance.org/files/session_pdfs/Chasing the Constraint - Agile2011 - Adam Light.pdf	8973
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011-InsightsExperienceReport-AgileOffice-KenPower.pdf	8975
http://submit2011.agilealliance.org/files/session_pdfs/BudgetingBlackHole.r1_0.pdf	8976
http://submit2011.agilealliance.org/files/session_pdfs/The Risk Management Game v2.pdf	8985
http://submit2011.agilealliance.org/files/session_pdfs/SATT-Simon_Bennett-Agile 2011.pdf	8989
http://submit2011.agilealliance.org/files/session_pdfs/Putting the Fun Back In Your Retrospectives.pdf	8991
http://submit2011.agilealliance.org/files/session_pdfs/Design Thinking - Agile 2011.pdf	8994
http://submit2011.agilealliance.org/files/session_pdfs/Functional_Management.pdf	9001
http://submit2011.agilealliance.org/files/session_pdfs/Wed_1100_GA_IMPC_Fair.pdf	9008
http://submit2011.agilealliance.org/files/session_pdfs/Silo Busting.pdf	9011
http://submit2011.agilealliance.org/files/session_pdfs/agile hardware and co-design_Punkka.pdf	9033
http://submit2011.agilealliance.org/files/session_pdfs/poster-back_0.pdf	9038
http://submit2011.agilealliance.org/files/session_pdfs/Dipping Your Toes Into Kanban Agile2011.pdf	9042
http://submit2011.agilealliance.org/files/session_pdfs/cslim_and_fitnesse.pdf	9052
http://submit2011.agilealliance.org/files/session_pdfs/ChileAyuda_agile2011_v_slideboom.pdf	9066
http://submit2011.agilealliance.org/files/session_pdfs/Agile 2011 Insight Report - Community Engagement.pdf	9077
http://submit2011.agilealliance.org/files/session_pdfs/ericsink_agile_2011.pdf	9082
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011 It Depends on Context.pdf	9083
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011_-_Fear-Driven_Impediments_-_Proposal_Presentation_Handouts_0.pdf	9089
http://submit2011.agilealliance.org/files/session_pdfs/EIKALILFRC_Agile2011_20110809.pdf	9112
http://submit2011.agilealliance.org/files/session_pdfs/ReqtsExplorationWithTesterCollaboration-Agile2011_(Gottesdiener-Gregory).pdf	9128
http://submit2011.agilealliance.org/files/session_pdfs/avery.pdf	9140
http://submit2011.agilealliance.org/files/session_pdfs/UE Gone Agile.pdf	9143
http://submit2011.agilealliance.org/files/session_pdfs/Negotiating Agile Contracts 7-2011 PDF.pdf	9167
http://submit2011.agilealliance.org/files/session_pdfs/Kotter Agile 2011_2.pdf	9170
http://submit2011.agilealliance.org/files/session_pdfs/PAW_Process_Roles_Rules_Nationwide.pdf	9172
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011 - Lean Fundamentals - Understanding Flow Through Games.pdf	9178
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011 Olaf Lewitz and Marc Bless - LeanProcrastination_0.pdf	9185
http://submit2011.agilealliance.org/files/session_pdfs/Rubin_Agile_2011_Strategies_for_Porfolio_Management.pdf	9186
http://submit2011.agilealliance.org/files/session_pdfs/collaborative chartering.pdf	9192
http://submit2011.agilealliance.org/files/session_pdfs/Integrated Product Development_0.pdf	9207
http://submit2011.agilealliance.org/files/session_pdfs/Dreyfus-Agile2011-SLC For Upload 2.pdf	9210
http://submit2011.agilealliance.org/files/session_pdfs/applying agile to ic development.pdf	9215
http://submit2011.agilealliance.org/files/session_pdfs/Agile 2011 080911v1.pdf	9228
http://submit2011.agilealliance.org/files/session_pdfs/Krebs.DistanceCollabTools.Agile2011.pdf	9241
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011_HandlingProductManagementAcrossTheEnterprise.pdf	9269
http://submit2011.agilealliance.org/files/session_pdfs/Narrative Coaching Agile2011.pdf	9314
http://submit2011.agilealliance.org/files/session_pdfs/strengths presentation.pdf	9316
http://submit2011.agilealliance.org/files/session_pdfs/Integrating UX Into Agile How To Ensure Your Sprints Result In Usable Softwarel.pdf	9347
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011 - Evolving to Agile.pdf	9454
http://submit2011.agilealliance.org/files/session_pdfs/To view the presentation.pdf	9504
http://submit2011.agilealliance.org/files/session_pdfs/AGILE in Academics.pptx.pdf	9604
http://submit2011.agilealliance.org/files/session_pdfs/Agile Thinking for Business Analysis V1.0.pdf	9615
http://submit2011.agilealliance.org/files/session_pdfs/Scrum Simulation-Agile2011.pdf	9701
http://submit2011.agilealliance.org/files/session_pdfs/Sprint100&BeyondSlides.pdf	9764
http://submit2011.agilealliance.org/files/session_pdfs/Agile Game Incubator-agile2011.pdf	9906
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011_Agile Top Down_August9_0.pdf	9925
http://submit2011.agilealliance.org/files/session_pdfs/agile2011saltlakelast-110811184003-phpapp02.pdf	9964
http://submit2011.agilealliance.org/files/session_pdfs/making-metaphors-that-matter-proposal.pdf	10005
http://submit2011.agilealliance.org/files/session_pdfs/Agile Scaling Model.pdf	10030
http://submit2011.agilealliance.org/files/session_pdfs/AgileBigRocksDisplay.pdf	10202
http://submit2011.agilealliance.org/files/session_pdfs/ETinAgile-agile2011-final.pdf	10596
http://submit2011.agilealliance.org/files/session_pdfs/Leadership Agility in a VUCA World - 8-11.pdf	10636
http://submit2011.agilealliance.org/files/session_pdfs/Embedded_Storycrafting_2perPage.pdf	10686
http://submit2011.agilealliance.org/files/session_pdfs/agile2011_0.pdf	10782
http://submit2011.agilealliance.org/files/session_pdfs/KaizenLegoGame.pdf	10877
http://submit2011.agilealliance.org/files/session_pdfs/Agile 2011 Handouts.pdf	10918
http://submit2011.agilealliance.org/files/session_pdfs/Agile & Kanban In Coordination.pdf	10932
http://submit2011.agilealliance.org/files/session_pdfs/Writing Maintainable Automated Acceptance Tests.pdf	10957
http://submit2011.agilealliance.org/files/session_pdfs/Bubblesphere Agile 2011 HANDOUTS.pdf	11031
http://submit2011.agilealliance.org/files/session_pdfs/Teaching Kids Programming - Agile 2011.pdf	11037
http://submit2011.agilealliance.org/files/session_pdfs/Complexity at VTG Overview.pdf	11055
http://submit2011.agilealliance.org/files/session_pdfs/Resistance as a Resource (presentation).pdf	11062
http://submit2011.agilealliance.org/files/session_pdfs/agile 2011 proposal.pdf	11074
http://submit2011.agilealliance.org/files/session_pdfs/WhentheVPisaScrumMasterPresentation110805b.pdf	11103
http://submit2011.agilealliance.org/files/session_pdfs/the-empirical-process_0.pdf	11108
http://submit2011.agilealliance.org/files/session_pdfs/Presentation 20110802.pdf	11110
http://submit2011.agilealliance.org/files/session_pdfs/Presentation - Agile Conference R7 -Print.pdf	11137
http://submit2011.agilealliance.org/files/session_pdfs/Presentation - How a Traditional Project Manager Transforms to Scrum - FINAL.pdf	11141
http://submit2011.agilealliance.org/files/session_pdfs/Twenty Ways to Split.pdf	11142
http://submit2011.agilealliance.org/files/session_pdfs/Agile and Kanban Work Together to Deliver Maintenance (Final, Leslie Ekas).pdf	11166
http://submit2011.agilealliance.org/files/session_pdfs/leading-continuous-improvement.pdf	11176
http://submit2011.agilealliance.org/files/session_pdfs/Geek Leadership In Deep Legacy.pdf	11212
http://submit2011.agilealliance.org/files/session_pdfs/Agile Adoption in a non-Western cultural context.pdf	11219
http://submit2011.agilealliance.org/files/session_pdfs/PDF-0-To-Agile-In-3-5Years.pdf	11254
http://submit2011.agilealliance.org/files/session_pdfs/Agile_Experience_Report.pdf	11270
http://submit2011.agilealliance.org/files/session_pdfs/Appraising Performance Appraisals.pdf	11272
http://submit2011.agilealliance.org/files/session_pdfs/BuildingGreatTeams.pdf	11304
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011- Growing Embedded Applications Organically with Ceedling and Friends.pdf	11321
http://submit2011.agilealliance.org/files/session_pdfs/agile2011_bge_small.pdf	11327
http://submit2011.agilealliance.org/files/session_pdfs/PO role_can you hear me now_0.pdf	11343
http://submit2011.agilealliance.org/files/session_pdfs/Agile 2011_Managers vs. Agile Teams-Who Makes the Decisions.pdf	11344
http://submit2011.agilealliance.org/files/session_pdfs/Get to CMMI ML3 Using Agile Development Processes_1.pdf	11350
http://submit2011.agilealliance.org/files/session_pdfs/agile2011.pdf	11352
http://submit2011.agilealliance.org/files/session_pdfs/Agile MDD.pdf	11369
http://submit2011.agilealliance.org/files/session_pdfs/theOnlyAgileTools.pdf	11379
http://submit2011.agilealliance.org/files/session_pdfs/Agile Office Spaces Workshop.pdf	11382
http://submit2011.agilealliance.org/files/session_pdfs/Beyond_Metrics.pdf	11431
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011- Team to wow team_Final.pdf	11440
http://submit2011.agilealliance.org/files/session_pdfs/Enterprise Coaching Lessons Learned.pdf	11455
http://submit2011.agilealliance.org/files/session_pdfs/Agile 2011 - final.pdf	11473
http://submit2011.agilealliance.org/files/session_pdfs/presentation.pdf	11482
http://submit2011.agilealliance.org/files/session_pdfs/FasterUTesting-Agile2011-FINAL.pdf	11493
http://submit2011.agilealliance.org/files/session_pdfs/BADLL.pdf	11502
http://submit2011.agilealliance.org/files/session_pdfs/Agile, Lean, and the 21st Century Corporation - Agile2011.pdf	11517
http://submit2011.agilealliance.org/files/session_pdfs/Agile in Non-IT Projects.pdf	11537
http://submit2011.agilealliance.org/files/session_pdfs/2011-08-10-AgileConfLightningTalk-VisualizingTeamflow.pdf	12633
http://submit2011.agilealliance.org/files/session_pdfs/COBOL Agile.pdf	12637
http://submit2011.agilealliance.org/files/session_pdfs/Climbing the Mountain to Enterprise Agile at Intuit.pdf	12642
http://submit2011.agilealliance.org/files/session_pdfs/minute_new_ideas_and_emerging_results_workshop_agile2011.pdf	12643
http://submit2011.agilealliance.org/files/session_pdfs/minute_research_method_workshop_agile2011.pdf	12644
http://submit2011.agilealliance.org/files/session_pdfs/Brown Agile 2011 Presentation 4 Practitioners_0.pdf	12648
http://submit2011.agilealliance.org/files/session_pdfs/User-Centered Design and Agile Methods - A Systematic Review.pdf	12649
http://submit2011.agilealliance.org/files/session_pdfs/SomethingAboutLean.pdf	12650
http://submit2011.agilealliance.org/files/session_pdfs/agile_lean_combination_agile2011-08-11.pdf	12655
http://submit2011.agilealliance.org/files/session_pdfs/Agile 2011 Abstract-Drury_Conboy_Power-Obstacles to ASD DM.pdf	12656
http://submit2011.agilealliance.org/files/session_pdfs/Agile2011_GA low q 2.pdf	12659
http://submit2011.agilealliance.org/files/session_pdfs/AgileTeamPerceptionsOfProductivityFactors_Meloetal_2011.pdf	12662
http://submit2011.agilealliance.org/files/session_pdfs/Why SCRUM works.pdf	12665
http://submit2011.agilealliance.org/files/session_pdfs/Code.pdf	12693
http://submit2011.agilealliance.org/files/session_pdfs/Mindset.pdf	12694
http://submit2011.agilealliance.org/files/session_pdfs/agile2011_making_the_most_of_manual_testing.pdf	12706
http://submit2011.agilealliance.org/files/session_pdfs/Leading the Agile Release Train (Agile2011).pdf	12709
http://submit2011.agilealliance.org/files/session_pdfs/3 Ingredients for Product Owner Agile 2011.pdf	12711
http://submit2011.agilealliance.org/files/session_pdfs/short sprint vs valuable stories.pdf	12712
http://submit2011.agilealliance.org/files/session_pdfs/3-ways-anders-ramsay-2.pdf	12716
http://www.agilealliance.org/files/2313/2435/0810/Theres%20Something%20About%20Lean.pdf	12650
http://www.agilealliance.org/files/5413/2435/0812/Why%20Scrum%20Works.pdf	12665
http://www.agilealliance.org/files/7313/2435/0836/Survey%20of%20Agile%20Tool%20Usage%20and%20Needs.pdf	12659
http://www.agilealliance.org/files/4613/2435/0819/Decision%20Making%20in%20Agile%20Development%20A%20Focus%20Group%20Study%20of%20Decisions%20and%20Obstacles.pdf	12656
http://www.agilealliance.org/files/1613/2435/0803/Reconciling%20Perspectives%20How%20People%20Manage%20the%20Process%20of%20Software%20Development.pdf	12647
http://www.agilealliance.org/files/1113/2435/0795/Agile%20Team%20Perceptions%20of%20Productivity%20Factors.pdf	12662
http://www.agilealliance.org/files/3913/2435/0821/Enacted%20Routines%20in%20Agile%20and%20Waterfall%20Processes.pdf	12657
http://www.agilealliance.org/files/2613/2435/0843/User-Centered%20Design%20and%20Agile%20Methods%20A%20Systematic%20Review.pdf	12649
http://www.agilealliance.org/files/6313/2435/0796/Collaborative%20Events%20and%20Shared%20Artefacts.pdf	12648
http://www.agilealliance.org/files/9213/2435/0809/The%20Home%20Ground%20of%20Automated%20Acceptance%20Testing%20Mature%20Use%20of%20FitNesse.pdf	12646
http://www.agilealliance.org/files/1113/2435/0830/Rule-Based%20Exploratory%20Testing%20of%20Graphical%20User%20Interfaces.pdf	12661
http://www.agilealliance.org/files/5213/2435/0842/Understanding%20Post-Adoptive%20Agile%20UsageAn%20Exploratory%20Cross-Case%20Analysis.pdf	12653
http://www.agilealliance.org/files/8513/2435/0829/Manager%20as%20Scrum%20Master.pdf	8764
http://www.agilealliance.org/files/4613/2435/0839/Taming%20the%20Customer%20Support%20Queue%20A%20Kanban%20Experience%20Report.pdf	8832
http://www.agilealliance.org/files/6013/2435/0820/Do%20You%20Dare%20to%20Ask%20Your%20HR%20Manager%20to%20Practice%20KANBAN.pdf	8877
http://www.agilealliance.org/files/6113/2435/0827/Lean%20as%20a%20Scrum%20Troubleshooter.pdf	8881
http://www.agilealliance.org/files/7013/2435/0806/Selling%20the%20Investment%20to%20Pay%20Down%20Technical%20Debt%20The%20Code%20Christmas%20Tree.pdf	8900
http://www.agilealliance.org/files/3713/2435/0807/Ten%20Tales%20of%20Positive%20Change.pdf	8901
http://www.agilealliance.org/files/8313/2435/0794/Process%20Increments%20An%20Agile%20Approach%20to%20Software.pdf	8968
http://www.agilealliance.org/files/6413/2435/0841/The%20Agile%20Office%20Experience%20Report%20from%20Ciscos%20Unified%20Communications.pdf	8975
http://www.agilealliance.org/files/3113/2435/0798/Democracy%20Unleashed%20Bringing%20Agility%20to%20Citizen%20Engagement.pdf	9077
http://www.agilealliance.org/files/9713/2435/0835/Stories%20from%20My%20Experiences%20Learning%20Scrum.pdf	9082
http://www.agilealliance.org/files/4013/2435/0801/Innovation%20Jams%20Lessons%20in%20Agile%20Product%20Development.pdf	9271
http://www.agilealliance.org/files/3713/2435/0813/To%20Deliver%20Faster%20Build%20it%20in%20Reverse.pdf	9238
http://www.agilealliance.org/files/1813/2435/0823/Evolving%20to%20Agile%20A%20Story%20of%20Agile%20Adoption%20at%20a%20Small%20SaaS%20Company.pdf	9454
http://www.agilealliance.org/files/4713/2435/0811/Vertical%20Slicing%20Smaller%20is%20Better.pdf	9504
http://www.agilealliance.org/files/2713/2435/0818/Agile%20in%20Academics%20Applying%20Agile%20to%20Instructional%20Design.pdf	9604
http://www.agilealliance.org/files/1813/2435/0813/Yahoo%20Sports%20Sprint%20100%20and%20Beyond.pdf	9764
http://www.agilealliance.org/files/4313/2435/0828/Making%20Metaphors%20that%20Matter.pdf	10005
http://www.agilealliance.org/files/8313/2435/0816/Agile%20and%20Kanban%20in%20Coordination.pdf	10932
http://www.agilealliance.org/files/3313/2435/0815/You%20Want%20to%20do%20What%20Breaking%20the%20Rules%20to%20Increase%20Customer%20Satisfaction.pdf	11028
http://www.agilealliance.org/files/6313/2435/0817/Agile%20Experience%20Report%20Transition%20and%20Complexity%20at%20Cisco%20Voice%20Technology%20Group.pdf	11055
http://www.agilealliance.org/files/4213/2435/0845/When%20the%20VP%20is%20a%20Scrum%20Master%20You%20Hit%20the%20Ground%20Running.pdf	11103
http://www.agilealliance.org/files/5513/2435/0831/Scrum%20in%20Sales%20How%20to%20Improve%20Account%20Management%20and%20Sales%20Processes.pdf	11110
http://www.agilealliance.org/files/4713/2435/0826/Increasing%20Learning%20in%20an%20Agile%20Environment%20Lessons%20Learned%20in%20an%20Agile%20Team.pdf	11352
http://www.agilealliance.org/files/6513/2435/0800/From%20Team%20to%20Wow%20Team%20An%20Agile%20Teams%20Journey.pdf	11440
http://www.agilealliance.org/files/7513/2435/0818/Anatomy%20and%20Physiology%20of%20an%20Agile%20Transition.pdf	11270
\.


--
-- Data for Name: session_speakers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY session_speakers (speaker_id, session_id) FROM stdin;
1	20020001
2	20020002
3	20020003
4	20020004
5	20020005
6	20020006
7	20020007
1	20020008
8	20020009
9	20020010
10	20020011
11	20020011
12	20020012
13	20020013
11	20020014
14	20020015
16	20020017
17	20020018
18	20020019
19	20020020
20	20020021
21	20020021
22	20020022
23	20020023
24	20020024
25	20020025
26	20020025
10	20020026
28	20020027
29	20020028
30	20020029
31	20020029
32	20020030
33	20020030
34	20020031
35	20020032
36	20020032
37	20020033
38	20020034
39	20020035
40	20020036
41	20020037
42	20020037
43	20020038
44	20020038
45	20020039
46	20020040
47	20020040
28	20020040
48	20020041
49	20020042
14	20020042
50	20020043
30	20020043
51	20020044
52	20020044
30	20020044
53	20020045
54	20020045
55	20020046
56	20020047
56	20020048
4	20020016
30	20070860
480	20070860
481	20070860
287	20070558
482	20070552
483	20070552
363	20070618
449	20070794
484	20070794
231	20070794
485	20070794
413	20070794
486	20070404
487	20070404
488	20070435
332	20070865
75	20070730
283	20070730
37	20070403
140	20070929
489	20070929
205	20070929
292	20070920
401	20070920
108	20070364
490	20070719
491	20070719
492	20070786
51	20070990
493	20070559
446	20070559
494	20070783
495	20070783
496	20070641
497	20070641
498	20070789
499	20070789
361	20070736
113	20071029
500	20070567
501	20070722
502	20070722
503	20070722
504	20070959
505	20070959
90	20070645
506	20070645
507	20070645
508	20070645
91	20070645
112	20070893
509	20070944
43	20070977
285	20070444
353	20070749
510	20070991
46	20070543
425	20070543
511	20070932
512	20070932
513	20070932
122	20070627
57	20030049
11	20030051
59	20030052
60	20030053
44	20030054
43	20030054
61	20030055
63	20030055
64	20030056
65	20030057
66	20030057
13	20030058
10	20030059
68	20030060
69	20030061
70	20030061
1	20030062
28	20030063
35	20030064
72	20030071
73	20030072
74	20030073
75	20030074
76	20030075
77	20030076
78	20030077
79	20030078
81	20030080
82	20030081
83	20030082
84	20030083
85	20030084
86	20030085
65	20030086
87	20030086
88	20030087
89	20030087
90	20030088
91	20030088
92	20030089
93	20030090
94	20030090
95	20030091
96	20030091
97	20030092
35	20030093
98	20030094
99	20030094
100	20030095
95	20030096
96	20030096
101	20030097
102	20030097
103	20030098
104	20030099
105	20030099
106	20030100
30	20030100
94	20030101
514	20070627
68	20071030
434	20070947
140	20070947
269	20071064
515	20070770
94	20070468
122	20070585
516	20070585
123	20070585
517	20070706
518	20070706
243	20070698
237	20070698
206	20070565
252	20070565
351	20070493
39	20070493
519	20070493
520	20071022
418	20070832
521	20070832
522	20070481
523	20070481
524	20070833
525	20070833
526	20070670
363	20070670
285	20071040
44	20071069
339	20070605
100	20070718
285	20070425
528	20070425
90	20070992
113	20070830
84	20040102
10	20040103
107	20040104
44	20040105
108	20040106
109	20040107
112	20040110
113	20040111
60	20040112
100	20040113
115	20040115
1	20040116
75	20040117
57	20040118
116	20040119
30	20040120
117	20040120
118	20040120
119	20040121
30	20040121
120	20040121
121	20040122
122	20040122
123	20040122
124	20040123
51	20040124
54	20040124
125	20040125
126	20040125
45	20040126
127	20040127
128	20040128
129	20040128
130	20040128
131	20040128
133	20040129
134	20040129
45	20040129
136	20040130
137	20040131
139	20040131
140	20040132
141	20040133
142	20040133
143	20040134
144	20040135
145	20040136
146	20040136
147	20040137
148	20040137
149	20040138
68	20040139
98	20040140
26	20040140
151	20040141
152	20040141
154	20040142
22	20040142
156	20040143
157	20040143
96	20040143
95	20040143
158	20040143
160	20040145
162	20040146
164	20040147
165	20040148
35	20040148
168	20040149
170	20040150
173	20040151
174	20040151
123	20040151
122	20040151
175	20040152
177	20040152
178	20040153
10	20040154
181	20040154
530	20070948
531	20070825
532	20070829
533	20070829
70	20071031
534	20070347
535	20070347
536	20070347
537	20070896
538	20070738
504	20070960
539	20070554
540	20070483
65	20070423
122	20070993
541	20070931
542	20070708
543	20070708
544	20070727
545	20070727
314	20060334
94	20060335
283	20060335
178	20060336
337	20060337
338	20060338
339	20060339
196	20060340
258	20060341
340	20060341
341	20060342
342	20060342
343	20060343
84	20060343
344	20060344
94	20060344
345	20060345
269	20060346
289	20060346
240	20060347
346	20060348
347	20060348
348	20060349
349	20060349
315	20060350
108	20060351
154	20060352
22	20060352
350	20060353
351	20060354
352	20060354
353	20060355
354	20060356
355	20060357
65	20060359
246	20060360
356	20060360
357	20060361
345	20060361
46	20060362
28	20060362
121	20060364
57	20050155
75	20050156
84	20050157
46	20050159
28	20050159
45	20050160
147	20050161
186	20050161
148	20050161
187	20050162
188	20050162
115	20050163
65	20050164
189	20050165
35	20050165
46	20050166
28	20050166
37	20050167
113	20050168
108	20050169
191	20050170
100	20050171
43	20050173
70	20050174
69	20050174
196	20050175
198	20050175
199	20050176
200	20050176
201	20050177
202	20050177
203	20050178
84	20050178
204	20050179
44	20050180
205	20050180
165	20050181
206	20050182
207	20050183
115	20050183
41	20050184
211	20050187
212	20050188
213	20050188
214	20050189
215	20050190
216	20050191
217	20050192
218	20050193
219	20050193
220	20050194
139	20050195
221	20050195
222	20050195
202	20050196
223	20050197
225	20050198
226	20050199
227	20050200
228	20050201
229	20050202
230	20050203
231	20050204
232	20050205
45	20050206
233	20050207
234	20050207
235	20050208
236	20050208
237	20050208
152	20050208
238	20050209
239	20050209
240	20050210
241	20050211
145	20050212
242	20050212
65	20050213
243	20050214
245	20050216
82	20050216
246	20050217
247	20050217
162	20050218
44	20050219
177	20050220
175	20050220
94	20050221
237	20050221
249	20050222
205	20050222
108	20050223
250	20050223
251	20050223
22	20050224
154	20050224
206	20050225
252	20050225
253	20050226
254	20050226
250	20050227
189	20050228
35	20050228
255	20050229
49	20050230
256	20050230
39	20050231
257	20050232
14	20050232
258	20050233
243	20050233
259	20050233
48	20050233
260	20050234
54	20050234
30	20050235
263	20050236
265	20050237
266	20050237
267	20050238
267	20050239
51	20050239
268	20050240
54	20050240
269	20050241
270	20050242
271	20050242
272	20050243
187	20050245
277	20050245
43	20050249
282	20050250
282	20050251
207	20050252
206	20050253
252	20050253
198	20071066
239	20070434
373	20070434
398	20070464
399	20070464
400	20070766
401	20070766
402	20070703
403	20070703
310	20070764
404	20070764
405	20070671
406	20070888
84	20070430
220	20070855
407	20070855
408	20070855
187	20070584
115	20070572
342	20070809
385	20070809
312	20070891
409	20070891
314	20070571
410	20070796
411	20070796
94	20071024
272	20070495
412	20070538
413	20070907
231	20070907
11	20070735
249	20070509
414	20070757
415	20070757
372	20070383
65	20070422
44	20070613
416	20070700
417	20070700
418	20070835
419	20070835
243	20071025
206	20071065
420	20070988
421	20070459
422	20070459
423	20070704
339	20070642
424	20070642
207	20070981
425	20070981
426	20070666
403	20070666
427	20070666
428	20070666
196	20070381
198	20070381
430	20070806
431	20070806
432	20070489
433	20070489
206	20070973
99	20070973
434	20070933
435	20070933
436	20070933
437	20070557
252	20070557
438	20070557
288	20070577
439	20070549
440	20070549
441	20070549
442	20070549
44	20070611
443	20070433
444	20070433
148	20070769
445	20070769
446	20070732
250	20070732
447	20071059
448	20070909
449	20070909
450	20070909
237	20071026
451	20070964
452	20070535
420	20071058
177	20070454
175	20070454
283	20070974
406	20070862
115	20070574
453	20070574
454	20070942
455	20070452
456	20070856
396	20070856
108	20070361
8	20071067
458	20070775
459	20070775
460	20070701
23	20070790
29	20070928
121	20070531
122	20070531
123	20070531
49	20070758
461	20070758
122	20060364
283	20060365
170	20060366
358	20060367
359	20060367
360	20060368
361	20060369
362	20060369
363	20060370
231	20060371
364	20060371
365	20060372
366	20060373
367	20060374
368	20060374
369	20060375
370	20060375
162	20060377
11	20060378
41	20060378
35	20060379
205	20060380
44	20060380
10	20060381
309	20060382
310	20060382
45	20060383
202	20060384
371	20060384
372	20060385
239	20060386
373	20060386
374	20060387
375	20060387
376	20060388
43	20060389
377	20060390
287	20060390
378	20060391
342	20060393
219	20060394
379	20060394
380	20060395
381	20060395
382	20060396
383	20060396
384	20060397
30	20060398
119	20060398
13	20060400
1	20060401
385	20060402
181	20060403
44	20060403
386	20060404
332	20060405
187	20060406
272	20060406
73	20060407
206	20060408
387	20060408
388	20060409
389	20060410
390	20060411
147	20060412
379	20060413
219	20060413
391	20060414
366	20060415
392	20060415
393	20060416
324	20060417
394	20060417
395	20060418
396	20060419
397	20060419
8	20060420
70	20060254
272	20060255
108	20060256
283	20060256
84	20060257
203	20060257
284	20060258
11	20060259
37	20060261
285	20060262
13	20060262
286	20060263
220	20060264
82	20060264
84	20060265
203	20060265
133	20060266
287	20060267
85	20060268
177	20060269
22	20060269
288	20060270
289	20060271
269	20060271
291	20060273
292	20060273
293	20060274
14	20060274
249	20060276
258	20060277
286	20060278
295	20060279
296	20060280
11	20060281
43	20060281
115	20060282
297	20060283
298	20060283
113	20060284
299	20060285
300	20060285
301	20060286
302	20060286
51	20060287
54	20060287
303	20060288
304	20060288
57	20060289
305	20060289
306	20060290
307	20060290
90	20060291
91	20060291
140	20060293
70	20060294
69	20060294
308	20060295
309	20060296
310	20060296
311	20060297
312	20060297
39	20060298
243	20060299
313	20060299
162	20060300
314	20060301
315	20060301
46	20060302
28	20060302
295	20060303
316	20060303
317	20060304
318	20060305
319	20060306
37	20060306
187	20060307
255	20060308
320	20060308
321	20060309
322	20060309
323	20060310
231	20060311
10	20060313
108	20060314
293	20060315
14	20060315
324	20060317
239	20060318
325	20060318
100	20060319
252	20060320
206	20060320
310	20060321
309	20060321
326	20060322
328	20060323
329	20060324
196	20060324
267	20060325
330	20060325
332	20060327
333	20060328
334	20060328
335	20060329
311	20060330
312	20060330
336	20060332
65	20060333
315	20060334
462	20070758
1	20070818
463	20070890
464	20070890
465	20070930
466	20070930
272	20070502
467	20070502
447	20071060
342	20071027
468	20070724
469	20070724
66	20070724
45	20070968
471	20070968
472	20071070
148	20070772
445	20070772
240	20070713
57	20070374
473	20070527
474	20070494
454	20071068
54	20070975
475	20070630
476	20070630
477	20070630
478	20070921
479	20070921
94	20071028
14	20071072
546	20070563
547	20070563
121	20071032
549	20070967
57	20070375
550	20070602
551	20070692
385	20070692
552	20070692
35	20070976
165	20070976
553	20070841
554	20070841
555	20070592
556	20070592
520	20070774
557	20070774
558	20070610
559	20070956
350	20070925
84	20070822
70	20070407
69	20070407
526	20071056
220	20070752
82	20070752
560	20070820
272	20070496
291	20070496
561	20070478
54	20070478
37	20070413
113	20070823
94	20070823
295	20070417
447	20071061
406	20071033
562	20070970
563	20070970
564	20070969
565	20070969
566	20070899
1	20070899
567	20070542
568	20070542
569	20070542
149	20070418
570	20070965
571	20070965
572	20070617
573	20070883
10	20070412
157	20070480
447	20071062
406	20071036
574	20070963
575	20070963
576	20070971
577	20070640
578	20070640
249	20070777
579	20070777
54	20070512
122	20070512
84	20070512
90	20070512
44	20070448
181	20070448
332	20070816
314	20070816
237	20070462
94	20070462
580	20070450
581	20070450
531	20070827
582	20070827
583	20070827
584	20070827
287	20070600
45	20070903
585	20070634
586	20070634
11	20070716
41	20070716
587	20070677
377	20070596
567	20070406
588	20070406
296	20070406
589	20070406
98	20070474
35	20070451
165	20070451
447	20071063
338	20071035
239	20070405
325	20070405
590	20071055
591	20071071
187	20070586
207	20070586
363	20070616
283	20070633
592	20070676
377	20070978
541	20070978
520	20070817
593	20070817
595	20070479
121	20071034
596	20070623
68	20070465
597	20070683
598	20070683
115	20070570
599	20070570
112	20070889
342	20070861
600	20070861
601	20070950
602	20070950
339	20070631
372	20070370
272	20070553
603	20070553
65	20070426
126	20070426
604	20070723
605	20070723
606	20070447
492	20070748
607	20070748
608	20070518
448	20070911
449	20070911
450	20070911
39	20070801
556	20070656
555	20070656
121	20070547
108	20070547
94	20070547
332	20070547
28	20070547
122	20070686
610	20070686
70	20070437
611	20070870
14	20071037
338	20071039
423	20070901
612	20070901
206	20070979
613	20070597
85	20070382
614	20070678
615	20070678
70	20071057
44	20071057
365	20070399
616	20070842
617	20070842
618	20070532
108	20070366
619	20070540
68	20071038
620	20070989
621	20070989
622	20071050
623	20071048
624	20071048
475	20071046
204	20071046
625	20071044
626	20071044
627	20071044
628	20070808
629	20070808
630	20070808
631	20071051
196	20071023
632	20071023
633	20071023
634	20071052
635	20071052
636	20071052
637	20071052
638	20071052
639	20071052
640	20070402
198	20071043
641	20071043
302	20071043
642	20070526
196	20070972
643	20071045
198	20071042
644	20071042
645	20071042
646	20071053
647	20071053
648	20071053
649	20070878
133	20070804
650	20071054
651	20070983
475	20071047
652	20071047
535	20071047
328	20071041
510	20071041
653	20071041
223	20070982
213	20070982
73	20084080
654	20084080
655	20080628
656	20080628
657	20082404
658	20084261
659	20084261
661	20080257
662	20083373
663	20083782
664	20081628
665	20082300
666	20080433
272	20084257
667	20084563
502	20084563
668	20084720
312	20084812
669	20084812
94	20084141
670	20084141
671	20080336
555	20081852
672	20081852
73	20083672
673	20083672
488	20081742
674	20082512
675	20082512
332	20086799
11	20080915
676	20081778
35	20081778
677	20082835
678	20084037
679	20082936
680	20082936
681	20082739
682	20082739
683	20080923
684	20080923
121	20086810
332	20086810
202	20080928
337	20084377
685	20084151
686	20084490
339	20084490
687	20084617
688	20083485
623	20084682
689	20084682
690	20081179
691	20081179
126	20082769
692	20083269
693	20081644
694	20081644
695	20085093
696	20080298
697	20081647
373	20082656
239	20082656
366	20082650
65	20080374
372	20081291
121	20083075
122	20083075
514	20083571
678	20084039
489	20081794
699	20080415
45	20085099
700	20083364
701	20083334
702	20083334
287	20081430
140	20083939
205	20083939
363	20082949
526	20082949
162	20084434
314	20083841
703	20083841
618	20081132
187	20081053
704	20081053
372	20081289
705	20081879
706	20081879
205	20082978
44	20082772
181	20082772
372	20081293
674	20082321
707	20081355
708	20081355
473	20080604
673	20080249
205	20081354
372	20081354
709	20081791
710	20080890
314	20086922
711	20084016
712	20080788
703	20080788
181	20082980
713	20082875
714	20082816
715	20080550
716	20080550
717	20083471
718	20083478
293	20085042
342	20085042
250	20082781
719	20082781
286	20083676
52	20083676
237	20081753
243	20081753
720	20080936
151	20080936
722	20084942
288	20080240
723	20084338
724	20081167
725	20084718
726	20084718
727	20080934
728	20080934
729	20081224
730	20081224
451	20082884
731	20082884
37	20084483
732	20083765
733	20083765
734	20083875
735	20084455
736	20082233
285	20081442
737	20081442
738	20083794
739	20083794
740	20084954
741	20084954
742	20080388
743	20080388
326	20084681
37	20084456
744	20084690
365	20081597
231	20084322
714	20083888
288	20080252
41	20083216
745	20081669
746	20081669
674	20082337
747	20082780
363	20082780
43	20083958
707	20081632
708	20081632
748	20080449
46	20082039
28	20082039
243	20080648
39	20082799
749	20080243
344	20080285
332	20080285
750	20082205
751	20084854
464	20084854
676	20082989
29	20084593
342	20080443
177	20082381
399	20082381
752	20080734
385	20084674
753	20084596
345	20084381
754	20084381
755	20080377
756	20084224
757	20080337
758	20080337
400	20080801
448	20080801
339	20084299
498	20084747
759	20082766
760	20082766
761	20084274
553	20080802
762	20082238
763	20084594
443	20081650
764	20081650
341	20083298
765	20083298
766	20080847
126	20082400
743	20080380
742	20080380
443	20081655
492	20081655
100	20081960
121	20083078
94	20083078
246	20084941
767	20085051
768	20083715
449	20083715
29	20084639
310	20086429
70	20086429
113	20082640
94	20082640
618	20081131
769	20083289
770	20084083
771	20084083
772	20083889
773	20083889
774	20084702
775	20084702
70	20081249
776	20081249
205	20082977
699	20080410
777	20082881
778	20083313
779	20083313
780	20082172
781	20081464
691	20082785
140	20084295
664	20080493
782	20080247
783	20083357
784	20083357
366	20083058
785	20082797
732	20082797
786	20084267
787	20084267
788	20084403
789	20080789
790	20080833
791	20080966
792	20081573
386	20083632
198	20083876
794	20083489
795	20083489
749	20080242
796	20080242
797	20081337
656	20081337
798	20084771
799	20084771
800	20082119
444	20082245
710	20082245
801	20082877
802	20084736
803	20083637
804	20083637
65	20080376
805	20080376
723	20085032
350	20084186
243	20084186
436	20081604
435	20081604
806	20082092
318	20080741
655	20080741
807	20083757
428	20084949
444	20082311
808	20082311
809	20085166
526	20085166
43	20084804
810	20080957
811	20081420
812	20081229
813	20081999
814	20080307
815	20081977
816	20080424
817	20080570
404	20080570
421	20083483
446	20084064
250	20084064
818	20083887
819	20083887
820	20083926
821	20080495
822	20080769
716	20080917
715	20080917
700	20081468
823	20081468
377	20084190
824	20082340
825	20082340
826	20083716
283	20084268
187	20084268
827	20083567
828	20083567
720	20081930
587	20084863
115	20081226
829	20084388
830	20080552
435	20080552
663	20083266
43	20084944
831	20082541
832	20081608
84	20085075
239	20082887
373	20082887
121	20083073
833	20083073
834	20084865
115	20084865
488	20081728
835	20083856
517	20083856
836	20084655
837	20084655
838	20084739
285	20080282
827	20082170
511	20083214
839	20084568
840	20084568
308	20081295
108	20081084
443	20081710
444	20081710
11	20081159
736	20082236
841	20085047
406	20084916
746	20080823
672	20080823
801	20081586
283	20082993
435	20080553
555	20080553
100	20081884
140	20082271
434	20082271
115	20081225
46	20082037
28	20082037
802	20084712
126	20083868
842	20083868
283	20083051
843	20081140
844	20084765
845	20084574
846	20084574
847	20084213
848	20084213
343	20084860
849	20083860
850	20083860
851	20085097
852	20085097
853	20085082
854	20085085
855	20085085
856	20083265
846	20084391
856	20084790
857	20080542
858	20080542
859	20084912
860	20084912
861	20085037
862	20085037
863	20083553
864	20083679
865	20084316
514	20080262
750	20082188
392	20082188
842	20083191
866	20083793
867	20083793
868	20084424
54	20084424
869	20084663
701	20083337
237	20080280
827	20080925
870	20081929
871	20081929
738	20083791
872	20083791
353	20082959
869	20084652
870	20080506
873	20080506
874	20082819
875	20080276
876	20083435
877	20084350
187	20083218
878	20083070
879	20085043
339	20084491
880	20084491
881	20084713
882	20084713
448	20084746
450	20084746
559	20081702
884	20081702
448	20084855
450	20084855
342	20080446
885	20080400
886	20080400
887	20082615
888	20080065
889	20080065
890	20084363
723	20084331
250	20083853
891	20084891
892	20081336
436	20084462
893	20084462
11	20081157
894	20084264
542	20084904
866	20083903
895	20083144
286	20084058
896	20083513
611	20083513
897	20083292
342	20083292
866	20084160
165	20083569
35	20083569
898	20080306
899	20084953
900	20084953
901	20084297
902	20084937
403	20084937
239	20082550
113	20082646
903	20080568
904	20080568
905	20081659
906	20081659
288	20082795
443	20082109
907	20082107
826	20083717
908	20083717
813	20080375
65	20080375
559	20082306
909	20084414
910	20083776
911	20083776
339	20084463
686	20084463
52	20084627
126	20083149
784	20083149
377	20084178
85	20082549
84	20081817
678	20084049
37	20081661
912	20083526
804	20083526
913	20082240
914	20083512
915	20085130
916	20086055
624	20086055
65	20082029
108	20081105
28	20082041
46	20082041
259	20086798
70	20081637
757	20081598
13	20081945
669	20085069
312	20085069
918	20084303
243	20083753
919	20083091
920	20083367
43	20080836
344	20082429
207	20084614
187	20084614
921	20084880
44	20083419
406	20083419
283	20082990
269	20082715
73	20084259
141	20084343
100	20081909
588	20090266
676	20090403
923	20090403
924	20090630
243	20090863
925	20091097
663	20091097
926	20091414
720	20091414
589	20092043
566	20092043
342	20092258
927	20092591
928	20092591
929	20090089
930	20090091
931	20090091
932	20090104
933	20090161
934	20090399
934	20090482
588	20090572
935	20090641
936	20090641
755	20090712
318	20090712
755	20090713
903	20090967
937	20091101
816	20091125
938	20091247
939	20091247
914	20092506
940	20092506
941	20092902
73	20093201
943	20090145
944	20090189
945	20090284
946	20090406
947	20090434
948	20090434
949	20090522
947	20090522
285	20090524
950	20090524
820	20090545
951	20090551
952	20090658
953	20090736
954	20090806
947	20090806
955	20090811
956	20090811
957	20090859
939	20090859
958	20090873
959	20090969
749	20091080
960	20091080
961	20091081
961	20091082
962	20091098
285	20091230
963	20091230
964	20091275
965	20091275
566	20091335
589	20091335
966	20091407
285	20091528
737	20091528
967	20091539
968	20091539
772	20091564
969	20091594
511	20091704
970	20091704
971	20091866
972	20091914
973	20092021
432	20092021
974	20092080
975	20092080
976	20092232
977	20092236
978	20092236
979	20092272
980	20092417
981	20092417
925	20092419
982	20092424
925	20092433
983	20092575
984	20092592
985	20092614
986	20092702
987	20092712
804	20092738
988	20092765
989	20092765
990	20092844
786	20092859
729	20092859
991	20092884
993	20092898
763	20093030
994	20093032
322	20093043
321	20093043
995	20093060
148	20093123
996	20093132
997	20093132
998	20093166
999	20093223
1000	20093223
344	20090656
1001	20090656
688	20090375
1002	20090375
808	20090512
84	20090512
1002	20090681
1003	20090090
661	20090123
1004	20090162
1005	20090174
70	20090174
1006	20090177
678	20090231
1007	20090236
287	20090248
11	20090263
1008	20090286
943	20090286
674	20090333
1009	20090346
1010	20090346
70	20090408
934	20090415
492	20090415
1011	20090431
318	20090432
14	20090444
1012	20090445
1013	20090445
553	20090447
1014	20090468
44	20090468
1015	20090469
671	20090494
65	20090526
65	20090532
767	20090649
215	20090649
344	20090715
1017	20090782
827	20090800
828	20090800
37	20090862
243	20090864
332	20090864
1018	20090972
1019	20090972
432	20091029
400	20091029
337	20091141
757	20091146
1020	20091194
445	20091209
147	20091209
1021	20091211
1022	20091211
498	20091307
1023	20091326
1024	20091394
1025	20091521
1026	20091574
406	20091574
240	20091606
1027	20091708
1028	20091835
1029	20091835
272	20091922
291	20091922
916	20092004
1030	20092014
800	20092024
1031	20092125
1032	20092151
1033	20092151
421	20092153
421	20092154
94	20092224
670	20092224
1034	20092270
1035	20092344
766	20092349
43	20092356
723	20092356
1036	20092368
1037	20092402
386	20092416
293	20092440
187	20092440
723	20092470
1038	20092470
366	20092622
1039	20092669
912	20092740
804	20092740
1040	20092762
1041	20092762
339	20092826
686	20092826
1042	20092837
686	20092840
339	20092840
1043	20092869
555	20092871
1044	20092871
84	20092911
385	20092961
443	20093000
181	20093001
1045	20093027
1046	20093070
1047	20093070
678	20093075
1048	20093085
122	20093098
941	20093122
1049	20093122
1050	20093210
45	20093231
914	20090096
1051	20090140
1052	20090140
1053	20090166
943	20090173
913	20090201
1052	20090238
1054	20090246
726	20090253
725	20090253
716	20090257
715	20090257
1055	20090323
843	20090323
843	20090324
328	20090341
725	20090376
658	20090397
1056	20090397
1057	20090400
70	20090407
426	20090438
426	20090440
165	20090480
1059	20090487
715	20090503
716	20090503
372	20090508
239	20090542
239	20090543
1060	20090573
162	20090573
177	20090622
1061	20090622
936	20090705
744	20090705
794	20090727
100	20090742
1062	20090747
1063	20090747
1025	20090768
866	20090872
39	20090878
344	20090878
1064	20090879
435	20090926
140	20090926
115	20090951
44	20090975
181	20090975
937	20091099
113	20091140
1065	20091161
812	20091179
108	20091217
108	20091220
108	20091223
140	20091232
434	20091232
1066	20091236
498	20091276
283	20091319
249	20091377
299	20091377
940	20091417
1015	20091417
1067	20091587
1068	20091587
1069	20091620
1070	20091620
46	20091944
28	20091944
800	20092039
1071	20092234
432	20092234
122	20092237
249	20092287
187	20092318
1072	20092319
386	20092319
187	20092320
293	20092320
673	20092341
766	20092352
1073	20092522
1074	20092522
343	20092751
866	20092757
504	20092763
1075	20092763
492	20092804
66	20092921
73	20092957
350	20093056
1076	20093088
1077	20093088
1078	20093110
1079	20093110
1080	20093165
552	20093183
1081	20093207
1082	20093207
84	20093229
1083	20095034
843	20095034
1084	20090095
139	20090154
434	20090185
435	20090185
1085	20090401
1086	20090402
1087	20090402
553	20090448
1013	20090471
1088	20090476
1089	20090476
720	20090517
792	20090562
618	20090776
898	20090839
14	20090882
1090	20090882
406	20090915
44	20090915
1091	20090934
361	20090934
783	20090970
162	20090998
215	20091010
406	20091010
1092	20091206
856	20091252
1093	20091252
175	20091270
115	20091381
1094	20091431
869	20091431
1095	20091650
1096	20091650
1	20091690
1097	20091793
468	20091793
809	20091808
673	20091808
670	20091809
94	20091809
809	20091841
1098	20091898
332	20091953
475	20091989
94	20091989
250	20092001
1099	20092018
1100	20092018
1	20092069
342	20092257
332	20092257
1101	20092399
1102	20092399
250	20092444
673	20092444
1103	20092450
250	20092450
1104	20092473
724	20092473
852	20092535
476	20092562
475	20092562
618	20092621
693	20092794
205	20092800
205	20092817
308	20092839
1075	20092839
489	20092989
435	20092989
1105	20093047
115	20093047
286	20093080
1106	20093205
523	20093205
70	20105271
1107	20108589
165	20105387
1108	20108603
1109	20105364
100	20105364
1	20105548
916	20106139
620	20105677
1110	20105677
11	20105202
663	20105285
757	20108588
187	20106008
65	20105298
473	20105245
372	20105245
1111	20106344
1106	20105514
1112	20105514
432	20105213
1071	20105213
1113	20105990
337	20105860
443	20105302
299	20106362
385	20105624
1052	20105928
735	20105928
73	20106239
392	20108587
333	20105663
40	20105663
1114	20105963
84	20106341
108	20105529
436	20108615
969	20108615
1115	20105994
1116	20106426
446	20106426
299	20106370
1034	20106415
1117	20106415
239	20105186
726	20106380
725	20106380
556	20105952
555	20105952
181	20105516
115	20105767
1118	20105767
618	20105680
1119	20105530
1120	20105530
1121	20106319
1043	20106109
866	20105873
287	20105900
800	20106287
1123	20105907
45	20106368
745	20105153
1124	20105978
1125	20105978
1094	20106143
869	20106143
1126	20105198
1127	20105279
1128	20105279
720	20105307
716	20105246
715	20105246
205	20105110
1129	20105565
1130	20105565
1131	20105533
443	20105383
312	20106245
1132	20106245
1133	20106229
37	20105734
766	20106310
444	20105589
1098	20105589
803	20105208
895	20106170
393	20106296
612	20106353
35	20105488
177	20105834
22	20105834
1134	20106295
1135	20106295
1069	20106294
1136	20106290
1137	20106461
202	20105951
699	20105951
372	20105756
1014	20105612
44	20105612
1071	20106207
715	20105801
716	20105801
976	20106250
1138	20106250
1114	20106069
1139	20106053
215	20106053
1140	20105740
1141	20105740
1142	20105116
406	20106161
215	20106161
1143	20106323
843	20105528
84	20106364
45	20106374
720	20105566
1144	20106302
1145	20106077
1146	20105649
239	20105187
686	20105821
1147	20105522
1148	20106242
372	20105753
1149	20105254
1150	20105254
1151	20105776
1152	20105776
22	20105752
177	20105752
1103	20105798
1085	20105283
1153	20106379
866	20105942
1037	20105804
202	20105243
673	20105643
712	20105420
312	20105420
94	20105327
363	20105682
1155	20105216
1156	20105216
1005	20105197
1157	20105197
426	20105662
403	20105859
780	20105859
1158	20106233
1159	20105628
1160	20105628
913	20105600
737	20106210
1055	20106330
1161	20106045
1140	20106045
285	20105217
950	20105217
1162	20105960
1163	20105960
14	20105698
230	20105167
1164	20105249
1165	20105816
1166	20105832
869	20106409
1167	20106409
1168	20105670
1169	20105865
1170	20105841
523	20105953
676	20105496
1112	20105496
343	20105880
1171	20106058
1172	20105773
1173	20105773
216	20106178
1174	20106178
1175	20106321
1055	20106321
1032	20106179
1	20106179
11	20105200
108	20105527
1176	20105515
1177	20106277
1006	20105241
393	20106306
1034	20105625
363	20105625
1178	20106137
1179	20106137
1180	20106333
1181	20105646
1182	20105646
831	20105375
1183	20106354
991	20106354
1184	20105226
1126	20105226
100	20105210
674	20106014
1185	20106006
1131	20105531
1186	20106120
623	20106307
432	20106123
1187	20106123
715	20105794
618	20105674
207	20106365
1188	20106213
1189	20105685
1190	20105728
1119	20105728
678	20106055
1157	20105640
1005	20105640
910	20105112
1191	20105946
1192	20106397
945	20106397
803	20105385
693	20105965
1193	20105965
43	20105679
699	20106251
202	20106251
1120	20105365
1119	20105365
181	20105713
794	20105799
1194	20106086
528	20105218
285	20105218
1195	20105782
1196	20106147
1197	20106147
1198	20106273
1199	20106273
866	20105739
1200	20105291
1201	20105291
1118	20105765
1202	20106009
804	20105905
1203	20105133
11	20105201
285	20105183
1204	20105183
1205	20105189
1206	20106308
1207	20106093
1009	20106093
1057	20105125
1208	20105125
34	20105897
1164	20105295
769	20106081
1209	20106081
898	20105652
831	20106278
913	20106278
1210	20105524
1211	20105182
1042	20106465
1212	20106433
65	20105296
94	20105328
283	20106157
84	20106157
113	20106298
215	20106177
888	20106181
1211	8716
85	8736
389	8739
1213	8741
848	8745
1013	8747
1214	8750
1215	8751
932	8752
618	8760
1216	8764
1216	8765
389	8773
1106	8774
444	8782
432	8785
1071	8785
35	8797
165	8797
790	8798
1217	8800
686	8801
1218	8801
444	8808
1219	8810
1220	8821
1221	8823
1222	8831
1223	8832
1224	8838
1223	8840
1157	8845
1005	8845
65	8848
344	8849
205	8854
361	8855
202	8858
1067	8858
1225	8860
1226	8860
473	8867
1227	8873
1228	8873
820	8876
65	8876
1201	8877
820	8881
66	8881
1229	8883
716	8887
1224	8887
426	8888
1230	8890
1231	8900
1232	8900
808	8901
926	8902
720	8902
686	8912
1071	8912
933	8917
98	8918
1233	8920
337	8921
1234	8923
1235	8923
337	8924
314	8925
1236	8925
1237	8933
826	8933
827	8939
1238	8945
674	8950
1114	8950
1239	8954
674	8955
744	8967
1240	8968
1241	8968
913	8969
1242	8970
846	8972
843	8972
1243	8973
1125	8975
372	8976
1244	8976
1245	8977
1246	8977
1044	8985
555	8985
1052	8989
1044	8991
969	8991
794	8994
1247	9001
1248	9008
827	9011
1249	9021
1250	9021
444	9025
969	9025
816	9029
567	9029
1235	9033
800	9038
1189	9042
673	9047
73	9047
720	9048
1251	9048
1252	9051
1253	9051
895	9052
1254	9056
908	9056
1255	9066
1256	9066
996	9068
567	9074
1190	9077
1257	9082
684	9083
44	9083
1109	9088
100	9088
1258	9089
1259	9089
1190	9091
673	9095
1260	9104
1261	9104
1109	9108
363	9111
1262	9112
1263	9117
1264	9117
100	9128
165	9128
249	9140
299	9140
1265	9143
804	9143
1266	9167
1267	9167
905	9170
99	9172
1231	9172
1268	9173
1050	9173
421	9176
1119	9178
187	9182
1259	9185
1269	9185
1131	9186
283	9192
1253	9197
283	9207
1239	9207
1003	9210
1270	9210
866	9212
1037	9213
1167	9213
187	9219
555	9219
1272	9228
1244	9228
1250	9231
769	9238
623	9241
1273	9265
377	9269
1274	9271
1275	9314
1275	9316
792	9328
1276	9347
1277	9454
1278	9504
1279	9504
1280	9544
1281	9544
1282	9604
1025	9615
328	9615
655	9701
770	9764
656	9906
655	9906
1180	9925
1283	9964
1284	9964
1285	10005
1286	10005
11	10030
39	10113
344	10150
39	10150
1287	10201
664	10202
498	10580
936	10596
1288	10636
147	10686
1289	10782
1056	10877
1013	10877
385	10905
1166	10905
14	10908
332	10908
215	10914
385	10915
343	10918
1290	10932
1291	10951
259	10957
215	10959
406	10959
1292	11028
1293	11031
1294	11031
1295	11037
1009	11037
1296	11055
272	11055
259	11062
46	11074
28	11074
1297	11103
333	11104
333	11105
1208	11108
1298	11110
285	11110
1299	11121
1299	11122
1128	11136
1127	11136
1300	11137
98	11137
1102	11140
1301	11141
285	11141
293	11142
1302	11144
181	11146
181	11147
293	11152
73	11165
1303	11166
1304	11166
443	11176
1305	11210
29	11212
1098	11215
1306	11219
726	11254
1307	11254
1308	11266
1309	11270
1310	11272
744	11272
1311	11304
1312	11305
1313	11305
22	11309
1314	11321
1315	11326
1316	11327
1317	11327
956	11343
1124	11344
1125	11344
1318	11350
1319	11352
1320	11352
1321	11369
1322	11370
1323	11376
149	11379
1198	11382
1102	11391
149	11393
1228	11431
1227	11431
1125	11432
1125	11436
1324	11440
1325	11440
332	11447
1183	11449
1326	11449
332	11452
1177	11455
1327	11473
406	11479
1328	11482
1329	11482
1210	11493
1183	11494
99	11494
1330	11502
1331	11517
84	11536
804	11537
1332	12633
1333	12637
1334	12637
1335	12639
985	12642
1336	12643
1337	12643
1336	12644
1337	12644
1338	12646
1339	12646
328	12647
510	12647
1340	12648
1341	12648
1342	12649
121	12649
1343	12650
121	12650
1344	12652
1345	12653
1346	12653
1347	12655
1124	12656
1348	12656
1349	12657
1350	12657
1351	12659
1352	12659
1353	12661
54	12661
1354	12662
1355	12662
1356	12665
1357	12665
1344	12666
1358	12692
1359	12693
70	12694
1360	12706
1361	12709
1362	12711
1363	12712
498	12715
1229	12715
1364	12716
1365	12718
11	12731
1366	12737
1367	12754
333	12761
1368	12765
1369	12765
1215	12773
661	12791
943	12800
1370	12809
1211	12812
492	12823
1371	12837
1372	12837
1373	12862
1374	12868
1375	12871
618	12883
1376	12928
473	12946
664	12955
1377	12963
100	12971
1109	12971
100	12972
1109	12974
1378	12977
1143	12979
1150	13035
1379	13060
1363	13081
1119	13092
923	13094
923	13095
1238	13129
1311	13129
400	13139
292	13139
372	13159
1380	13161
1381	13166
1382	13166
215	13174
389	13177
406	13178
215	13178
389	13179
1295	13182
1383	13182
1291	13247
1384	13252
1385	13254
1386	13254
1387	13268
1388	13274
1389	13283
720	13298
434	13302
1390	13318
1391	13335
1217	13340
1223	13340
1392	13372
344	13376
39	13376
1291	13411
1393	13424
1394	13425
663	13427
1395	13429
1382	13429
1396	13455
1397	13462
1398	13476
1399	13518
1400	13518
1401	13526
1402	13547
794	13560
1266	13567
1194	13606
1189	13608
1398	13608
1403	13615
1401	13623
1034	13624
1404	13624
1405	13649
475	13649
1406	13650
1407	13650
828	13677
768	13677
993	13685
1267	13694
1034	13721
1114	13721
1408	13735
1052	13758
1038	13776
113	13776
113	13777
1038	13777
1409	13801
655	13804
656	13804
1170	13819
1410	13820
1411	13848
333	13848
1412	13875
972	13876
1413	13876
1412	13885
1131	13925
1414	13949
1151	13950
1127	13957
1006	13959
1415	13965
386	13965
386	13967
1416	13972
1364	13979
436	13986
140	13986
473	13999
99	13999
970	14013
1417	14026
1418	14026
1419	14027
1420	14029
140	14034
1421	14065
292	14068
1422	14068
115	14154
803	14274
372	14274
1423	14320
1424	14331
895	14354
1425	14371
1013	14379
1247	14474
1426	14507
1427	14594
445	14621
147	14621
1162	14630
1163	14630
37	14679
406	14679
1322	14718
1428	14718
1429	14737
913	14752
905	14792
1037	14792
1430	14794
663	14794
1431	14828
1431	14829
720	14864
1432	14868
1433	14875
1434	14889
1435	14906
205	14908
1436	14909
1437	14909
1233	14944
1438	14944
1439	14962
1440	15000
1120	15003
756	15024
377	15034
377	15039
65	15042
1441	15097
1162	15097
1285	15106
1425	15106
1345	15135
1124	15135
1442	15139
1443	15140
1444	15144
674	15151
955	15153
674	15154
44	15172
1445	15193
678	15243
1114	15263
269	15289
269	15290
1446	15298
1447	15342
1250	15343
1361	15370
1448	15378
1449	15378
927	15397
928	15397
1450	15466
1451	15497
1452	15518
1453	15537
73	15550
673	15550
1454	15556
1455	15558
1456	15559
1457	15559
866	15568
343	15572
343	15573
1458	15609
181	15630
1459	15639
1125	15661
714	15711
1330	15715
1460	15715
531	15757
255	15757
181	15772
1330	15779
804	15782
803	15782
283	15783
1461	15787
1462	15818
1463	15818
1464	15836
1465	15836
1466	15839
1467	16674
28	16676
46	16676
936	16677
283	16678
337	16679
1315	16681
84	16682
70	16683
285	16684
366	16686
366	16687
366	16688
545	16689
1468	16689
1469	16690
1470	16691
1471	16691
1474	16693
1475	16693
1476	16694
1477	16694
11	20050246
57	20050244
108	20050244
239	20050244
1480	20050246
1481	20050246
839	20070806
1	20040144
84	20040144
26	8918
26	20092884
1482	16696
1483	16696
1484	16696
1485	20040128
1486	12662
1487	12662
1488	20060375
14	20040108
122	12648
54	16692
90	16695
91	16695
1489	16694
65	20060277
1125	12656
1490	20040104
66	20040109
1491	12659
1492	16693
1493	12657
46	20040114
1494	16694
1495	16694
1496	16692
277	20030050
91	20030066
90	20030066
277	20070648
1497	20030065
1498	20030065
1499	20030067
1500	20030067
1501	20030067
1502	20030067
24	20030068
1503	20030068
82	20030069
75	20030070
1504	20030079
1505	20030079
1506	20030079
181	20050158
44	20050158
1481	20050172
332	20050185
295	20050186
10	20050186
170	20050215
1507	20050248
277	20070655
277	20070649
343	20070635
324	20071074
1481	20090708
277	20090909
1481	20090650
236	20060272
1481	20060316
277	20060326
1481	20060363
277	20060392
1481	20070414
30	20085008
1481	20083629
937	20083059
1107	20081232
520	20082787
1273	20082054
277	9574
277	16680
277	14749
277	20090908
357	20090111
196	20090986
198	20090986
800	20090986
283	20090986
70	20090986
1481	20090553
1202	20090560
57	20090409
277	9655
57	20090410
57	20090411
277	20108616
320	8857
57	8780
57	20105288
320	8859
1380	9215
57	13134
277	14751
196	20083876
196	20090879
30	20105533
1384	20081573
1384	20070479
57	10636
57	13427
57	20105285
1481	20082989
1481	20060258
520	20092921
320	20105243
277	20060420
108	20108617
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY sessions (id, title, description, stage, type, year) FROM stdin;
20020006	eXtreme Programming (XP)		Main conference	Special Presentation	2002
20020007	DSDM	DSDM	Main conference	Special Presentation	2002
20020008	Crystal	Crystal	Main conference	Special Presentation	2002
20020041	STEERING THE BIG SHIP: SUCCEEDING IN CHANGING AN ORGANIZATION'S PRACTICES	“Welcome, welcome!, we’re so glad you’re here.  We just have so many problems here at Mock Corporation.   Our software development has been a problem as long as we can remember.  We really thought we had it licked with the last process change we made.  It was kinda structured, but the plans looked great at the start of the project!   Now, some programmers are experimenting with this XP and Agile stuff and they really like it, but lots of people think it won’t work.”\nWelcome to Mock Corp.  In this tutorial, YOU are the coach, helping Mock Corp. over come the challenges of changing the practices they use to create software.   You’ll study Mock Corp’s people, teams, and the organization as a whole.  Common challenges in adopting new practices will be explored as Mock Corp. encounters them.  Resistance behaviors will be identified and tools to over come them will be presented.   Mock Corp. is a generalization of real people and companies that have undergone transition to XP.   Individuals from companies that have or are going through the transition will participate to tell their stories.\nChanging the way individuals work is a big challenge.  Changing the way teams work is an even bigger challenge.  Changing the way organizations work is harder still.  Moving to an Extreme or Agile way of developing software tests the ability of individuals, teams, and organizations to change.  The degree to which an XP or Agile transition is successful long term will primarily depend on this ability to change.  This tutorial will teach the participants about change at different levels in the organization and techniques to make change successful.   Special emphasis will be placed on the organization level change issues and the infrastructure required to make change stick.  \nDuration: half-day\nContent outline\n• Models of Organizational Change\n• Specific change issues caused by the transition to Extreme Programming or other\nAgile methods\n   o Programming Team Changes\n   o Customer Team Changes\n   o Management Changes\n• Mock Corp\n• Individual Change and Techniques (exercise)\n• Team Change and Techniques (exercise)\n• Organizational Change and Techniques (exercise)\n• Tales from the Trenches: Case Studies from Real World Transitions\nPresenter resume with contact information\nLowell Lindstrom has been involved in the teaching, coaching, and transitioning of\nnumerous XP projects in organizations of all sizes and varying domains. He is currently\nresponsible for the business development and strategy at Object Mentor and coaches\norganizations on customer skills and the organizational change aspects of Extreme\nProgramming. He has been professionally involved across of the spectrum of software\nbusiness for 17 years. After many years of developing and managing software projects,\nhe took on organizational change, marketing, and sales roles at a large technology\nproduct company. He has a BSCS from Northwestern University and a Masters in\nManagement from Northwestern's Kellogg GSM.\nLowell Lindstrom\nlindstrom@objectmentor.com\nPhone: 847-573-1565 x20\nMSN Chat: omlowell	Main conference	Tutorial	2002
20020042	AGILE ACCEPTANCE TESTING	The goal of this workshop is to discuss and develop practices for\nsupporting effective acceptance testing on agile projects. (Some refer\nto acceptance testing as system testing, functional testing, customer\ntesting or GUI testing).\nWhat skills are required for acceptance testing? How should acceptance\ntesters they interact with other members of the team? How can agile\nprojects support the automation of these tests?\nThis workshop will survey the participants experiences and\nunderstandings of what does and doesn't work. Participation is\nencouraged from testers, developers and anyone with an interest in\ntesting and experience with testing on agile projects.\nMore details are available at http://www.pettichord.com/agile_workshop.html	Main conference	Workshop	2002
20020001	THE CURRENT CONVERSATION IN AGILE SOFTWARE DEVELOPMENT	Every 3-6 months, the conversation around the term "agile software\ndevelopment" changes. First it was, "What is 'agile'?", then "How do I do\n'agile'?", then it went to "How can / cannot 'agile' coexist or be mixed\nwith plan-centric approaches?" As of May (2002), the conversation was:\n"Contrast project strategies if the project's dominant priority is agility, or\nlaid-backness, or fun, or cost, or predictability." In this invited talk,\nAlistair Cockburn will describe the dominant conversation he is involved\nwith at the time of the conference. Current prediction has it that the May 2002\ntheme will still be current in early August.	Main conference	Featured Talk	2002
20020002	"You say you want a revolution ... "	XP/Agile are "revolutionary" approaches to software development.  The\nlatest in a distinguished lineage of such innovations.  A revolutionary\ninnovation does not, however, a revolution make.  What forces are at\nwork that will prevent XP/Agile from becoming truly revolutionary?  How\nmight the revolution be won?  Within the context of these questions we\nwill explore a bit of history, cultural anthropology, mysticism, and\nMaoism and outline future strategy.	Main conference	Featured Talk	2002
20020003	Triggers and Practice: How Extremes in Writing Relate to Creativity and Learning 	Several XP principles are used by creative writers all the time. Creative\nwriting is about exploration and learning. In this talk I examine the\nrelationships between learning and making things. We will see that\neverything worth anything is extreme.	Main conference	Educator's Symposium Special Presentation	2002
20020004	EDUCATOR SYMPOSIUM: XP AS A TEACHING PROCESS	Moderator\nJ. Fernando Naveda\njfn@cs.rit.edu\nPanelistsKent Beck, Three Rivers Institute\nkent@threeriversinstitute.org\nRichard P. Gabriel, Sun Microsystems\nrpg@dreamsongs.com\nJorge Diaz Herrera, Southern Polytechnic State University\njdiaz@spsu.edu\nWatts Humphrey, Software Engineering Institute\nwatts@sei.cmu.edu\nMichael McCracken, Georgia Institute of Technology\nmike@cc.gatech.edu\nDave West, New Mexico Highlands University\ndwest@cs.nmhu.edu\nAbstract:	Main conference	Panel	2002
20020005	EDUCATOR SYMPOSIUM:  EXTREME TEACHING -- AN AGILE APPROACH TO EDUCATION	Extreme Programming is built around core values, principles, and practices designed to align the experience of developing software with reality. You can set out to design your application with the assumption that you can anticipate all issues that will arise in a world of static requirements. What do you do when you come across an unforeseen problem or when the requirements change over time? What happens when new and better solutions become apparent in the course of development? Similarly, as instructors, we begin each new term armed with a syllabus and an idea of how the course will run. Then reality rears its ugly head. The software that was supposed to be installed in the lab for the first day of classes isn't installed. The textbook looked better when you evaluated it last spring than it does now that you are actually trying to teach from it. The students are either much quicker, much slower, or much more diverse than you anticipated. In this workshop we'll begin the process of selecting core values, principles, and practices that we can use to guide us in the classroom the same way that XP can help guide developers. We do not expect the practices of XP to map over. On the other hand, as an example, much of XP benefits from quick, accurate feedback. Several of the practices are based around this idea. Quick, accurate feedback obviously applies in the classroom as well and may suggest other values, principles, or practices.	Main conference	Workshop	2002
20020009	Agile Software Development and the Rational Unified Process(r)	There are some basic principles and values that make a software development project, or process, agile. Using the agile values and principles, we look at how a process framework such as the Rational Unified Process (r) can be configured to be agile. The presentation is based on examining a specific configuration of RUP and how it supports the agile characteristics. We look at common misconceptions about a process like the RUP, and show that most of the problems come from the different words used to describe the process, and the misapplication of the process.\nWe examine how a framework can be used to grow with a project and organization by providing a consistent set of best practices that may be applied as needed. All you need to do is add a healthy dose of common sense.	Main conference	Special Presentation	2002
20020010	FEATURES, USER STORIES, AND USE CASES: GATHERING REQUIREMENTS IN AN AGILE PROCESS	Choosing the right requirements vehicle can affect the dynamics of your software development process. Use cases continue to dominate the enterprise while features and user stories are gathering momentum. But which vehicle is right for your project? How can Feature-Driven Development and other agile processes be adapted to use other requirements vehicles? This presentation examines the changing dynamics of the use case, the value of the user story beyond extreme programming, and the increasing role of features in the development of software.\nGranville Miller\nSenior Technical Product Manager, TogetherSoft\nGranville has over a decade of experience in the object-oriented community. He is coauthor of the Advanced Use Case Modeling series and A Practical Guide to Extreme Programming. He has presented tutorials at various object-oriented technology conferences worldwide. His hands-on approach to object-oriented development has been the result of his work with companies that range from startups in the very early stages to some of the most established software giants. He is currently teaching seminars, tutorials, and classes in agile processes, methodology, and Java technology, as well as mentoring and helping to deliver aggressive projects.	Main conference	Special Presentation	2002
20020011	SCRUM -- AGILE MODELING	SCRUM\nAgile Modeling	Main conference	Special Presentation	2002
20020012	EMPIRICAL STUDIES I	EMPIRICAL STUDIES I\nExtreme Programming Used to Establish the Culture of a High Performance Team: Management Case Study,\nCircle of Life, Spiral of Death: Are XP Teams Following the Essential Practices?,\nTracking Test First Pair Programming -- An Experiment\nClement James Goebel III, Vinay Ramachandran, Anuja Shukla, Matevz Rostaher and Marjan Hericko	Main conference	Presented papers	2002
20020013	PAIR PROGRAMMING	PAIR PROGRAMMING\nPair Programming: Addressing Key Process Areas of the People-CMM,\nExtreme Interviewing,\nWhen Pairs Disagree 1-2-3\nGopal Srinivasa and Prasanth Ganesan, Clement James Goebel III, Thomas Meloche, Richard Sheridan, Roy Miller	Main conference	Presented papers	2002
20020014	METHODS AND SUPPORTING TOOLS	METHODS AND SUPPORTING TOOLS\n\nDesigning Requirements: Incorporating Usage-Centered Design into an Agile SW Development Process\nUsing Ant to Solve Problems Posed by Frequent Deployments\nSupporting Adaptable Methodologies to Meet Evolving Project Needs\nJeff Patton, Steve Shaw, Scott Henninger, Aditya Ivaturi, Krishna Nuli, Ashok Thirunavukkaras	Main conference	Presented papers	2002
20020015	INTRODUCING EXTREME PROGRAMMING AND AGILE METHODS	INTRODUCING EXTREME PROGRAMMING AND AGILE METHODS\n\nStrategies for Introducing XP to New Client Sites,\nTurning the Knobs: A Coaching Pattern for XP Through Agile Metrics\nTailoring XP for Large System Mission Critical Software Development\nJonathan Rasmusson, William Krebs, Jason Bowers, John May, Erik Melander, Matthew Baarman, Azeem Ayoob	Main conference	Presented papers	2002
20020016	TESTING	TESTING\nAcceptance Testing HTML,\nAn Informal Formal Method for Systematic JUnit Test\nCase Generation,\nA Light in a Dark Place: Test-Driven Development with 3rd Party Packages\nNarti Kitiyakara, David Stotts, Mark Lindsey, Angus Antley, James Newkirk	Main conference	Presented papers	2002
20020017	EXPERIENCE REPORTS	EXPERIENCE REPORTS\nAgile Project Management Methods for ERP: How to Apply Agile Processes to Complex COTS Projects and Live to Tell About It ,\nExtreme Programming in a Research Environment, \nEstablishing an Agile Testing Team: Our Four Favorite "Mistakes", \n Glen Alleman, William Wood, William Kleb, Kay Johansen, Anthony Perkins	Main conference	Presented papers	2002
20020018	EMPIRICAL STUDIES II	EMPIRICAL STUDIES II\nAgile Meets CMMI: Culture Clash or Common Cause?\nHow to Get the Most out of Extreme Programming/Agile Methods(wed only), \nEmpirical Findings in Agile Methods\nApurva Jain, Richard Turner, Donald J. Reifer, Mikael Lindvall, Vic Basili, Barry Boehm, Patricia Costa, Kathleen Dangle, Forrest Shull, Roseanne Tesoriero, Laurie Williams, and Marvin Zelkowitz	Main conference	Presented papers	2002
20020019	DISTRIBUTED TEAMS	DISTRIBUTED TEAMS\nSupporting Distributed Extreme Programming,\nExploring the Efficacy of Distributed Pair Programming\nFrank Maurer, Prashant Baheti, Edward Gehringer, and David Stotts	Main conference	Presented papers	2002
20020020	ARE TESTERS EXTINCT? HOW CAN TESTERS CONTRIBUTE TO XP TEAMS?	Moderator:\nKen Auer\nRoleModel Software\nPanelists\nRon Jeffries\nObject Mentor (www.objectmentor.com, www.Xprogramming.com)\nJeff Canna\nRoleModel Software\nGlen Alleman\nLisa Crispin\nAbstract:Format:	Main conference	Panel	2002
20020021	XP BEYOND LIMITATIONS	Panelists:\nKen Auer \nWard Cunningham \nRob Mee \nDon Reifer \nOrganizers:\nSteven Fraser (sdfraser@acm.org)\nRachel Reinitz (rachel@reinitzconsulting.com)\nModerators:\nBill Caputo \nBill Pyritz \nAbstract:Session Format:	Main conference	Panel	2002
20020022	EXTREME FISHBOWL	Directed by:\nZhon Johansen\nSymantec\nwith celebrity guest programmers and commentators including:Ken Auer\nRoleModel Software\nBrian Button\nObjectMentor\nAlistair Cockburn\nHumans & Technology\nJames Grenning\nObjectMentor\nKay Johannsen\nDuff O'Melia\nRoleModel Software\n\nAbstract:http://www.xputah.org/cgi-bin/wiki?ExtremeFishbowlAtXpUniverse	Main conference	Panel	2002
20020023	AGILE EXPERIENCES	Moderator:\nDave Thomas \nBedarra Corporation,\nCarleton University and University of Queensland\n\nPanelists\nJohn Manzo\nGeneer\nNarti Kitiyakara\nNOLA Computer Services\nRussell Stay\nSymantec\nAldo Dagnino\nABB\nAbstract:	Main conference	Panel	2002
20020024	Using Risk to Balance Agility and Discipline 	At the USC Center for Software Engineering we have found that risk analysis is a good way to address "how much is enough?"  questions for a given project situation.  This enables you to balance a project's mix of agility and discipline by considering the risks of having too little or too much of each.  I will illustrate this on several projects situations, show some ways in which hybrid agile and disciplined methods can be combined, and discuss the results of some recent workshops which have addressed this question.	Main conference	Keynote Address	2002
20020025	XP IN A LEGACY ENVIRONMENT	Summary \n        Extreme Programming is not just for the lucky few projects where applications \n        are built from scratch. Learn how XP's practices can be brought to bear \n        on a poorly designed and untested legacy code base in need of salvation. \n        The audience will operate on a J2EE version of the famous "Bowling \n        Score" application, developed under a waterfall methodology and set \n        within a living environment populated with convincingly nervous clients. \n        Duration: Full day Background\n        To implement new functionality and better usability on legacy systems, \n        XP practitioners must begin with a "recovery and stabilization" \n        phase, in which they erect the scaffolding of unit tests, continuous integration, \n        and other technical infrastructure essential to supporting XP's central \n        value of courage. Of course, this is easier said than done, because the \n        code was never designed to be unit-tested, and there is no continuous \n        integration. To top it all off, the client needs new functionality soon, \n        in order to realize their ROI, and the user interface needs to be overhauled \n        to meet basic standards of usability. How can all of this be accomplished \n        while managing risk?By completing this hands-on interactive tutorial, \n        participants will learn how to:  Structure technical infrastructure tasks within the overall release \n        plan.  Identify which XP practices can be implemented immediately on legacy \n        code systems, and which ones must be gradually introduced.  Use techniques for coping while XP practices are only partly implemented. \n         Establish when and how to proceed to deep information-flow refactoring \n        as the XP support infrastructure comes online.  Improve the legacy code base so that new functionality can safely \n        be added. Enhance the usability and user interface of the application \n        with minimal risk. \n        AudienceContent Outline\n       PrologueThe journey begins…\n          Participants will be introduced to a land under siege by a beastly application, \n          and an intrepid tribe of developers fearing for their livelihoods. These \n          are dangerous times, indeed. Chapter I: Hunting the Beast Scouring the land in search of the monster…\n          Using a legacy implementation of the ubiquitous "Bowling Score" \n          application as a J2EE project on the brink of failure, participants \n          will probe for weaknesses such as lack of testability and overly complex \n          design, answering questions such as: Why is it untestable, and how can \n          this be changed? Is this much complexity necessary? What's wrong with \n          its information flow and presentation?  Chapter II: Laying the Trap The beast is captured and immobilized…\n          Through role playing in a simple release plan, participants will seek \n          to establish control of the project. This will include stabilizing the \n          system with an automated build and unit tests, bolstering communication \n          between teams through the planning game, and introducing usability tests \n          into the user acceptance process. Chapter III: Taming the Beast The beast is taught not to bite the hand that feeds it…\n          Using control established in stabilization phase, participants will \n          begin to add value to the application, making it more usable and crushing \n          bugs mercilessly underfoot. This will be accomplished by means of acceptance \n          tests, code refactoring, and examination of the information flow and \n          visual presentation of the application. Chapter IV: Domesticating the Beast The beast is compelled to return its stolen value…\n          Participants will discuss how to implement new functionality while minimizing \n          risk, expand XP's influence by introducing previously subdued practices, \n          and introduce usability and GUI enhancements into the system, while \n          discussing how these practices can be cleanly integrated into XP and \n          increase project velocity. Epilogue And they lived happily ever after?\n          Participants will engage in a process reflection to review intricacies \n          and implications of the lessons learned.\n      About the Presenters Kuryan Thomas is a Technical Director at C.C. Pace Systems in Fairfax, \n        Virginia. Currently he is a Lead Developer and XP coach, and works with \n        developers and managers to help maintain and enhance a large J2EE application \n        using XP. Kuryan has over 15 years of experience with Object Technology \n        applications ranging from embedded real-time systems to enterprise-class \n        business applications. His professional interests include XP as a development \n        methodology, object oriented design and implementation, web services, \n        and mobile computing.Arlen Bankston is a Senior Consultant and User Experience Manager \n        for C.C. Pace Systems in Fairfax, Virginia. He is currently engaged as \n        a Usability & User Interface Design Mentor, in which capacity he works \n        with business managers and analysts to gather requirements and translate \n        them into usable interfaces, then with developers to implement these designs. \n        His professional interests include the integration of usability and UI \n        design best practices into agile methodologies, as well as the continuing \n        advancement of usage-centered design methods and processes in general. \n        Prerequisites:  \n        A laptop with JBoss 2.4.4 integrated with Tomcat 4.0.1. The combination \n        can be downloaded at http://jboss.org/binary.jsp.	Main conference	Tutorial	2002
20020026	SCRUM AND AGILE 101	Summary\nAgile processes are different. They not only increase productivity, they bring focus and pleasure back to systems development. This tutorial explains the underlying theory and practices of all agile processes, and then explains how they are implemented in Scrum. A case study is presented. An exercise is then conducted to give the tutorial attendees a feel for the flow, practices, and rules of Scrum. Tutorial attendees are organized into teams that collaborate with the customer to formulate an iteration, self-organize to identify the work in the iteration, report on progress and impediments during the iteration, and present the results of the iteration to the users. \nIf you are attending this tutorial and want to see Scrum applied to a product or system development at your organization, contact Ken Schwaber (ken.schwaber@verizon.net) prior to July 15. The most appropriate project will be selected and used in the tutorial.\n\nDuration: 3 hr (half day) \n\nAims\nTo provide the audience with a description of Scrum, why it works, and how it works. To describe the underlying basis and theory of agile processes, including emergence, self-organization, collaboration, iterations, and incremental delivery. To provide a first hand experience being in a Scrum team highlighting the different feel between agile and traditional processes.\n\n\nAudience\nIndividuals that want to use Scrum's high-productivity, agile methods for a project, and individuals that want to understand Scrum and agile practices. \n\nOutline\nPart 1: Scrum theory and practices discussion (75 min)\nLecture style delivery\nSpeaker introduction \nDefined control vs empirical control \nIncremental functionality, emergence, and self-organization \nScrum process overview \nProduct/ system vision \nWhat is the product backlog and who is the product owner? \nWhat is a Scrum team? \nHow do you plan a Sprint (iteration)? \nHow does a team commit to a Sprint goal? \nWhat is Sprint backlog? \nWhat are daily Scrums? \nHow does a team balance its committments within a fixed Sprint in light of emerging requirements, technology, and team dynamics? \nWhat does it mean to abnormally termate a Sprint? \nWhat happens at the end of Sprint review? \nPart 2: Case Study Overview (15 min)\nPresentation of case study\nVision \nTechnology \nRequirements \nRisks \nAssumptions \nPart 3: Translation of Case Study to First Sprint (90 min)\nFacilitated workshop\nSynthesize vision into product goal \nDevelop product requirements list \nSelect first Sprint product backlog and define Sprint goal \nBreak into Scrum teams \nEach team defines its Sprint backlog - self-organization \nEach team has a daily Scrum to report progress \n \n\nPresenter Resume\nKen Schwaber is one of the developers of the Scrum agile process and has extensively used agile processes over the last seven years. Ken is one of the founders of the AgileAlliance and helped setup the AgileAlliance organization. In 2001, Ken co-authored "Agile Software Development with Scrum" with Mike Beedle. With over thirty years of software development, management and consulting experience, Ken is currently working with organizations to develop software with Scrum and a combination of Scrum and Extreme Programming, as well as helping the organizations plan and execute the required change management.\nKen maintains information related to Scrum at www.controlchaos.com, and can be reached at ken.schwaber@verizon.net.\n\nSuggested readings and documentation\nBasic readings in agile processes recommended. Puruse the materials located at www.controlchaos.com, and look at the material in the books Agile Software Development with Scrum, Schwaber and Beedle, Prentice Hall, 2001; Adaptive Software Development, Highsmith, Dorset House, 1998, and Agile Software Development, Cockburn, Addison-Wesley, 2001.	Main conference	Tutorial	2002
20020027	HOW TO BE A COACH	Tutorial Summary\nIt's difficult to start a new process, but a coach can make this easier. A coach is part\ndeveloper and part manager. Coaches help a team stay on process and they help the team\nlearn. A coach brings in some outside perspective to help a team see themselves more\nclearly.\nWe'll use a combination of lectures, games, and exercises to explore and practice skills\nthat coaches (and team members!) can use.\n\nDuration: Half-day\n\nAims\nGive students:\nA deeper look at the coach's role\nTools to help communicate better\nPractice with charts, retrospectives, and other feedback tools\nPractice diagnosing team problems\n\n\nAudience\nCoaches, budding coaches, and developers on XP or agile teams.\nContent OutlineThe coach's role\nTeam formation \nBig Visible Charts \nRetrospectives \nWorking yourself out of a job\nPresenter Resumes\nWilliam C. Wake is a software coach, consultant, and teacher. He's the inventor of the\nXP Programmer's Cube, and the author of Extreme Programming Explored and the\nforthcoming Refactoring Workbook. He can be reached at\nWilliam.Wake@acm.org or http://www.xp123.com.\nRon Jeffries has been developing software since 1961, when he accidentally got a\nsummer job at Strategic Air Command HQ, and they accidentally gave him a FORTRAN\nmanual. He and his teams have built operating systems, language compilers, relational\nand set-theoretic database systems, manufacturing control, and applications software,\nproducing about a half-billion dollars in revenue, and he wonders why he didn't get any\nof it. For the past few years he has been learning, applying, and teaching the Extreme\nProgramming discipline. Ron is the primary author of Extreme Programming Installed.\nRon is a trainer and consultant at Object Mentor, Inc, and can be reached at\n RonJeffries@acm.org\n\nExamples of Supporting Material \nChart Reading: \nGiven a problem, what chart might you introduce? Given the data on a chart, what does it\ntell you about the team, its product, and process? We'll provide charts, and ask small\ngroups to interpret them.\nRetrospective: \nXP teams value feedback because it gives them an opportunity to learn. By holding end-\nof-iteration retrospectives, a team can learn from recent mistakes and tune its process.\nWe'll help small groups hold quick retrospectives.	Main conference	Tutorial	2002
20020028	SHARPENING THE AXE FOR TEST DRIVEN DEVELOPMENT	Summary\nAbraham Lincoln is famously (mis-) quoted:\n"If you showed me a big tree and an axe and\ngave me eight hours, I’d spend the first 6 hours sharpening the axe.” Software shops all over the world are now\npracticing XP, and specifically Test Driven Development. The tutorial below sets out to accomplish\nthree goals: 1) Offer information on known axe-sharpening efforts in XP-Land. \n2) Provide a demonstration of a small set of hand-rolled tools for TDD\nin real-world projects. 3) Advocate the\nkind of deep laziness that gives making and refining tools its proper value in\nthe framework of XP.\n\nDuration and Target Audience\nThis is a half-day tutorial whose target is intermediate or\nadvanced programmers who feel they are not getting maximum value from the TDD\napproach. Anyone who is trying TDD\nis welcome. Anyone who has understood\nthe urgency of adopting TDD but who is still using crude and ineffectual\ntools should benefit. The presenters particularly welcome new\nadopters and those working with or leading them.\n\n\nOutline\nNote: The tutorial will be handled in true XP style. What follows is a\nrelease plan, and as the class develops, it will surely flex to meet the\nattendees' needs. The real point of the tutorial is to provide a focused topic\nand bring TDD adopters face to face with an experienced practitioner for our\nmutual entertainment and edification. The presentation includes working programs, sample code, and a variety\nof tips, tricks, and techniques.\nThere are Axes and Axes:  It’s Better Than Using A Plastic Knife\n\nThe xUnit Family\n What a Dull xUnit Does, and How\n   The Three Pieces of All xUnits\n   A One-Day xUnit for Language X\nWhat a Sharp xUnit Does, and How\nA Very Sharp xUnit\nIntegrated xUnit\nDeep Laziness:  Preparing And Refining A Good Axe\nIntroducing Tool Smells\n   Learning Not To Type\nCreating Inaccesible Engines\nMaking Your Tool Yours\nBuy, Borrow, or Build?\nxAT, xVersion, xGUI, xProcess:  Attacking The Rest Of The Forest\nWhat xUnit Doesn’t (and Shouldn’t?) Do\nCompleting the Integration\nAcceptance Testing Around the Clock\nTools for Writing Tests\nHard Questions\nOpen season on TDD and tools. The last hour of the tutorial will be focused on the questions and answers that the attendees offer. Real challenges from real applications are the order of the day. \n\nPresenter's Resume\nMichael Hill\n994 Shannon Farm Lane\nAfton, VA 22920\nhill@objectmentor.com\nMichael Hill has been testing first for three years, against a background of twenty+ years as an independent contractor. He is a senior mentor at Object Mentor, Inc., a job that has brought him into contact with literally dozens of differents projects and platforms. He is presently at work on a book on Test Driven Development.  For a more complete bio see Object Mentor - Michael Hill.	Main conference	Tutorial	2002
20020029	PAIR PROGRAMMING: EXPERIENCE THE DIFFERENCE	Tutorial Summary\nAbstract: Pair programming is emerging as an important technique for developing higher quality\ncode, faster. With pair programming, two software developers work on one computer,\ncollaborating on the same design, algorithm, code, or test. This tutorial examines pair\nprogramming research results and anecdotal experiences of programmers who have\ntransitioned to pair programming. It will discuss what works and what doesn’t and will also\nexplain techniques for fostering support in making a transition to pair programming – support\nfrom management and support from peers. Hands-on activities will be used to demonstrate pair\nprogramming benefits.\nObjective: Participants will experience the difference between working alone and working in\npairs. They will understand the research results that show pair programming works, learn how\nto pair program, what not to do when pairing, and how to transition to pair programming.\nLevel:: Beginner\nAttendee Background: This tutorial is targeted toward software developers and technical\nsoftware development managers who are interested in transitioning to pair programming.\nPresentation Formal: About half of the tutorial time will be presentation based. The remaining\ntime will be spent on activities and discussion.\n\nPresenter Resumes:\nDr. Laurie Williams is an assistant professor at North Carolina State University. In 2000, she\ncompleted her dissertation which demonstrated statistically that pair programmers were able to\nproduce higher quality produces in essentially half the time when compared to individual\nprogrammers. Prior to her recent academic career, Laurie worked at IBM for nine years.\nDr. Robert Kessler is a full professor at the University of Utah. He has a BS, MS and PhD in\nComputer Science from the University of Utah. He has founded several companies and is on\nthe board of several others.\nDr. Williams and Dr. Robert Kessler are currently collaborating on a book entitled Pair\nProgramming Illuminated, to be published by Addison-Wesley in July 2002.\nRepeat: Yes\n\nContent Outline for Half-Day Tutorial (3 Contact Hours):\nI. Welcome and Tutorial Objectives (5 min.)\nII. Activity I: Individual design (25 min.)\nIII. Research Results in Pair Programming Presentation (30 min.)\nIV. Activity II: Individuals working on a team (25 min.)\nV. BREAK – 20 minutes\nVI. Adoption of Pair Programming Presentation (20 min.)\nVII. Activity III: Pairs rotating around a team (25 min.)\nVIII. Pair Programming Implementation Items Presentation (20 min.)\nIX. Summary and Conclusion (10 min.)\nTutorial Resume:\nThis tutorial was given at OOPSLA in October 2001 and at the NASA Software Engineering\nWorkshop in November 2001.\n\nTutorial Notes:\nTutorial participants are divided into teams of four. The three exercises proceed as follows:\nActivity One:\n1. A problem statement for a design is provided.\n2. Each participant individually produces a working design.\n3. Teams convene and review each of the designs, enumerating the features that are\ncommon among the designs and those that are unique.\n4. All tutorial participants discuss:\na. Observation – When engineers work individually on a design, there will be some\nsimilarities among the designs. However, each engineer will typically incorporate\na larger number of unique features.\nb. What conclusions can be drawn from this experience?\nActivity Two:\n1. A problem statement for the design of a device is provided.\n2. Each participant is given a role in the design of one module of the device. Each\nparticipant must complete his or her assignment without collaborating with the team.\n3. Each participant must then draw his or her current view of the team’s device without\ncollaborating with the team.\n4. Participants integrate their designs into one team device.\n5. All tutorial participants discuss:\n   a. How far away their initial knowledge of the entire device was from the integrated\nteam drawing (step 3 vs. step 4).\n   b. How the pieces they designed individually did not really fit together into a\nmeaningful device.\nActivity Three:\n1. A problem statement for the design of a device that is enhanced from the previous\ndevice is provided.\n2. Each participant is given a role in the design of the device. This participant is given\nultimate authority over this aspect of the system in the upcoming collaboration.\n3. Each participant is assigned a partner to work with. Together the pair work on the two\nthings they were assigned.\n4. Partners rotate so that each person is paired with a team member they did not work with\nyet. Together the pair work on the two things they were assigned.\n5. Partners rotate again so that each person is paired with the last team member they did\nnot work with yet. Together the pair work on the two things they were assigned.\n6. Each participant must then draw his or her current view of the team’s device without\ncollaborating with the team.\n7. Participants integrate their designs into one team device.\n8. All tutorial participants discuss:\n   a. How much they now knew about the overall team design before integration.\n   b. How the pieces they designed in pairs generally fit together into a meaningful\ntransportation device.\nNote: The same amount of time is allotted for each activity. With each successive activity,\nmore time is spent on initial designing and less integration time is necessary.	Main conference	Tutorial	2002
20020030	HOW TO START AN XP PROJECT: THE INITIAL PHASE	Abstract\nWithin Extreme Programming, the initial phase of a project is the exploration phase. This phase should establish\na common view of the system to be built and provide the base for what XP calls “productionizing” – the full-fledged\nXP development iterations. Therefore this phase is of crucial importance to the whole project. While\nthere is a lot of documented experience with the XP process itself, little has been said about the initial phase.\nThis tutorial presents a number of best practices and experiences to structure and master the exploration phase.\nThey will guide the team from the kick-off meeting to the first implementation of the system skeleton. The\ntechniques presented have been adapted to XP from experience gained in twelve years of consulting in\nprofessional object-oriented development projects. They have been successfully applied in numerous XP\nprojects, ranging from high-pressure short-term to large-scale long-term, from finance to the health domain, and\nfrom greenfield development to legacy system replacement.\n\nTutorial Objective\nAfter the tutorial the participants will have a clearer idea of which concepts are helpful and which pitfalls should\nbe avoided in starting an XP project. They will be equipped with a number of practice-proven techniques for\ngaining first insights into the problem domain and finding a system metaphor. They will have learned to use\nspike solutions and prototypes effectively. Finally, they will have a better idea when to end the exploration phase\nand to move on to the well-described XP development iterations.\n\nLevel: Intermediate\n\nAttendee Background\nThe tutorial is targeted at (potential) XP project managers and experienced developers interested in the extreme\nprogramming process. It is assumed that the audience has some familiarity with the basic concepts of extreme\nprogramming or similar agile processes. The typical attendee is thinking about starting an XP project or has\nalready faced the challenges of the exploration phase.\n\n\nPresentation Format: Lecture with slides, discussion\n\nDuration: Half Day\n\nSupporting Material: Handouts containing the slides\n\nPresenters\nHolger Breitling is a research assistant at the University of Hamburg and a professional software architect and\nconsultant at APCON Workplace Solutions. He is a senior architect of the JWAM framework, which is\ndeveloped applying most of the XP techniques. He has several years’ experience with extreme programming\ntechniques working on several projects and is currently acting as a project coach and trainer in this domain.\nbreitling@jwam.org\nMartin Lippert is a research assistant at the University of Hamburg and a professional software architect and\nconsultant at APCON Workplace Solutions. He has several years’ experience with XP techniques and XP project\ncoaching for various domains and has given a number of talks, tutorials and demonstrations (e.g. ICSE, XP,\nOOPSLA, HICSS, ICSTest), especially XP tutorials at ECOOP 2001 + 2002, OOP 2002 and ICSTest 2002. He\nis a member of the XP 2002 program committee. Among his publications are articles for “Extreme Programming\nExamined” and “Extreme Programming Perspectives” and he authored the book “Extreme Programming in\nAction”, which is due to be published by Wiley in July 2002.\nlippert@jwam.org	Main conference	Tutorial	2002
20020031	EFFECTIVE JAVA TESTING STRATEGIES	Summary\nThis tutorial will address common problems and introduce several mechanisms that will increase the effectiveness and speed of writing Java unit tests.  In this tutorial, attendees will learn (a) how to effectively use the JUnit testing framework, (b) several patterns and practices of implementing mock behavior in Java and (c) techniques for identifying and structuring unit tests that are effective, communicate clearly what is being tested and are easy to understand and change by other members of a software team.\n\nDuration, Aims and Audience\nThis is a half-day tutorial that aims to introduce attendees to writing effective Java unit tests and thereby increasing the speed at which they develop software in a test-first environment like XP.  \nTutorial Content Outline\n\nIntroduction to Junit\nWhat is JUnit?\nA simple Junit example.\nJunit Assertions\nCreating TestSuites in Junit\nAssembling Dynamic TestSuites\nWhat do we test?\nUnit Tests vs. Functional Tests\nTest-first vs. Code-first development\nDesigning By Contract and Unit Tests\nUsing pre/post conditions to guide test case creation\nStaying focused and fast with Mock Objects\nMock objects\nStub implementations\nClass Isolation With Mocks\nMocking to Reduce Pain.\nEffective Mock Object implementation patterns\nSimple mocks\nData mocks\nMocks with memory\nMock Factory pattern\nOverriding Mock Method pattern \nProper use of setUp() and tearDown() for Mock object initialization\nMocking Java API’s\nMocking a Socket\nImpossible Mock Situations\nAbstracting Around Impossible Mock Situations\nUsing Semaphores to coordinate threads and their tests.\nFine Tuning Your Testing\nCommon test case refactorings\nSubstitutability Abstract Test Cases\nAchieving High Code Coverage\nIntroduction and Background of the Tutorial and support materials\nThe tutorial content and materials are based upon Java development workshops that I have been running and guidance that I have been providing as an XP consultant on in-house and outsourced projects over the last 3 years.  The final tutorial materials will be slides taken from our workshops and modified as necessary to meet the needs of this 3 hour tutorial.\n\nInstructor Short Bio/Resume\nMr. Goodsen is the President and founder of RADSoft, a software engineering consulting firm specializing in rapid software development techniques since 1996.  He has worked on a variety of large-scale software projects over the last fifteen years, the most notable projects highlighted below:\nGlobal Positioning Systems, Rockwell International , 1986-1989.  User Equipment software engineer, responsible for design and development of GPS software in the early stages as the GPS satellite constellation was still being deployed.\nSoftware Research Engineer, Rockwell International, 1989-1991.   Representative to consortiums, including the Software Engineering Institute (SEI) and Software Productivity Consortium (SPC).  Primary role was integrate new research in incremental software process and testing/verification back into Rockwell projects, primarily commercial avionics software deployed on Boeing commercial aircraft.\nObject-Oriented Design Instructor, EVB Software Engineering 1991-1993.   Developed software and courses and taught OOD courses for EVB Software Engineering, founded by Edward V. Berard, now with The Object Agency.\nSoftware Consultant, The Dalmatian Group, 1993-1995.   Consulted with many clients to help them adopt a rapid software delivery process, primarily focused in the area of user-centered design and object-oriented graphical user interfaces.  Clients included Mitchell International, The Legent Corporation, J.P. Morgan (Wall St.), Motorola Cellular and Motorola Space Systems Division (IRIDIUM).\nRADSoft, 1996-present.  Founder and President. \nIncremental Software Process and Architecture consulting for large scale software projects, including IRIDIUM ground control systems and Capital One Billing Products.\nIn the last 3 years, we have adopted Java and XP exclusively as our development language and process.  I have brought together teams that have used Java and XP successfully in both outsourced software projects and in-house projects.  We have consulted with several XP projects and developed 2 systems in their entirety using XP with teams of 5-10 developers.  This experience in building teams from scratch, teaching them the practices of XP and the skills of test-first coding, OOD and Refactoring within an XP process has provided a wealth of experience that we would like to share with the rest of the software community.\nWe can provide excellent references on these projects upon request.\nEducation\nB.S. Computer Science and B.S. Applied Mathematics, University of Idaho, 1986.\nA.S. Computer Science, North Idaho College, 1983.\nContact Information\nJohn Goodsen, President and Principal Consultant of RADSoft.\nEmail: jgoodsen@radsoft.com / Office: 208-665-0516	Main conference	Tutorial	2002
20020032	TEST DRIVE FOR TESTERS: WHAT, WHEN, AND HOW TESTERS DO FOR XP TEAMS	Summary\nThis tutorial shows testers, or anyone wearing the tester hat on an XP team, how testers contribute to the project, including what testers should do, when they should do it, and how they should do it.   You’ll do exercises that show you how to either work on an XP team as a tester yourself, or work productively with a tester on your team.\n\nAudience\nXP newbies and veterans, testers, programmers, coaches, customers, analysts and managers.  Anyone who might be expected to help with some aspect of acceptance testing on an XP team, and anyone who wants to help their XP team maintain a focus on quality.\n\nDuration: Half-day\n\nDescription\nWe’ll take a trip through an iteration of an XP project step by step and show what goals to reach for, which activities to engage in, and some helpful techniques for testers to use.  The exercises are built around an XP project to develop a simple web-based tracking application.  \n\nTutorial Outline\nWhat testers do during release planning and story writing:\nHow to identify hidden, questionable and incorrect assumptions\nHow to define acceptance tests to make assumptions explicit\nHow to accurately estimate time for acceptance test tasks\nHow to enable accurate story estimates\nHow to ask questions to identify potential problems \nWhat testers do during iteration planning\nHow to help team think of all tasks needed to complete a story, including those relating to infrastructure, packaging, environment, functional and acceptance testing\nHow to promote understanding between the customers and the development team\nHow to break out and accurately estimate tasks related to acceptance testing\nWhat testers do during the actual iteration\nHow your team can define detailed, but not too detailed, and effective acceptance tests, accounting for unusual and external events as appropriate\nHow to document tests so they are easily understood and changed by the customer\nHow to design and code effective and maintainable automated tests \n\n\nPresenter's Resume\n\nLisa Crispin has worked as a tester on Extreme Programming teams for a one and a half years.  Her article “Extreme Rules of the Road:  How an XP Tester can Steer a Project Toward Success” appeared in the July 2000 issue of STQE Magazine.  Her presentation “The Need for Speed:  Automating Acceptance Tests in an Extreme Programming Environment” won Best Presentation at Quality Week Europe in 2000.  Her papers “Testing in the Fast Lane:  Acceptance Test Automation in an Extreme Programming Environment” and “Is Quality Negotiable?” will be published in a collection called Extreme Programming Perspectives from Addison-Wesley.  She is co-writing a book Testing for Extreme Programming which will be published by Addison-Wesley in October 2002.  Her presentations and seminars on testing for Extreme Programming in 2001 included “XP Days” in Zurich, Switzerland, XP Universe in Raleigh, and STAR West; in 2002, the Software Test Automation Conference in San Jose and the Rocky Mountain Software Symposium in Denver.  Lisa can be contacted at lisa.crispin@att.net\n\nTip House is Chief Systems Analyst at the OCLC Online Computer Library\nCenter Inc., a non-profit organization dedicated to furthering access to\nworld's information, where he develops and supports test automation tools\nand document management systems for the Web. His main interest is software\ndevelopment, also includes a long-standing focus on software testing,\nsoftware measurement, and quality assurance. He has published numerous\npapers on these subject at development, measurement and testing conferences,\nincluding XP2001 in Sardinia, Italy. He co-author of the book Testing for\nExtreme Programming which will be published by Addison-Wesley in October\n2002, and his articles appear online in the April issue of Cepis Upgrade\nhttp://www.upgrade-cepis.org and at http://xptester.org. Tip has Certified\nQuality Analyst, Certified Software Quality Engineer, and Lead Ticket\nAuditor certifications, and managed the independent test function at OCLC\nduring their three year successful effort to become registered to the\nISO9000 standards. Tip can be reached at tip_house@oclc.org.\nSupporting Materials\n\nhttp://www.xptester.org has materials relating to the subject of this tutorial.  Our chapter from Extreme Programming Perspectives gives an overview of the test framework that we use; it’s available at http://www.xptester.org:4006/_ZABLE[0]_/tab/7/fastlaneSgl.doc.  \nLisa’s article for STQE Magazine and other related papers are available at http://groups.yahoo.com/group/agile-testing/files/.	Main conference	Tutorial	2002
20020033	SCALING AGILE PROCESSES: AGILE SOFTWARE DEVELOPMENT IN LARGE PROJECTS	Abstract\nOne saying is that, if you have a hundred people on a\ndevelopment team, get rid of at least eighty of them and\nkeep the top twenty (or less). As a result the chances for\nproject success will raise significantly. But maybe you\ndon’t have even twenty top ones and/or the company just\nhave these hundred people sitting around.\nIt seems like the only places where large projects with huge\nteams seem to really work are projects where everything is\nformalized, the requirements are fixed and, most\nimportantly, they don't change over time. A detailed plan\ncan be set up and every successive action will stupidly\nfollow the plan. Example are defense projects or projects\nwith a similar structure, such as in airlines or nuclear power\nplants.\nWe as software-engineers tend to question software\nengineering in the large not only because most of the agile\nprocesses claim to work only for small teams, also because\nmost of the failed projects are really large ones. (Well,\nmaybe nobody talks about failed small projects.) However,\nthere are more than enough projects that are large in some\nsense. So, the question arises, how to use aspects of agile\nsoftware development in large projects.\nWe don’t want to focus on every aspect of agile processes,\nbut on those who we encountered to be mainly different in\nlarge projects. The differences might be that some things\nhave to be implemented differently, because at a specific\nsize of the project things don’t work out the normal way\nanymore. Other differences are based on problems, which\npop up especially in large teams, or rather which won’t be\nproblems at all in small teams.\nThis tutorial is based on our experience coordinating – so\nfar successfully – a large (currently 160 people) project.\nAlthough we are still in the process of learning we would\nlike to share our experiences about how agile processes can\nserve large projects. And besides – chances are high, that at\nthe time XP Agile Universe 2002 is held, we have made\neven more valuable experiences.\n\nDuration, aims and audience\n\nDuration: Half-day tutorial\n\nAims:\n- Ideas on how to overcome the obstacles of agile\nsoftware development in the large\n- Know what the biggest problems of agile software\ndevelopment in the large are\n- Know how agile software development in the\nlarge could possibly work\nAudience\n- Those who tried to use agile methodologies in\nlarge projects and failed.\n- Those who tried to use agile methodologies in\nlarge projects and succeeded.\n- Those who didn’t try agile methodologies in large\nprojects but would like to do so.\n- Proponents of the linear (waterfall-) model who\nthink agile processes suck anyway\n- Proponents of agile processes who think an agile\nprocess would never work in the large\nProcess\n\nWe want to share our experiences as well as hear from the\naudience’s experience and questions. Probably we will use\ninteractive elements to work out patterns of agile\nprocessing in the large.\n\n\nContent outline\nLarge Projects and their environment\nLarge companies often run large projects. The organization\nof the companies forces the project to be run in a specific\nway. Often problems arise because of that. Some of the\norganizational departments have been introduced for non-agile\nprojects, which means they are for example not\nservice oriented, or human centered. They were invented\nfor controlling a project and supporting the organizational\nhierarchy.Theywerenot invented for supporting the needs\nof the different projects, so they don’t regard the projects as\ntheir customers.\nThis has different effects – often a project tries to ignore\nthose departments as good as possible. If this is not\npossible at all the project and the organizational\ndepartments fight against another, which costs of course a\nlot of time, energy and therefore money.\nThe only way out is to ask those other departments to come\non board of the project. – If you can’t fight your enemy you\nbetter work with them. – But beware; that it will take a\nwhile till the different teams will really work together.\nTypical organizational departments that don’t consider\nthemselves as a service to a project are: Project Planning\nand Controlling, Quality Assurance, Revision and the like.\nThe main difference with agile projects is here, that those\ndepartments are involved in the process from the very first\ntime.\nGetting Started\nWhat’s the best way to start an agile project with a large\nteam and what to start with?\nNot every change benefits from being introduced smoothly.\nSometimes it’s even better to change something so\nradically (shock-effect) that the real change you want to\nmake doesn’t seem so strange anymore compared to the\nexaggerated change.\nEspecially for large project continuous feedback is\nessential. For example cycles for iterations and releases\nhave to be much shorter than with smaller teams. The\nproblem is: If this tanker runs in the wrong direction, it is\nalmost impossible to change the course after a while.\nSo according to our experience the most important thing is\nto focus on all kinds of quick feedback: Organization,\nEnvironment, Running Software, Happiness of members of\nthe team, etc. This doesn’t sound too different from any\nother agile project, but establishing short feedback cycles is\nmuch more difficult that with small teams. But once this is\nestablished all other changes will follow more naturally\nCommunication\nInner team- and communication among teams have to be\nestablished.\nDifferent communication channels have to be ensured. It\nseems that as soon as one communication channel is\nestablished, it doesn’t work anymore. The main reason is\nthat a working communication channel is often overused\nwhich results in ignoring the channels. This means\nchannels have to be changed often over time.\nEvery person obtains information differently, using\ndifferent sensory modalities. Some people, the visuals,\nlearn most effective by watching; the auditories, by\nlistening and the kinesthetics, through action. Therefore,\nprovide different approaches to communicate. Accept\ndifferent communication media by addressing various\nsensory modalities.\nCustomer involvement\nThere hardly exists a single customer. Most often if the\nproject is really large, the amount of customers is in\nrelation to the size of the project.\nOften there are several customers, who are either invisible,\nlike for standard software, or it is a community of\ncustomers who have a similar – but not the same – interest\nin the project. Even worse the community of customers, is\noften competitive among themselves. This means it is hard\nto get them on-site, because there is no accepted\nrepresentative of the group and to speak with one voice. Of\ncourse the project can’t solve their competition problems,\nbut it can ask for regular feedback, which could of course\nsometimes be contradictory.\nThe best is to establish a substitute for the customer, which\nare domain experts and ideally have a history at the real\ncustomer-site.\n\nDifficulties in Planning\nEspecially for large projects it’s unusual to plan a projects\ntowards results. Typically the plan focuses on milestones,\nwhich do not reflect the highest priorities, biggest business\nvalue and the like. It’s often hard if not impossible to\nreplace such planning with elements such as planning\ngames or time boxes. However, it might be possible to\nintegrate both forms of planning.\n\nIntegration\nMost agile Processes require continuous integration with\ndaily (nightly) builds. This is often difficult with large\nteams because of several reasons.\n\nAbout the Author\nJutta Eckstein is an independent consultant and trainer from Munich,\nGermany. Her experience in agile processes is based on\nover ten years experience in developing object-oriented\napplications. Besides engineering software she has been\ndesigning and teaching OT courses in industry. Having\ncompleted a course of teacher training and led many 'train\nthe trainer' programs in industry, she focuses also on\ntechniques, which help teach OT, and is a main lead in the\npedagogical patterns project. She has presented work in her\nmain areas at OOPSLA, OT and EuroPLoP.\nShe is a member of the board of Hillside Europe e.V., the\nassociation to advance expert knowledge (in the shape of\npatterns) about practice-proven techniques for analysis,\narchitecture and programming of software systems as well\nas for the formation of organizational and team structures\nfor software development.\nShe is furthermore a member of the program committee of\nXP 2002, XP- and Agile Universe 2002, EuroPLoP 2002,\nOT2002 and OOPSLA 2002.\n\n\nSupporting Material\nThis tutorial is based on two main sources: One is the\nproject the author is working on at the moment. The other\nsource is a goldfish bowl the author runs together with\nsome other co-authors at OT 2002 (see www.ot2002.org).\nThe title of the goldfish bowl is: (Agile) Software-Engineering\nin the large - does it work at all?\n\n\nREFERENCES\n\n[1] Adaptive Software Development. Website\nhttp://www.adaptivesd.com\n[2] Agile Prozesse. Website. http://www.agilealliance.org.\n[3] Kent Beck. "Extreme Programming Explained –\nEmbrace Change". Addison-Wesley, Reading, Mass.,\n2000\n[4] Kent Beck, Martin Fowler. "Planning Extreme\nProgramming". Addison-Wesley, Reading, Mass.,\n2001\n[5] Crystal Clear. Website.\nhttp://www.crystalmethodologies.com Author: Alistair\nCockburn\n[6] Alistair Cockburn. "Surviving Object-Oriented\nProjects". Addison-Wesley 2001.\n[7] Alistair Cockburn. "Agile Software Development".\nAddison Wesley, 2001.\n[8] Extreme Programming. Website:\nhttp://c2.com/cgi/wiki?ExtremeProgrammingRoadmap\n[9] Peter DeGrace, Leslie Hulet Stahl. "Wicked Problems,\nRighteous Solutions – A Catalogue of Modern\nSoftware Engineering Paradigms". Prentice Hall,\nEaglewood Cliffs, New Jersey, 1990.\n[10] James A. Highsmith III. "Adaptive Software\nDevelopment – A Collaborative Approach to\nManaging Complex Systems". Dorset House, New\nYork, 2000.\n[11] Norman L. Kerth. "Project Retrospectives". Dorset\nHouse, New York, 2000.	Main conference	Tutorial	2002
20020034	APPLYING XP TOOLS TO J2EE FOR THE EXTREME PROGRAMMING UNIVERSE	Abstract Summary\nApplying XP Tools to J2EE for Extreme Programming is a half day technical tutorial that focuses\non using Open Source Software tools to apply XP to Enterprise Java development, specifically for\ntesting web components. This session will mainly encompass automating the build & integration\nprocess and automating the testing process.\nEssentially this tutorial is a cookbook on how to implement XP methodology in an Enterprise Java\nshop. XP is the methodology, i.e., the philosophy. Ant, JUnit, etc., that helps developers realize\nthe XP philosophy in a J2EE environment.\nXP is comprised of much more than testing, integration & build tools, but testing and integration\ntools are one way that XP materializes in the development process. This tutorial covers the day-to-\nday application of XP tools - not the full XP process and methodology. Specifically, this\nsession will cover testing web components with JUnit, Cactus, JUnitPerf, HttpUnit, Ant, and\nJMeter.\nAims and Intended Audience\nMany books and papers on XP are focused on theory and methodology. Fewer publications,\nhowever, focus on practical application in a Java Enterprise Environment. XP is extremely\npopular! However, many development shops fail in instantiating the abstract concepts of XP in\ntheir Java development process. This tutorial is geared to address the gap between XP theory\nand real world application for automated testing and continuous integration in a J2EE\ndevelopment shop.\nThis educational session is geared for developers using J2EE and XP. This includes developers\nwho want ways to perform some level of testing and automated builds, as well as developers\nthat use testing as a central role in their development due to the XP.\nApplying XP Tools to J2EE for Extreme Programming Universe has been designed for designed\nfor an audience experienced in Java, as well as XP programmers who want to ease the\ndevelopment of Java web applications. These developers would be enterprise Web application\nspecialists with a grasp of Enterprise Java (J2EE) technologies: EJB, JDBC, JSP and Servlets.\nHowever, they would not have to be J2EE experts.\nAbout the Presenter\nRick Hightower, CTO of Triveratech, has over a decade of experience as a software\ndeveloper. In the past, he has helped development teams adopt new processes like Extreme\nProgramming, and technology adoption like J2EE.\nRick's publications include Java Tools for eXtreme Programming, which covers deploying and\ntesting J2EE projects (published by John Wiley, 2002); contributions to Java Distributed\nObjects (published by Sams); and several articles in Java Developer's Journal. Rick also\nwrote a three part tutorial series on EJB CMP/CMR for IBM developerWorks (published in\nMarch 2002).\nCurrently, Rick is involved in course development, mentoring, consulting and training on\nJava, J2EE, Web Services and XP projects. In his spare time, he does J2EE development.\nRcik’s detailed resume is attached.\nRick can be reached at 520-290-6855 or at RHightower@triveratech.com.\nOutline\nEach major concept will have supporting sample code. Code samples provided upon request.\n Introduction\n Complexities with J2EE development\n   The JAR file\n     Jar Files and Applets\n     Executable Jar Files\n     Web Applications and WAR Files\n   Enterprise Beans and EJB Jar Files\n   Enterprise Applications and EAR Files\n Continuous integration with Ant\n   Ant Basics\n   Projects, Targets and Tasks\n   Working with Properties\n   Path and Filesets\n   Conditional Targets\n   Using Filters\n   Nested Builds\n   Unit Testing with JUnit\n   Writing a test case\n   Integrating JUnit with Ant\n   In container testing with Cactus and HttpUnit\n   In container testing\n   Cactus Architecture\n     Testing Tags\n     Testing code for use with JSP\n     HttpUnit\n   Combining HttpUnit with Cactus\n   Load Testing with JUnitPerf and JMeter\n   JUnitPerf Concepts\n   Timed Test\n   Load Test\n   JMeter Concepts\n   Combining JMeter, JUnitPerf and more\n   Using performance monitoring tool to find problems (e.g., JProbe)	Main conference	Tutorial	2002
20020035	XP FOR A DAY	Summary\nAttendees will practice XP for a day. Students will experience the XP development cycle\nand many of the practices in the context of an XP iteration plan and two development\niterations. \nStudents will: \n* Form XP development teams\n* Participate in an iteration plan\n* Accept new stories\n* Identify development tasks\n* Sign up for tasks\n* Experience Pair Programming\n* Program stories using test first design\n* Write and Run automated acceptance tests\nDiscussions occur through out the day to reflect on experiences and lessons learned.\nPrerequisites:\nFamiliar with XP concepts\nJava programming experience\nStudents download and perform XP for a Day preparation exercises.	Main conference	Tutorial	2002
20020036	REFACTORING: IMPROVING THE DESIGN OF EXISTING CODE	Summary\nAlmost every expert in Object-Oriented Development stresses the importance of iterative development. As you proceed with the iterative development, you need to add function to the existing code base. If you are really lucky that code base is structured just right to support the new function while still preserving its design integrity. Of course most of the time we are not lucky, the code does not quite fit what we want to do. You could just add the function on top of the code base. But soon this leads to applying patch upon patch making your system more complex than it needs to be. This complexity leads to bugs, and cripples your productivity. \nRefactoring is all about how you can avoid these problems by modifying your code in a controlled manner. Done well you can make far-reaching changes to an existing system quickly, and without introducing new bugs. You can even take a procedural body of code and refactor it into an effective object-oriented design. With refactoring as part of your development process you can keep your design clean, make it hard for bugs to breed and keeping your productivity high. \nIn this tutorial we'll show you an example of how a lump of poorly designed code can be put into good shape. In the process we'll see how refactoring works, demonstrate a handful of example refactorings, and discuss the key things you need to do to succeed.\n\nDuration: Half Day\n\nLevel: Intermediate\n\nPresenter's Resume\nMartin Fowler is the Chief Scientist for ThoughtWorks, Inc., a leading custom e-business application and platform development firm. For a decade he was an independent consultant pioneering the use of objects in developing business information systems. He’s worked with technologies including Smalltalk, C++, object and relational databases, and EJB with domains including leasing, payroll, derivatives trading and healthcare. He is particularly known for his work in patterns, the UML, lightweight methodologies, and refactoring. He has written four books: Analysis Patterns, Refactoring, the award winning UML Distilled, and Planning Extreme Programming. \nMartin has been giving this tutorial in various forms since around 1997. It has been presented at a wide range of commercial and academic conferences including OOPSLA (where it was one of the top 5 tutorials in 1999), Software Development,  and JavaOne.\nThe tutorial is based on the early chapters of Martin’s book “Refactoring: improving the design of exisiting code”. The tutorial is either presented by Martin alone or in collaboration with Josh Mackenzie.\nContact information\nMartin Fowler\nThoughtWorks, Inc.\n651 W. Washington Blvd.\nSuite 600\nChicago, IL  60661\nT: 312.373.8564\nF: 312.373.9564\nfowler@acm.org	Main conference	Tutorial	2002
20020037	THE AGILE DATABASE	Summary\nDoes your development team’s database strategy suck? Does your team even have a database strategy, or is this vital portion of your enterprise application - the repository of the data upon which your entire application rests - in the hands of some guy who sits on another floor or two buildings down the street? Is he even a member of your team?\nThe tutorial’s presenters do not have their sights trained on your database administrator, but they do intend to lay waste to the inefficiency and backward thinking inherent in the database-related practices of most development teams.\nThe tutorial will present a proven plan for adding agility to the database (starting with making the DBA a true member of the team). Participants will be shown how the application database can be structured to provide each team member with control of their own data space (similar to individual application instances). The presenters will explain, in detail, how processes and tools can be used to make the database more manageable and open to refactoring. Finally, the presenters will address the issue of applications that are already in production, and detail how the above topics still can apply to production environments.\n\nObjective\nAttendees will receive both (1) a thorough introduction to the concepts behind an agile database strategy, and (2) implementation-specific details that will allow them to introduce these concepts onto a development team.\n \nAttendee Background\nDevelopers, DBAs and project managers are encouraged to attend. Experience on a development team of eight or people is strongly recommended. Experience with an agile development methodology is recommended, but not required. A general understanding of relational databases and/or SQL is, similarly, recommended but not required.\n \nExperience Level: Intermediate\n \nPresentation Format: Lecture with slides\n\nDuration: Half Day\n\nOutline\n\nThe Development DBA\nManaging the Database: What Makes It So Complicated?\nThe Database Instance\nThe File System Metaphor\nThe Strategy\nThe Bifurcated Database\nThe Lineage of Instances\nThe Master Instance\nThe Update Log\nThe Update List\nImplementation\nThe Rules\nWho Gets to Play DBA\nTools and Automation\nTips and Tricks\nKnown Pitfalls\nLimitations\nAgile Database Development in a Production Environment\nPresenters\nPramod Sadalage, ThoughtWorks, Inc.\npramod@thoughtworks.com\n(312) 373-8555\nPramod Sadalage works as a Data Architect and Lead DBA at ThoughtWorks, Inc, a leading custom e-business application and platform development firm. At present, he is working on a large J2EE application, which uses XP, an agile methodology, may not have been sufficiently discussed in the context of databases.\nWhile on this project, Pramod pioneered the practices and processes of Agility in the database. He has worked with a variety of Relational Databases including Oracle, MS SQL, Informix, and Sybase. Pramod has more than eight years of experience with domains including financial, leasing, material management, and insurance. \nPeter Schuh, Independent Consultant\nagile@peterschuh.com\n(312) 373-8433\nPeter Schuh is an independent consultant, specializing in system analysis and project management. He has more than five years experience participating in and managing projects in the leasing, health care and e-commerce fields. Peter has written and spoken about Extreme Programming, the adoption of agile processes, agile development's impacts upon database administration, and the ObjectMother pattern.	Main conference	Tutorial	2002
20020038	CHANGE WIZARDRY: TOOLS FOR GEEKS	Duration: Half-Day (3 hours)\nAudience: Agile/XP folks who are trying to make change happen\nAbstract:\nHave you noticed that it can be difficult to get your colleagues and/or your\norganization to adopt agile methodologies? "What's wrong with our current process?"\n"We don't have time for change." "I’ll never pair-program." "It's not in the budget."\n"We've never done that before."\nUnderstanding the organizational dynamics of change is critical to influencing the\nchangeover from traditional software development to XP or other agile\nmethodologies. This tutorial will introduce you to four change tools, which the\npresenters have found helped people and organizations actually effect a change.\nIn this tutorial you’ll apprentice as a change wizard, learning about:\n· Change Readiness Assessments\nConjuring up the right assessment tool will help you determine answers to\ncritical questions like: "Is there a chance for change?" “Do pockets of\nreadiness exist in my organization?” "What would need to be different around\nhere for change to occur?" Will the path to change in my organization be a\nmulti-step process or one transformational leap?"\n· Project Retrospectives\nCast the spell of learning. Change cannot happen without learning and\nretrospectives help organizations learn. The examination of past performance\ndata, which happens during a retrospective, yields a climate that fosters\nreadiness for change.\n· Paradoxes\nAmaze and astound your colleagues with paradox voodoo. Agile\nMethodologies are filled with paradoxes, contradictory conditions that must be\nresolved for effective and harmonious development. Once you tap in to the\npower of personal and team paradoxes you are better equipped to understand\nand work with resistance to change.\n· Chartering\nLearn a little piece of magic called a Charter and you'll know how to make a\ncommitment to change actually stick. A charter is a reference point or shared\nagreement between team players that provides direction during the course of\na project.\nJoin us and learn to do your own change magic.\nOutline:\n\nIntroductions\n Presenters\n Topic Overview\n Participants \n Understanding Change Dynamics – The Trances of the Status Quo\n Change Models\n Change Formula\n Practice experiencing and influencing change – interactive activities\n How does this relate to software development?\n Change Readiness Assessments – Divining the Source\n Examples and Anecdotes\n Interpreting the Assessment – experiential\n Project Retrospectives – The Spell of Learning\n End of Project Reviews and Norm Kerth\n The benefit of a retrospectives\n A mini-retrospective experience\n Paradox Voodoo\n Introducing paradoxes\n Finding where they live – interactive\n How to break the enchantment\n  Chartering – Change Wizardry That Sticks \n Chartering what and why\n Develop a charter – simulation\n What works?\n Wrap-Up\n Review - Earn your official apprentice wizard’s wand\n Resources for wizards\n Closing\n Presenters:\nJoshua Kerievsky is a software development coach and programmer. After\nprogramming on Wall Street for nearly 10 years, in 1995 he founded San Francisco\nBay Area-based Industrial Logic (http://industriallogic.com), a company that\nspecializes in Extreme Programming (XP). Since 1999, Joshua has been\nprogramming and coaching on small, large and distributed XP projects and teaching\nXP to people throughout the world. He regularly speaks about XP, has authored\nnumerous XP and patterns-based articles, simulations and games and is hard at\nwork on the forthcoming book, Refactoring to Patterns\n(http://industriallogic.com/xp/refactoring/).\nDiana Larsen, a senior consultant with FutureWorks Consulting LLC, works with\nleaders of high tech companies, engineering teams, and development groups to\nstrengthen their ability to manage organizational changes (e.g., a migration to\nXP/Agile methods) and capture the learning from their development experiences for\nfuture projects. Based in Portland, OR, she has over twelve years experience with\nsupporting effective interaction, planning, and review, as well as managing projects.\nClients work with Diana because of her experience and expertise, but also because of\nher candor and her willingness to explore uncharted territory and innovative\nsolutions. She is a co-sponsor of the upcoming Project Retrospectives Facilitators'\nGathering and a speaker at conferences.\n\nSupporting Material:\nDiana and Joshua’s experience with Change Wizardry is the supporting material. As\nalways, we plan on conducting a highly interactive session. We will be providing\nhand-outs, which are still under development.	Main conference	Tutorial	2002
20020039	BEYOND THE CUSTOMER: AGILE BUSINESS PRACTICES FOR XP	AbstractThe role of the Customer/Product Owner in an Agile project is challenging. While much has been written about the Customer practices that address the interface with the Developers, a vital area of the product development process lies beyond that boundary in the business and product management domains. \nCustomers are faced with many tough questions: Are the stories supporting the real business goals? Do the release plans address the needs of all of my users? How can I determine the value and priority of the stories? How can I turn high-level business and product strategies into stories and release plans? How can I make sure that I'm using my Developers' time to produce the most business value? \nIn this tutorial we will explore some specific Agile solutions that we've successfully applied to the business side of real-world projects in concert with XP. Through a combination of light lecture, hands-on exercises, and group discussions, tutorial participants will learn new techniques and practices to introduce and apply to their projects. \nIn this tutorial, we'll cover: \nApplying Agile values and principles to create a relatively simple set of business practices that start with defining the corporate business objectives, and follow through to setting strategic product initiatives and developing specific product feature sets.Practices for identifying and resolving the often-competing interests of multiple stakeholders and user constituencies to create a single, cohesive product plan.Techniques for turning product initiatives and features sets into appropriate stories and release plans, using lightweight essential use cases and breadth-and-depth breakdowns.Valuing stories based on tangible, testable business value, such as revenue or customer satisfaction, and applying that valuation to the release planning and story prioritization practices.Creating a seamless, traceable link from high-level strategic business objectives to Developer's individual tasks. Image being able to point to a Developer and say "she is writing code right now that supports our corporate revenue growth initiative by adding $10,000 in monthly revenue."Providing test-like metrics-based feedback to evaluate if release plans are fulfilling the product strategies and in turn the business objectives.\n\n\nAudienceThis tutorial is intended for team members who are interested in expanding the adoption of Agile practices to the entire product development process. Although no prerequisites are required, knowledge of the business, strategic product planning, and product management aspects of the overall development cycle may be helpful. Familiarity with Agile development processes such as XP or Scrum is recommended.\n\n\n\nContent Outline\nWhy Agile Business Practices?\nOur Experiences with XP/Agile Development Adoption\nWhat Do We Do When the Development Group Outperforms the Business?\nGetting the Entire Business to Spin at the Same Rate\nThe Scope of Product Development\nOverall Business Objectives – What is the business trying to accomplish?\nProduct Initiatives – What kind of product development supports business objectives?\nProduct Feature Sets – What does the product have to deliver to realize the initiatives?\nStories and Plans – How will we go about implementing the features?\nWhat Parts of This Scope Do XP and Agile Processes Cover?\nThe Core Values and Principles of Agility\nCollaboration, Rapid & Concrete Feedback, and Simplicity\nResponding to Change, Learning, and Empowered, Self-Motivated Teams\nWhat This All Means to the Business Side of Things\nTowards an Overall Agile Product Development Process\nAdding A Business Cycle Around XP’s Three Cycles\nThe Business Planning Cycle\nEstablishing the Cycle Charter through Business Stories\n    Generating Product Strategies from Business Stories\n    Generating Product Feature Plans from Product Strategies\n    Release Planning and Strategic Feedback\n    Strategic Investment and Resource Commitments\n    Implementing Releases\n    Business Retrospectives\nConcrete Feedback – Avoiding Guesswork and Pet Projects\nExamples of Business Stories and Product Strategies\nMeasuring with Metrics\nThis Is Business, Not Science – Keep It Simple\nTraceability in The Process\nWhy Bother? Competitive Advantages and Motivation\nDeveloper Episodes Trace Back to Tasks\nTasks Trace Back to Stories\nStories Trace Back to Features\nFeatures Trace Back to Product Strategies\nProduct Strategies Trace Back to Business Stories\nViola! “Jane is working to generate $10K in revenue in support of our quarterly target.”\nWhat To Do When There Isn’t One Customer?\nXP’s “Customer” Is Not Necessarily the End-User\nMultiple End-User Constituents\nMultiple Stakeholder Interests\nWorking with Multiple Stakeholders\nTeam Development of Product Strategies, Features, and Stories\nEstablishing a Customer Board\nEach Board Member Has Their Stories\nMapping and Merging Stories\nOrganizing Stories Based on Strategic Priorities\nEstablishing Normative Priorities\nA Single Customer/Product Owner Represents the Results\nGenerating Stories from Product Strategies and Features\nGenerating Features from Product Strategies – A Little Leg Work\nDescribing Feature Requirements with Lightweight Essential Use Cases\nA Story Is Not a Use Case – Stories As Change Requests\nExtracting Stories from the Use Cases\nStory Depth and Breadth – A Multi-Dimensional Thing\nIssues in Adopting Agile Business Practices\nThe Value of Leaders and Mentors\nA Bit of Preparation and Education Never Hurts\nRespect Everyone’s Turf – This Isn’t Just a Programmer Thing\nCountering Fear and Resistance One Small Step at a Time\nPilot Projects and Adoption on a Shoestring\nThe Challenge of Building and Sustaining Momentum\nThe Fall of Empires and the Rise of the Collective\nAdapting and the Learning Organization\n\nPresenter Bio and Contact InformationPaul Hodgetts is the founder and principal consultant of Agile Logic, a professional services company focusing on Agile development processes and enterprise development technologies. He has more than 19 years of experience in all aspects of software development from in-the-trenches coding to technical project management, on a wide variety of projects from embedded real time control to distributed internet business applications. His recent focus has been on expanding the application of Agile values and principles to the business side of product development, and on the organizational change aspects of adopting Agile processes. Paul has presented at conferences including JavaOne and XP Universe, and has taught software courses both privately and at California State University, Fullerton, where he is a member of the Java, J2EE, and C++ advisory boards.\nPaul can be contacted at:\nPaul Hodgetts\nAgile Logic\n1519 East Chapman Ave. #254\nFullerton, CA, USA 92831\nPhone: (714) 269-7401\nEmail: phodgetts@AgileLogic.com\nWebsite: www.agilelogic.com	Main conference	Tutorial	2002
20020040	XP RELEASE PLANNING AND USER STORIES	The "Circle of Life" in XP is the cycle: On-Site Customer, Planning\nGame, Small Releases, Acceptance Tests. This cycle, repeated for every\nrelease, and for every iteration, is the heartbeat of an XP project.\nIt provides the requirements that the programmers need in order to\nprogram, the development velocity and quality information that\nmanagement needs in order to steer the project, and the connection\nbetween wish and reality that the customer needs in order to choose\nwhat to do next and when to release. We don't call it the Circle of\nLife lightly.\n\nIn this half-day tutorial, you'll have the opportunity to experience\nthe same project three ways: with very low information, part of the\ninformation that XP can provide you, and with all the cost and value\ninformation that XP provides. You'll experience the highs and lows of\nworking on such a project, and learn hands-on why the XP planning\nprocess is so powerful within such a simple framework.\n\nThe session is based on Ann, Chet, and Ron's popular "small card"\ngame, where we simulate an important valuable project. This is the\nsame experience that we have offered at XP Immersions, Smalltalk\nSolutions, XP200n, and various on-site courses.\n\nWe use the release planning game to explore various project planning\nstrategies. The game is played in small groups of approximately four\nto eight players. Both programmers and customers may play, in any\ncombination.\n\nIn each cycle of the game, the players plan and "implement" a product.\nEach time through, they learn some new lessons enabling them to plan\nand implement better next time. Scoring is based upon each team?s\ntotal return on investment.\n\nBased on that experience, we'll then discuss how teams\nlike yours can get the cost and value estimates needed to run your\nproject the XP way. The session has been rated as valuable and\nenjoyable by all those who have taken part in it. If you haven't yet\nsuffered the joys and agonies of the "Small Card" game, this is your\nchance!	Main conference	Tutorial	2002
20020043	DISTRIBUTED PAIR PROGRAMMING	Agile methodologies stress the need for close physical proximity of team\nmembers. However, circumstances may prevent a team from working in close\nphysical proximity. For example, a company or a project may have development\nteams physically distributed over multiple locations. As a result,\nincreasingly many companies are looking at adapting agile methodologies for\nuse in a distributed environment.\nThe aim of this workshop is to bring together practitioners who have\nexperiences with distributed pair programming.  In addition, the workshop\nwill be especially valuable to participants who are involved in development\nactivity that is geographically distributed and are interested in applying\ndistributed pair programming.  We further want to incorporate experiences\nand research in Computer Supported Collaborative Work (CSCW) environments.\nOverall, the workshop will discuss how to make this type of distributed work\nas effective as possible and will help guide future research.\nFor more information http://dxp-cs.cs.unc.edu/XPU-DPP-workshop/	Main conference	Workshop	2002
20020044	EMPIRICAL EVALUATION OF AGILE METHODS	Imagine the benefits of knowing that an XP project expends more effort\nunderstanding software requirements than does a team using a typical\ntraditional, or waterfall approach. Imagine the benefits of being able to\npredict that for this particular combination of customer, product, and\nproject team, agile modeling is going to benefit the team more than a strict\nXP implementation. The world we seek is one that de-mystifies the success of\nagile methods and supports everyday practitioners to apply the right method\nat the right time. We believe measurements are key to making these decisions\nand to making agile methods more accessible.\nPresently, there is a lot of anecdotal evidence and very little empirical\nand validated data of agile methods effectiveness. Much of the evidence is\nbased on the stories and preferences of those who practice it. The workshop\nparticipants are expected to share keen interests in finding practical\napproaches to measuring the effectiveness of agile software techniques in\nvarious project situations (both industrial and academic).\nMore	Main conference	Workshop	2002
20020045	LSO WORKSHOP	This is a full day workshop\nThe theme of the Fourth Workshop on Learning Software Organizations (LSO) is "Balancing Agile Processes and Long-Term Learning in Software Organizations". The LSO Workshop series focuses on technical, organizational, and social solutions to problems of learning from past experiences and codifying the resulting best practices so they can be systematically used in subsequent software development efforts \nThis workshop will explore the issues of managing knowledge in dynamic domains requiring significant levels of improvisation within each repetition of the process. The challenge is not one of capturing and finding complete solutions to problems, but the more difficult task of finding and integrating partial solutions that can serve as a baseline for continuous improvement, and hence, organizational learning. Techniques need to be explored that couple process and workflow management with knowledge management to capture and build an experiential body of knowledge for software development activities, while enhancing the ability of an organization to quickly adapt its processes to new technologies and market pressures.\nLearn More	Main conference	Workshop	2002
20020046	Setting the Agile Context	The use of agile software methods requires a proper context.  As with\nother methods, a poorly managed and disordered environment makes\ncreative technical work difficult and often impossible.  In this talk,\nWatts Humphrey discusses the environmental characteristics required for\ncomplex creative work, how the working situation is typically\nestablished, and what the software professional can do to influence the\ncontext of his or her work.  He then describes the experiences of\ndevelopment teams in establishing and directing the environment for\ntheir own work.  He also provides data on how this affected the quality\nif their products and the productivity of their projects.  In\nconclusion, Mr. Humphrey discusses the factors that determine the\nability of professionals to set the contexts for their own work and how\nthis relates to the use of agile methods.	Main conference	Keynote Address	2002
20050205	Case Study of Customer Input for a Successful Product	Both agile development and User Centered Design stress collaboration between \r\n  customers and product teams, but getting these methodologies to \r\n\r\nwork well together is not easy.   This presentation describes one company's \r\nefforts to merge these processes by creating interconnected \r\nparallel design and development tracks. The benefits of this approach are \r\ndemonstrated by showing how, when and why customer input was \r\nincorporated during the release of a successful software product.\r\nAlias is the world's leading provider of 3D software for design,\r\npresentation will focus on a new product, Alias SketchBook Pro, which was \r\ndeveloped using agile methods including frequent and timely customer input.	Experience Reports	Experience Report	2005
20020047	XP FEST (Monday)	XP FEST\nOne of the core values of XP is feedback, which involves going beyond just talking about something to actually doing it as quickly as possible, because only then do you know if it makes any sense. So, instead of just coming to XP/Agile Universe and talking about XP, why not do some XP, too? It seems fitting to go beyond just talking about abstract concepts to actually implementing them in a simple format.\nIn the style of OOPSLA's AnalysisFest, DesignFest and CodeFest, with their waterfall view of software development, you can participate in XPFest at XP/Agile Universe.\nGoals:\nLearn XP by doing.\nBe exposed to different views of XP. \nTry out XP if you haven't tried it yet. \nCompare how different teams adapt XP. \nHave fun doing something you enjoy: programming using XP! \nMondayTuesday(1) Customer - someone who has a small problem they'd like solved. All sessions will work with this customer.\n\t(1-2) Coaches - people qualified to help the team implement XP. \n\t(up to 8) Developers - people who want to do XP.\n\t(1+) Observer - to record how the team implements XP.\nContact:domelia@rolemodelsoft.comhttp://www.xpfest.org	Main conference	Workshop	2002
20020048	XP FEST (Tuesday)	XP FEST\nOne of the core values of XP is feedback, which involves going beyond just talking about something to actually doing it as quickly as possible, because only then do you know if it makes any sense. So, instead of just coming to XP/Agile Universe and talking about XP, why not do some XP, too? It seems fitting to go beyond just talking about abstract concepts to actually implementing them in a simple format.\nIn the style of OOPSLA's AnalysisFest, DesignFest and CodeFest, with their waterfall view of software development, you can participate in XPFest at XP/Agile Universe.\nGoals:\nLearn XP by doing.\nBe exposed to different views of XP. \nTry out XP if you haven't tried it yet. \nCompare how different teams adapt XP. \nHave fun doing something you enjoy: programming using XP! \nMondayTuesday(1) Customer - someone who has a small problem they'd like solved. All sessions will work with this customer.\n\t(1-2) Coaches - people qualified to help the team implement XP. \n\t(up to 8) Developers - people who want to do XP.\n\t(1+) Observer - to record how the team implements XP.\nContact:domelia@rolemodelsoft.comhttp://www.xpfest.org	Main conference	Workshop	2002
20070553	Implementing Scrum in a distributed software development organization	The abstract is found in the attached document, below are the highlights. We\r\nwill need some serious support to manage the amount of materials we have. A\r\nwrite-up on a project with 50 people in 4 continents generates a lot of\r\nexperience! Both the authors will get support from their organizations in terms\r\nof editing and reviewing, guidance from the track committee will be most welcome\r\nthough. \r\n\r\nThis is the first paragraph from the full abstract (see attached), it is hard to\r\ndecide what material will trigger the committee's interested, so here is the\r\nintroduction to our story:\r\n\r\nDeciding to use Scrum in an organization used to plan-drive projects.\r\n\r\nThe BMC Identity Management (BMC IdM) organization is based in Israel, and has\r\noffices in France, the USA and India. Over the past years the organization has\r\ngrown through organic growth and acquisitions into a successful business unit\r\nwithin the global BMC organization. Their core products are grouped in the BMC\r\nIdentity Management suite. \r\n\r\nFor technical and business reasons the management has decided to build the next\r\ngeneration suite product,  that would include architectural changes, as well as\r\nfull integration for all suite components that would incorporate the latest\r\nacquisitions, and to support the growth of the suite for the years to come.\r\nBMC has experience with agile software development: In the OnePatrol teams app.\r\n500 people are successfully using Scrum to deliver monthly product increments.\r\nThe success of this implementation combined with the uncertainty of the product\r\nrequirements formed the basis for the decision to use Scrum in this project.	Leadership	Experience Report	2007
20070426	Learning Kaizen from Toyota [with MindMaps]	We will present examples of process improvement (Kaizen) at Toyota and \r\ndemonstrate how the Toyota Production System (TPS) constantly examines and \r\nimproves the way things are done to meet changing customer needs.  Although \r\nsoftware development is not a production, Agile development has a lot in \r\ncommon with TPS.  Key case studies showing key TPS concepts will be \r\npresented.  After presentation of each key TPS concept, small groups will \r\nexplore commonalities and differences between Agile and TPS by developing Mind \r\nMaps, and then exchange the results with other attendees.	Leadership	Discovery Session	2007
20070723	Lost in Translation: Making Dollars into Sense	The emergence of rapid iterative development, self-managed teams, and other \r\nlean practices has helped propel Agile methodologies from a grass-roots \r\nphenomenon to a legitimate approach for reducing time-to-market and increasing \r\nthe value of investment for software development projects.  How does an \r\nbusiness sponsor in an Agile environment best identify, measure, track, and \r\ncommunicate their projectâ€™s value delivery and Return on Investment (ROI)?  \r\nThe inherent challenge in Agile project execution lies in its adaptive nature \r\nand the fact that team velocity and points-completed are difficult to predict \r\nin advance.  Additionally, agile methodologies promise the delivery of \r\npotentially shippable product functionality to the Product Owner at the end of \r\nevery iteration.  How does the Product Owner measure the true incremental \r\nvalue delivered in terminology that the business understands?  During this \r\nsession the group will explore these and other questions brainstorming \r\ninnovative ways to effectively assign, measure, and evaluate true incremental \r\nbusiness value on agile projects, allowing the business owners in to \r\neffectively compare the project costs to the ROI the project represents.  This \r\nsession may build on prior work on Agile Earned Value Management (EVM) in \r\nattempts to accurately determine the true value delivery on Agile projects \r\naround such business measures as increased revenues, cost avoidance, reduced \r\nrisk exposure, and improved customer service/quality.	Other	Discovery Session	2007
20090782	Large scale continuous integration	Increase Productivity With Large Scale Continuous Integration Iteratively: Reduce Feedback Cycle From Weeks To 100 Minutes  \n\nUsing iterative development â€“ create an continuous integration environment using open source and commercial tooling  for hundreds of developers  \nFrom migration to new environment â€“ the tools and process lessons learned  \nEffects seen in product development â€“ real life experience after 18 months in production  	Tools for Agility	Talk	2009
20030050	Agile Software Development: Principles, Patterns, and Practices	For the first four decades of software development we did not had a good definition of our craft. If you asked a software developer what he did, he'd have to say something vague like "I write code." Sometimes developers created something good, but could't repeat the process. They could do good things sometimes but didn't know how they did it. Quality was more an accident than a design. In the last decade this has changed significantly.\n\nWe have identified enough principles, patterns, and practices to provide our craft with a solid definition. This definition gives us something we may not have had before -- pride in workmanship. For though we may have been able to take pride in some of our projects before, we weren't often able to take pride in the “way” those projects were build. Now, we can take pride in ”how” we build software, not just in the software we build.\n	Tutorials	Tutorial	2003
20060317	DSDM - What is it?	Dynamic Systems Development Method (DSDM) - What is it and why is it different from other Agile Approaches- what are its key features? The Tutorial will summarise the essential elements of DSDM. It will explore the DSDM principles and approach and give the audience practical experience of timeboxing, prioritization, user involvement and team empowerment.	Tutorials	Tutorial	2006
20060318	XUnit Test Patterns and Smells; Improving Test Code and Testability Through Refactoring.	XUnit is the generic name name given to the family of tools/frameworks used by developers when developing automated unit tests. The community has now had enough experience with using XUnit to start cataloging "best practices" and "not so best practices" as patterns and smells. This tutorial introduces a number of these "test smells", describes their root causes, and suggests possible solutions expressed in the form of a pattern.	Tutorials	Tutorial	2006
20060319	Agile Requirements Workshops: Essentials for Planning, Design, and Facilitation	This experience-based tutorial will share effective, time-tested practices for planning, designing, and facilitating agile requirements workshops. Requirements are the foundation of all the software work that follows. It is both an art and a science to arrive at a shared understanding of those requirements efficiently and with "just enough" precision to begin prototyping or developing. Well-designed and well-run requirements workshops are one of the best ways to overcome the myriad of problems that arise from inadequate customer involvement and ambiguous requirements. The objective of this tutorial is to give attendees a toolkit of practices, reinforced with brief practice sessions and group discussions, that they can apply immediately to improve the quality of their project requirements efforts without lengthening the development effort.	Tutorials	Tutorial	2006
20060320	Coaching 101: A Role-Playing Session	The role of coach is an important one on a software development team that is trying to adopt or improve their use of agile practices. The coach's job is to teach new skills, offer encouragement, and provide feedback to team members as they experiment with new ways of working. Being an effective coach is difficult. Whether the coach is an external consultant, a regular employee, or just a team member acting the part, they often finds themselves in the position of trying to influence change and behavior without having the specific authority to do so. The successful coach is able to gain buy-in and to inspire others to follow their example. This discovery session allows participants to practice the "softer skills" that are essential in being an effective coach. It consists of a series of role-playing exercises in which participants struggle to decide what coaching interventions (if any) would be most effective in a variety of situations. In a safe environment, participants can give and receive feedback on their coaching style. The role plays are based on specific scenarios encountered by our Digital Focus coaches as they have worked with new teams adopting agile development.	Discovery Sessions	Workshop	2006
20060321	Simple Tools for Communication - A Balancing Act	The Agile Manifesto states: "we have come to value individuals and interactions over processes and tools". Tools and techniques are not enough for running your projects, you need "people tools" as well. We all know that for instance developers and customers fighting about who did what wrong doesn't make our projects finish early, yet it is hard to stop doing it. Especially when the pressure is on. This session provides tools and processes for individuals and interactions, to help you take a step towards peaceful, effective projects. This session is meant for anyone who wants to become more effective through: - awareness of how our way of communicating influences others and vice versa - consciousness of the change processes in self, others and the context so that we can surf the waves of change, rather than drowning in the surf of the waves This tutorial is based on the work of the family therapist Virginia Satir.	Tutorials	Tutorial	2006
20060322	Distributed Agile Game	The Distributed Agile Game is meant to be played by people who are interested in agile tools and practices as they are applied to a distributed team environment. The participants may have prior experience in distributed development, but this is not required. In fact, no software development experience is required. The game will be played by several small teams. Each team consists of analysts, developers, a customer, and a project manager. The team is subdivided into two parts; an onsite team, with developers, a customer, and a project manager, and a remote team with only analysts and developers. The remote team must communicate with the customer and onsite team via tin cans (no joke.) The game will start out with the most basic of communication and no toolset progressing through several iterations until finally reaching a full suite of tools and processes for improved communication and team "gel."	Discovery Sessions	Workshop	2006
20060323	What Lessons Can the Agile Community Learn from a Maverick Fighter Pilot?	For the agile software development community, agility is defined by the values expressed in the agile manifesto. But in concrete terms, what does it mean for a software project to be agile? US Air Force Colonel John Boyd defined agility as the ability to operate the Observation-Orientation-Decision-Action (OODA) loop faster than an adversary. Agility therefore depends on the tempo at which we can exploit the OODA loop, and it is culture, not methodologies or tools that determine our OODA loop speed. This definition of agility has implications for the software development community. This short paper introduces Colonel Boyd, the OODA loop, the factors which influence OODA loop speed and the possible research opportunities into software engineering culture we are considering.	Research	Research Paper	2006
20060324	Reflections on Reflection in Agile Software Development	This paper analyzes the reflections of an agile team, developing a large-scale project in an industry setting. The team uses an Iteration Summary Meeting practice, which includes four elements: The customer's summary, a formal presentation of the system, review of metrics and a reflection. The technique for the entire meeting and for the reflection element in particular is described, and empirical evidence is given to show that it is assessed as highly effective, achieving its intended goals, and increasing team satisfaction. Further, the proposed practice supports tracking of ongoing decisions. It is shown to be valuable to stabilizing a new project as well as a continuous improvement forum for a stable one. It also incurs a lower overhead than existing alternative reflection practices.	Research	Research Paper	2006
20060325	Critical Personality Traits in Successful Pair Programming	Pair Programming (PP) is a common practice in Extreme programming, in which two programmers work together using a single computer. The close interaction required by PP makes it difficult to apply. The hypothesis is that certain personality traits are crucial for the success of PP, and PP partners should be chosen based on these personality traits. In this research, we first survey the programmers in industry to identify the perceived important personality traits for PP, and then conduct experiments to determine the significance of these personality traits in successful PP.	Research	Research Paper	2006
20070447	Offshore XP for PDA development	One of Exigen Services' first and most innovative XP projects was centered on\r\ndeveloping a PDA application and a middleware server for handling maintenance\r\nroutines and equipment checks and processing work orders at the client's\r\nmanufacturing facilities worldwide. Our client on this project was the world's\r\nleading microprocessor manufacturer. The use of mobile computing in this way was\r\nnew for both the customer and Exigen's development team. The application had to\r\nbe written using the brand new Compact.NET Framework Library, creating increased\r\ndifficulty without best practices to guide the project.  Because of these unique\r\nobstacles, XP was selected to allow flexibility and room for shifting project\r\nrequirements during the project. However, due to the fact that the development\r\nteam was offshore, Exigen had to customize XP rules to fit the\r\nsituation--creating new best practices that will be shared during this\r\nExperience Report.	Other	Experience Report	2007
20070748	Reading Code Without Psychic Powers	This workshop's primary purpose is to help developers\r\nimprove their ability to read and understand code. Along the way, the\r\nworkshop participants are also likely to develop their refactoring skills and\r\nperhaps even learn some testing trickery.\r\n\r\n\r\nThe workshop's agenda consists of three parts. We will start by introducing the\r\ntopic and the underlying motivations. The presenters will make the case for the\r\nneed for code reading ability in the first place as well as explain various\r\nfactors that affect our ability to understand code.\r\n\r\n\r\nThe second part of the workshop is a sequence of multiple hands-on\r\nexercises, involving code bases provided by the presenters. The participants\r\nget to experience the factors discussed in the introduction first hand and to\r\napply a number of presented techniques to overcome the challenges. Each exercise\r\nwill begin with a short introduction and end with a brief review and a\r\ndiscussion on the different groups' findings.\r\n\r\n\r\nThe exercises will be done in groups of 2-3 people on the participants\r\nlaptops. In other words, not all participants need to have their own laptop.\r\nThe presenters will distribute the exercise material on CDs and USB drives. The\r\nparticipants are expected to have Eclipse installed on\r\ntheir laptop before the workshop.\r\n\r\n\r\nThe third and final part of the workshop is a review of the exercises and a\r\nsurvey of the techniques used by the participants. The goal for this third part\r\nis to document the variety of techniques used by the workshop participants to\r\nhelp comprehend "challenging" code.	Developing	Workshop	2007
20070518	Running Tested Features - By Example	Running Tested Features is a metric used to measure the delivery of running,\ntested features to business clients, and collect their feedback. The idea is\nsimple. Break the software down into features that represent observable value to\nthe business. For each feature, create one or more automated acceptance tests\nthat validate the feature. Consolidate all features into a single, integrated\nproduct and continuously execute the automated acceptance tests. At any given\nmoment, the project team should know the number of features that are passing all\nacceptance tests. This number represents the RTF metric.\n\nYet developing a RTF strategy can be difficult. Supporting practices and a\ntechnology infrastructure must be in place to measure RTF. In this session, we\nreview the fundamental premise of RTF, introduce tools that support an RTF\nstrategy, and present a simple RTF case study that will help your team realize\nthe benefits of RTF immediately. Numerous examples in Java and Ruby will be\nexamined.	Testing	Tutorial	2007
20070911	Story Test Driven Development in Narrative Testing Tools	Story Test Driven Development (STDD) extends the benefits of Test Driven \r\nDevelopment from the Unit Test level to the Acceptance Test level.  Narrative-\r\nstyle testing tools implement test scripts that execute an entire User Story, \r\nrather than capturing calculations at a single point in the User Story in \r\ntabular form.  This allows us to write our story tests directly into \r\nexecutable test scripts, and have user-readable Story Tests created directly \r\nwith and by the users.\r\n\r\nThis session will present the difference between tabular test tools like FIT \r\nand narrative test tools like Selenium and STIQ.  We will explore the natural \r\nextraction of customer requirements and knowledge via User Stories, and how \r\nthese stories can be directly, even interactively, translated into executable \r\nStory Tests in a narrative testing tool.  Finally, we will discuss some of our \r\npractical experiences with STDD, and the lessons we have learned that \r\nfacilitate interactive creation of executable User Story Tests with the \r\ncustomer.	Testing	Tutorial	2007
20070801	Test Driven Development in C++ Hands-on Tutorial	Test Driven Development is a state of the art software development practice.\r\nWhen using TDD, programmers get instant feedback that the code they are writing\r\ndoes what they intend. An open source test harness is used to collect, organize\r\nand automate unit tests for your C++ code. \r\n\r\nThis class shows the motivations behind TDD, but does not stop there.  Attendees\r\nget first hand experience at TDD. You will write code using TDD.  You will see\r\nhow tests can prevent many bugs.  You will see how\r\nTDD can help programmers prevent memory leaks.  \r\n\r\nStudents should bring laptops.  We will pair program in the class, so solo's can\r\nteam up.\r\n\r\nStudents are requested to visit the following website after August 1st and prior\r\nto the session:\r\nhttp://www.fitnesse.org/Agile2007TddCppPreparationPackage for setup instructions\r\n\r\nOutline\r\n* What is Test Driven Development?\r\n* Why is TDD Important?\r\n* Design for Testability\r\n* TDD Cycle\r\n* Starting Point for Every C++ class\r\n* Test Doubles/Mock Objects\r\n* CppUTest Overview\r\nDemo TDD\r\nTDD Exercise Part 1 (students are given a series of tests to implement one at a\r\ntime, these tests give them the feeling for the right size test in TDD.)\r\n\r\nTDD Exercise Part 2 (students are given just the names of tests, and implement\r\nthem one at a time)\r\n\r\nReview and Questions	Developing	Workshop	2007
20030060	Patterns for Agile Software Configuration Management	Software Configuration Management (SCM) is sometimes thought of as a heavy weight discipline that contributes to the rigidity, rather than agility, of the development team. This perception comes out of viewing circumstances where SCM practices were inappropriate to the project. In many cases, proper use of SCM practices can add a level of reproducibility and accountability to the development effort that can enable agility. The tutorial gives a brief overview of the basics of Software Configuration Management, and describes how to use SCM effectively in an Agile environment by describing key SCM Practices that are needed to have a stable, yet agile development environment. This includes practices relating to versioning, workspaces, testing, build, and branching. The tutorial is taught from the perspective of SCM as a part of the daily development cycle. We use a pattern language as a mechanism for describing how the practices fit together, but an understanding of patterns and pattern languages in not essential to understanding the material. Some background on the patterns is available at: www.scmpatterns.com.	Tutorials	Tutorial	2003
20050170	Scripting Web Tests	This workshop is a hands-on introduction to automated testing using \r\n    Ruby, Watir and a web-based application, all of which are open-source. \r\n    It presumes no prior knowledge with these tools. It allows key issues \r\n    related to automated acceptance testing to be raised in a natural \r\n    environment	Tutorials	Tutorial	2005
20070656	The Evolution of Agile - Transformation at Sabre-Holdings & Travelocity	In 2003 a consulting company came to Sabre Holdings and began a pilot program\r\nmentoring teams in Agile.  The pilot teams were able to show value to the\r\norganization, and the decision was made to continue mentoring teams in the agile\r\napproach.\r\n \r\nInternal Travelocity mentors subsequently reviewed the original framework and\r\nhow it had naturally evolved within the different business units and teams.\r\nUsing the principle of inspect and adapt, the mentors created Agile Version 2.0.\r\n This session provides an introduction to Agile and explains the changes from\r\nAgile V1.0 to V2.0 at our company.  This presentation is used during all of our\r\nproject kick-off sessions at Travelocity.	Enterprise Agile	Beginners Program	2007
20070547	To Certify or Not To Certify	One of the problems the agile community is currently facing is how do we\r\nencourage the things that are agile and discourage those that are not?  As agile\r\nsoftware development has grown in popularity we  discover that some people claim\r\nto "do agile" and yet "do not", and no one calls them on it.  The principles \r\nof the Agile manifesto and the practices within each of the methods becomes\r\ndiluted and lost.  Is  certification the answer?  Tom DeMarco comments\r\nthat "though the rationale for certification is always societal good, the\r\nreal objective is different: seizure of power. Certification is not something we\r\nimplement  for the benefit of the society but for the benefit of the\r\ncertifiers".  So certification is clearly a complex and interesting area and\r\nripe for debate.  This panel brings together industry practitioners with\r\ndiffering  perspectives and experiences of certification; the audience should\r\ncome prepared to both ask and answer questions.	Leadership	Discovery Session	2007
20070686	Understanding the impact of cultural differences on agile projects	Agile development projects increasingly extend over boundaries set by a single\ncompany or country, including offshoring and outsourcing of many resources.\nDistributed projects in multi-cultural settings are confronted by countless\nchallenges, from project planning and management, to collaboration and\ncommunication. Moreover, agile methods might need to be transformed to suit\nother cultures. The aim of this workshop is to emphasis the role and impact of\ncultural differences on agile processes and methods. The workshop objective is\nto facilitate the development of participantsâ€™ skills to ensure effective\ncross-cultural communication and collaboration in agile project to enhance the\neffectiveness and productivity of agile projects.	Individuals & Teams	Discovery Session	2007
20070437	We're "hardwired" for deception, so agile estimation is the only way to go!	The more I read about evolutionary biology, the more it seems that we are\r\nhardwired for deception. I thought it was just developers  :-)! We're overly\r\noptimistic and, in fact, we wouldn't have survived without this positive outlook\r\non life. With this as a starting point, it's impossible for us to estimate\r\naccurately. The only way is to accept that our estimates are best guesses and\r\ncontinually re-evaluate as we goâ€”the agile approach! It may not be obvious, but\r\nthis talk also connects to the bonobos because I will show that other animals\r\nalso deceive to protect themselves or make themselves look good  :-)!\r\n\r\nThis "lying dilemma" targets some of our fundamental beliefs about any kind of\r\nproject (including the way we live our lives). I was part of many plan-driven\r\ndevelopments where sincere, honest people with integrity wanted to get the best\r\nestimates possible and used many "scientific" approaches to make it happen --\r\nall for naught -- it never worked. Re-estimation was regarded as an admission of\r\nfailure to do the best up-front estimate and meant a lot of overhead and\r\nMEETINGS to try to "get it right."\r\n\r\nI think it's hard for us to see how poor our estimating skills are. I will give\r\nexamples from ordinary life -- especially from the way we eat and drink  :-)!\r\nMaybe we can have some "quizzes" to see how good the audience is at estimates  :-)!	Leadership	Talking Head	2007
20070870	Who Coaches the Coach?	This session is for anyone who has pulled out their hair on an agile project and\r\nwants to have some hair left at the end of their next one. Agile is hard but\r\nworth it.  The goal of this discovery session is to become better prepared to\r\nanticipate, recognize, and surmount the inevitable emotional roadblocks plaguing\r\nprojects.  We will do this by sharing stories and then breaking these stories\r\ndown into three components: the agile value/principle/practice that is being\r\nchallenged, the emotional component of this challenge (for both the challenger\r\nand the coach), and then how we can get through this the next time we face it. \r\nWe'll write a note to self to remind ourselves that we have survived in the past\r\nand that it was all worth it.  This will help us build the inner strength\r\nnecessary to remain appropriately calm and confident in the face of criticism\r\nand defeatism.	Leadership	Discovery Session	2007
20071037	XR14: Distributed Agile	Implementing Scrum in a distributed software \r\ndevelopment organization\r\n\r\nby Hubert Smits and Guy Pshigoda\r\nOffshore XP for PDA development\r\n\r\nby Sergei Andrzeevski\r\nBack to Basics: The Role of Agile\r\nPrinciples in Success with an Distributed Scrum Team\r\n\r\nby Steve Berczuk	Other	Session	2007
20071039	XR16: Team Dynamics	Forming to Performing: The Evolution of an\r\nAgile Team\r\n\r\nby Manfred Lange and Darren Rowley\r\nEvolution of Inter-Team Collaboration\r\nModels\r\n\r\nby Naresh Jain and Shyam Mohan	Other	Session	2007
20070901	Agile is more than "Monkey see, Monkey do"	It has been six years since the Agile Manifesto was signed and from the\r\nconversations seen on agile mailing lists and overheard at agile bull-sessions,\r\nit seems that essence of agile is being lost. Additionally, the majority of\r\ntalks, tutorials, and speeches at this conference over the past year or two seem\r\nto have lost that same essence. Our goal for this presentation is to explain why\r\nit is the essence of agility that is so critical, so important to the success of\r\nany project trying to be agile.\r\n\r\nThe essence of which we speak is the underlying set of values, principles, and\r\ntheories by which agile adherents live. â€œPeople over Process, Collaboration over\r\nContracts, Working software over Written Words, and Planning over Plansâ€ are not\r\nhollow words to an experienced agilist â€“ they are the lifeblood of what they\r\nbelieve and color how they act. These are the guidelines that an agile project\r\nmust value to truly succeed in changing your little piece of the world.\r\n\r\nKey Points:\r\n\r\nAgile is...\r\n\tâ—‹ Agile is a way of thinking about how teams make decisions\r\n\tâ—‹ Agile is focused on continually delivering business value\r\n\tâ—‹ Agile is about creating a safe, comfortable place to work, try, fail, and\r\ndeliver with confidence\r\n\tâ—‹ Agile is a way of enabling those responsible for something to have the\r\nauthority to get it done (aligning responsibility with authority)\r\n\tâ—‹ Agile is about building a local community\r\n\t\r\nAgile is notâ€¦\r\n\tâ—‹ Agile is not a set of rote activities to be learned\r\n\tâ—‹ Agile methods are not recipes\r\n\t\tÂ§ Each agile method is intended to be a starting point, but your understanding\r\nof the meaning beneath the process is what allows you to tailor it to your needs.\r\n\t\t\r\n\tâ—‹ Agile is not a set of Practices\r\n\t\tÂ§ Agile is not the practices, it is a set of values and an attitude about how\r\nyou work. Its main focus is on satisfying the business's needs every day.\r\n\t\tÂ§ You can be truly agile w/out any tools, processes, or cool, trendy\r\ntechniquesâ€¦ but it is harderâ€¦ hence the distractions of TDD, Pair-Programming,\r\nScrum, Standups, etc.\r\n\t\r\n\tâ—‹ Agile is not an a la carte menu\r\n\t\tÂ§ The practices of an agile method are a collection of engineering techniques\r\nthat taken together as a system protect the team from changing requirements and\r\nenable them to focus on the solution instead of tasks.\r\n\t\tÂ§ Changing the system by removing parts requires a reassessment of the entire\r\nsystem.\r\n\t\t\tâ–¡ Example: Want to bail on pair-programming? Fine. You will have to add code\r\nreviews and some more up-front design, and you will end up being  less able to\r\nrespond to change easily and rapidly. \r\n\tâ—‹ Agile is not focused on the technology or the tools\r\n\r\nWhat is wrong today...\r\n\tâ—‹ The value system has been lost\r\n\t\tÂ§ The value system is about embracing change and not about conforming to a process\r\n\t\tÂ§ People focus on perfecting the forms without embracing the underlying value\r\nsystem\r\n\tâ—‹ Consultants are offering to sell you 'agile', but often deliver only the\r\npractices, not the values.\r\n\tâ—‹ Companies are looking to buy 'agile' as a package and not 'grow' it.\r\n\tâ—‹ People new to agile don't often don't know that there is anything beyond the\r\npractices.\r\n\t\r\nWhy should I bother? Because...\r\n\tâ—‹ Tools can help you be more agile. Processes can help you be more agile.\r\nSpecific techniques and practices can help you be more agile. But you will only\r\nbe truly agile if you decide to be truly agile.\r\n\tâ—‹ Agile lets your customer make a choice, see that choice, learn from it, and\r\nrespond to what they learned\r\n\tâ—‹ Agile created happy, energized teams of people who love coming to work every day\r\n\tâ—‹ Agile allows the business to get the system that they need on the last day,\r\nnot the one that they thought they needed on the first day\r\n\tâ—‹ Agile allows project teams to make decisions later, when they know more (last\r\nresponsible moment)\r\n\tâ—‹ Agile projects build the important stuff first and leave the bells and\r\nwhistles until the end, if there is time.\r\n\t\r\n\r\nDon't you want that?	Leadership	Tutorial	2007
20030066	XP Culture: Why the twelve practices both are and are not the most significant thing	XP emphasizes underlying values as well as the more visible twelve practices. We examine the relationship between practices and values from the perspective of a model of culture and from an ethnographic study of mature XP practice. We conclude that the twelve practices are both significant and not significant. They are significant in that they do, in the reality of professional practice, give rise to a culture which embodies underlying XP values. They are not significant since both models of culture and the detailed manner in which the practices give rise to a culture suggest that alternative practices may achieve the same ends.	Research	Research Paper	2003
20070979	Beginners Speed Round	A lively combination of Lightning Talks, an Expert Panel, What I learned on my\r\nAgile Vacation and Iron Chef: The Agile Edition. All are welcome. \r\n\r\nAttendees will be given the chance to tell the world what they learned at the\r\nconference, how they used the release plan they constructed in the beginners\r\nkickoff and what they will be changing about their work based on that knowledge.\r\nWe will run this with as a "lightning talk" session, with each participant\r\nallowed five minutes at the most. Speaking participants have the chance to each\r\nask one question of our distinguished panel of Beginners Program presenters. \r\n\r\nThe session concludes with brief remarks from several of the panelists on a\r\ntopic of their choice. This promises to be a lively way to end the conference\r\nfor beginners and experienced participants alike.	Other	Beginners Program	2007
20071066	Research-In-Progress Workshop	8:15-8:30\r\n      \r\n\r\n      \r\n        Welcome and\r\n        Introduction\r\n      \r\n    \r\n        8:30-10:00\r\n\r\n        \r\n      \r\n\r\n      \r\n        Session I: People and Culture in Agile\r\n        Development (Chair Y. Dubinsky)\r\n\r\n        Tear Down the Barriers: A\r\nfirst report into the\r\n        relationship between people and agile software\r\n        development, S. Adolph, G. Dhillon, P.\r\n        Kruchten\r\n\r\n        Climate in Agile Software\r\nDevelopment Teams: The Case\r\n        of Quality Climate and Teamwork Climate,\r\n        G. Luria, T. Seger, O.\r\n        Hazzan\r\n\r\n        Agile Narratives: Gathering\r\nStories,\r\n        J. Hunt, D.\r\n        Pierce\r\n      \r\n    \r\n        10:00-10:30\r\n      \r\n\r\n      \r\n        Coffee\r\n        break\r\n      \r\n    \r\n        10:30-12:00\r\n      \r\n\r\n      \r\n        Session II: Measurement in Agile Development\r\n        (Chair P. Abrahamsson)\r\n\r\n        Useful Sprint\r\nMetrics, Constance M. Tartaglia, P.\r\n        Ramnath\r\n\r\n        Agile Metrics - Waste or\r\n        Necessity?, W. Krebs, T. Rivera\r\n\r\n        Enterprise in Transition:\r\nGovernance Meets\r\n        Agile, Y. Dubinsky, A. Yaeli, Y.\r\n        Feldman\r\n\r\n        Adopting Agile Software\r\nDevelopment Practices for\r\n        Extreme Programming to Non-Software Development Business\r\n        Processes, M. Homeyer\r\n      \r\n    \r\n        12:00-14:00\r\n      \r\n\r\n      \r\n        Lunch\r\n        break\r\n      \r\n    \r\n        14:00-15:30\r\n      \r\n\r\n      \r\n        Session III: Management and Estimation (Chair Y.\r\n        Dubinsky)\r\n\r\n        Developing a Survey to\r\nCollect Expertise in Agile\r\n        Product Line Requirements Engineering,\r\n        K. Feng, M. Lempert,\r\n        Y. Tang, K. Tian, K. Cooper, X.\r\n        Franch\r\n\r\n        Agile Software\r\nAssurance, N. Abbas, A. M Gravell, G. W\r\n        Wills\r\n\r\n        Agile\r\nEstimating, R. Boehm\r\n      \r\n    \r\n        15:30-16:00\r\n      \r\n\r\n      \r\n        Coffee\r\n        break\r\n      \r\n    \r\n        16:00-17:30\r\n      \r\n\r\n      \r\n        Session IV: User-Centred Development and Team\r\n        Issues (Chair P. Abrahamsson)\r\n\r\n        Applying Agile Principles in\r\nan UED\r\n        Environment, N. Naumovich\r\n\r\n        Introducing User-Centric\r\nApproach into Agile Software\r\n        Development, Y. Dubinsky, T. Catarci, S.\r\n        Kimani\r\n\r\n        How\r\n        Does Readiness for Agile Software Development Relate to\r\n        Team Climate and Individual Personality\r\n        Attributes? T. Seger, O. Hazzan, R.\r\n        Bar-Nahor\r\n      \r\n    \r\n        17:30-17:45\r\n      \r\n\r\n      \r\n        Closing and\r\n        Feedback	Other	Research Work In Progres	2007
20070648	Introduction to XP	Robert C. Martin, a founder and first chairman of the Agile Alliance, presents\r\nan introduction to Extreme Programming, one of the most popular and widely-used\r\nagile methods.  In this session you will learn about the basic principles and\r\npractices of XP, and how these form a solid foundation for moving forward with\r\nagile development in your company.  Topics include: The Planning Game, Test\r\nDriven Development, Test Automation, Continuous Integration, Iterative\r\nDevelopment, Pair Programming, and Whole Team.	Customer	Beginners Program	2007
20070434	Agile ERP: "You don't know what you've got 'till it's gone!"	ERP systems are known for their highly integrated nature and proprietary\r\ndevelopment tools and processes. There are a number of things we just take for\r\ngranted in .Net & Java that turn out to be critical for doing Agile.  This paper\r\ndescribes the impact these implicit assumptions had on applying agile\r\ndevelopment processes on a medium-sized custom development project based on SAP\r\nNetWeaver 2004s. We describe the problems encountered and how the project team\r\novercame them.	Other	Experience Report	2007
20070464	An Introduction to Jameleon for Acceptance Testing	Come try out Jameleon, an acceptance testing engine for Java. In Jameleon, test cases and test scripts are \r\none and the same.  Each test application is treated as a set of independent feature tests, written in Java, \r\nwhich can be brought together into test cases using XML.  No environment information gets coded into \r\nany test.  Tests can be data-driven from external data-sources.  Current plug-ins lean heavily towards \r\nWeb testing, so we'll start there.  http://jameleon.sourceforge.net/  Bring your laptop and a network cable.	Testing	Workshop	2007
20070766	Architecture in an Agile Organization	This facilitated discussion focuses on Architecture and its role in an Agile\r\norganization.  Multi-team projects and mid-sized and larger organizations often\r\nrequire the standards and guidelines that collectively could be called\r\narchitecture.  It is a myth that Agile projects do not need architecture.  So\r\nwhy is it that architects often have trouble interacting with Agile teams?\r\n\r\nA common theme in Agile is balancing the creative freedom that Agile teams need\r\nwith just enough constraints to ensure overall success.  Architects, like\r\nmanagers, have a history of imposing the type of command and control that Agile\r\nteams correctly rebel against.  On the other hand, without direction from a\r\nhigher-level context projects can easily go astray due to localized\r\nsub-optimizations.  For example if two Agile teams work on one project and each\r\nworks independently then their end results are not likely to work together.  An\r\narchitect, or someone playing the role, normally handles the type of cross-team\r\ntechnical coordination that is required to keep the two teams on the same track.\r\n\r\nArchitects fall into a number of categories some deal with day-to-day\r\ndevelopment and are called Solutions Architects, others called Enterprise\r\nArchitects are tasked with understanding business needs and converting them into\r\ntechnical strategies.   Scaling Agile across teams or an organization requires\r\npeople to play the Architect role in a new way.\r\n\r\nThis session will be driving out the ways that enterprise and solutions\r\narchitects can help in the results-oriented Agile software delivery within an\r\norganization.  We will break-up into workgroups with each group looking for\r\nanswers on a particular aspect of this issue.\r\n\r\nWe will focus on understanding:\r\n1)\tThe Architect's role within Agile methodologies such as Scrum, Lean, and XP.  \r\n2)\tHow architects can either be a good Product Owner or help guide the Product\r\nOwner's prioritization and work breakdown on larger projects with multiple teams.  \r\n3)\tHow Solution Architects may become part of an Agile team or work as a "free\r\nagent" in helping guide specific product deliveries.  \r\n4)\tHow to keep good design across product components, common architectures\r\nacross Agile teams, and maintain an architectural strategy across an Agile\r\norganization.\r\n\r\nPlease bring your thoughts, skepticism, and understanding, so that we can all\r\nlearn how Architects and Agile organizations can really work together.	Planning	Discovery Session	2007
20070703	Big Bang Agile Transformation in an On-Demand World	Salesforce.com has recently completed an agile transformation of a two hundred\r\nperson team within a three month window.  This is one of the largest and fastest\r\nAgile rollouts, ever.  This talk discusses why we chose to move to an agile\r\nprocess, how we accomplished the transformation and what we learned from\r\napplying agile at scale.	Leadership	Experience Report	2007
20030078	Certifying for CMM Level 2 and ISO9001 with XP@Scrum	This experience report describes the followed road of getting certified for both CMM Level 2 and ISO9001:2000 on a time scale of 2 years by using agile methodologies. We discuss why we selected the combination of extreme Programming (XP) and Scrum as the base for our software development process and which "ceremony" we had to add in order to satisfy the requirements of CMM L2 and ISO9001. Also our major challenges at the moment are described, and the way we try to solve them. Furthermore we want to share a number of issues and experiences.	Experience Reports	Experience Report	2003
20050167	Agile Software Development in the Large	A lot of people still believe that agile software development \r\n    is for small teams only. However, the agile value system and the \r\n    principles behind as stated in the agile manifesto don't say anything \r\n    about team or project size. Furthermore the projects I'm working on are \r\n    typicallylarge and mission-critical. Therefore, several years ago I \r\n    took the challenge and tried agile software development in the large. \r\n    Meanwhile I made the similar experience on many large projects: Also \r\n    large teams can benefit from a value system that is beneficial for \r\n    small teams.\r\n\r\nIn this tutorial I want to show how to scale agile processes to teams of \r\n200. In fact, the same techniques are also relevant to teams of ten or more \r\ndevelopers, especially within large organizations.\r\n\r\nTopics include:\r\n - the agile value system as used in large teams\r\n - the impact of a switch to agile processes\r\n - the agile coordination of several subteams\r\n - the way project size and team size influence the\r\n   underlying architecture	Tutorials	Tutorial	2005
20070597	Creating Data-Driven Tests with SpringUnit	SpringUnit (http://springunit.sourceforge.net) is a Java framework for \ncreating data-driven unit and integration tests.  It enables reuse of test \ndata values across different tests by allowing test data and test logic to \nvary independently.  It leverages the JUnit and Spring frameworks, which \nfacilitates easy adoption by developers.  The tutorial reviews key \ncapabilities of JUnit and Spring; demonstrates the value added by SpringUnit; \nand shows how to create SpringUnit tests.  The tutorial will benefit Java \ndevelopers who incorporate rigorous unit and integration testing within an \nagile process.	Testing	Tutorial	2007
20070764	Change Artistry	When you start practicing agile you'll find yourself bringing about change at\nsome point: change in yourself and your way of working, change in your team and\nyour project, change in your organisation, change in the way you work with\ncustomers. Bringing and managing personal and organizational change is more than\nscience â€“ to be effective, we grow and train ourselves in becoming change artists.\n\nThe goal of this session is to share experiences with tools, techniques,\nprinciples and practices among fellow change artists. We would like to invite\nourselves and others to bring our favourite change artistry tools and practices,\nand explain what they are  to others . Through sharing, we want to understand\nwhy they work, and how they do or do not work in our context. By sharing we\nlearn new techniques from others.	Individuals & Teams	Discovery Session	2007
20070671	Consciously Evolving an Agile Team	Consciously Evolving an Agile Team\r\n\r\nBy now it is common knowledge that itâ€™s just as easy for a team to fail \r\nusing agile practices as it is with waterfall or any other method for building \r\nsoftware. So what is the secret to making agile work? How does a team \r\nbecome "self-directed" and "cross-functional?" The key to our team's success \r\nwas to have the core development team change its attitude toward software \r\ndevelopment. The team could then work to remove the barriers between \r\nindividual developers and then between the developers and the larger project \r\nteam.	Leadership	Experience Report	2007
20070888	Do We Need an On-Site Customer?  An Exploration of Customer Involvement	Do you need an on-site customer?  What difference does it really make?  As\r\nlong your customers communicate their needs somehow, everything will be fine,\r\nright?\r\n\r\nIn this simulation, you'll explore what happens with different approaches to\r\ncustomer involvement.  In the first part, you'll form small teams representing\r\nstart-up companies striving to get a foothold in the market, then simulate\r\ncreating a software product using a "traditional" approach to customer\r\ncommunication, such as written requirements.\r\n\r\nIn the second part, you'll simulates creating another software product, this\r\ntime using an agile "on-site customer" approach. Afterwards, the participants\r\ncompare the products, using objective guidelines, and discuss the differences.\r\n\r\nHow much of a difference does an on-site customer make?  How hard should you\r\npush your customers to work on-site with your team?  Come find out!	Customer	Tutorial	2007
20070430	From User Story to User Interface	You've chosen to take an Agile approach to development.  You've faithfully\r\nwritten down what users would like as a set of user stories.  You've prioritized\r\nthem and now it's time for developers to estimate how long it will take to\r\nbuild.  But, they've got questions on exactly what the user interface looks like\r\nand how it behaves.  As a matter of fact, so do you.  \r\n\r\n\r\nYou don't have the luxury of halting everything for a few days or weeks while\r\nyou locate a specialist to do the user interface design work.  You've tried to\r\ndraw a few pictures on the whiteboard, but you're not confident they really\r\nsolve the problem.  How can you quickly and predictably move from this simple\r\nuser story to a user interface you feel confident in?\r\nThis tutorial will introduce a practical approach to translating the goals users\r\nwould like to achieve and the tasks they wish to accomplish into user interface\r\ndesigns that effectively support those goals and tasks.\r\n\r\n\r\nAs a participant you will learn how a User Centered Design practitioner moves\r\nquickly from user task to user interface.  You'll learn through practice by\r\ntaking a set of user stories and transforming them into more tangible actions\r\nuser might take in the UI, then collaboratively building and testing paper\r\nprototypes of your proposed user interface.  In addition to paper prototyping\r\nskills and basic usability testing skills, participants will learn essential\r\nvisual design skills that can help improve the appeal of your user interface.	Customer	Tutorial	2007
20070855	Having fun with Rails and Agile Development	Agile software development brought fun back into building software by\r\nintroducing light-weight approaches to team communications and customer\r\ncollaboration.  Delivering working software and learning new technologies made\r\nus happy.  In spring of 2005, an open-source web application framework called\r\nRuby on Rails (RoR) was introduced to minimize tedious aspects of web\r\napplication development.  This framework allows a developer to focus on\r\napplicationâ€™s business logic, interact with customers frequently, and reduced\r\nthe cost of changes.  The Agile community quickly embraced the new framework as\r\nevidenced by one of the best selling technical books titled Agile Web\r\nDevelopment with Rails (by Dave Thomas, David Hansson, Leon Breedt, and Mike\r\nClark).  The RoR framework abandons traditional heavy-weight assumptions and\r\nencourages simple, creative interfaces. Good looking, easy-to-use applications\r\nmake the users happy, which makes developers happy.   In this workshop, we go\r\nbeyond the buzz by interactively demonstrating key elements of Rails framework.\r\n Then, we will have a group discussion/debate on if (or how) this framework\r\nenables project teams to be more agile.  We will end the workshop by\r\nimprovisational development of features requested by the workshop participants.	Developing	Discovery Session	2007
20070584	I Don't Like Mondays--Improving Agile Process Team Events	Abstract: Back in the 70's, a loud rock group called the Boomtown Rats had a big\nhit song called "I Don't Like Mondays". The song was based on the true story of\na young girl gone crazy at school because she hated Mondays. Teams moving to an\nAgile software development process may end up feeling equally annoyed. As they\nmove from a command-and-control culture to a collaborative culture, they are\nalso encouraged to rely less on comprehensive documents and more on\ninteractions. That means participatory decision-making and that means bringing\npeople together to brainstorm, prioritize, and create consensus-driven plans.\nSuch a process can start to look like non-stop meetings, starting first thing\nevery Monday morning. In this presentation, I bring my experience in working\nwith teams that are feeling a burden of meetings due to their move to Agile. I\nbring my guidance around how to alleviate meeting burnout. How can teams hold\neffective, decisive meetings? How can agile coaches ensure useful, goal-focused\nmeetings? And what flows and patterns of meetings can help teams, product\nowners, and stakeholders derive greater and greater benefits from adopting an\nAgile process? With the right culture and good meeting management, teams won't\ndread Mondays anymore.\n\nBenefits:  This presentation is intended to help attendees evaluate their own\nmeeting messes and take away specific information about how to clean them up. I\nhave written a book â€œCollaboration Explainedâ€ that provides detailed background\nto what I am presenting. This talk is intended to deliver some of that very\nspecific guidance through anecdotes of actual experiences from my work as an\nAgile coach.  My goal is that, walking out of this presentation, each attendee\nwill have a list of at least 5 practices they are willing to change about how\nthey currently run their Agile meetings. Additionally, my presentation style is\nto have minimal bullets and lots of pictures that are backed up by personal\nanecdotes and straightforward recommendations. Finally, this talk is not geared\nto one Agile methodology over another. It is truly intended for process\nimprovement regardless of your preferred set of Agile practices.\n\nContent Outline(very very high level!): \n\nI.\tWhy â€œI Donâ€™t Like Mondaysâ€â€”how meetings kill our Mondays\nII.\t10 common agile meeting dysfunctions and the impacts on agile teams\nIII.\tCollaboration salves and bromos that perk up meetings, create smooth team\nflow around meetings, and increase productivity and morale\nIV.\tDonâ€™t forget the guerillasâ€”helping to improve meetings even when itâ€™s not\nâ€œyourâ€ meeting\nV.\tYour â€œTo Doâ€ list for the very next meeting you run/attendâ€”what are the 5\nthings you are willing to try (aka â€œThe Art of the Possibleâ€)	Customer	Talking Head	2007
20070572	Innovation Games(R) for Customer Understanding	Innovation Games® are a set of proven techniques for working with small groups \r\nof customers to create higher value products and services. They are a means of \r\nfueling innovation by understanding what your customers really want. They have \r\nused by companies such as QUALCOMM, Emerson Climate Technologies, Wyse and \r\nTicketmaster as well as by father's seeking to better understand what their \r\ndaughters wanted in a new car. The tutorial describes each game, and in a \r\npractical manner shows how to plan, play, and post-process the results of the \r\ngame. The foundation of the tutorial is the opportunity to play many of the \r\ngames, thereby "learning by playing".	Customer	Tutorial	2007
20070809	Introduction to Acceptance Test Driven Development	In the past year or two, the number of people adopting agile processes has\nincreased immensely. This was evident by the number of new faces we saw at last\nyear's conference. This conference will attract even more new comers seeking\nanswers to the questions and challenges they are facing in their agile efforts.\nImplementing Automated Acceptance Tests is a difficult agile practice for teams.\nTherefore we think it would be invaluable to offer a tutorial that will gently\nintroduce new-comers to the practice. We'd also like to show a live demo of how\nto do Acceptance Test Driven Development (ATDD) on a real project using FitNesse\nand FitLibrary.	Testing	Tutorial	2007
20030081	Introducing Agile Development into Bioinformatics: An Experience Report	This experience report describes our efforts to introduce agile development techniques incrementally into our customer’s organization in the National Cancer Institute and develop a partnering relationship in the process. The report addresses the steps we have taken not only to deploy the practices, but also to gain customer support for them. It addresses variations we have used to adapt to our customer’s environment, including our approach to involving customer personnel at remote locations. We also address challenges we still must face, including how best to manage a product-line with agile development techniques.	Experience Reports	Experience Report	2003
20070891	Product Owners: From Idea to Implementation	Agile projects demand much from their product owners. This session has been \r\ndeveloped to help product owners who know Scrum become much better at \r\nunderstanding how to maximize value delivered from the team. The session \r\nstarts with an overview, but the majority of the time working through\r\nhands on exercises from a business case through to a first production release.\r\nThe session looks at business drivers, ROI, Product Backlog development, \r\nrelease planning, re-planning based on new data, and incremental releases. All \r\nmajor learning areas are covered by a tutorial. The exercises are fun, with a \r\nnumber of "gotchas" designed to both catch people making assumptions, create \r\nemotional attachment, and drive home learnings that will persist with the \r\nattendees.	Customer	Tutorial	2007
20070571	The Shout Kata: Programming a Client-Server infrastructure in full TDD	TDD does wonders for coders.  The technique in itself is outrageously simple\r\nto grasp.  It's easy to demonstrate it in a couple of hours.  Many books and\r\ntutorials have been written on the subject, yet it's still not enough.  Some\r\nnotoriously hard-to-test cases have yet to be properly addressed.\r\nBuilding a client-server infrastructure is one of them.  Most of the available\r\ndocumentation on constructing a client-server system involves multithreading...\r\nand code snippets with no test.  Indeed: because of its lack of determinacy,\r\nmultithreaded code is a test nightmare.\r\n\r\nWhat to do?  Copying and pasting code snippets in blind faith, hoping they\r\nwon't break later?  Making ("it's okay once in a while!") an exception to the\r\nTDD discipline?\r\n\r\nWe don't have to.  There is a better option.\r\n\r\nIn this session we will program from scratch a full-fledged client-server\r\nsystem providing a simple broadcast service (in the spirit of the "shout"\r\ncommand available in text-based virtual worlds), in full TDD.  All in one\r\nthread.\r\n\r\nThis coding journey will happen in the form of a (Paris Coders' Dojo) kata\r\nsession in Ruby, a session during which the developer and the copilot write the\r\nfull code directly in front of â€“ and with the full collaboration of â€“ the\r\naudience, submitting their design to everybody's questions, comments,\r\nsuggestions and approbation.	Developing	Tutorial	2007
20070796	Using Games to Learn and Rollout Practice	Among the problems faced when introducing a new practice are the way it works\r\nwith existent practices, and ensuring that those involved understand the new way\r\nof working. This is especially true when practices are tailored to individual\r\nprojects.  Alistair Cockburn called software development a cooperative game of\r\ncreation and invention. In the Agile community we are also used to XP's Planning\r\nGame, but can we extend the idea and actually use games to help learn not just\r\npractices, but a project's own practices? \r\n\r\nWe have been successful in capturing and composing practices in such a way that\r\nthey can be played together.  In this session, groups of attendees will form\r\nteams that will determine the current state of the 'project' they are taking on,\r\ndetermine the capabilities of the team and 'run' a couple iterations as games on\r\ngame boards. This will involve customers, managers and developers. Not only can\r\nplayers learn the concepts behind the practices, they will learn the practices\r\nthemselves.\r\n\r\nWe believe that games are the natural and best way to learn; why should children\r\nhave all the fun?\r\n\r\n1. Introduction\r\n2. Game playing\r\n    a.  Team formation\r\n    b.  Practice assembly\r\n    c.  Development game\r\n3. Wrap up	Customer	Workshop	2007
20071024	XR01: Adoption Stories part 1	Consciously Evolving an Agile Team\r\n\r\nby Aaron Ruhnow\r\nBig Bang Agile Transformation in an\r\nOn-Demand World \r\n\r\n\r\nby Chris Fry and Steve Greene\r\nAgile ERP: "You don't know what you've got\r\n'till it's gone!"\r\n\r\nby Gerard Meszaros and Janice Aston	Other	Session	2007
20070495	Introduction to Scrum	During this presentation Hubert Smits (ScrumMaster and Scrum Trainer) will\r\nintroduce the audience to Scrum, one of the most popular Agile methods. He will\r\nexplain the process details of this project management method, the place of\r\nScrum in the Agile world and talk about the roles within Scrum. Throughout the\r\npresentation and during the Q&A he will share his experience as an international\r\nScrum coach with the audience. The presentation is aimed at people who are new\r\nto Scrum and Agile.	Customer	Beginners Program	2007
20070538	Agile Architecture, Changing Application Servers	Some projects are simply too big to finish on the release schedule that you want to maintain. Rally agile \r\nengineering team delivered a very disruptive architectural change lasting nine months in parallel with \r\nthree releases. This paper will show how this was done without prolonging the usual release cycles and \r\nwithout technically crippling our product or doing a lot of throwaway work.  The main elements of our \r\napproach were: the "Sacrifice One" pattern, incremental delivery of the architectural change when \r\npossible, technical infrastructure modifications to support incremental changes to the architecture, and \r\naddressing the biggest risk first. When we were close to finished, we added the whole team for the final \r\npush to release with the new architecture. The end result was three successful releases of the existing \r\nsystem prior to the final release rolling out the new architecture.	Other	Experience Report	2007
20070907	Agile Myth Busters	Prepare to use and learn an Agile process to help us debunk a number of Agile\r\nmyths. You will gain experience in following an Agile process while learning how\r\nto combat common myths that you have or will face while discussing or practicing\r\nAgile.\r\n\r\nMyths often have a basis in truth in that someone has experienced it and told\r\nothers about it.  What makes the statement a myth is when it is believed to be\r\nan absolute when the findings are not universal or correct.  Take the old myth\r\nthat Agile developers are just Cowboy programmers who donâ€™t want to follow a\r\nprocess.  It is true that we have seen cases were developers use Agile as an\r\nexcuse to toss out all processes and practices that they donâ€™t want to follow. \r\nWhat makes it a myth is that Agile in no way supports or approves of Cowboy\r\nprogramming and is in fact a highly disciplined process. \r\n\r\nWe have seen members of our Agile teams profess a number of incorrect statements\r\nthat are attributed to Agile.  We fully expect audience members to argue that\r\nsome of these myths are valid and true and not myths at all.  We will keep the\r\ndiscussion productive by following an Agile process to find solutions or cures\r\nfor these myths within a one hour iteration.\r\n\r\n1.\tWe will post the myths on large Story cards on a Story board with one freebee\r\nsolution/test on the reverse.  \r\n2.\tWe will hold a planning session where the facilitators will act as customers\r\nto introduce the iteration and explain the stories. (15 minutes)\r\n3.\tWe will start an iteration where each table of participants acts as a pair.\r\n4.\tEach table will send a member to select a Story to work on.\r\n5.\tThe table will work on the Story for one pairing session posting their\r\nsolutions on stickies on the card and onto the Story board and selecting a new\r\nstory. There should be time for three pairing sessions. (3x15 minutes)\r\n6.\tAt the end of the third pairing session will we do an iteration review where\r\nthe customers will review and accept the results (15 minutes)\r\n7.\tFinally, we will end with a retrospective, discuss and share additional Agile\r\ndevelopment myths. (15 minutes)	Individuals & Teams	Discovery Session	2007
20090630	Refactoring Legacy Code 101 (Dev Jam / Clinic)	You've started your new project and "surprise" (not really) you're dealing with legacy code. This unique workshop will focus on a few specific techniques that help make up the majority of what to do in improving legacy code design. Our forefathers gave us "Extract Method" and "Rename". Cleaning up code is fun and challenging at times! When you achieve some level of code cleanliness or success you begin to feel the reward soon after, even during. A few agile-minded friends will be helping to walk attendees through a pairing adventure with plenty of typical legacy examples to work with together.	Developer Jam	Clinic	2009
20070735	Behavior Driven Database Development (BDDD)	A behavior-driven design (BDD) approach can be taken to a database schema just \nlike it can be taken to application code.   Behavior driven database design \n(BDDD) is enabled by database refactoring, database regression testing, and \ncontinuous database integration:\n1. A database refactoring is a simple change to a database which improves the \ndesign without changing its semantics.  \n2. Database regression testing is the act of running a comprehensive test \nsuite which validates a database on a regular basis, ideally whenever a change \nis made to the database schema itself or when the database is accessed in a \ndifferent manner.  \n3. Continuous database integration is the act of rebuilding and retesting a \ndatabase schema whenever it changes. \n\nIn this workshop Scott Ambler will begin with an overview of BDDD and why it \nis important for agile software development.  As a group we will identify what \nwe feel to be critical aspects to be discussed regarding BDDD.  Participants \nwill then self-organize into smaller groups of 4-6 people to discuss an aspect \nwhich they are interested in.  After this discussion each subgroup will \npresent their findings to the overall group.\n\nPotential aspects we may wish to discuss include:\n1. Is there a need for BDDD?\n2. What are the cultural/organizational challenges to adopting BDDD?\n3. What tooling support is required?\n4. What needs to be tested in a database?\n5. How well will BDDD scale?	Developing	Discovery Session	2007
20070509	Demonstrating Responsibility: The Mindset of An Agile Leader	Agile approaches succeed and flourish where people demonstrate the courage to\r\nface the truth quickly about change, calendar, capability, capacity, or\r\ncompetition. \r\n\r\nHowever most people, in most organizations donâ€™t take responsibility when things\r\ngo wrong. The result is that they do the opposite of what agile calls for and:\r\n \r\n + They harm their projects,\r\n + They harm their teams, and ultimately,\r\n + They harm themselves.\r\n \r\nDemonstrating personal responsibility is the first step in \r\n\r\n + Achieving success,\r\n + Leading anybody, \r\n + Changing anything, \r\n + Solving any problem, and \r\n + Managing every relationship. \r\n\r\nEverybody knows that! Then why doesnâ€™t everybody do it? The failure to take\r\nresponsibility stalls projects, kills teams, and is a leading reason why smart\r\nmanagers fail.\r\n\r\nThis session will show you:\r\n\r\n + Why agile leaders success soars when they take 100% responsibility\r\n + The inner workings of personal responsibility and how to tap into it at work,\r\nand,\r\n + What to do to take personal responsibility for your agile projects and to\r\nbuild responsible leaders, teams, and communities.\r\n\r\nThis material has a proven track-record in the Agile community and at Agile\r\nconferences.\r\n\r\nBENEFITS\r\nThe primary benefit is that this session will include no platitudes about what\r\nproject leaders should or shouldn't do. Instead participants will receive in-\r\ndepth, research-based, fundamentally useful information and understanding about\r\nhow your â€“ and everyone elseâ€™s -- mind works that affects your agility at work.\r\n\r\nPowerful visual and mental models packed with insightful truths.\r\n\r\nPractical tools for enhancing responsibility in individuals, teams, and\r\norganizations.\r\n\r\nApplication examples, vignettes, and wisdom for taking responsibility in project\r\nwork and other development environments of all kinds.\r\n\r\nIn addition, if you adopt and practice what you learn in this session you can:\r\n\r\n + Develop tremendous self-discipline for agile productivity\r\n + Confidently lead yourself and others\r\n + Accomplish far more with far less effort\r\n + Recognize and resolve problems and upsets rapidly\r\n + Courageously select the ethical high-road under pressure\r\n + Balance your life\r\n + Accelerate your career\r\n + Transform teams and cultures\r\n + Learn faster\r\n + Improve communication and relationships.\r\n + Increase choices.\r\n + Reduce your anxiety.\r\n + Be more authentic in life and at work.\r\n\r\nCONTENT OUTLINE\r\nThe relationship of agile principles to on-going research about the\r\nResponsibility Process and the Keys to Responsibility\r\n\r\n + Responsive change\r\n + Pre-acceptance of results\r\n + Iterative learning\r\n\r\nHow some agile shops have adopted this information and redefined responsibility as:\r\n\r\n + Owning your actions and outcomes, and\r\n + Refusing to operate from blame, justify, shame, obligation, or quit which are\r\nall tremendous wastes of resources.\r\n\r\nThe two times we talk about responsibility at work:\r\n\r\n + When making assignments and action items\r\n + When things go wrong\r\n\r\n   (Guess which occurs with greater frequency?)\r\n\r\nThe Responsibility Process:\r\n\r\n + A research-based descriptive model of how we are hard-wired both to avoid and\r\ntake ownership for our actions and outcomes.\r\n + Takes 5 minutes to teach and try on for fit to see if your mind operates this\r\nway.\r\n + 6 mental strategies we adopt to avoid taking ownership, but only one for\r\ntaking ownership\r\n + Hence responsibility is not a personality trait but an observable, learnable,\r\nand teachable mental process anyone can tap into\r\n + It is revealed in our language\r\n\r\nThe Keys to Responsibility\r\n\r\n + A prescriptive framework for interacting with the Responsibility Process\r\n + The three keys to mastering responsibility\r\n\r\nApplying the Responsibility Process and Method to\r\n\r\n + Leading yourself\r\n + Leading others\r\n + Building team and community\r\n + Change\r\n + Developing Agile Cultures	Leadership	Tutorial	2007
20070757	Evolving into Embedded Development	In late 2005 we had the opportunity to start our first embedded development\r\nproject. We apply agile practices to a variety of domains from web development\r\nto desktop applications to factory floor test equipment. The challenge for\r\nthis new work was not learning the environment and technology. Our challenge\r\nwas applying the practices of the agile world to the small and complex world\r\nof embedded systems. The hurdles were numerous: we battled the archaic state\r\nof many embedded tool sets, the lack of integration with tools like Rake that\r\nprovide easy automation, and poor support for object oriented design. We've\r\novercome each of these difficulties. This report is about our yearlong\r\nexperience in introducing our development practices to embedded development.	Other	Experience Report	2007
20070383	Guerilla Agile: Adopting Agile Practices Even When Your Management is Still Playing Dysfunctional Waterfall Games	Chances are good that if youâ€™ve worked on a project, youâ€™ve encountered a\r\nschedule game or two (or three or four). As part of a team, youâ€™ve seen Schedule\r\nChicken or 90% Done. If youâ€™re a project manager, youâ€™ve probably pushed back\r\nagainst We Gotta Have it; Weâ€™re Toast Without It, the Queen of Denial, Weâ€™ll Go\r\nFaster Now, or Split Focus. \r\nUsing timeboxed iterations, a ranked product backlog, implementing by\r\nfeature, tracking tested features, and other agile practices can help you avoid\r\nand stop playing schedule games. But you canâ€™t do this alone. First help your\r\nteam and your management understand they are playing schedule games. Then, once\r\nthey understand the games, enlist their help in solving the underlying problems\r\nthat lead to the games.\r\nIn this session, weâ€™ll quickly walk through the schedule games, and then\r\nbreak into small groups based on which games are most often played at the\r\nattendeesâ€™ organizations. Each group will develop a plan to use agile practices\r\nto avoid the schedule games.	Leadership	Discovery Session	2007
20070422	Introduction to Lean Software Development	Lean Thinking creates a theoretical basis for Agile Software Development by \ndrawing on decades of proven management practices in fields as diverse as \nmanufacturing, retailing, health care, and product development.  This talk is \naimed at the tire-kickers who want to know why Agile software development \nmakes sense and why it works.	Customer	Beginners Program	2007
20070613	The First Thing to Build: Leveraging Trust on Agile Teams	Trust forms the bedrock of self-organizing Agile teams and provides the\r\nfoundation for team processes. How do Agile teams confront this paradox? Teams\r\nneed trust, but trust takes time to build. With an understanding of how trust\r\ngrows, teams can stimulate and accelerate trustworthiness and trusting among\r\nteam members and between the team and other important stakeholders. In this\r\nsession, team members and team leaders will learn: a definition of professional\r\ntrust, a model for team interactions that leverages trust, ways to recognize\r\nwhen a team has â€œtrust issues,â€ and skills that help teams develop greater\r\ntrust. To quote author and agile SCM blogger, Brad Appleton, â€œMaybe the first\r\nand most important thing that an agile development project builds is trust!â€	Customer	Talking Head	2007
20030049	Review of Agile Approaches	In our Information Age, competitive advantage comes from speed and flexibility. With shortened product development cycles and rapidly changing business initiatives, the formula for success has been articulated by Tom DeMarco: “Agility: 1, everything else: 0.” Agile Software Development redefines how software will be delivered in our 21st century economy.\n\nThere has been a rapidly rising interest in these new approaches to software development such as Extreme Programming, Scrum, Adaptive Software Development, Feature-Driven Development, and Dynamic Systems Development Methodology. Furthermore, scores of organizations have developed their own “lighter” approach to building software.\nThis tutorial is based on the material in Jim Highsmith’s book, Agile Software Development Ecosystems. He is the developer of one of the Agile Methodologies (Adaptive Software Development), a coauthor of the Manifesto for Agile Software Development, and founding member of the AgileAlliance. The workshop addresses key questions: What are Agile Methodologies? What problem domains to Agile Methodologies address? What are the common principles and practices of the various Agile Methodologies? What are the similarities and differences between the various Agile Methodologies?\n	Tutorials	Tutorial	2003
20030051	From Agile Modeling To Agile Data	In this interactive tutorial we will discuss two agile methodologies --Agile Modeling (AM) and the Agile Data (AD) method.  AM is a chaordic, practices-based methodology which describes how to effectively model and document software based systems.  Modeling and documentation does not have to be dysfunctional!  The AD method encompasses philosophies and techniques which enable data professionals to become active and productive members of an agile software development team.  Modern software development is evolutionary (iterative and incremental) in nature, therefore data professionals need to adopt techniques such as database refactoring, evolutionary performance tuning, Agile Model Driven Development (AMDD), and Test-Driven Development (TDD).  We'll also discuss implementation issues -- mapping objects to RDBs, referential integrity, security access control, transaction control -- that include but go beyond the domain of data.  The AD method also addresses enterprise issues, enterprise architecture and enterprise/data administration, that are critical to your success.  Even enterprise groups can to take an agile approach to development.	Tutorials	Tutorial	2003
20030052	An Agile UP	The Unified Process (UP) is popularand with good reason, as it includes skillful practices such as iterative development, and early attention to risks.  However, many organizations are adopting it in an unskilled manner, superimposing “waterfall” or “heavyweight” values onto it that need not apply. Applied well, the UP encourages an agile approach, and so you will learn the essential useful UP practices, the keys to its successful introduction in an organization, and how to apply the UP in an adaptive and agile spirit. And, how to screw it up.  Further, many XP and Scrum practices are either part of the UP, or specializations of more general UP guidelines. What are these, and which may be adopted consistent with a UP project? Nevertheless, this tutorial motivates the need for more than just XP or Scrum on many projects. You will learn why a combination of primarily the UP with other agile process practices is an excellent approach.	Tutorials	Tutorial	2003
20030053	Inside Feature Driven Development	Feature Driven Development (FDD) is a proven-in-practice process for producing software applications. Rather than being "all new," Feature Driven Development is a blend of known best practices and techniques, with only those things that really matter abstracted out and described in its simple process descriptions. Only five processes of one to two pages each - and they tell you what to do. This tutorial teaches you the thinking and practices behind FDD and the five FDD processes in detail - explaining the how and the why for each of them.  You will learn how to apply the most relevant practices from Feature Driven Development and how to avoid common mistakes. You will learn why practices are included in FDD and why other practices are not. You will learn about the project as a system versus the software system being constructed. You will learn what a client-valued feature is and how to express a project as a categorized list of client-valued features. You will learn how the first three FDD processes form a project startup phase and how useful a risk reduction strategy that is for you and your clients, plus learn about important predictive metrics from the startup phase to help you size and cost the subsequent construction phase. You will learn how feature teams are dynamically formed, changing the traditional hierarchic project structures. You will learn about feature milestones and how they solve that worldwide problem word for developers - “finished.” Plus you will learn how the milestones are used for amazingly accurate tracking and reporting that is meaningful to clients and keeps your project team better focused  as everything is expressed in the language of the domain rather than the technologies in use. You will learn how in the construction phase, features are bundled into workpackages and collectively moved through the design and build processes. You will learn about scope or feature creep and how to manage it, plus where the accountability for estimating really lies.  The tutorial also teaches, for the first time publicly, FDD workflow which comprises the key “how to” lessons for the FDD construction phase processes  Design By Feature and Build By Feature.  Learn how there are multiple levels of delegation and self-organization happening within the FDD construction phase, but all within planned assembly.  You will learn how and why FDD can scale to very large projects and, finally, throughout the tutorial you will learn key lessons from over 20 years experience in the industry. Bring your questions, stories of what's worked and what hasn't. Interact with and learn from an experienced project manager and the developer of Feature Driven Development.	Tutorials	Tutorial	2003
20030054	XP/Agile Organizational Change - Tools for Successful Adoption	Yes, XP and other Agile methods are awesome, but what about your colleagues and managers who staunchly resist them? Have you retreated to practicing only a few XP/Agile practices because you haven’t been able to overcome organizational resistance? Do you feel you are not important enough in your organization to help make extreme changes? Helping organizations, teams and individuals adopt an XP/Agile process is a whole lot easier when you’ve learned the tools of organizational change. In this tutorial, you’ll learn from folks who’ve made extreme changes happen across entire organizations with the help of tools like: change readiness assessments, project charters, test-driven management, retrospectives and more. This tutorial is hands-on and chock full of real-world stories. Join us and learn to practice your own change magic.	Tutorials	Tutorial	2003
20030055	Understanding Users and User Tasks	Usability is increasingly recognized as important for the success of software and Web-based applications, but developers often lack the time and techniques needed for effective user interface design. Extreme programming and other agile methods have proved their ability to deliver quality software quickly, but have offered little in the areas of software usability and user interface design. This tutorial introduces core techniques of a proven approach that complements agile development methods. In agile usage-centered design, the focus is on quickly developing a clear understanding of users and user tasks through minimal models that provide maximum payoff. Using hands-on application to a simplified case study, the tutorial will show how ordinary index cards can efficiently model the roles users play in relation to a system and the tasks they need to perform within those roles. The use of card-based user and task models to inform and organize planning and design will be illustrated.	Tutorials	Tutorial	2003
20030056	Collaboration 4 Agile Projects	Human interactions are the way we get work done and are the way decisions are made. In Agile projects, we place interactions over documentation and collaboration over contracts. So, meetings for any decision points in an Agile project need to be lean, focused, and productive. Agile teams with outstanding collaboration skills hold the true key to making their projects work. This fast-paced tutorial demystifies the “art” of collaboration with common-sense skills and processes to use again and again in every Agile interaction. In this tutorial, participants will: understand the role of collaboration and consensus in Agile Projects, learn key techniques and processes to use in Agile collaborations and practice these collaboration techniques.\n\nThis tutorial is mapped to the International Association of Facilitators’ schema for effective meeting management. The instructors teach with a high-energy and highly interactive style, maximizing the learner’s experience through the application of sound adult learning techniques. Templates and agenda guides will be provided as “take-aways.”\n	Tutorials	Tutorial	2003
20030057	The Lean Development Toolkit	The Lean Software Development tutorial, identifies seven fundamental “lean” principles, adapts them for the world of software development, and shows how they can serve as the foundation for agile development approaches that work. Along the way, you will discover 22 “thinking tools” that can help you customize the right agile practices for any environment.\n\nBetter, cheaper, faster software development. You can have all threeif you adopt the same “lean” principles that have already revolutionized manufacturing, logistics and product development.\nIterating towards excellence: software development as an exercise in discovery\n\nManaging uncertainty: “decide as late as possible” by building change into the system\n\nCompressing the value stream: rapid development, feedback, and improvement\n\nEmpowering teams and individuals without compromising coordination\n\nSoftware with integrity: promoting coherence, usability, fitness, maintainability, and adaptability\n\nHow to “see the whole”even when your developers are scattered across multiple locations and contractors\n\nSimply put, Lean Software Development helps you refocus development on value, flow, and peopleso you can achieve breakthrough quality, savings, speed, and business alignment. For an outline of the tutorial, go to:  http://www.leantoolkit.com/leantutorial.htm\n	Tutorials	Tutorial	2003
20030058	Customer Testing with FIT: a Hands-On Introduction	This tutorial will introduce the Framework for Integrated Test (fit) and demonstrate its use in Test-Driven Development (TDD) as practiced in Extreme Programming and other agile development methods. Projects use fit-style tests as much to guide programming as to test the correctness of the result. Test-driven designs are more easily "refactored" making it the only programming method that expects programs to get "cleaner" over time.\n\nShort lectures will explain just enough of Extreme Programming to establish the context for test-driven design. These will be followed by live demonstrations and laboratory exercises. The labs will use simple Java, but the emphasis is on familiarity with the frameworks, tools and techniques, not programming. If you are unfamiliar with Java you will learn enough just by watching so as to be able to complete some of the exercises and received all of the benefits of the class.\nBring a laptop, or join someone who has, to do hands-on exercises. Bring a wireless networking card to participate in additional "online" activities. Install java at home to save time in class. Google "sun java download" to find a version for your computer.\n	Tutorials	Tutorial	2003
20030059	Introduction to Scrum	This tutorial will create an experience of Scrum in a project setting, showing how to plan and manage products and projects using incremental, iterative development based in the agile processes. Specifically, this tutorial will provide:\n\nAn understanding of empirical processes, emergence, self-organization, and adaptation;\n\nA detailed understanding of Scrum principles, flow, roles, artifacts, and operation;\n\nA detailed case study of Scrum being used to solve a competitive problem for a large financial institution;\n\nA detailed description of the role and responsibilities of the product owner, ScrumMaster, and development team;\n\nA description of how to use Scrum to develop software for mission critical and life critical systems;\n\nAn approach to using Scrum for fixed price/fixed date contracts;\n\nAn understanding of how Scrum addresses CMM level 2 and 3 requirements;\n\nAn understanding of how to quickly implement agile software development so projects start producing product increments;\n\nAn understanding of implementation alternatives and their benefits for Scrum;\n\nAn understanding of how Scrum solves predictability and productivity issues for projects and products;\n\nAn understanding of the overlap between Scrum and Extreme Programming and how to use Scrum to wrap Extreme Programming to provide project and organizational scalability and control; and,\n\nAn understanding of Scrum as a methodology and toolset that can be used to Plan, Customize, and Manage any type of project.\n\n	Tutorials	Tutorial	2003
20030061	Project Retrospectives in Agile Development	The Principles Behind the Agile Manifesto state that, “At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.” How can we do that? This tutorial will present techniques for facilitating project retrospectives that allow teams to discover what they’re doing well so that their successful practices can be repeated and what they’re not doing as well so that they can discuss how to improve. Retrospectives are not “finger pointing” sessions, but rather a fun and highly effective series of activities in which teams can reflect on the past in order to become more effective in the future. Participants will be introduced to the retrospective process, learn various techniques for leading retrospectives, hear the experiences of the tutorial leaders who have led retrospectives in various kinds of projects, and will get the opportunity to participate in a retrospective simulation.\n\nwww.lindarising.org\n	Tutorials	Tutorial	2003
20030062	The Crystal Methods, or How to Make a Methodology Fit	Crystal is a family of highly tolerant, lightweight methodologies and a framework for tuning them to your specific situation. Here, methodology means nothing more (or less) than the conventions the team agrees to use. Level of detail and formality, documents and reviews, office seating and timing of parties can be part of those conventions. Projects vary in size, criticality and priorities, and so should your methodology. The strengths and weaknesses of the organization, the specific people, even the office layout affects how the team best works, and therefore should influence the methodology.\n\nA Crystal methodology aspires to be the least constrictive and yet effective methodology for any particular project team. This tutorial describes the principles and techniques for shaping a methodology to the project-team combination, introduces the colors in the Crystal family, compares different examples of the Crystal family to each other relative to the principles, and shows the differences between Crystal Clear and XP. Expect to learn the methodology tuning principles, and experience how easy and fruitful a methodology-tuning session can be.\n	Tutorials	Tutorial	2003
20030063	How to be a Coach	It’s difficult to start a new process, but a coach can make this easier. A coach is part developer and part manager: a coach can help a team stay on process and can help the team learn. A coach brings in some outside perspective to help a team see itself more clearly. We’ll use a combination of lectures, games, and exercises to explore and practice skills that coaches (and team members!) can use. The goal of this tutorial is to give participants: a deeper look at the coach’s role, tools to help communicate better, practice with charts, retrospectives, and other feedback tools and practice diagnosing team problems.	Tutorials	Tutorial	2003
20030064	Testing Agile/Agile Testing: What Testers Do for Agile Teams, What Agile Practices Do for Testers	There are a plethora of agile processes being practiced: Extreme Programming, SCRUM, Crystal, FDD, DSDM, and others. It’s not always clear how a tester fits in to these new software development methods. Even if your organization isn’t using agile methods to develop software, you can benefit from using an agile approach to testing. For the tutorial we’ll use XP as an example, but the lessons learned apply to other agile processes. We’ll go through an iteration of an XP project step by step and show what goals to reach for, which activities to engage in, and some helpful techniques for testers to use. The exercises are built around an XP project to develop a simple web-based tracking application. We’ll examine the techniques we use and see how they could apply in a non-agile setting.	Tutorials	Tutorial	2003
20050176	A Project Manager's Survival Guide to Going Agile	When software development project teams move to Agile\r\n methodologies, they often leave project managers\r\n behind.  Traditionally trained project managers are\r\n confused as to what their new roles and\r\n responsibilities should be in an environment that no\r\n longer needs them to make stand-alone decisions.  \r\n This tutorial focuses on re-defining the job of\r\n project manager, and the new duties of the program\r\n management office.  Special emphasis is placed on\r\n the\r\n shift to servant leadership, with its focus on\r\n facilitation and collaboration.  Attendees should\r\n leave not only with a better understanding of what\r\n changes they need to make professionally, but also\r\n with clear guidance as to how to make these changes\r\n and achieve their goals.	Tutorials	Tutorial	2005
20030065	YP and Urban Simulation: Applying an Agile Programming Methodology in a Politically Tempestuous Domain	YP is an agile programming methodology that has evolved over the past 15 years. Many of its features are common to other agile methodologies; its novel features include using a highly visible, physical software status indicator (a real traffic light), and a well-defined nested set of development cycles. It is also an exceptionally open process, with the current status of the development process visible to the customers, as well as the code and documentation. We are using YP in developing the software for UrbanSim, a sophisticated simulation system for modeling urban land use, transportation, and environmental impacts over periods of 20 or more years under alternate possible scenarios. Our purpose in developing UrbanSim is to support public deliberation and debate on such issues as building new transit systems or freeways, or changing zoning or economic incentives, as well as on broader issues such as sustainable, livable cities, economic vitality, social equity, and environmental preservation. The domain of use is thus politically charged, with different stakeholders bringing strongly held values to the table. Our goal is to not favor particular stakeholder values in the simulation or its output, but rather to let different stakeholders evaluate the results in light of what is important to them. There are several implications of this for the development process. First, having credible, reliable code is important -- and further, both the code itself and the development process that produced it should be open and inspectable, not a black box. Second, to allow us to respond quickly to different stakeholder values and concerns, a flexible agile development process is required.\n\nBjorn plans to bring his foul weather gear to the conference and mount a 2 minute production at the beginning of the talk (of the opening scene quoted in the Introduction), using selected members of the agile community for the parts of Ship-Master, Boatswain, and assorted mariners.\n	Research	Research Paper	2003
20030067	PARFAIT: Towards a Framework-based Agile Reengineering Process	The paper presents a sketch of a framework-based agile reengineering process, named PARFAIT, whose objective is to provide the users with evolved versions of legacy systems, as soon as possible. The overall static structure of the Rational Unified Process (RUP), originally developed for forward systems engineering, has been here adapted for reengineering and is used for PARFAIT documentation. Frameworks are used in the process aiming at an agile approach to support the reengineering. Frameworks allow applications to be rapidly created, more than if they are built from scratch. Agile characteristics, such as incremental approach, cooperative approach with users and customers, straightforwardness, adaptability, etc. give PARFAIT the ability to support the rapid evolution of the legacy system to a new version, according to the users and customers needs. A summary of a case study and the results obtained in the reengineering are presented. This study refers to a concrete reengineering case of a real system for controlling entry and exit of electronic appliances in a repair shop.	Research	Research Paper	2003
20030068	Observations on Balancing Discipline and Agility	Agile development methodologies promise higher customer satisfaction, lower defect rates, faster development times and a solution to rapidly changing requirements. Disciplined (or plan-driven) approaches promise predictability, stability, and high assurance. However, both approaches have shortcomings that, if left unaddressed, can lead to project failure. The challenge is to balance the two approaches to take advantage of their strengths and compensate for their weaknesses. We believe this can be accomplished using a risk-based approach for structuring projects to incorporate both agile and disciplined approaches in proportion to a project’s needs.\n\nThis paper presents six observations drawn from our efforts to develop such an approach. We follow those observations with some practical advice to organizations seeking to integrate agility and discipline in their development process. The material presented here is drawn from our book Balancing Agility and Discipline: A Guide to the Perplexed (Addison Wesley, 2003).\n	Research	Research Paper	2003
20030069	Throwing Down the Gauntlet: Finding a Place for Discount Usability Engineering in Agile Development	Many software development organizations are reporting great success with agile software development techniques. However, few techniques explicitly incorporate usability engineering. Further, some agile techniques may not address certain kinds of usability problems. While there are many usability engineering techniques, discount usability engineering should be of particular interest to the agile development community because the two disciplines share many of the same underlying principles. The challenge for the agile development community is to find ways to incorporate such discount usability engineering practices.	Research	Research Paper	2003
20030070	Test Driven Development and the Scientific Method	The scientific method serves as a good metaphor for several practices in Extreme Programming (XP). We explore the commonalities and differences and show that the scientific method, by analogy, can be used to better understand Test Driven Development (and vice versa).	Research	Research Paper	2003
20030071	Change Your Organization (for Peons)	In this experience report, a programmer at a medium-sized software company explains his tactics for bottom-up organizational change.  The tactics are accompanied by personal recollections of related experiences. Tactics are presented in three primary sections: the difficulty of making change; getting attention; and making a case for change.  A brief section on the consequences of change follows.	Experience Reports	Experience Report	2003
20030072	Evolving Agile in the Enterprise: Implementing XP on a Grand Scale	How can XP or other agile methods be used in large corporate IT shops? One large company found out, making XP the official corporate software development methodology for all projects over an 18 month period and counting. This paper explores many facets of that experience, beginning with a summary of the eight key determinants of organizational change model. It then follows the organization in implementing XP, using the change model as a yardstick to assess the success of the hoped for change. The paper concludes with key learnings regarding how to implement an agile methodology within a large organization.	Experience Reports	Experience Report	2003
20030073	Improving the Interface Between Business and Product Development Using Agile Practices and the Cycles of Control Framework	The paper describes how we created and adopted an agile product development process in a small software company based on the Cycles of Control framework by combining selected agile practices and principles from the Scrum and XP methodologies. Describing the development process using the framework helped in identifying the crucial control points between business and development and enabled defining practical and well-functioning connections between them. The control points enable visibility and flexible management of product development status and direction. Currently Business understands development status better, which has led to fewer interruptions between the control points, and thus improved working conditions for Development. Positive experiences are reported of newly adopted practices such as scrum meetings, pair programming, and unit testing. However, finding and adopting technical tools to facilitate the process proved to be challenging.\n	Experience Reports	Experience Report	2003
20030074	Retrofitting an Acceptance Test Framework for Clarity	An XP customer needs to write and check acceptance tests. However, the format for defining the tests needs to be clear. Many acceptance test approaches use arcane formats which do not promote clarity for the customer, due to a conflict of interest between the complexities of automation and the needs of the customer. We discuss the evolution of acceptance tests to improve their clarity for the customer.\n\nSat is an acceptance test system for testing socket-based servers with multiple clients. The first version used an XML file to define the tests in a test suite. Any errors detected were written to a text log. There were two problems with this first version. The XML format made it difficult to read and edit the tests. When an error was given, it was not easy to identify the place in the test where the problem occurred.\nSat was altered to make use of Fit, a testing framework that uses HTML tables for defining tests and reporting any errors. We found the new version considerably easier to use. The tabular form makes it much simpler to read and alter the tests. Any errors are reported in a copy of the tables, in the place where they occur. We have also found it convenient to include information about the tests in the HTML, providing a form of "literal testing".\n	Experience Reports	Experience Report	2003
20030075	It's More than Just Toys and Food: Leading Agile Development in an Enterprise-Class Start-Up	One of the myths of Agile Development is that self-organizing teams do not need direction. The agile development movement focuses primarily on programmers: programmers should do X, Y and Z, and everyone else should do whatever it takes to support the programmers. A fantastic start, since programmers are the people who actually build the organization’s product; however, few techniques are offered to the rest of the organization.\n\nThe admonishment to managers instructing them to only provide “toys and food” and buffer the team from external distractions implies that leaders in an agile environment should do less work, and be less involved with the team on a day-to-day basis, than in a more traditional environment. In fact a leader in an agile group must do more than he/she would in a more traditional environment and must be even more involved in the day-to-day activities of the team.\nThe Sabrix development discipline has strong and deeply involved management as one of its keys to success. Management best practices, when applied appropriately and discerningly, do not limit, but rather enhance, the productivity and job satisfaction of the individual members of the engineering teams. This paper discusses ways a manager can and should help the team be more productive, have a better understanding of their fit in the organization as a whole and develop team members by being active and involved with the team and the rest of the company.\n	Experience Reports	Experience Report	2003
20030076	Ready-to-Roll Boxcar Development - a Flexible, Quality-Weighted Process	In January of 1996, Intuit’s QuickBooks team was faced with an aging code-base using a custom Mac/Win GUI toolkit, a large and rapidly growing customer base, and a rapidly growing and product-inexperienced engineering team. To increase the product’s quality and feature predictability while retaining its ship date rigidity, we created “Ready-to-Roll” Boxcar Development.\n\nThe process enabled the defining of each new feature, enhancement, or engineering re-architecture as a set of boxcars on the product train. A “coupled” boxcar was rapidly brought to a supportable level of quality, or “decoupled” for re-evaluation and re-engineering. Frontloading the highest priority boxcars increased predictability of the product train's contents, while the process allowed for greater flexibility with respect to overall content.\n“Ready-to-Roll” Boxcar Development kept the product within 2-3 weeks of being supportable and shippable. The process focused on individuals and interactions, working software, customer collaboration and responding to change. Better yet, it worked!\n	Experience Reports	Experience Report	2003
20030077	Iteration Advocate/Iteration Transition Meeting: Small Sampling of New Agile Techniques Used at a Major Telecommunications Firm	This experience report demonstrates a successful implementation of Agile at a major telecommunications firm. Critical aspects to mention about this particular software endeavor include a) this could be one of the largest implementations of Agile documented thus far (approximately 275 immediate and over 3,000 supportive contributors involved), b) the team practicing Agile did so under the constraints of a waterfall-gated (both milestone and financial) environment, c) a 'practice tapestry'' approach was used to 'weave' together elements of Agile that would work for this organization, and finally, d) new practices, not previously known to the Agile community were applied in addition to those well known thus far. Specifically, iteration advocate and iteration transition meeting are two examples of new concepts. This paper focuses on these new practices in an effort to share them with the Agile community. The weaving together of existing and new practices, enabled this major telecommunications firm to deliver a major software release to its large customer base.	Experience Reports	Experience Report	2003
20030079	Making Agile Development Work in a Government Contracting Environment	Before any of the current “agile” development methods, Earned Value Management provided information for planning and controlling complex projects by measuring how much “value” was produced for a given cost in a period of time. One shortcoming of an agile development method is its inability to forecast the future cost and schedule of the project beyond the use of “yesterday’s weather” metrics. These agile methods assume the delivered value, “velocity” in the case of XP, is compared with the estimated value  this is a simple comparison between budget and actual cost resulting in a Cost Variance. No Schedule Variance process is directly available in XP. Earned Value Analysis provides a means of predicting future schedule and cost variances through three measurements  budgeted cost for work scheduled, actual cost for work performed, and budgeted cost for work performed (earned value). This paper describes the use of Earned Value in conjunction with Agile Development on a mission-critical, high-security, government project.	Experience Reports	Experience Report	2003
20030080	Agile Development in the Old Economy	As part of the delivery an automated hub for a postal operator, the Solystic company has to build a complex and feature rich Information System that supports a highly automated process with multiple intricate sub-processes and exceptions.\n\nThe effort has several challenges:\nIt is business critical for the customer, and the output of the project will give the customer a leading position;\n\nIt is the first time Solystic is managing a complete system project, although its mother company Northrop Grumman had previous experience of this business;\n\nThe program is one of the first of the Solystic company in the international field;\n\nIt is a fixed price, fixed time contract with a short time frame.\n\nTo face all these challenges, the software development group in charge of the Information System has adopted a number of agile practices and techniques to manage the project. The major project settings are adapted from Alistair Cockburn's Crystal set of methodologies, SCRUM and Jim Coplien's work on organizational patterns.\nThis paper presents the findings and lessons learned by the team and its manager.\n	Experience Reports	Experience Report	2003
20030082	Agile Development and Remote Teams: Learning to Love the Phone	I currently work on a project where we adopted an agile process that integrates elements of extreme programming and agile modeling. Our approach is unconventional however; instead of the team being co-located, I work remotely as the lead developer.\n\nThe risk of increased communication costs can be mitigated rather easily.\nHowever, trust is the most complicated element of team dynamics to establish and maintain. A virtual team must address this issue in order to succeed. Remote teams can work quite well. We have been delivering quality software in a timely manner, within the expectations of management for the last two years. We actually are more efficient and successful with a virtual team than when we were all co-located in the same room.\n	Experience Reports	Experience Report	2003
20030083	Unfixing the Fixed Scope Project	Although it seems to be common knowledge that it’s impossible to succeed in a project with fixed time, quality and scope, we often continue to try anyway.\n\nThis experience report discusses our successful failure at running fixed time and scope projects. I say successful failure because we actually failed to fix scope but arrived at an acceptable way to vary scope and deliver on time in an environment not normally amenable to variable scope. This paper discusses the methods used and makes recommendations on how you might unfix scope in your development environment.\n	Experience Reports	Experience Report	2003
20030084	An Agile Request For Proposal (RFP) Process	The Request For Proposal (RFP) process can be agile and efficient. At a high level, the key to achieving this is to specify requirements just in time and containing just enough detail. This paper applies the following XP practices and concepts to the RFP process: acceptance tests, business value, iterative & incremental delivery, on-site customer, pair development, planning game, spike, story, velocity, and yesterday’s weather. In addition, the following concepts are combined with those from XP to achieve maximal benefit: user-goal use case, context diagram, level of detail, and decision tree.\n\nThe contributions of this paper to the agile community are two-fold: describing a practical application of XP concepts to a non-programming project; and making use case style requirements processes more agile.\n	Experience Reports	Experience Report	2003
20030085	Daily Iterations: Approaching Code Frost and Half the Team is Not Agile	As an XP consultant, I'm asked to bring XP to diverse teams. But what happens when a team is split geographically and half the team prefers non-agile methods? Approaching “Code Frost” we decided to do daily iterations to kill bugs and keep the non-agile half of the team happy.	Experience Reports	Experience Report	2003
20030086	Agile Contracts (W180)	Agile contracts: These two words together in one phrase just look odd - or at least they seem to be at odds with each other. Contracts have played a very important role in the business of software development; in fact, much of this work is in fact done 'under contract'. Organizations adopting agile methodologies are finding it hard to write contracts for software development without compromising the core values and practices. The Agile Contracts workshop is your chance to help the agile community identify ways contracts can be structured and worded to support agile software development. A pre-conference web site has been established for conference attendees to share their thoughts, ideas, and even contract samples! Visit the web site and get in your two cents now! www.leantoolkit.com/agilecontracts.htm	Technical Exchange	Talk	2003
20030087	Evaluating and Documenting Alternatives to Certification (W180)	Martin Fowler led a discussion on Paying For Better Value at the Agile Universe 2002 conference. It posed the question: “How do we make it accepted that able people who are expensive end up being better value than cheap, less able developers?”\n° What makes an expert Agile software developer? How do we prove that we are one? We believe the pattern of Expert Capability Maps answers these questions. In this workshop we will all share our perspectives and assess our own capabilities. If you are an expert you will leave with the proof of it. If not, you will leave with a map of your route to becoming an expert.\n° The steps to proving expert capability are 1) describe the attributes of an expert, and 2) get external validation we possess those attributes. Help us evaluate and document why certification and other common systems fall short in attempting this. We will also demonstrate that such experts provide economic value far beyond that of those with lesser capability or experience.\n° Before the conference please join our AgileAssessment list to contribute to creating an Expert Capability Map for Agile software development, using Behaviorally Anchored Self-Assessments. We will also be posting the evolving documents (does not require list membership).\n	Technical Exchange	Talk	2003
20030088	Customer Collaboration: Challenges and successes in practice (G90)	An important principle in agile methodologies is to value customer collaboration over contract negotiation. In XP, for example, this principle is instantiated through the practice of having an end user on-site, someone who is available to answer questions, resolve disputes and set small-scale priorities on an ongoing basis. Other agile methods suggest alternative approaches. This form of customer collaboration is different from the traditional approach to requirements engineering where a substantial period of investigation and negotiation takes place to uncover the client's requirements.\n\nThe session will share, and then disseminate to a wider community, practitioners' experiences with, and insights into, customer collaboration within an agile environment.\n	Technical Exchange	Talk	2003
20030089	Enterprise Continuous Integration Limitations and Challenges (T90)	Continuous Integration as discussed in the Extreme Programming literature and elsewhere is largely focused on the development, integration and deployment of a single software product. Many IT shops however have additional problems to solve, problems that result from operating at an enterprise scale.\n\nThis session will determine issues and limitations in scaling Continuous Integration to the enterprise, and identify strategies for overcoming these issues and limitations.\n	Technical Exchange	Talk	2003
20030090	Exploring Motivation (W180)	Many organizations attempt to increase their productivity by the use of employee reward schemes. Over the years, an increasing body of research has grown suggesting that the use of rewards to move individuals to action may have negative effects on their team working and the quality of their work products in the long term.\n\nThe objective of the session is to raise awareness of the impact that development practices can have on intrinsic motivation, and to identify ways that the practices in different software development methods (such as RUP, SCRUM, XP, Open Source) affect motivation within teams. Participants will pool their experience to come up with patterns (or anti-patterns) that nurture intrinsic motivation within teams.\n	Technical Exchange	Talk	2003
20030091	Clearing Communication Logjams (W180)	Under a heavyweight process, two individuals can work on the same problem and communicate primarily through the buffer of a 2-inch document. As agile teammates, they would rely instead on many short conversations. Compared to their heavyweight counterparts, it is even more vital for members of an agile team to focus on communication, since the quality of communication relates directly to how smoothly the agile project flows. If communication bogs down, and logjams appear, the agile teammates must unblock themselves to stay on track.\n\nWorkshop participants will examine specific and common problems that arise in everyday interactions within teams practicing agile methodologies. Participants will share and assess one another's approaches to a spectrum of communication logjam scenarios.\n	Technical Exchange	Talk	2003
20030092	Architectures and Technologies for Agile Development of Enterprise Applications (W90)	Let's cut through the hype and talk about what has really worked. Which technological and architectural choices have best facilitated agile development - early and continuous delivery, at a pace sustainable forever, of valuable, working, simply-designed software, to ever-changing requirements - in the context of enterprise applications?\n\nIn this workshop we'll examine that issue, by breaking down the measures of success of an agile development organization, and correlating architectural and technological choices to performance against those measures, on projects we've experienced. We'll split into small groups to share sanitized characterizations of projects where we've seen correlations, positive or negative, and we'll compile matrices of correlations between such choices and the success measures we break down. We'll describe architectural refactorings we had to do, why we had to do them, and what the end state looked like.\n	Technical Exchange	Talk	2003
20030093	Introducing Agile Practices (G90)	Before you can succeed with an agile project, you must first succeed in introducing an agile process to your organization. As news about agile processes spreads, more organizations are becoming intrigued and are ready to dip a toe into agile waters. The goal of this goldfish bowl discussion will be to share experiences and look for common answers to questions such as:\n\nWhat is the best way to convince an organization to try an agile process?\n\nWhat types of projects are appropriate for a company's first agile project?\n\nWhat are the most important things to do during the first 60 days?\n\nHow do we measure success?\n\nWhat obstacles are we likely to meet? How do we overcome them?\n\nShould we start with an established agile process or should we customize our own?\n\nHow do we handle reluctant or skeptical programmers, customers or bosses?\n\n	Technical Exchange	Talk	2003
20030094	Experience the Transition to an Agile Organization (S180)	Our experience on several XP projects over the past four years has led us to believe that strong management and organizational change is critical to successful adoption and application. Because traditional command-and-control management doesn't align well with XP, a more appropriate agile approach is needed.\n\nIn this simulation, participants will simulate a greeting card company. Working together, they will produce greeting cards to specification. The goal of the simulation will be to draw out the differences between traditional and agile organizations to gain a deeper understanding of agile organizational principles.\nVisit CC Pace Systems at http://www.ccpace.com to learn more, or go to Electroglide http://www.webdc.com to check out detailed simulation material.\n	Technical Exchange	Talk	2003
20030095	Successful Customer Involvement (W180)	Do you want to collaborate effectively with your customers? Use "appreciative inquiry" to harvest wisdom from the best of your own experiences with them.\n\nCustomer involvement is essential for agile projects. We involve customers in chartering (visioning) and planning releases, defining requirements or stories, creating customer scenarios or stories for testing, conducting prototypes, running and checking acceptance tests, and retrospecting (debriefing) iterations and the project as a whole, and more. Using an appreciative inquiry approach, we'll explore the best ways to actively and positively involve customers and users in your project, from beginning to end. Visit http://www.ebgconsulting.com/adceffectivecustcollab.html for more info on this session.\n	Technical Exchange	Talk	2003
20030096	Are Design Patterns Dead? (G90)	Designs are emerging; small refactorings add flexibility when and where it's needed; the tests tell you where to go. Do design patterns still have a place in an agile world? Some argue the nail is already in the coffin, others contend design patterns thrive in an agile environment. Proponents of these two positions will square off to convince one another of their views. We'll debate Small Up Front Design, its general appropriateness and whether patterns have a role to play, along with the technique of Refactoring to Patterns spearheaded by Joshua Kerievsky.	Technical Exchange	Talk	2003
20030097	Tool Support for Agile Development: Hi Tech vs Low Tech (T90)	Agile development strives to respond better to the software needs of the customer. And in doing so, agile developers use a variety of tools, some technological typically surrounding the creation, testing, and delivery of the software, and others involving ways of communicating and working with people. In some cases, high-tech and low-tech tools can be brought to bear to solve the same or similar problem in agile development.\n\nThe aim of this think tank is to debate whether high-tech or low-tech tools are the best avenues to supporting and improving an agile process. Participants will contribute their own experiences as well as learn from the experiences of others.\n	Technical Exchange	Talk	2003
20030098	Requirement Specifications in Agile Projects (T180)	Although "requirements as conversation" works for some organizations, many places still need a written document that can be referred to. Creating an appropriate weight document for Agile projects is the purpose of this session. Specifically this session will look at the enduring specification artifacts that should be preserved by projects as an essential organizational memory of Agile projects.	Technical Exchange	Talk	2003
20030099	What Should Students Know About Agile Development? (W180)	As agile practitioners, we know the practices and dispositions necessary for an individual to successfully participate in an agile team. Can we convey this understanding to academia? What do we believe students need to know in order to prepare them for doing agile development? What do we want to see in fresh-out students?\n\nThis collaborative session is designed to start this conversation and produce a set of concrete assertions, guidelines and suggestions that are grounded in our experiences as industrial practitioners of agile development.\n	Technical Exchange	Talk	2003
20030100	What We Have Learned about Agile Methods (W90)	For the past year, the Center for Empirically Based Software Engineering (CeBASE) has sponsored three online “eWorkshops” on agile methods. The purpose of each workshop was to build up decision support for software developers. Each eWorkshop started with and then refined a handful of “heuristics” that attempted to describe basic assumptions about the nature of agile methods and how they could be best used for various types of projects.\n\nUsing some of the heuristics that resulted from the eWorkshops as a starting point, participants in this session will have the opportunity to contribute their own experiences to refine or expand the list of heuristics.\n	Technical Exchange	Talk	2003
20030101	Retrospectives (S90)	A retrospective is a meeting, where a team looks back on a past period of work so that they can learn from their experience and apply this learning to future projects. Some agile teams run retrospectives at the end of successive iterations rather than at the end of a project. The benefits of running retrospectives every few weeks rather than months are improved communication across teams and early feedback on development practice.\n\nThe objective of this session is to explain the benefits of holding regular retrospectives and give guidance on how to run a retrospective. Participants will get practical experience of how to run a retrospective, using the conference as the subject for reflection.\n	Technical Exchange	Talk	2003
20070700	Traveling the Open Road: Using Open Source Practices to Transform Our Organization	At DTE Energy, we introduced Open Source practices to improve the performance\r\nof our 300-person software organization, achieving measurable improvements in\r\ncode quality and reuse. We chose a community-based approach after a previous\r\nfalse start using tools and outside consultants. Two of our key principles for\r\nthe transformation program were respect for the individual and creating a safe\r\nenvironment. We designed the program to support self-directed learning, with\r\nmore skilled staff providing guidance as required. We also opened our technical\r\nenvironment, following an Open Source approach, to support sharing and\r\ncommunication. As always, cultural issues were critical to the success of the\r\nprogram. This paper describes the history of and lessons learned from our\r\nadoption of Open Source practices.	Other	Experience Report	2007
20070835	Writing and Testing JavaScript-heavy Web 2.0 apps with JSUnit	With the advent of so-called Web 2.0 platform, more and more applications are\r\nusing client-side JavaScript for vital features. In fact, some applications are\r\nso JS-heavy that they redefine JavaScript as a full-fledged application\r\ndevelopment language.  In this tutorial we discuss some architectural\r\nconsiderations of JS- and AJAX-heavy applications and present in detail our\r\ntesting framework, with plenty of code examples and live demos.	Testing	Tutorial	2007
20071025	XR02: Agile Architecture Challenges	Evolving into Embedded Development\r\n\r\nby Matt Fletcher and William Bereza\r\nTraveling the Open Road: Build\r\nOrganizational \r\nDevelopment Capability Through Open Source\r\n\r\nby Phillip Smith\r\nAgile Architecture, Changing\r\nApplication Servers\r\n\r\nby Veljko Krunic	Other	Session	2007
20071065	Q&A with Bob, Hubert, and Mary	A chance to ask questions of Bob Martin, Hubert Smits, and Mary Poppendieck,\r\nfollowing up on the introductory sessions for XP, Scrum, and Lean.	Other	Beginners Program	2007
20070988	Reaching New Heights: Learning to Adapt is Essential	What can climbing to the pinnacle of the world teach us?  Susan will share her story --how she did it, what \r\nit takes to climb mountains and break performance records.  Her secrets of survival in business and in life \r\nwill open our minds to how we may better reflect, correct, and adapt in our Agile projects.  As Susan tells \r\nher story, ask yourself what mountains you are climbing. Think about what skills you employ and how you \r\nwant to grow your agile toolkit. Imagine looking down from the peaks of social, corporate, or technical \r\nchange you recently summated, and pause to think about how you did it (or how you will do it) and what \r\nyou can learn from each agile journey.	Other	Keynote	2007
20070459	Agile and Entreprenuerial Thinking Patterns	Agile\r\n          and Entrepreneurial Thinking Patterns                                \r\n                                                                               \r\n                                                                               \r\n                                                                               \r\n                                                                               \r\n                                                                               \r\n                                                                               \r\n                                                                               \r\n                                                                               \r\n                                                                               \r\n                                                                               \r\n                                                                               \r\n                                                                               \r\n    \r\n   \t        Daniel Mezick, New Technology\r\n   \t          Solutions Inc. \r\n   \t        Successful Agile practitioners think, believe, and\r\n   \t          act very much like successful entrepreneurs. Entrepreneurs engage\r\n   \t          in iterative, empirical processes. They clearly recognize and\r\nunderstand\r\n   \t          the futility of engaging in prediction. \r\nEntrepreneurs routinely\r\n   \t          invest the minimum to prove an idea true or false, and then "pull\r\n   \t          the plug" very quickly when test results prove negative.\r\nEntrepreneurs\r\n   \t          routinely defer commitment to irrevocable decision-making until\r\n   \t          the last possible moment. \r\n   \t        These behaviors are part of what we are\r\n   \t          currently refer to as Agile and Lean methods. The apparent strong\r\n   \t          link between Agile and entrepreneurial patterns represents a fertile\r\n   \t          area of exploration and research. If the best leaders in the Agile\r\n   \t          space are in fact the best at thinking in entrepreneurial patterns,\r\n   \t          we have a new tool for understanding and developing Agile best\r\n   \t          practices. We also have a new way of understanding why, when, where\r\n   \t          and how Agile software development works so well. If there is strong\r\n   \t          correlation between successful Agile practice and successful\r\nentrepreneur\r\n   \t          practice, we have a new and more definitive model for identifying\r\n   \t          and developing the best Agile leaders and practices.   \t          \r\n   \t        This session brings to attention key parallels from the writing\r\n   \t          of current thought leaders on Agile, Lean, and entrepreneurship.\r\n   \t          The presentation cites case studies from both the Agile and\r\nentrepreneurship\r\n   \t          domains. Intended to provoke thought and discussion, this session\r\n   \t          raises important questions about the empirical process,\r\nentrepreneurship\r\n   \t          and the implications for Agile leaders, modern business and the\r\n   \t          Agile movement. \r\n   \t        The large overlap of Agile patterns\r\n   \t          and Entrepreneur patterns \r\n   \t        Academic research into\r\n   \t          entrepreneurs: Amar Bhide \r\n   \t        The writings of Mary\r\n          Poppendieck, and others \r\n              \r\n           \r\n   \t        How and why entreprenuers can quickly change beliefs\r\n   \t        Planning vs. prediction, and the role of empiricism\r\n   \t        Executing on "the last responsible moment" \r\n             Essential concepts of successful agility--\r\n   \t          and entrepreneurship \r\n   \t          Implications of the entrepreneurial\r\n   \t          thinking model for Agile leaders \r\n   \t                   \r\n                      \r\n\r\n\r\nNOTE: To obtain the presentation slides, send an email to:\r\n\r\ninfo[at]newtechusa[dotcom]. \r\n\r\nInclude "AGILE2007 SLIDES" in the subject and/or\r\nmessage body.	Leadership	Tutorial	2007
20050252	"Tooling to Scale Software Agility: How to enable critical project visibility and coordination for distributed Agile teams	As larger, distributed development teams adopt Agile practices they often \r\n    find themselves lacking the team coordination and project visibility \r\n    required to reliably deliver software in rapid, fully-tested iterations.  \r\n \r\n    Scaling agile practices beyond the co-located team presents several \r\n    challenges. Ad-hoc tools or heavy-weight project management systems simply \r\n    do not provide the real-time communication and coordination required for \r\n    the distributed software team to reap the benefits of agile practices.  \r\n    Additionally, the productivity of global teams suffers without a common \r\n    understanding of how to set project priorities and objectively measure the \r\n    team's progress. \r\n \r\n    In this session, Ryan Martens, founder and president of Rally Software \r\n    will discuss Rally's experience in scaling the enterprise project \r\n    visibility that distributed Agile teams need to be more responsive to \r\n    fast-changing business priorities and new customer opportunities.	Introduction to Agile	Tutorial	2005
20070704	Agile and the Frightened Customer	How do you deal with a customer that has been burned by â€œAgileâ€? I was faced\nwith running an agile project with customers who were on their third try in\ncreating their website. The first two efforts had failed in delivering the\nneeded functionality on a schedule acceptable to the customer, and now we were\npresented with restarting the project with a highly suspicious customer. What\nfollows is a discussion of how this environment affected the bidding and\ncontract process needed before the project could begin, how iteration planning\nand execution had to be adjusted, and how difficult it was to maintain and grow\na trusting relationship with our customer throughout the project. The\ncombination of these factors led us to tailor our agile process in several\nsignificant ways to address the initial skepticism of the customer and their\nconcern over team velocity and software quality.	Customer	Experience Report	2007
20070642	Agile Developer Practices for Dynamic Languages	Developer practices for traditional and agile Java development are well\nunderstood and documented. But dynamic languages like Groovy and Ruby change the\nground rules. Many of the rules and patterns we have been taught no longer\napply. We need to unlearn previous techniques and learn new ones. This tutorial\nlooks at some of changes in store for us as we adopt dynamic languages.	Developing	Tutorial	2007
20070981	Agile Tooling - A Point, Counter-Point Discussion	It has been six years since the authoring of the Agile Manifesto, and the\r\ntechnology and tooling landscape has changed since then. This conversation\r\nbetween Ron Jeffries and Ryan Martens debates the merits and weaknesses of\r\ntooling Agile. \r\n\r\nRyan's foundation for the discussion will be Buckminster Fuller's quote on\r\nchange: "If you want to teach people a new way of thinking, don't bother to\r\nteach them.  Instead, give them a tool, the use of which will lead to a new way\r\nof thinking." As a signature, Ronâ€™s perspective will start from the Agile\r\nManifesto's "individuals and interactions over process and tools."	Other	Vendor Talk	2007
20070666	Enterprise Agile Transitional Leadership	Discover the agile leadership characteristics and behaviors required to \r\nsuccessfully guide an enterprise-wide agile transition through this \r\ninteractive and experiential small group discussion built on the experiences \r\nof four real-world leaders.\r\n\r\nThe days of heroic leadership from an industry expert guiding an organization \r\nfrom the top down are all but over. Too much change too fast is a reality in \r\nevery market today. Leadership must come from every level within an \r\norganization. A post-heroic leader is one that effects change through the \r\nunleashing the full power of the organization at every level. They lead down, \r\nacross and up through the organization.\r\n\r\nThree post-heroic leaders have guided successful enterprise agile transitions \r\nover the past 18 months from various positions within their company. None of \r\nthese leaders held a Senior Executive position - yet all guided and \r\ndramatically impacted the success of their agile transition, each from a \r\ndifferent position within the organization. What agile leadership \r\ncharacteristics do they have in common? How did their approaches differ?\r\n\r\nSue Holstad, the Director of the Project Management Office (PMO) with JDA \r\nSoftware, crafted a highly structured agile transition of a 600+ member \r\ndevelopment organization across three continents. Von Rhea, a Director of \r\nEngineering at Corporate Express, led a grass roots initiative to gain \r\nexecutive agile buy-in and organization-wide adoption through the execution of \r\nseveral successful agile projects. Steve Greene, Director of Quality \r\nOperations at Salesforce.com, led a cross-functional agile transition team in \r\nguiding their development organization's big-bang (all-at-once) agile \r\ntransition of over 200 people.\r\n\r\nYet the real power of this session comes from you, the real-world leaders \r\neffecting change in organizations around the world. As a discovery session, \r\nthis session will engage you in small group discussion using critical \r\nconversations to guide you in discovering your gifts in leading effective \r\nchange in your organization. As you learn from our three experienced leaders \r\nabout the characteristics of agile leadership, you will also be practicing a \r\npowerful organizational change technique to bring home with you.\r\n\r\nPete Behrens, Agile Organization & Process Coach for Trail Ridge Consulting, \r\nwill facilitate the enterprise agile leadership characteristics self-discovery \r\nusing a small group organizational change technique.	Leadership	Discovery Session	2007
20070381	ES1: Achieving Cooperation in Agile Software Development Environments by Binding the Individual and the Team Interests	The proposed collaborative activity/workshop aims at increasing the \r\nparticipants' awareness to the importance of cooperation in software teams as \r\nwell as at guiding instructors of project-based courses in the evaluation of \r\nstudents' projects. The activity longs a one and a half hour and consists of \r\nthree main sections. First, connections between bonus allocation and \r\ncooperation are investigated. Second, cooperation in software development \r\nprocesses are examined through the Game Theory framework of the Prisoner \r\nDilemma. Third, based on the understandings gained in the first two sections, a \r\ngrading policy is constructed, while addressing all factors: the individual \r\ninterests, the team interests and the unavoidable need to cooperate in the \r\ndevelopment of software projects. All parts of the collaborative activity are \r\nbased on individual activities, teamwork activities, discussions and \r\nreflections.	Individuals & Teams	Educators Symposium	2007
20070806	Greater successes by using Agile Techniques closer to the light bulb moment	At BT we are imbedding Agile within the lines of business so that we start learning\r\nabout new propositions as close to the "light-bulb moment" as possible. Has Agile\r\nsomething to say to the business in terms of how it chooses and develops new\r\npropositions for the market place? Can we have an Agile Business?\r\nBT are having successes with agile techniques within the business:\r\nÂ· Prioritising the workstack across all propositions.\r\nÂ· Establishing Minimum Marketable Feature Set (MMFS) for each\r\nproduct/service.\r\nÂ· Setting a confidence level for each product/service.\r\nÂ· Creating a roadmap for each product/service based on reality.\r\nÂ· Deriving Business Scenarios for the products and services (Business\r\nValue).\r\nÂ· Defining Acceptance Criteria for each business scenario.\r\nÂ· Tackling risk within the project.\r\nÂ· Identifying specific personas.	Customer	Experience Report	2007
20070489	How to Assess Your Agile Readiness...Now!	This workshop explores a new approach that can be used to assess the extent to \r\nwhich organizations are ready to adopt agile practices. The bulk of the \r\nworkshop is hands-on, where participants share their experiences by developing \r\nassessment indicators that can be used to determine the degree to which \r\norganizations are ready to adopt particular agile practices. The workshop will \r\nuse the 300 indicators, already part of the Agile Adoption Framework, as a \r\nstarting point. The results of this workshop will go into an online repository \r\nfor pre-adoption indicators that can be accessed by members of the agile \r\ncommunity.	Leadership	Discovery Session	2007
20070973	Introduction to the Agile 2007 Conference	New to the conference?  New to Agile?  Need a plan?  Not sure what to expect or\r\nwhat you want to take away from the conference?  At one time or another we were\r\nall there and we learned that the greatest asset in the agile community is\r\nthe agile community.  Come and join us and create a personal release plan to\r\nguide your journey through this conference.  \r\n\r\nThis session is designed to help newcomers understand how the conference is\r\norganized, and how they can best select sessions/activities to attend. Attendees\r\nwill use agile principles to build a "vision" for what they would like to learn,\r\na set of "themes" related to that vision, and a "release plan" related to those\r\nthemes. We will also develop acceptance criteria for evaluating their experience\r\nthroughout the week. Presenters from the Beginners Program sessions will be\r\npresent to answer questions and facilitate working in small groups.  \r\n\r\nThis is a working session utilizing agile planning techniques, not just a meet\r\nand greet.  You will make connections with the agile community and make a plan\r\nto begin your agile conference.	Other	Beginners Program	2007
20070933	Is Agile agile?  Is it time we ate our own dog food?	The Agile community advocates working in an agile manner and we should \r\npractice what we preach.\r\n\r\nCurrently the Agile Community is focused on growth and getting "Agile" across \r\nthe chasm. While we seem to be succesful in this aspect, a number of issues \r\nare starting to appear very similar to the growing pains companies experience \r\nwhen crossing the chasm. Through a combination of goldfish bowl and self \r\norganized discussions, we would like to address the following question:\r\nHow do we help Agile grow\r\nAND\r\nEnsure that everyone(!) has the extreme Fun and Learning experience that we \r\nhad at the start\r\nAND\r\nEnsure that Agile as a community continues to grow where everybody feels equal \r\nand that their contribution is valued\r\nAND\r\nThe community continues to learn and discover new practices and principles.	Leadership	Discovery Session	2007
20092043	Build Engineer Bootcamp:  Builds As Code	Bad build practices take a hidden toll on teams. It is not uncommon for a new developer to take days or even weeks to establish a functioning workspace. Good build engineers can make all the difference. By treating the build framework with the same respect as other source code they can help prevent these problems. In this clinic we will show how to refactor your build approach to end up with sustainable practices that get new people up and running quickly and set the stage for long term productivity. While the workshops are in Ant, the concepts are portable.	Developer Jam	Clinic	2009
20070557	Legacy Agile, Applying Agile Practices in a Legacy Environment	Legacy systems are a fact in most organizations. In the best case, they are\r\nsimply supported by a skeleton staff to keep the programs running.  More often,\r\nthey are being enhanced to add more functionality to support the business. \r\nOften the technologies of the legacy systems do not support the Agile tools\r\ndeveloped to date.  Also, the amount of legacy code and its integration with\r\nsystems throughout the enterprise make a transition to agile a formidable\r\nrequest.  This discovery session will examine ways to introduce agile practices\r\ninto a legacy environment.  We will introduce three to four organizations that\r\nhave successfully or unsuccessfully introduced agile practices to legacy\r\nsystems.  The outcome of this session will be to identify the key success\r\ncriteria to introducing agile to a legacy environment, what constraints we may\r\nface, and which strategies are necessary to be successful.	Leadership	Discovery Session	2007
20070577	Measuring the Effect of Test-Driven Development	Test-driven Devlopment is perhaps the most widely adpoted technical practice in\nthe Agile development toolkit. TDD can be a difficult practice to introduce,\nrequiring developer training and/or mentoring, changes to team functions and\nbehaviour, project planning and so forth. It would be easier to justify these\ncosts if the benefits of TDD could be clearly demonstrated.\n\nMany practitioners report that TDD (together with refactoring) has a profound\nqualitative impact on the design of their code, and not just on defect\nrates and other quality-control measures. The presenter has found some evidence\nthat some of these qualitative influences on design of TDD can be quantified by\nexamining certain statistical properties of a body of (Java) code.\n\nIf the hypothesis that the qualitative difference between TDD and non-TDD code\ncan be objectively measured is confirmed then it will be possible to track the\neffect of introducing TDD, meaure the effectivness of a TDD programme and place\nTDD exercises on a firm footing. This would improve developers' confidence in\ntheir practice, provide corrective feedback to that practice and provide\nevidence to use in influencing figures like project managers. But to confirm it\nrequires that some empirical study be done on TDD and non-TDD codebases. This\nand other conference sessions form part of that research--and an opportunity for\nconference attendees to take part in some genuine science in the field of\ncomputers.	Developing	Discovery Session	2007
20070549	Scrum at a Fortune 500 Manufacturing Company	When 3M decided to create a common development platform for Track and Trace\napplications to lower the cost of application development and speed the creation\nof new applications, it was decided to try a new software development\nmethodology. After some research, it was decided to commit to using agile\nsoftware development with the scrum methodology. A new team of 6 developers\nstarted the development of a core library using scrum. Team size was increased\nto 9 developers during the first scrum and is currently 15 developers with\nsoftware testers considered a developer on a scrum team. At the current time we\nhave 3 scrum teams, two focused  on developing of two applications and one team\nfocused on the continued integration and creation of a common library platform\nbased on the other two teamâ€™s application development.\n\nThe move to an agile/scrum development environment has required many changes,\nchallenges and adjustments, but has shown great improvements in productivity and\nfunctional software while incorporating many new software technologies. The\nareas of change include tools, work environment, paradigm shift for developers,\nmanagement acceptance and support. The major challenge has been interfacing with\nother groups within 3M that are not familiar with scrum and want to see\ninformation using the tools they are used to (Six Sigma, Microsoft Project,...).\nDuring the last seven months of implementing scrum, we have adjusted many\nparameters and how we use scrum to make the process more efficient.	Customer	Experience Report	2007
20070611	Stimulating Success: Agile Managers as Facilitators	In Agile work environments smart people work in teams to self-organize their\r\nwork and produce higher quality results faster. Managementâ€™s traditional focus\r\non closely monitoring, supervising, controlling, and tracking individuals and\r\ntheir work no longer serves business needs as it once did. Yet these methods\r\ndonâ€™t eliminate the role of management. Whatâ€™s left for a manager to do? Plenty!\r\nThe savvy managerâ€™s focus shifts from controlling work to facilitating it,\r\neasing the flow to higher productivity. Facilitative managers perform five new\r\nmanagement roles. They promote effective meetings to help team members think\r\ntogether. They manage boundaries for the team. They attend to team membership.\r\nThey alert the team to potential risks. They champion the team and its decisions\r\nwith stakeholders outside the team. In this session, we examine the roots of\r\nfacilitative management, identify ways to leverage current management experience\r\nfor the five new roles, and consider techniques for facilitative management.	Leadership	Tutorial	2007
20070433	TDD for Managers	Abstract\r\n\r\n\r\nMany managers are not technical and find it difficult to appreciate the benefits\r\nof Test Driven Development.  They may perceive it as extra work and extra time\r\nwhich could be spent on adding new functionality.  Test Driven Development can\r\nbe demonstrated and explained in terms that these non technical managers can\r\nunderstand.  By understanding and subsequently encouraging Test Driven\r\nDevelopment, managers can increase the value delivered by their teams.\r\n\r\n\r\nAudience & Benefits\r\n\r\n\r\nManagers, and other non technical people who are engaged in software development\r\nprojects, will gain an understanding of the application and benefits of TDD\r\nAgile beginners will learn a simple way to practice TDD with everyday tools\r\nAgile experts will learn a new way of describing TDD\r\n\r\n\r\nDescription\r\n\r\n\r\nThe tutorial will be split into two halves â€“ a demonstration and a presentation.\r\n\r\n\r\nThe demonstration uses Microsoft Excel and VBA â€“ desktop tools that almost\r\neveryone has available, and in the case of Excel will be familiar with.  Excel\r\nis used as the test framework, and VBA is used to develop a simple macro\r\nfunction.  VBA is simple enough that most people should be able to â€œreadâ€ it,\r\nand it allows the exercise to be interactive, with the audience collaborating on\r\nthe direction the code and design takes.\r\n\r\n\r\nThe presentation allows the insights gained from the demonstration to be\r\nexplored further.  In particular it covers how TDD fits into the scheme of\r\nthings, and how it improves the value delivered on software projects. This will\r\nhelp the audience understand why they should care about TDD, and what they can\r\ndo to encourage its use on their projects without overstepping the bounds of\r\ntheir role on the project.	Management	Workshop	2007
20050214	Delivering value early	The ideal XP project allows the team to ship the code as soon as the next features are ready. In practice, \r\n\tmany organizations cannot (or will not) accept this, so the team has to find ways to reduce the stress of \r\n\treleasing or, better, produce something of value to the organization before the final delivery.\r\n\t\r\n\tIn this workshop, participants will exchange experiences and ideas about how to maneuver a project into \r\n\tdelivering real value early, even where the organization itself is not Agile.	Workshops	Workshop	2005
20070769	Test-first Practices in Regulated, Safety-critical Environments, an Agile Approach	Accidents, especially catastrophic ones, frequently occur when hazards are\ndiscovered late in design and never mitigated. Insisting on â€œstagedâ€\ndevelopment, where all requirements and hazards must be identified at the\nbeginning of a project, invites accidents by practically guaranteeing that\nlate-learned hazards will go unmitigated.\nThe solution, we believe, is to ensure safety in the final system by developing\nit through a collaborative learning environment â€“ the hallmark of Agile\nmethodology â€“ with flexibility to respond to new information as a design is refined.\n\nThis tutorial will provide the attendees:\n1. An understanding of how the FDA expects software to be developed and\nvalidated for uses that affect human health: guidances and recent actions.\n2. A demonstration of agile engineering practices that are consistent with FDA\nguidelines, as presented by engineers experienced in regulated environment audits.\n3. An agile viewpoint of hazard management in software-driven safety-critical\nsystems, including embedded systems.	Other	Tutorial	2007
20070732	The Power of Improvisation on Agile Teams	Drawing from the art of improvisation, Agile coaches Jim York and Tobias Mayer lead this fun \r\nexploration of dysfunctional interpersonal communication born of learned bad behaviors.  On Agile \r\nteams, these stifling exchanges inhibit forward progress.  In this session, Jim and Tobias share a \r\ndifferent approach based on their experience teaching Agile teams techniques from improvisation to \r\nhelp them find creative ways to discover and deliver customer value.  Participants will learn how to \r\navoid responding in a way that obscures possibilities.  They will also learn how to heighten their own \r\nawareness and understanding during an exchange so that they can respond with agility and purpose.\r\nSample exercises for this session include facilitator-led word games and other interactive games \r\ndesigned to facilitate group awareness, understanding, and direction.  Examples include:\r\n\r\nI don't see it... Help me see it\r\nWriting a letter one word at a time\r\nString of Pearls - various takes on a group telling a story; backwards, forwards, and from both \r\nends to the middle	Individuals & Teams	Workshop	2007
20071059	VT1	981. Agile Tooling - A Point, Counter-Point Discussionby Ryan Martens, Founder & CTO, Rally Softwareby Ronald Jeffries\r\n964. Agile Practices in a Distributed Environmentby Michael Vax, CEO, Agile Alliance, Agile Vancouver	Other	Session	2007
20070909	Weaving Domain-Specific Language Support into your Automated Testing Tool	This facilitated discussion considers the use of domain-specific languages in \r\nautomated testing tools, and support within these testing tools for domain-\r\nspecific language extensions.\r\n\r\nIdeally, acceptance tests are easily readable by the business people that help \r\nto specify them.  In this way, the subject matter experts can assist in \r\nverifying the test content (process flow and expected outcomes), and may use \r\nthe test script as a type of living, executable requirements document.\r\n\r\nIn order to produce more readable test scripts, testing tools need to support \r\nthe business terms used on each project.  No testing tool can provide all of \r\nthe business terms out-of-the-box, so the tools need to be created with \r\nconfigurable and extensible support for this type of specialized language.	Testing	Discovery Session	2007
20071026	XR03: Building Trust with Collaboration	Agile and the Frightened Customer\r\n\r\nby Brian Button\r\nScrum at a Fortune 500 Manufacturing\r\nCompany\r\n\r\nby Richard Moore, Kelly Reff, Brian Hackerson and Jim Graham\r\nGreater successes by using Agile Techniques\r\ncloser to the light bulb moment\r\n\r\nby Alan de-ste-croix, Alan Armitage and Peter Wisniewski	Customer	Session	2007
20070964	Agile Practices in a Distributed Environment	The risks of distributed and offshore development can be effectively \r\nmitigated using Agile processes. By use of these techniques, multi-site \r\ndevelopment teams, especially those working on dynamic and complex development \r\nprojects in multiple time zones, overcome frequent challenges encountered in \r\ndistributed environments, and greatly increase efficiencies.  Specific \r\nexamples will be used to illustrate: \r\n\r\nThe typical challenges associated with distributed development\r\nHow Agile practices minimize risks in a distributed environment\r\nWhich Agile practices need to be modified for distributed teams\r\nHow to avoid typical mistakes in a multi-site environment\r\nWhy the distributed Agile approach works better than the distributed \r\nwaterfall approach for dynamic, complex projects\r\nFounded in 2000, Luxoft is a global software developer and IT services \r\nexporter with operations in the US, UK, Canada, Ukraine, and Russia. Luxoft \r\nhas the world largest delivery capabilities in Russia and CIS and provides a \r\nfull range of custom software development services. It enjoys long-term \r\nrelationships with clients including some of the best-known global business \r\nleaders, such as Boeing, Deutsche Bank, IBM and Dell. Luxoft also works \r\nclosely with many mid-size growth companies and independent software vendors \r\n(ISVs).\r\n\r\nThis presentation is based on Luxoft experience in using Agile process in \r\nboth offshore and nearshore distributed development projects.	Offshoring	Vendor Talk	2007
20070535	"Enabling Agile in a Large Organization"- Our Journey Down the Yellow Brick Road	KeyCorp, a Financial Institution with $90 billion in assets, has a development \r\norganization with 1,500 associates across 2 major domestic development centers \r\nand 3 offshore centers supporting 800+ applications.  Twenty four months ago \r\nthe development organization was deeply embedded with the waterfall development \r\npractices and mindset.  Today agile is on the mind of a majority of our \r\nassociates, and more importantly, our business partners consistently recognize \r\nincreases in value for their technology development spend.\r\n\r\nIt is hard to believe that this transformation has progressed without a single \r\nmethodology or tool rollout initiative.  One of the common principles we \r\napplied from the very beginning was, "you can't make people develop in an\r\nagile way." What you can do is set a clear vision, show people different\r\nways to \r\nachieve the vision, remove every reason for not trying, enable early adopters \r\nto be successful, and praise every possible success no matter how small. This \r\nseems simple in theory, but very difficult in practice. Here is our story.	Leadership	Experience Report	2007
20071058	A Personal Chat with Susan Ershler	Our Tuesday morning keynote, Susan Ershler, will hold a book signing and a\r\nquestion and answer session.	Other	Discovery Session	2007
20093000	Agile Project Metrics	Project managers who are new to agile methods often have questions about how to track progress on agile projects. Some of the traditional measures don't line up very naturally with agile thinking and agile practices, especially measures that are concerned with tracking team members' time and comparing estimated and actual task durations. One of the main issues is understanding how to project realistic delivery dates with methods that don't lend themselves to the Gantt approach. \n\n	Leadership & Teams	Talk	2009
20050222	Becoming a Collaborative Leader	What is a collaborative leader? What can I do to become one? These are the questions that we will collaboratively answer in this workshop.\r\nIn this workshop, we will define Collaborative Leadership and compare this with the command and control model and, after each participant compares their current leadership style with the collaborative model, strategies for reaching the full collaborative model will be developed.	Workshops	Workshop	2005
20070454	Agile for New Managers	Your first management position will shape your development as a leader for years\r\nto come. Yet the \r\ncards are not dealt for your success. Organizations rarely provide management\r\ntraining or mentoring \r\nfor first-time managers. Your new peers are unlikely to extend a helping hand.\r\nYour subordinates, \r\npreviously friends to whom you turned for support, begin treating you as a\r\nforeigner. Constraints and \r\ndependencies which you never imagined can dash your most optimistic goals.\r\n\r\nHappily, the agile values and principles, emphasizing focus on customer value,\r\nresults, productive \r\ncollaboration, and reflection, can help a new manager develop the skills he or\r\nshe needs. A manager \r\nwho understands and applies agile principles will be rewarded with increased\r\nteam engagement, better \r\nand more visible results, and most importantly, an expanded interest in team and\r\nself development.\r\n\r\nIn this session, you'll learn effective strategies from several agile methods\r\nfor improving your \r\nleadership results. You'll learn concrete techniques from Crystal, XP and Scrum\r\nthat you can use \r\nimmediately to create an environment for your and your team's success. You'll\r\nalso have the \r\nopportunity to describe current issues you face and discuss them with your peers\r\nand the presenters.\r\n\r\nThis tutorial is appropriate for anyone interested in improving team leadership\r\neffectiveness, including:\r\n Front-line managers.\r\n Those interested in becoming managers.\r\n Those who coach, assist, or are responsible for front-line managers.\r\n Anyone desiring to encourage and support their managers.	Leadership	Tutorial	2007
20070974	Agile Manifesto Panel	Chair: David Hussman\r\nRon Jeffries\r\nBrian Marick\r\nJim Highsmith\r\nJutta Eckstein\r\n\r\nIf you want to hear about learning and improving through the use of agile\r\nprinciples and practices, you will enjoy this session. Various signers of The\r\nAgile Manifesto and possibly other veteran agilists will talk about what the\r\nmanifesto means to them and how it guides the way they practice and teach agile\r\nmethods. Each panelist will give a short statement about how the manifesto guide\r\ntheir work, and then we will move into a question and answer session with the\r\naudience. Bring you questions and your openness and be ready to hear sharp\r\ntidbits from people who have truly embraced agile.	Other	Beginners Program	2007
20070862	Agile Planning in Action	Put agile planning into practice as you plan your own tutorial!  In this\r\nsession, you'll learn how agile planning works, then you'll put it into practice\r\nas you plan a tutorial to cover the agile topics most valuable to you.  Learn\r\nwhat really happens in agile planning when participants have ten pounds of gold\r\nto fit into a five pound bag.  How do you make it all fit?  How do you deal with\r\nconflicting goals?  Experience the challenges and successes of a real planning\r\nsession... and get a bonus tutorial on your most pressing agile questions when\r\nour instructor puts your plan into action!	Customer	Beginners Program	2007
20070574	Agile Program Management: Lessons Learned from the VeriSign Managed Security Services Team	Program management involves the allocation of business unit resources across a \nset of projects in order to maximize returns while balancing risks. To date, \nthe agile literature has focused on the role of agile in individual projects. \nIn this experience report, we discuss how the VeriSign Managed Security \nServices Team has extended core Scrum and agile concepts into the domain of \nprogram management. Our approach provides business unit leaders with cross-\nproject insight and prioritization, portfolio and project roadmaps, and \nstandardized backlog management tools, while simultaneously allowing individual \nprojects to gain the benefits of agile development practices. Key to our \napproach is the emphasis on the role of the program management office in \ncoordinating the activities among different project teams to achieve overall \nbusiness unit goals.	Leadership	Experience Report	2007
20070942	Becoming Agile with Service Learning in the Software Engineering Course	This experience report discribes a three year journey toward agility in a\r\nsoftware engineering course. Students in the course work in project teams to\r\ndevelop an application for a real client using the service-learning model. In\r\nthe first year, a formal plan-driven approach was used, and only two of four\r\nprojects were completed successfully. A more agile approach was taken the second\r\nyear, but there were still failing projects. In the third year a highly agile\r\napproach based on short iterations and user stories is being used. At this time,\r\nevery project team has working software and will deliver some functionality to\r\ntheir clients. This paper also discusses some of the challenges of managing and\r\nevaluating student work when using agile methods.	Learning	Educators Symposium	2007
20070452	Business Value: What is it and what do we do about it?	The first principle of Agile is to deliver value to the customer.  But, after\r\nthe motherhood, apple pie and weather platitudes, we often don't seem to have\r\nmuch more to say. \r\n\r\nWe have found that a lack of understanding of Business Value can have a severe\r\nimpact on the project, and that this is all too common. As some know, there are\r\nseveral competing definitions of business value, as taught by the several\r\nschools (Business schools, Lean, etc, etc). We intend to let all views compete\r\nin the marketplace of ideas. \r\n\r\nPerhaps more importantly, we intend to explore the various small scale patterns\r\nused to take action on business value during all phases of a project.  As part\r\nof this, we will first focus on the various benefits that a focus on business\r\nvalue could bring to the Team, the Project, the Firm, its customers and others.\r\n\r\nIt is our view that Business Value is a complex and difficult subject with\r\nsimilarly difficult activities, where art is ultimately more important than\r\nscience.  Thus, I quite honestly continue to look at this as a discovery session\r\nfor all.  (Note: This is more a discovery session than a workshop per se.\r\nPerhaps Think Tank is appropriate, although not my favorite phrase.)	Customer	Discovery Session	2007
20070856	Customer Communication Boot Camp: What the Customer is Thinking, But Not Saying	Agile teams interface with the customer more often than in any other style of\r\nsoftware development. However, quantity without quality is just more of the\r\nsame.  How do we increase quality and effectiveness of customer communications\r\nin addition to the quantity?  What are the best ways to communicate with the\r\ncustomer in order to reap the most benefits from this increased interaction?\r\n\r\nThis tutorial will give developers an opportunity to practice customer\r\ncommunications in small, video-taped, meeting simulations.  Participants will\r\nnot only be able to watch themselves interact with customers on video, but will\r\nalso receive concrete feedback from customers on their communication and meeting\r\nskills. Additionally, participants will learn common mistakes in meetings with\r\ncustomers, and techniques that can improve the quality of their interactions.	Customer	Tutorial	2007
20050223	Workshop on Agile Transition Management	The goal of this workshop\r\n     will be to come up with a list of things that an organization must do on\r\n     their way to becoming agile. Beyond making a partial list of these \r\n     items we plan to work on developing information on how to accomplish \r\n     each and dependencies between them. For example, "Select a pilot \r\n     project" may be one of the items. If that is one of special interest \r\n     to the attending group we will focus on identify steps necessary to or \r\n     guidelines on how to make that selection.	Workshops	Workshop	2005
20070361	Effective User Stories for Agile Requirements	The technique of expressing requirements as user stories is one of the most\nbroadly applicable techniques introduced by the agile processes. User stories\nare an effective approach on all time constrained projects and are a great way\nto begin introducing a bit of agility to your projects.\n\nIn this session, we will look at how to identify and write good user stories.\nThe class will describe the six attributes that good stories should exhibit and\npresent thirteen guidelines for writing better stories. We will explore how user\nrole modeling can help when gathering a projectâ€™s initial stories.\n\nBecause requirements touch all job functions on a development project, this\ntutorial will be equally suited for analysts, customers, testers, programmers,\nmanagers, or anyone involved in a software development project.	Customer	Tutorial	2007
20071067	ES2	701. Experiences In Using Automated Tests and Test Driven Development in Computer Science 1by Carol A. Wellington, Professor, Shippensburg Universiy\r\n930. The Value of Agile in Experiential Learning of Software Developmentby Kelvin R. Boechler, Instructor, SIAST, Kelsey Campusby Dr. Cyril Coupal, University of Saskatchewan\r\n942. Becoming Agile with Service Learning in the Software Engineering Courseby Brian Hanks, Assistant Professor, Fort Lewis College	Other	Session	2007
20070775	Establishing the Agile PMO; Managing Variability across Projects and Portfolios	Portfolio management helps to balance the demand on the firmâ€™s resources from \nmultiple competing and sometimes inter-dependent projects. Traditional \nProject/Portfolio Management Office supports the Project/Portfolio Managers. \nAs more and more of our Project Managers become Scrum Masters and the \nPortfolio Managers becomes the Group Scrum Master, our PMO needed to become an \nAgile PMO itself. Our IT division comprises of 4 Portfolio groups that align \nwith the departments on the Business/Operations side. We converted our \nTraditional PMO that supported the Project Managers to an Agile PMO that \nstaffed experienced Agile coaches who supported the different Portfolio and \nAgile Project Teams. The services included conducting Agile Training, starting \nup new Agile teams, encouraging Team Empowerment, transforming existing roles, \nartifacts and processes to become more Agile, capturing metrics across \nPortfolio and Project Teams and creating the Management reports.	Leadership	Experience Report	2007
20070701	Experiences In Using Automated Tests and Test Driven Development in Computer Science 1	We are interested in how to expose our students to Test Driven Development (TDD)\r\nand have experimented with a variety of ways of leveraging testing technology to\r\nhelp our students learn to program in our first programming course.  Initially,\r\nwe developed a framework that allows the students to run tests that are\r\ndeveloped by the faculty member.  That experience led us to developing a JUnit\r\nplug-in that allowed the students to specify the tests without having to write\r\nthe test code.  As a result of these experiences, we have re-structured this\r\nclass into these roughly sequential phases: learning to read code, learning to\r\nwrite code, and learning to program.  Throughout this course, the students are\r\nusing TDD, writing their own JUnit tests, and refactoring as they develop their\r\ncode iteratively.  This change has been made without dropping any of the\r\nrequired course content.	Testing	Educators Symposium	2007
20070790	Lean and Agile In the Large - Principles, Practices and Experiences for Large Scale Software Development	Title:  Lean and Agile In the Large - Principles, Practices and Experiences for\r\nLarge Scale Software Development.\r\n\r\nTopics: Lean High Performance Teams, Envisioning, Definition, Estimation, \r\nDevelopment, Release Management, Measurement, Process Compliance and Peopleware\r\nPractices for Large Scale Product and Application Development\r\n\r\nAudience: The presentation is aimed at a general audience who are interested in\r\nor faced with the challenges of building large software products or applications\r\ninvolving many teams who are often geographically dispersed.  It is particularly\r\nrelevant to those involved in transitioning, managing and coaching and\r\ndeveloping in large product development organizations. \r\n \r\nBenefits:  Attendees will gain an understanding of practices and experiences\r\nusing lean and agile techniques for large scale software product development.   \r\n\r\nContent Outline: Lean and Agile practices have made a major positive impact on\r\nproductivity and quality of life for individuals and development teams.  In this\r\npresentation we focus on the challenges and practices of using Lean  and Agile\r\nin large development organizations.  We introduce practices in Envisioning,\r\nDefinition, Planning and Release Management and Measurement which compliment the\r\nAgile practices used for Development.  These practices allow business to gain\r\nagility while addressing their needs for governance and quality.  They integrate\r\nLean and Agile software with best practice Lean Product Engineering practices\r\nwhile respecting and encouraging the wide adoption of empowering agile\r\npractices.  The practices provide proven practical techniques for large scale\r\nAgile challenges such as Voice of The Customer: Tangible Requirements and\r\nAcceptance Testing; Role of Architecture, Models and Components, Management of\r\nFeatures vs. Components: Planning, Estimating and Resource Allocation:\r\nDependency Management and Release Management; Scrum of Scrums and Communities of\r\nPractice, Enterprise Development Dashboards and compliance with CMM, SOX, and\r\nSix Sigma/TQM.	Leadership	Talking Head	2007
20070928	Patterns of Microtesting for CRRAP	The second great myth of software development training is the notion that most\r\nprogramming most of the time is on new code.  In fact, most developers\r\nspend most of their time working on CRRAP:  Code Requiring Remedial Attention\r\nPromptly.  In this course, weâ€™ll lay out the five basic patterns for\r\nbringing complex legacy code under perfectly tested control.  If youâ€™ve ever\r\nheard or said â€œDonâ€™t touch that, you donâ€™t know what itâ€™s connected to,â€ this\r\nclass is for you.  Each pattern is illustrated with a complete real-world\r\nexample, and in the final section, the patterns are combined to turn an\r\nextraordinary piece of CRRAP into a clear, coherent, perfectly tested piece of gold.\r\nNote:  This presentation will use online, interactive e-learning experiences\r\nrather than static handouts. To get the fullest benefit from this tutorial, the\r\nstudent should bring a laptop with wireless access.	Developing	Tutorial	2007
20070531	Programmers are from Mars, Customers are from Venus: A Practical Guide to Working With Customers on Agile Projects	This interactive and informative tutorial will introduce you\r\nto practices that will increase the effectiveness of the customer on your XP\r\nproject. Customers have one of the most complex and difficult roles on a\r\nproject, yet XP includes very few practices that support the customer in their\r\nrole; the aim of this tutorial is to change that. Over the last three\r\nyears, we have investigated many projects around the world to identify how\r\ncustomers succeed in\r\nthis complex and difficult task; discovering not what people think should have\r\nhappened, but what really happened and what actually worked!  This tutorial\r\ndistills this research, grounded in practical experience, into a 3 hour session,\r\nso that by the end of this tutorial you will have gained: \r\nA realistic understanding of the complexity and difficulty of the XP \r\nCustomer role.\r\nAn understanding of the key roles required on a customer team; both what \r\nthey are and why they matter. \r\nAn understanding of the nine practices that enable customers to \r\nsustainably drive XP projects to successful completion; think XP practices \r\nBUT for customers.	Customer	Tutorial	2007
20092417	From anarchy to sustainable development: SCRUM in less than ideal conditions.  	Is it possible to SCRUM the development of a large software system with contributing teams spread out over three cities, five partners, six sites, and a six hour time difference? It started with vague and ambitious objectives and was built on bleeding edge technologies (grails, flex). By all rights we should have fallen flat on our faces. But a year after its dubious beginning, our project continues. Join us as we present the good, the bad and the ugly of distributed team projects.\n\n  	Distributed Agile	Experience report	2009
20070758	Scripting Web Tests with Watir	Learn how to write browser-based automated functional tests in\r\nthis hands-on tutorial. We’ll show you how to use the \r\nWatir\r\ntesting tool and the Ruby\r\nlanguage to create tests that drive a web \r\napplication. By the end of the tutorial, you’ll have created a test suite\r\nusing an open-source tool popular with agile teams.\r\n\r\n\r\n\tBring a Windows laptop with W2K, XP, Vista\r\n(shudder) or even a Mac with Parallels. \r\nWe’ll provide the software. \r\nYou will be pairing, so even\r\nif you don’t have a suitable laptop, come anyway and pair with someone\r\nwho does. The hands-on exercises use Internet Explorer. We will also demonstrate \r\nhow to use FireWatir,\r\na version of Watir for Firefox. \r\nParticipants should already know how to program in a computer language,\r\nalthough no prior knowledge of Watir or Ruby is assumed.\r\n\r\n\r\n\r\n\r\n\r\n\tWrite automated accepance tests for web applications written in\r\nany language\r\n\t\tCompare Watir to other acceptance testing tools\r\n\t\tMake web interfaces more testable\r\n\t\tLearn Ruby\r\n\tPre-install the\r\ntutorial software	Testing	Tutorial	2007
20070818	The Crystal Methods, or How to Make a Methodology Fit	This tutorial is for experienced developers, team leaders, methodologists and \ntechnology selectors trying to choose or design a methodology for their \norganization. \n\nJust as projects vary in size, criticality and priorities, and so should your \nmethodology. The strengths and weaknesses of the organization, the specific \npeople, even the office layout affects how the team best works, and should \ninfluence the methodology. Crystal is a family of highly tolerant, lightweight \nmethodologies built from core principles, techniques for tuning them to your \nspecific situation, and specific examples to copy from. Inside the rule set for \na Crystal methodology may be any topic or convention the team agrees to, \nincluding level of document detail and formality, reviews used, office seating \nand even quasi-unofficial parties. The Crystal methodology family aspires to be \nthe most tolerant, habitable and yet effective methodology for any particular \nproject team. \n\nBesides the Crystal family genetic code, this tutorial describes the principles \nand techniques for shaping a methodology to the project-team combination, \nintroduces the colors in the Crystal family, compares different examples of the \nCrystal family to each other relative to the principles, and shows the \ndifferences between Crystal Clear and XP. \n\nExpect to learn the methodology tuning principles, and experience how easy and \nfruitful a methodology-tuning session can be. \n\nOut of the three hours, about 2 hours is lecture, describing the genetic code \nfor Crystal, why and how to tune a methodology, and methodology design \nprinciples. About half an hour is open question and answer; about half an hour \nis for the attendees to work together in small groups to do some methodology  \ntuning on their own, preferably standing at flipcharts.	Process	Tutorial	2007
20070890	The One-Size-Fits-One Simulation	Over the last few months we have successfully used Ruby on Rails to replace\r\ninflexible process management tools (iTracker and XPlanner) with homegrown,\r\none-size-fits-one tools for one of our clients.  We have found that the\r\nproductivity of Rails allows us to facilitate process adaptation in real-time. \r\nAs we grappled with the constraints of one-size-fits-all tools, we understood\r\nwhat Alistair Cockburn was talking about when he said, "If you follow a\r\nmethodology out of the box, you will have one that fits some project in the\r\nworld, but probably not yours." (Agile Software Development).  Come join the\r\nObtivians as we explore the potential of real-time process tool definition in\r\nthe land of Ruby and Rails.	Process Improvement	Workshop	2007
20070930	The Value of Agile in Experiential Learning of Software Development	In student projects, as in commercial software development projects, a primary \nmeasure of success is the value delivered to the client. Of equal \ninstructional importance is to what extent the student perceives value in the \nprocess used to achieve this goal. In other words, do they perceive the \nprocess as a support or an impediment? Previous experience with heavy weight \nprocesses produced anecdotal evidence that students perceived them as onerous \nand irrelevant. To determine student perceptions of the relevancy of agile \nprinciples, we conducted a year long study of senior student software \ndevelopment projects in which they applied agile principles  working with \nindustry clients under minimal supervision. Our results indicate a strong \nrelationship between the studentsâ€™ perception of value delivered to the client \nand their perception of the value of utilizing agile principles to achieve \ntheir goal. This paper describes our applied research approach and supports \nthe validity of using agile principles in student experiential learning of \nsoftware development in a higher education institution.	Learning	Educators Symposium	2007
20070502	Value Stream Mapping in a Software Development Organization	Abstract: Many agile practitioners recognize Lean as one of the sources of the\r\nagile movement, and learn from the Lean Practices (sometimes called Toyota\r\nProduct Development). What certainly is true is that the Lean movement has many\r\ntools and practices that seem to fit well in an implementation process for Agile\r\nSoftware Development. One of such tools is the drawing Value Stream Maps, a\r\ntechnique that is recommended by Womack & Jones as a vital step in implementing\r\nLean practices in an organization. \r\n\r\nA Value Stream Map shows a picture of materials and information flowing in an\r\norganization. It is made visible where in the process value (for the customer)\r\nis added to the product, and where this does not happen. So an initial map will\r\ngive a sight of **the whole** for the organization. With an overview of the\r\ncurrent flows, and the places where no value is added, a desired flow can be\r\ndrawn, and an optimization plan can easily be developed. This technique is\r\nwidely trained and used in production environments.\r\n\r\nIn this Hands-On Session I will translate the Value Stream Mapping practice to\r\nsoftware development. What is traditionally known as **material** and\r\n**information** gets a different meaning in software development. Instead of\r\npresenting the approach as a tutorial, I prefer to have a large part of the time\r\ndedicated to **doing it**. The attendees will learn more, and take the new\r\nskills, their own results and the experience from other attendees back to their\r\norganizations and immediately use it.\r\n\r\nAudience: People who have the role of sponsor or change manager in an\r\norganization. This could typically be ScrumMasters, Development Managers, PMO\r\nmembers. \r\n\r\nAudience Level: Intermediate, Experienced \r\n- I expect the attendees to know what happens in a software development\r\norganization, and to be familiar with most steps in the process. Roles like\r\narchitect, business design, developer, tester, and quality assurance should have\r\na meaning from real life. Agile knowledge is required to be able to map an\r\nexisting plan-drive (or waterfall) process to an agile process.\r\n\r\nKey benefits for participants: \r\n- Participants will learn a proven technique to gain insight in their software\r\ndevelopment process; \r\n- The participants will learn that not all activities in their process add\r\nvalue, or even on the contrary: some may introduce waste; \r\n- The concepts of flow and waste in a software development organization will\r\nbecome visible, and real: they will be mapped against the organization of the\r\nparticipant; \r\n- Participants will learn that implementing agile methods, processes and\r\npractices is about organizational change, and they will walk away with\r\nexperience in using a valuable tool for this change process; \r\n\r\nContent Outline and Timeline: \r\n- Introductions of session leader and audience (20 min); \r\n- Introduction of Lean, Agile and the relation between the two concepts (10 min); \r\n- Value Stream Mapping: the concept and the implementation in Software \r\nDevelpment (20 min); \r\n- Exercise: Drawing of the Current-State Map by the participants, brief\r\nretrospective on the results (30 min); \r\n- Introduction of the **Overproduction** concept in Software Development (10 min); \r\n- Exercise: Determination of **takt time** in the drawn maps. Identification of\r\npossibilities for continuous flow in the maps. Identification of pull moments in\r\nthe maps. Selection of the pacemaker process. And other activities to prepare\r\nfor the drawing of the future-state map (20 min); \r\n- Exercise: Drawing of a Future-State Map by the participants and a brief\r\ndiscussion of the results (30 min); \r\n- Exercise: Creating a plan to achieve the Future State (20 minutes); \r\n- Session close.	Process Improvement	Workshop	2007
20071060	VT2	968. Absolute AgileSM - Applying the Synergy of Lean and Agile to Enterprise Transitionsby Paul Hodgetts, CEO / Trainer / Consultant, Agile Logicby Justin Yaros, CIO, Kelley Blue Book\r\n1070. Empowering Agile Transformationby Al Goerner, Valtech	Other	Session	2007
20050196	Community Building: a Critical Success Factor for XP Projects	Extreme Programming (XP) literature and discussions often view \r\n    successful projects only as customer-driven product development: \r\n    planning, coding and testing an unfolding series of prioritized units \r\n    of vertical functionality. I claim, however, that a successful project \r\n    also requires a prospering community, comprising an introspective group \r\n    of committed professionals communicating effectively, and using a \r\n    well-understood, stable process. Weakness on any of these fronts \r\n    presents a high risk of failure; therefore, I advise every XP project's \r\n    members to actively engage in building their community, such that it \r\n    reaches its critical level of development already by the first internal \r\n    release. To help in this endeavor, I provide a comprehensive list of \r\n    activities and attitudes, to practice and avoid, during the first \r\n    release's time.	Experience Reports	Experience Report	2005
20071027	XR04: Agile PMO	Establishing the Agile PMO; Managing\r\nVariability across \r\nProjects and Portfolios\r\n\r\nby Ash Tengshe and Scott Noble\r\nAgile Program Management: Lessons Learned\r\nfrom the VeriSign Managed Security Services Team\r\n\r\nby Luke Hohmann and Peter Hodgkins\r\n"Enabling Agile in a LargeOrganization" -\r\nOur Journey Down the Yellow Brick Road\r\n\r\nby Thomas Seffernick	Other	Session	2007
20040147	Personal Developmemt Practices Map	Have you ever noticed how easy it is to write software tools for yourself?  This is because there are zero (0) degrees of separation between you (the developer) and you (the end-user and stakeholder).\nStakeholders pay for the privilege developers enjoy as a tool-builder.\n\nThis is how software teams are paid.\n\nIf we sold chickens, we would say, “these chickens are healthy and plump, and therefore worth more than this sickly, scrawny old cow”.\n\nMany Agile projects involving more than one person deliver on time and on schedule with high quality, yet fail to satisfy the project stakeholders.  All too often we find ourselves with an unhealthy cow when the market was demanding chicken.\n\nThe purpose of this workshop is to explore the topic, “Directly involving developers with customers makes money”.	Peer to Peer	Workshop	2004
20040102	Interaction Design Meets Agility	Focal to most agile development approaches is the notion that development work done is described in terms of its understandable value to the users of the software. Yet there's little written in documented agile methods on exactly how to discover and understand these "users". Our once well understood systems architecture has taken a backseat to these often poorly understood "users" and the features they need to generate business value. Interaction Design methodologies such as Constantine & Lockwood's Usage-Centered Design offer valuable approaches for finding, classifying, and prioritzing the people who have goals your software can help fulfill.\nThis tutorial will acquaint participants with U-CD and its place in an agile development approach. As a participant, you'll be working hands-on in a collaborative design team to produce a user role model using 3x5 cards, poster paper, discussion, and creativity. You'll learn how the role model helps build context around software features that help determine priority and make trade-off decisions throughout a development project. You'll use this understanding, and more 3x5 cards, to develop an iterative release plan that takes into account newly understood user roles. In addition, you'll learn collaborative card-sorting and modeling techniques you can apply to other tasks throughout your project.	Tutorials	Tutorial	2004
20040103	Scrum and Agile Process 101	Focal to most agile development approaches is the notion that development work done is described in terms of its understandable value to the users of the software. Yet there's little written in documented agile methods on exactly how to discover and understand these "users". Our once well understood systems architecture has taken a backseat to these often poorly understood "users" and the features they need to generate business value. Interaction Design methodologies such as Constantine & Lockwood's Usage-Centered Design offer valuable approaches for finding, classifying, and prioritzing the people who have goals your software can help fulfill.\nThis tutorial will acquaint participants with U-CD and its place in an agile development approach. As a participant, you'll be working hands-on in a collaborative design team to produce a user role model using 3x5 cards, poster paper, discussion, and creativity. You'll learn how the role model helps build context around software features that help determine priority and make trade-off decisions throughout a development project. You'll use this understanding, and more 3x5 cards, to develop an iterative release plan that takes into account newly understood user roles. In addition, you'll learn collaborative card-sorting and modeling techniques you can apply to other tasks throughout your project.	Tutorials	Tutorial	2004
20040104	Top-Down TDD using Mock Objects and Inversion of Control	Focal to most agile development approaches is the notion that development work done is described in terms of its understandable value to the users of the software. Yet there's little written in documented agile methods on exactly how to discover and understand these "users". Our once well understood systems architecture has taken a backseat to these often poorly understood "users" and the features they need to generate business value. Interaction Design methodologies such as Constantine & Lockwood's Usage-Centered Design offer valuable approaches for finding, classifying, and prioritzing the people who have goals your software can help fulfill.\nThis tutorial will acquaint participants with U-CD and its place in an agile development approach. As a participant, you'll be working hands-on in a collaborative design team to produce a user role model using 3x5 cards, poster paper, discussion, and creativity. You'll learn how the role model helps build context around software features that help determine priority and make trade-off decisions throughout a development project. You'll use this understanding, and more 3x5 cards, to develop an iterative release plan that takes into account newly understood user roles. In addition, you'll learn collaborative card-sorting and modeling techniques you can apply to other tasks throughout your project.	Tutorials	Tutorial	2004
20040105	The Agile/XP Team Primer: Exploring Self-Organizing Teams	Focal to most agile development approaches is the notion that development work done is described in terms of its understandable value to the users of the software. Yet there's little written in documented agile methods on exactly how to discover and understand these "users". Our once well understood systems architecture has taken a backseat to these often poorly understood "users" and the features they need to generate business value. Interaction Design methodologies such as Constantine & Lockwood's Usage-Centered Design offer valuable approaches for finding, classifying, and prioritzing the people who have goals your software can help fulfill.\nThis tutorial will acquaint participants with U-CD and its place in an agile development approach. As a participant, you'll be working hands-on in a collaborative design team to produce a user role model using 3x5 cards, poster paper, discussion, and creativity. You'll learn how the role model helps build context around software features that help determine priority and make trade-off decisions throughout a development project. You'll use this understanding, and more 3x5 cards, to develop an iterative release plan that takes into account newly understood user roles. In addition, you'll learn collaborative card-sorting and modeling techniques you can apply to other tasks throughout your project.	Tutorials	Tutorial	2004
20040106	Effective User Stories for Agile Software Development	The technique of capturing requirements as user stories is one of the most broadly applicable techniques introduced by Extreme Programming. User stories can be used effectively on any agile project or by any group looking to become more agile. In this tutorial you will learn how to identify and write user stories, how they differ from other approaches, how to estimate them, how to use them for release and iteration planning, and their role in the ongoing management of the project. Special emphasis will be placed on looking at specific attributes and examples of good user stories. Specific recommendations based on the presenter’s experience and research into using stories in XP and Scrum will be given.	Tutorials	Tutorial	2004
20040107	Large-Scale Agile Software Development	The technique of capturing requirements as user stories is one of the most broadly applicable techniques introduced by Extreme Programming. User stories can be used effectively on any agile project or by any group looking to become more agile. In this tutorial you will learn how to identify and write user stories, how they differ from other approaches, how to estimate them, how to use them for release and iteration planning, and their role in the ongoing management of the project. Special emphasis will be placed on looking at specific attributes and examples of good user stories. Specific recommendations based on the presenter’s experience and research into using stories in XP and Scrum will be given.	Tutorials	Tutorial	2004
20040108	Exploratory Testing for Agile Projects	The technique of capturing requirements as user stories is one of the most broadly applicable techniques introduced by Extreme Programming. User stories can be used effectively on any agile project or by any group looking to become more agile. In this tutorial you will learn how to identify and write user stories, how they differ from other approaches, how to estimate them, how to use them for release and iteration planning, and their role in the ongoing management of the project. Special emphasis will be placed on looking at specific attributes and examples of good user stories. Specific recommendations based on the presenter’s experience and research into using stories in XP and Scrum will be given.	Tutorials	Tutorial	2004
20040109	Implementing Lean Software Development	The technique of capturing requirements as user stories is one of the most broadly applicable techniques introduced by Extreme Programming. User stories can be used effectively on any agile project or by any group looking to become more agile. In this tutorial you will learn how to identify and write user stories, how they differ from other approaches, how to estimate them, how to use them for release and iteration planning, and their role in the ongoing management of the project. Special emphasis will be placed on looking at specific attributes and examples of good user stories. Specific recommendations based on the presenter’s experience and research into using stories in XP and Scrum will be given.	Tutorials	Tutorial	2004
20040110	Domain-Driven Design	The technique of capturing requirements as user stories is one of the most broadly applicable techniques introduced by Extreme Programming. User stories can be used effectively on any agile project or by any group looking to become more agile. In this tutorial you will learn how to identify and write user stories, how they differ from other approaches, how to estimate them, how to use them for release and iteration planning, and their role in the ongoing management of the project. Special emphasis will be placed on looking at specific attributes and examples of good user stories. Specific recommendations based on the presenter’s experience and research into using stories in XP and Scrum will be given.	Tutorials	Tutorial	2004
20040111	Skills for the Agile Designer	Don’t be complacent with just refactoring your code towards an adequate solution. Agile designers need to be skilled problem solvers and communicators (and no, that doesn’t mean just writing clean code or producing barely enough UML). Increase your agility by adopting new techniques for seeing and articulating problems, shaping solutions, and explaining your designs. This tutorial will present strategies for finding and characterizing objects and their behavior, designing application control centers, adapting patterns, characterizing the essence of a problem, and telling good design stories. Key techniques will be reinforced with brief exercises.\nRecognizing and adapting to different design rhythms is an often overlooked key to agility. When things don’t exactly go according to plan, agile designers react, readjust their thinking, and try again. Even so, unanticipated problems crop upwicked problems that can’t be solved by sheer effort alone. They require a blend of skills: creative problem solving, negotiation, the ability to craft-try-rethink-and-propose solutions that combine simpler ideas or possibly take a leap in a totally new direction. This tutorial concludes with practical advice on how to sort design problems into the core, the revealing, and the rest, so you can give each kind of problem the attention it deserves.	Tutorials	Tutorial	2004
20040112	Inside Feature Driven Development	Don’t be complacent with just refactoring your code towards an adequate solution. Agile designers need to be skilled problem solvers and communicators (and no, that doesn’t mean just writing clean code or producing barely enough UML). Increase your agility by adopting new techniques for seeing and articulating problems, shaping solutions, and explaining your designs. This tutorial will present strategies for finding and characterizing objects and their behavior, designing application control centers, adapting patterns, characterizing the essence of a problem, and telling good design stories. Key techniques will be reinforced with brief exercises.\nRecognizing and adapting to different design rhythms is an often overlooked key to agility. When things don’t exactly go according to plan, agile designers react, readjust their thinking, and try again. Even so, unanticipated problems crop upwicked problems that can’t be solved by sheer effort alone. They require a blend of skills: creative problem solving, negotiation, the ability to craft-try-rethink-and-propose solutions that combine simpler ideas or possibly take a leap in a totally new direction. This tutorial concludes with practical advice on how to sort design problems into the core, the revealing, and the rest, so you can give each kind of problem the attention it deserves.	Tutorials	Tutorial	2004
20040113	Collaboration Works! Facilitation Skills for Agile Teams	Don’t be complacent with just refactoring your code towards an adequate solution. Agile designers need to be skilled problem solvers and communicators (and no, that doesn’t mean just writing clean code or producing barely enough UML). Increase your agility by adopting new techniques for seeing and articulating problems, shaping solutions, and explaining your designs. This tutorial will present strategies for finding and characterizing objects and their behavior, designing application control centers, adapting patterns, characterizing the essence of a problem, and telling good design stories. Key techniques will be reinforced with brief exercises.\nRecognizing and adapting to different design rhythms is an often overlooked key to agility. When things don’t exactly go according to plan, agile designers react, readjust their thinking, and try again. Even so, unanticipated problems crop upwicked problems that can’t be solved by sheer effort alone. They require a blend of skills: creative problem solving, negotiation, the ability to craft-try-rethink-and-propose solutions that combine simpler ideas or possibly take a leap in a totally new direction. This tutorial concludes with practical advice on how to sort design problems into the core, the revealing, and the rest, so you can give each kind of problem the attention it deserves.	Tutorials	Tutorial	2004
20050197	Using Open Spaces to Resolve Cross Team Issues	Cross-team development issues that need special coordination and close \r\n    attention can be managed successfully by using the Agile concept of \r\n    "Open Spaces".  During our 5.0 development cycle, which is being \r\n    executed by ten teams in 16 sprints, we use open spaces to identify \r\n    and evolve critical cross team issues.  A concept we wished to \r\n    emphasize during this development cycle is that of self managed teams. \r\n    The open space fits very well with that concept.  As with other new \r\n    agile tools, adaptation began slowly, but once developers realized that \r\n    the decision-making power belongs to the open space participants, the \r\n    popularity of this tool increased.	Experience Reports	Experience Report	2005
20040114	Project Simulation Game	Don’t be complacent with just refactoring your code towards an adequate solution. Agile designers need to be skilled problem solvers and communicators (and no, that doesn’t mean just writing clean code or producing barely enough UML). Increase your agility by adopting new techniques for seeing and articulating problems, shaping solutions, and explaining your designs. This tutorial will present strategies for finding and characterizing objects and their behavior, designing application control centers, adapting patterns, characterizing the essence of a problem, and telling good design stories. Key techniques will be reinforced with brief exercises.\nRecognizing and adapting to different design rhythms is an often overlooked key to agility. When things don’t exactly go according to plan, agile designers react, readjust their thinking, and try again. Even so, unanticipated problems crop upwicked problems that can’t be solved by sheer effort alone. They require a blend of skills: creative problem solving, negotiation, the ability to craft-try-rethink-and-propose solutions that combine simpler ideas or possibly take a leap in a totally new direction. This tutorial concludes with practical advice on how to sort design problems into the core, the revealing, and the rest, so you can give each kind of problem the attention it deserves.	Tutorials	Tutorial	2004
20040115	Speed Boats & Jacuzzis: What Do Your Customers Really Want?	The first step to creating truly successful products is understanding what customers really want. This can be harder than it sounds. Believe it or not, customers are people. Which means they’re just like you and somewhat like me. Which means that they don’t always know what they want. Because they don’t know, they can’t tell you. So, asking them to rank requirements or write stories isn’t very effective at helping you understand what they really want.\nWhat works for me and my customers, and, I suspect, will work for you and your customers is talking, listening, and working with them to uncover what they really want. This hands on, “learning by doing” tutorial describes 12 proven techniques for working with customers, and in the process understanding what your customers really want. They’re fun, and they work.	Tutorials	Tutorial	2004
20040116	The Crystal Methods, or How to Make a Methodology Fit	The first step to creating truly successful products is understanding what customers really want. This can be harder than it sounds. Believe it or not, customers are people. Which means they’re just like you and somewhat like me. Which means that they don’t always know what they want. Because they don’t know, they can’t tell you. So, asking them to rank requirements or write stories isn’t very effective at helping you understand what they really want.\nWhat works for me and my customers, and, I suspect, will work for you and your customers is talking, listening, and working with them to uncover what they really want. This hands on, “learning by doing” tutorial describes 12 proven techniques for working with customers, and in the process understanding what your customers really want. They’re fun, and they work.	Tutorials	Tutorial	2004
20040117	Advanced Fit Lab	The first step to creating truly successful products is understanding what customers really want. This can be harder than it sounds. Believe it or not, customers are people. Which means they’re just like you and somewhat like me. Which means that they don’t always know what they want. Because they don’t know, they can’t tell you. So, asking them to rank requirements or write stories isn’t very effective at helping you understand what they really want.\nWhat works for me and my customers, and, I suspect, will work for you and your customers is talking, listening, and working with them to uncover what they really want. This hands on, “learning by doing” tutorial describes 12 proven techniques for working with customers, and in the process understanding what your customers really want. They’re fun, and they work.	Tutorials	Tutorial	2004
20040118	Agile Project Management - Reliable Innovation	The first step to creating truly successful products is understanding what customers really want. This can be harder than it sounds. Believe it or not, customers are people. Which means they’re just like you and somewhat like me. Which means that they don’t always know what they want. Because they don’t know, they can’t tell you. So, asking them to rank requirements or write stories isn’t very effective at helping you understand what they really want.\nWhat works for me and my customers, and, I suspect, will work for you and your customers is talking, listening, and working with them to uncover what they really want. This hands on, “learning by doing” tutorial describes 12 proven techniques for working with customers, and in the process understanding what your customers really want. They’re fun, and they work.	Tutorials	Tutorial	2004
20040119	Test-Driven Development with Visual Studio 2005 Team System	Don’t be complacent with just refactoring your code towards an adequate solution. Agile designers need to be skilled problem solvers and communicators (and no, that doesn’t mean just writing clean code or producing barely enough UML). Increase your agility by adopting new techniques for seeing and articulating problems, shaping solutions, and explaining your designs. This tutorial will present strategies for finding and characterizing objects and their behavior, designing application control centers, adapting patterns, characterizing the essence of a problem, and telling good design stories. Key techniques will be reinforced with brief exercises.\nRecognizing and adapting to different design rhythms is an often overlooked key to agility. When things don’t exactly go according to plan, agile designers react, readjust their thinking, and try again. Even so, unanticipated problems crop upwicked problems that can’t be solved by sheer effort alone. They require a blend of skills: creative problem solving, negotiation, the ability to craft-try-rethink-and-propose solutions that combine simpler ideas or possibly take a leap in a totally new direction. This tutorial concludes with practical advice on how to sort design problems into the core, the revealing, and the rest, so you can give each kind of problem the attention it deserves.	Tutorials	Tutorial	2004
20040120	An Initial Exploration of the Relationship Between Pair Programming and Brooks’ Law	Through his law, “adding manpower to a late software project makes it later,” Brooks asserts that the assimilation, training, and intercommunication costs of adding new team members outweigh the associated team productivity gain in the short term. Anecdotes suggest that adding manpower to a late project yields productivity gains to the team more quickly if the team employs the pair programming technique when compared to teams where new team members work alone. We utilize a system dynamics model which demonstrates support of these observations. Parameter values for the model were obtained via a small-scale, non-probabilistic, convenience survey. Our initial findings suggest that managers should incorporate the pair programming practice, particularly when growing their team.	Research	Research Paper	2004
20040121	Exploring Extreme Programming in Context: An Industrial Case Study	A longitudinal study evaluating the effects of adopting the Extreme Programming (XP) methodology was performed at Sabre Airline Solutions™. The Sabre team was a characteristically agile team in that they had no need to scale or re-scope XP for their project characteristics. The case study compares two releases of the same product. One release was completed just prior to the team’s adoption of the XP methodology and the other after approximately two years of XP use. Comparisons of the new release project results to the old release project results show an increase in design complexity, a 50% increase in productivity, a 65% improvement in pre-release quality, and a 30% improvement in post-release quality. These findings suggest that, over time, adopting the XP process can result in increased productivity and quality.	Research	Research Paper	2004
20040122	The XP Customer Role in Practice: Three Studies	The Customer is the only non-developer role in eXtreme Programming (XP). The Customer's explicit responsibilities are to drive the project, providing project requirements (user stories) and quality control (acceptance testing): unfortunately the customer must also shoulder a number of implicit responsibilities including liason with external project stakeholders, especially project funders, clients, and end users, while maintaining the trust of both the development team and the wider business. In this paper, we report on a series of case studies of the Customer role in XP projects. We have found that Customers have a pressured and stressful role, leading to issues of sustainability.	Research	Research Paper	2004
20040123	Agile Methods for Large Organizations  Building Communities of Practice	Agile development practices respect tacit knowledge, make communication more effective, and thus foster knowledge creation process. However the current agile methods, like XP, are focused on practices that individual teams or projects need and use of the methods in organizations consisting of multiple co-operating teams is difficult. Community of Practice theory suggests that large agile organization should have various overlapping informal cross-team communities. This paper studies three agile methods, developed in Nokia, that use facilitated workshops to solve multi-team issues. Using Communities of Practices theory paper explains why these methods work in multi-team settings. The results of this paper suggest that workshop practices that gather people from different parts of organizations together to perform a specific well-defined task can be used effectively to solve issues that span over multiple teams and to build up Communities of Practice. This result suggests that the Community of Practice concept could provide basis for adapting agile methods for the needs of large organizations.	Research	Research Paper	2004
20040124	Direct Verbal Communication as a Catalyst of Agile Knowledge Sharing	This paper discusses the role of conversation and social interactions as the key element of effective knowledge sharing in an agile process. It also presents the observations made during a repeated experiment on knowledge sharing conducted in various groups of professionals and students. The study suggests that the focus on the pure codified approach is the critical reason of Tayloristic team failure to effectively share knowledge among all stakeholders of a software project. Drawing on the knowledge-as-relationship perspective of knowledge sharing we theorize that verbal face-to-face interaction facilitates achieving higher velocity accomplishments by software development teams.	Research	Research Paper	2004
20040125	XP "Anti-Practices" : anti-patterns for XP practices	When you introduce XP to your project, the team gets fresh enegy and high efficiency. However, sustaining the good condition becomes difficult when you are attacked by its side effects. We call these XP side effects "Anti-Practices", just as well as we name "Anti-Patterns" for Patterns.\n"Turning all the knobs up to 10" is the XP way, but Anti-Practices show bad symptoms of the overdrive. (There is a proverb "more than enough is too much" in Japan.)\nIn this experience report, we identify Anti-Practices discovered from our projects with prescriptions to the symptoms so that XPers can share the counter plans.	Process Evolution (XR1)	Experience Report	2004
20040126	Refactoring the Development Process: Experiences with the Incremental Adoption of Agile Practices	The goal of many current process improvement efforts is to become more agile by adopting an agile process. However, the results of several recent projects suggest that when attempting to become more agile, adopting an agile process is exactly the wrong thing to do!\nIn this experience report, we discuss our failures with wholesale process adoption and our successes using an incremental adoption strategy based on metric- and retrospection-driven feedback. Similar to refactoring practices for design and code, this strategy identifies “process smells,” and targets the worst of them with specific agile practices drawn from several popular agile processes.	Process Evolution (XR1)	Experience Report	2004
20040127	Subclassing XP: Breaking its rules the right way	XP says that all of its practices are mandatory. Fine, subclass XP and create a new methodology.\nFor each XP practice you remove you need a compensating one.\nWe removed pair programming and replaced it with pairing. A pair has an author and a second. Design must be paired, but only by the completion of the story. Formal pair programming can ensue at the option of the author or the second.\nWe also replaced individual or pair refactoring with group-controlled refactoring. A refactor list is maintained and prioritised by the group and worked on towards the end of the iteration.	Process Evolution (XR1)	Experience Report	2004
20040128	Learning Effective XP: Successes and Failures	Agile processes such as XP (eXtreme Programming) have been recognised for their potential benefits of greatly improving software vis-à-vis fewer bugs, early delivery of valuable functionality, closer client/programmer interaction and a lower cost/change curve. As with any process, factors such as experience, time pressures and project scale influence its success or failure. In this paper, we describe the experiences of five different teams that adopted XP in small projects. Project teams were made up of four or five programmers, who were from various backgrounds, with varying levels of experience. The experiments were conducted as part of a postgraduate degree course in a university.\nEach team had differing levels of success. In determining the dominant features of both the successful and unsuccessful projects, we observed that many of the XP principles can be applied in a way that detrimentally affects the project. This paper discusses the learning curve associated with the XP process and how inexperienced teams can misinterpret the guidelines. We argue that this is due to the fact that teams do not appreciate the underlying ethos upon which these principles are based. This paper presents experiences that show how a naïve application of the XP guidelines can greatly affect the success of a project.	Agile Challenges (XR2)	Experience Report	2004
20040129	Emergent Database Design : Liberating Database Development with Agile Practices	Many agile projects do not apply agile practices to their database development.  Common wisdom dictates that the entire data model be carefully designed up front and protected from change thereafter.\nWe believed the common wisdom as well. But the clash of traditional database practices and agile development practices caused us significant pain, and hamstrung our ability to deliver the most business value in each iteration.\nOnce we recognized this pain, we abandoned the conventional wisdom. Incrementally, we applied agile discipline to our database development, eventually reducing up-front design work to just-in-time work that matched our 1 to 2 week development iterations.\nThis paper summarizes our experience.	Agile Challenges (XR2)	Experience Report	2004
20040130	Agile Methodologies Applied to Embedded Firmware Development	This paper describes the experience of applying Agile approaches to the development of firmware for the Intel® Itanium® processor family. Embedded development (i.e. firmware) projects are quite different from object-oriented and pure software endeavors, yet they face many of the same challenges that Agile software development practices address. Several unique challenges are described, including team members’ specialized domain knowledge, technical backgrounds and attitudes toward change, and the impact hardware plays in firmware design. We found Agile approaches to be well-suited for our project, in spite of the fact that most Agile methodologists come from very different backgrounds.	Agile Challenges (XR2)	Experience Report	2004
20040131	Aligning Strategic Planning with Agile Development	In my experience, I have successfully used Agile Development to build quality software, but often these projects have failed to bring about company success. This failure is due to the fact that most companies’ strategic planning capabilities have not been aligned with the flexibility and adaptability of Agile Development. I believe that Agile Development alone is insufficient to make every software project successful; every project must be coupled with a complimentary strategy to achieve business goals. If Agile Development is to continue growing in the business community, current strategic planning capabilities must be developed that share the same agile philosophies.	Management (XR3)	Experience Report	2004
20040132	Adaptive Agility - Managing Complexity and Uncertainty	Landmark Graphics has a large portfolio of software projects, with over 60 commercial products consisting of over 50 million lines of code. We sought to improve our software development process and looked to agile methods as natural extension of our current processes. As we examined our past projects we realized that an overall process to suit all projects would need to be adaptable based on the project conditions. This led us to look at some of the ideas of Cockburn in Crystal methods, and later to the work of Boehm and Turner.\nUpon reviewing our projects, we realized that we could categorize them into a four quadrant matrix with the axes of Complexity and Uncertainty, where Complexity included such issues as team size and criticality, and Uncertainty included both market and technical uncertainty. As is tradition, we used animal names to represent the four quadrants:\nDogs  Small projects with low uncertainty\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tColts  Small projects with high uncertainty\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tCows  Large projects with low uncertainty\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tBulls  Large projects with high uncertainty\nAll projects might have core processes that they adopt, but many process activities should be adapted based on the elements of Complexity and Uncertainty. It was comforting to uncover that most of our project teams had already naturally taken on this emergent behavior.	Management (XR3)	Experience Report	2004
20040133	The Slackers Guide To Project Tracking	As a project manager, your time is far too important to be wasted on mundane tasks like detailed tracking of the day-to-day activities of each of your developers. Wouldn't it be nice if you spent your time negotiating project scope and identifying and removing team impediments? Our experience has shown that consistency in card sizes and estimates allows you to perform full project planning with little effort. Additionally, it results in diagrams that accurately reflect your project's status. With this, accurate release planning sessions take hours not days, freeing up valuable time for both you and your developers.	Management (XR3)	Experience Report	2004
20040134	DecisionSpace Infrastructure: Agile Development in a Large, Distributed Team	This report takes lessons and experiences from the first two years of the DecisionSpace Infrastructure project. This covers the period from first inception to relative process stability.\nReasons for Interest	Transitioning to Agile (XR4)	Experience Report	2004
20040135	The Development Game	Three years ago we started a new project at our company. Undermanned, short on time, and under the gun to succeed, we started with 12 developers made up of existing domain experts and new technology experts. Management decided that the new project was the perfect time to implement some much needed process and, after investigating several published processes began implementing practices deemed important to success. I was on both the management and development teams.\nThe developers resisted the idea of new processes and practices for weeks, with quiet grumbling and out-and-out defiance.\nTo move forward, we created a "game" that involved developers in the process, rewarding approved practices and mildly disciplining non-compliance. Management spotted us $1,400 in prize money, which we used to buy techno-gadgets that would serve as rewards at the end of the iteration.\nThe game worked, and we developed a competitive and fun environment that improved morale, increased compliance, and caused the developers to become more involved in how the process itself worked. This paper describes the game and our experiences in playing it on several occasions.	Transitioning to Agile (XR4)	Experience Report	2004
20040136	A Study Case:  Evolution of Co-location and Planning Strategy	Agile practices can and should be evolved throughout a project.  This paper focuses on the evolution of two agile practices, namely co-location and planning strategy, in a software development project at TransCanada.  From inception to conclusion, the evolution contributes to the successful delivery of an in-house developed system and leads to change in organizational culture.	Transitioning to Agile (XR4)	Experience Report	2004
20040137	Taming the Embedded Tiger	The challenge: An embedded application for a new product design; Brand new CPU with its design not even finalized; Must integrate with software being developed by a partner company. Add to that a schedule already shortened by delay in staffing. Next, add a team with half of its members inexperienced in embedded or real-time software. Sound like a recipe for disaster? We discovered that even inexperienced team members could contribute productively if there were test methods tailored for agile embedded software development, and real teamwork. Embedded systems are notoriously hard to troubleshoot.\nTest practices we describe in this paper made troubleshooting so easy that our bug list never had more than 2 entries throughout the whole project.	Testing (XR5)	Experience Report	2004
20040138	Don't Mock Me: Design Considerations for Mock Objects	Mock objects, an object-oriented testing construct used predominantly in test-driven development, are often abused, leading to inflexible and defective systems. Developers abuse mocks because they don't fully understand the driving forces for when to use and not use them; they also don't fully understand the implications of their improper use. Mocks inherently introduce design concessions in code.\nThis experience report discusses when to use mocks, presents design categories that most mock implementations fall into, and discusses the considerations for each design category.	Testing (XR5)	Experience Report	2004
20040139	Foundations for Agile Development	The books on agile methods don’t cover everything one needs to know to develop software. The participants in this workshop will explore which core best practices and patterns are prerequisites for having an effective agile process, and how an agile team’s approach to the practice would differ from that of a more traditional environment. For example, “Version control” is arguably a process that helps a team; what is a core set of knowledge that an agile team needs to implement version control in a way that helps, not hinders the process? How does that differ from a more traditional environment? What are good resources for an agile team to use.\nThe workshop will start off with the group developing a set of core areas that they want to discuss in detail, and then we will explore the areas in depth.	Peer to Peer	Workshop	2004
20040140	Great COTS! Implementing Packaged Software with Agility	The books on agile methods don’t cover everything one needs to know to develop software. The participants in this workshop will explore which core best practices and patterns are prerequisites for having an effective agile process, and how an agile team’s approach to the practice would differ from that of a more traditional environment. For example, “Version control” is arguably a process that helps a team; what is a core set of knowledge that an agile team needs to implement version control in a way that helps, not hinders the process? How does that differ from a more traditional environment? What are good resources for an agile team to use.\nThe workshop will start off with the group developing a set of core areas that they want to discuss in detail, and then we will explore the areas in depth.	Peer to Peer	Workshop	2004
20040141	Agile Enablement Patterns	The books on agile methods don’t cover everything one needs to know to develop software. The participants in this workshop will explore which core best practices and patterns are prerequisites for having an effective agile process, and how an agile team’s approach to the practice would differ from that of a more traditional environment. For example, “Version control” is arguably a process that helps a team; what is a core set of knowledge that an agile team needs to implement version control in a way that helps, not hinders the process? How does that differ from a more traditional environment? What are good resources for an agile team to use.\nThe workshop will start off with the group developing a set of core areas that they want to discuss in detail, and then we will explore the areas in depth.	Peer to Peer	Workshop	2004
20040142	Making money with (or without) software: Towards zero degrees of customer separation	Have you ever noticed how easy it is to write software tools for yourself?  This is because there are zero (0) degrees of separation between you (the developer) and you (the end-user and stakeholder).\nStakeholders pay for the privilege developers enjoy as a tool-builder.\n\nThis is how software teams are paid.\n\nIf we sold chickens, we would say, “these chickens are healthy and plump, and therefore worth more than this sickly, scrawny old cow”.\n\nMany Agile projects involving more than one person deliver on time and on schedule with high quality, yet fail to satisfy the project stakeholders.  All too often we find ourselves with an unhealthy cow when the market was demanding chicken.\n\nThe purpose of this workshop is to explore the topic, “Directly involving developers with customers makes money”.	Peer to Peer	Workshop	2004
20040143	Can't Change Your Organization? Change Yourself!	Have you ever noticed how easy it is to write software tools for yourself?  This is because there are zero (0) degrees of separation between you (the developer) and you (the end-user and stakeholder).\nStakeholders pay for the privilege developers enjoy as a tool-builder.\n\nThis is how software teams are paid.\n\nIf we sold chickens, we would say, “these chickens are healthy and plump, and therefore worth more than this sickly, scrawny old cow”.\n\nMany Agile projects involving more than one person deliver on time and on schedule with high quality, yet fail to satisfy the project stakeholders.  All too often we find ourselves with an unhealthy cow when the market was demanding chicken.\n\nThe purpose of this workshop is to explore the topic, “Directly involving developers with customers makes money”.	Peer to Peer	Workshop	2004
20040144	Non-XP words for agile development practices	Have you ever noticed how easy it is to write software tools for yourself?  This is because there are zero (0) degrees of separation between you (the developer) and you (the end-user and stakeholder).\nStakeholders pay for the privilege developers enjoy as a tool-builder.\n\nThis is how software teams are paid.\n\nIf we sold chickens, we would say, “these chickens are healthy and plump, and therefore worth more than this sickly, scrawny old cow”.\n\nMany Agile projects involving more than one person deliver on time and on schedule with high quality, yet fail to satisfy the project stakeholders.  All too often we find ourselves with an unhealthy cow when the market was demanding chicken.\n\nThe purpose of this workshop is to explore the topic, “Directly involving developers with customers makes money”.	Peer to Peer	Workshop	2004
20040145	Writing Automated Customer Acceptance Tests	Have you ever noticed how easy it is to write software tools for yourself?  This is because there are zero (0) degrees of separation between you (the developer) and you (the end-user and stakeholder).\nStakeholders pay for the privilege developers enjoy as a tool-builder.\n\nThis is how software teams are paid.\n\nIf we sold chickens, we would say, “these chickens are healthy and plump, and therefore worth more than this sickly, scrawny old cow”.\n\nMany Agile projects involving more than one person deliver on time and on schedule with high quality, yet fail to satisfy the project stakeholders.  All too often we find ourselves with an unhealthy cow when the market was demanding chicken.\n\nThe purpose of this workshop is to explore the topic, “Directly involving developers with customers makes money”.	Peer to Peer	Workshop	2004
20040146	Customer Collaboration  Challenges and Experiences	The books on agile methods don’t cover everything one needs to know to develop software. The participants in this workshop will explore which core best practices and patterns are prerequisites for having an effective agile process, and how an agile team’s approach to the practice would differ from that of a more traditional environment. For example, “Version control” is arguably a process that helps a team; what is a core set of knowledge that an agile team needs to implement version control in a way that helps, not hinders the process? How does that differ from a more traditional environment? What are good resources for an agile team to use.\nThe workshop will start off with the group developing a set of core areas that they want to discuss in detail, and then we will explore the areas in depth.	Peer to Peer	Workshop	2004
20040148	Defining Agile Testing Practices, Rules, and Patterns	There are many testers on agile teams these days, and despite the increase in presentations and publications on “agile testing”; we find the term is still vague.  A list of agile testing practices (or patterns, rules of the game, whatever is the best way to express them) would guide us and other agile testers in the way XP practices guide XP teams.\nThe goal of this workshop is to discuss and produce a list of practices, rules, patterns (or however we choose to define agile testing techniques) that we (the workshop participants) agree upon.  We’ll use a list we’ve compiled as a starting point, but expect many ideas to surface in our discussions.	Peer to Peer	Workshop	2004
20040149	Agile Development with Domain Specific Languages	A domain-specific language is designed to express the requirements or solutions of a particular business domain.\nThe insurance industry, telephony, ice-cream manufacture, etc, all have their own vocabulary, constraints and patterns which can be most conveniently expressed in a purpose-made language. With clever engineering, we can design a compiler and runtime framework that can input such definitions and generate an insurance/telephony/ice-cream system.\n\nWith such a system at our disposal, creating our next insurance or ice-cream system becomes very rapid: development jobs become small-scale, that would be considered large scale if done from scratch; and consequently much more amenable to agile methodology. This workshop will explore that proposition.	Peer to Peer	Workshop	2004
20040150	Advice to a Customer New to Agile Methods	A domain-specific language is designed to express the requirements or solutions of a particular business domain.\nThe insurance industry, telephony, ice-cream manufacture, etc, all have their own vocabulary, constraints and patterns which can be most conveniently expressed in a purpose-made language. With clever engineering, we can design a compiler and runtime framework that can input such definitions and generate an insurance/telephony/ice-cream system.\n\nWith such a system at our disposal, creating our next insurance or ice-cream system becomes very rapid: development jobs become small-scale, that would be considered large scale if done from scratch; and consequently much more amenable to agile methodology. This workshop will explore that proposition.	Peer to Peer	Workshop	2004
20040151	Extreme Programming System Metaphor	A domain-specific language is designed to express the requirements or solutions of a particular business domain.\nThe insurance industry, telephony, ice-cream manufacture, etc, all have their own vocabulary, constraints and patterns which can be most conveniently expressed in a purpose-made language. With clever engineering, we can design a compiler and runtime framework that can input such definitions and generate an insurance/telephony/ice-cream system.\n\nWith such a system at our disposal, creating our next insurance or ice-cream system becomes very rapid: development jobs become small-scale, that would be considered large scale if done from scratch; and consequently much more amenable to agile methodology. This workshop will explore that proposition.	Peer to Peer	Workshop	2004
20040152	Developing an Agile-friendly software testing curriculum	A domain-specific language is designed to express the requirements or solutions of a particular business domain.\nThe insurance industry, telephony, ice-cream manufacture, etc, all have their own vocabulary, constraints and patterns which can be most conveniently expressed in a purpose-made language. With clever engineering, we can design a compiler and runtime framework that can input such definitions and generate an insurance/telephony/ice-cream system.\n\nWith such a system at our disposal, creating our next insurance or ice-cream system becomes very rapid: development jobs become small-scale, that would be considered large scale if done from scratch; and consequently much more amenable to agile methodology. This workshop will explore that proposition.	Peer to Peer	Workshop	2004
20040153	Top tips for dispersed teams	A domain-specific language is designed to express the requirements or solutions of a particular business domain.\nThe insurance industry, telephony, ice-cream manufacture, etc, all have their own vocabulary, constraints and patterns which can be most conveniently expressed in a purpose-made language. With clever engineering, we can design a compiler and runtime framework that can input such definitions and generate an insurance/telephony/ice-cream system.\n\nWith such a system at our disposal, creating our next insurance or ice-cream system becomes very rapid: development jobs become small-scale, that would be considered large scale if done from scratch; and consequently much more amenable to agile methodology. This workshop will explore that proposition.	Peer to Peer	Workshop	2004
20040154	Business Speak 101: Communicating Project Alternatives to Customers	Have you ever noticed how easy it is to write software tools for yourself?  This is because there are zero (0) degrees of separation between you (the developer) and you (the end-user and stakeholder).\nStakeholders pay for the privilege developers enjoy as a tool-builder.\n\nThis is how software teams are paid.\n\nIf we sold chickens, we would say, “these chickens are healthy and plump, and therefore worth more than this sickly, scrawny old cow”.\n\nMany Agile projects involving more than one person deliver on time and on schedule with high quality, yet fail to satisfy the project stakeholders.  All too often we find ourselves with an unhealthy cow when the market was demanding chicken.\n\nThe purpose of this workshop is to explore the topic, “Directly involving developers with customers makes money”.	Peer to Peer	Workshop	2004
20070724	Your Enterprise Systems Hinder Business Agility – So What?	The economic success of an enterprise more and more depends on its ability to \r\nreact to changes in its environment (i.e., regulatory, competitive, market or \r\ncustomer attitude) in a quick and flexible way. Companies have recognized that \r\nin order to cope with business trends such as increasing product and service \r\nvariability, fast time-to-market, and increasing division of labour along a \r\nglobal supply chain of goods and services, business agility is a significant \r\ncompetitive advantage. Unfortunately, business agility is often hindered by a \r\nlack of flexibility and responsiveness of contemporary IT enterprise systems.\r\n\r\nIn this Think Tank we will elaborate major obstacles you face when making your \r\ncompany respond faster and more effectively to changes in its environment. If \r\nyou want to move ahead and create a strategic advantage, you must enable your \r\npeople to self-organize and 'just do it', as you need to be able to adapt your \r\nprocesses to your goals, fast! If you have found that enterprise systems get \r\nin your way, join our think tank!	Customer	Discovery Session	2007
20090863	Growing Object-Oriented Software, Guided by Tests	This hands-on advanced workshop teaches incremental Test-Driven Development, showing how to grow code one feature at a time.  It will show: how to use tests at multiple levels to focus on requirements,  how to use unit tests to drive the discovery of roles and responsibilities in your design; and how to write resilient tests that express your intent and don't break for irrelevant changes.\n\nThe workshop is for programmers who want to improve their TDD practice. It has been presented at several conferences, one review from XpDay London was "Incredibly useful; the best technical Iâ€™ve heard".	Developer Jam	Clinic	2009
20070968	Absolute Agile	Would you like to learn what it really takes to implement lean \r\nand agile\r\nprocesses in an enterprise environment?\r\n\r\nGet the real story from someone who's been there! Join Agile Logic and CIO\r\nJustin Yaros of Kelley Blue Book as we engage in a lively discussion of\r\nenterprise agile in practice. Justin will share his experiences at Kelley Blue \r\nBook as they rolled out lean and agile across a dozen teams implementing\r\nmission-critical product applications.\r\n\r\nAgile Logic has drawn from years of experience applying lean and agile\r\napproaches for companies like Kelley Blue Book, SAP, Yahoo! and many others to \r\ncreate an\r\nenterprise-class approach to software process improvement - Absolute\r\nAgileSM.  Absolute AgileSM reduces risk, maximizes\r\nbenefits and generates immediate results by combining the deliverability of\r\nagile with the value-focus of lean to assess your environment, design and\r\nimplement a tailored plan, and measure success each step of the way.\r\n\r\nWhether you need to transform your organization, effectively kick-start new\r\nproduct development, tune up legacy projects or turn around a failing software\r\neffort, Absolute AgileSM delivers results quickly, safely and\r\nefficiently. Discover how our Absolute AgileSM workshop creates\r\na foundation for your extraordinary agile transformation.	Enterprise Agile	Vendor Talk	2007
20050155	Agile Project Management Reliable Innovation	Symyx boasts that their \r\n    process enables scientists to discover new materials at 100 times the \r\n    speed and 1% of the cost of traditional research. Drug companies \r\n    rapidly generate millions of compounds and then test them using \r\n    ultra-speedy mass spectrometers. Alias Sketchbook Pro a graphics \r\n    software package was completely planned and developed in two-week \r\n    iterations. \r\n\tFrom materials to drugs to software, companies are relentlessly driving \r\n\tthe cost of change out of their product development processes in order \r\n\tfoster innovation. These projects are the realm of Agile Project \r\n\tManagement (APM) which operates under a philosophy of Envision and \r\n\tExplore rather than Plan and Do.\r\n\t\r\n\tAPM focuses on quick starts, iterative exploration, delivering \r\n\tcustomer value, low-cost change, frequent feedback, and intense \r\n\tcollaboration. APM excels on projects in which: new, risky technologies \r\n\tare incorporated; requirements are volatile and evolve; time-to-market \r\n\tis critical; and high quality must be maintained.\r\n\tAPM includes core agile principles, a project management framework, \r\n\tand specific practices. The framework phases are: \r\n\tEnvision - determining the product vision and project scope; \r\n\tSpeculate - developing a feature-based release, milestone, and \r\n\titeration plan; \r\n\tExplore - delivering tested features; \r\n\tAdapt - reviewing the delivered results and adapting; \r\n\tClose - concluding the project.\r\n\t\r\n\tThis APM presentation will also include a section on Enterprise \r\n\tAgile-getting across to executives what they can expect from agile \r\n\tprojects and to agile developers and project managers how they can \r\n\tpresent agile in an "executive" friendly perspective.\r\n\t\r\n\tSign up for this tutorial and explore the ideas and practices of APM.	Tutorials	Tutorial	2005
20050156	Expressing Business Rules	Learn how to express business rules as Customer tests, with a focus on \r\nexpressing the business domain with clarity and brevity.\r\n\r\nWriting Customer tests is usually complicated by several factors: The \r\nbusiness domain needs to be understood, and usually needs to be \r\nclarified. Tests need to evolve to help this understanding evolve. \r\nEmphasis is often placed too early on the testing aspects, rather than \r\non expressing the business domain as clearly as possible. The tests \r\noften make premature commitments to details of the application being \r\ndeveloped, or are not written until those details are known.\r\n\r\nThis tutorial will give you experience in expressing business rules well \r\nas Customer tests (storytests) through small group exercises. We'll see \r\nthat such storytests evolve as the whole team's understanding of the \r\nbusiness needs and the system evolve, creating a ubiquitous language for \r\ndiscussing the domain.	Tutorials	Tutorial	2005
20050157	Agile User Experience Design	User Experience is the \r\n    blanket term that incorporates user centered design, interaction design, \r\n    user interface design, and usability.  As Agile Development processes \r\n    gain popularity, the need to include User Experience practitioners \r\n    becomes more urgent.  Many companies employ people in these roles and \r\n    want advice on incorporating them into their Agile processes.  In \r\n    contrast, many Agile projects not incorporating UE approaches suffer \r\n    from delivery of products that, though on-time and of high technical \r\n    quality, poorly address user needs.  \r\n\t\r\n\tIn this tutorial you'll learn the basics of the Agile Development \r\n\tand User Experience lifecycles and how User \r\n\tExperience work can function cohesively within Agile Development.  \r\n\tYou'll learn that UE refers to much \r\n\tmore than user interface design and, in fact, encompasses a number of \r\n\ttechniques that give guidance on \r\n\tproject scoping and user interface validation.  Through participation \r\n\tyou'll learn lightweight collaborative \r\n\tvariations of UE techniques such as user role modeling, task modeling, \r\n\tand user interface prototyping.  Using\r\n\t these models and UI prototypes you'll write user stories that \r\n\t incrementally release your product design.	Tutorials	Tutorial	2005
20050158	In Retrospect: Mining the Wisdom of Agile Projects	"Experience is not \r\n    what happens to a man; it is what a man \r\n    does with what happens to him." A. Huxley. \r\n\t\r\n\tThe same is true for software teams. Too often, we don't do much - if \r\n\tanything - to squeeze learning out of \r\n\texperience.  Retrospectives are a way to take "what happens" during a \r\n\tsoftware development project and use\r\n\t it to build understanding and capability. \r\n\tThis team learning process is an integral part of every Agile method. \r\n\tRetrospectives happen at the end of an\r\n\t iteration, release, and project.  This interactive session will teach \r\n\t ScrumMasters, XP Coaches and other \r\n\tAgile team members the nuts and bolts of facilitating effective \r\n\tretrospectives.	Tutorials	Tutorial	2005
20050159	The Release Planning Game	This course will use the release planning game to explore various project \r\n    planning strategies. The game is played in small groups of approximately \r\n    four players. Both programmers and customers may play, in any combination.\r\n    In each cycle of the game, the players plan and "implement" a product. \r\n    Each time through, they learn some new lessons enabling them to plan and \r\n    implement better next time. Scoring is based upon each team's total return \r\n    on investment.	Tutorials	Tutorial	2005
20082170	The Intermediate Customer Anti-Pattern	<div class="content">\n    <p>Scrum focuses on collaboration with the customer, but what if your\ncustomer is actually a provider for yet another customer? Then who is your\nREAL customer? What if these two possible customers have a hostile\nrelationship? Then who is your customer? These are the kinds of real world\nquestions that we examine in this experience report.</p>\n\n<p>The report describes a situation involving a complex customer relationship\nand the consequences of failing to identify the correct customer. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>A simple talk with discussion and Q&amp;A encouraged. I would be interested in considering doing this as a fishbowl discussion too. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Experience report	2008
20050160	Agile Product Owner and Customer Boot Camp	Requirements management has always been identified as a key element of \r\n\r\nany successful development process, and in agile processes, a solid \r\n\r\npipeline of well-conceived requirements is no less crucial. In agile \r\n\r\nprocesses, requirements management is performed by a role typically \r\n\r\ncalled the Product Owner or Customer, through mechanisms such as the \r\n\r\nProduct Backlog, Stories and Release Plans. While an increasing body \r\n\r\nof writings is forming around these topics, many agile processes focus \r\n\r\nprimarily on development, making practical guidance and training in \r\n\r\nadvanced agile requirements management practices much harder to find.\r\n\r\n \r\n\r\nIn this intensive, hands-on tutorial, you will gain direct experience \r\n\r\nwith a wide range of agile requirements management practices drawn from \r\n\r\nScrum, Extreme Programming, DSDM and more. Through a series of \r\n\r\nprogressive exercises simulating an actual project lifecycle, tutorial \r\n\r\nparticipants will have the opportunity to learn and evaluate agile \r\n\r\nstrategies and practices to introduce and apply to their projects. This \r\n\r\nis a participation-based tutorial, so prepare yourself to be actively \r\n\r\nengaged in real world project scenarios, including:\r\n\r\nAligning agile projects with business objectives and initiatives.\r\n\r\nSetting project goals using agile chartering and business cases.\r\n\r\nTechniques for handling multi-stakeholder constituencies.\r\n\r\nCapturing product requirements using agile use cases.\r\n\r\nPractices for creating effective backlog items, stories and release plans.\r\n\r\nEvaluating product progress using the feedback mechanisms of agile processes.\r\n\r\nManaging a product portfolio using agile earned value approaches.	Tutorials	Tutorial	2005
20050161	Test Driven Development for Embedded Systems	TDD frameworks for OO languages are available, but that leaves many \r\n    embedded developers out because \r\n\tthey're working in C or assembler. In this workshop, participants will \r\n\tdevelop a small application using Test \r\n\tDriven Development techniques. They will start with an existing code \r\n\tframework written in C. The application\r\n\t will be expanded in-class on a Linux host system using Open Source \r\n\t tools and a commercially available \r\n\tARM embedded development board. You'll learn from software engineers \r\n\twho have used these techniques \r\n\tto deliver real projects on time.\r\n\t\r\n\tThe format will be a single hardware setup, with code visible on a \r\n\tprojector. \r\n\tOne pair of attendees at a time will develop and test code while the \r\n\tothers watch and discuss what is happening.	Tutorials	Tutorial	2005
20050162	The 59-Minute Scrum : Bringing Scrum Alive!	Scrum relies heavily on practices around time boxing, collaboration, \r\n    product owner, product backlog, demo, and review. But how do we help \r\n    teams new to Scrum quickly grasp these concepts? We created \r\n    "The 59-minute Scrum" in 2004 in order to help participants really \r\n    experience how these Scrum practices feel. Since then it has been \r\n    delivered successfully over 20 times world-wide by a variety of Scrum \r\n    trainers and has even become part of the Certified Scrum Master \r\n    training.  Because we've received so many inquiries about the \r\n    simulation, we are offering this tutorial that describes the \r\n    simulation, its purpose, its logistics, its materials, and its \r\n    facilitation. We will then lead the group in a running of the \r\n    simulation and then a detailed debrief on the overall experience.  \r\n    Participants will receive a full packet of materials for delivering the \r\n    simulation.	Tutorials	Tutorial	2005
20050163	How To Maximize The Value of Software Assets	Simplistic approaches to technical product management lead product \r\n    managers to believe that business \r\n\tdecisions such as pricing or business models can be made independently \r\n\tof underlying technologies. \r\n\tSimilarly, simplistic approaches to product engineering lead technical \r\n\tleaders to believe that technical \r\n\tdecisions, such as the choice of implementation technology or \r\n\tperformance, can be made independently of \r\n\tcontextual business issues. Mature approaches to maximizing software \r\n\trelated product and service profits \r\n\trecognize that business and technology issues are inter-twined in a \r\n\tcomplex system.\r\n\t\r\n\tThis dynamic is even more complex in the context of agile project \r\n\tmanagement, where value propositions \r\n\tare fluid and release dates negotiatiable. \r\n\t\r\n\tThis tutorial introduces participants to the Enthiosys Profit Engine \r\n\tFramework, which is the first framework that\r\n\t helps business and technical leaders sort through the core issues \r\n\t required for maximizing profit in software \r\n\trelated product and service offerings. \r\n\t\r\n\tUpon completing this tutorial participants will understand the \r\n\tfollowing models and how they can be applied\r\n\t to maximize profits:\r\n\t - Customer Value Model: Identifies and Captures Value\r\n\t- Business Model: The Way You Make Money\r\n\t - Pricing Model: How Much Money You Make\r\n\t - Customer ROI Model: Quantifies Customer Value\r\n\t - Licensing Model: Terms and Conditions of Use\r\n\t - Enforcement Model: Protection of Rights\r\n\t - Profit Engine: Causes More Money Making - or more Profitable -- \r\n\t Events	Tutorials	Tutorial	2005
20050164	Management Issues for Lean Software Development: Management Imperatives for the Successful Implementation of Lean Software	Many attempts to implement agile software development practices end in \r\n    failure. Why? Because these \r\n\tpractices change the way the entire organization must relate to the \r\n\tsoftware development process.  When \r\n\tthey are implemented without participation from the rest of the \r\n\torganization, the chance of success is greatly\r\n\t decreased.  \r\n\tLean software development requires deep and evolving customer \r\n\tunderstanding, strategic prioritization of \r\n\tdevelopment activities, a development pipeline that is balanced against \r\n\tdevelopment capacity, and \r\n\tleadership that provides both technical guidance and domain expertise.	Tutorials	Tutorial	2005
20050165	Agile Testing for "Traditional" Testers and Agile Team Members	This tutorial is about the things you need to know about testing in \r\n    agile projects. It will discuss the inside \r\n\tproject position a tester takes, and the skills, techniques \r\n\tand attitude he needs to do that at a professional \r\n\tlevel. The session is aimed at "both sides of the fence"; that \r\n\tis for agile developers and customers who want \r\n\tto work on their testing skills, as well for traditional testers \r\n\twho want to work at their agile skills. Traditional \r\n\ttesters will learn about the "mindset" that helps them be effective \r\n\tin an agile project. Other agile team \r\n\tmembers will learn to think like a tester, that is:  problem \r\n\tcreating instead of problem solving.  One way to \r\n\tdescribe a tester is "someone who habitually questions accepted \r\n\tbeliefs".  No matter what your background,\r\n\tthis tutorial will teach you testing techniques that provide your \r\n\tteam with rapid feedback.	Tutorials	Tutorial	2005
20050166	Advanced Feature Estimation and Project Planning	Agile projects use feature estimation and project planning to deliver \r\n    software on time.  \r\n    This course will take the participants through the skills needed to \r\n    estimate and plan project at three levels:\r\n\t\r\n\t1) estimating each feature and creating a plan to deliver all the \r\n\tfeatures\r\n\t2) steering the project to deliver the most value by a specified \r\n\tdate\r\n\t3) explore and refine proposed features so you can fill all needs \r\n\tby a specified date\r\n\t\r\n\t\r\n\tThe tutorial uses realistic exercises, interspersed with insightful \r\n\tinstructor-led discussion.\r\n\t\r\n\tThe tutorial is appropriate for customers, coaches, and development\r\n\tteam members who will be taking part in and leading Feature Estimation \r\n\tand Project Planning.	Tutorials	Tutorial	2005
20050168	Skills for the Agile Designer	Agile designers see the essence of a design problem, shape reasonable \r\n   solutions, and easily communicate their design to others. And when \r\n   things don't exactly go according to plan, they react, readjust their \r\n   thinking, and try again. To pull this off, agile designers need to be \r\n   skillful problem solvers and good communicators (and no, that doesn't \r\n   mean just writing clean code or producing barely enough UML). This \r\n   tutorial introduces several new and perhaps some old and familiar \r\n   techniques and language for seeing and articulating design problems, \r\n   shaping solutions, and explaining designs. We'll touch on strategies for \r\n   finding and characterizing objects and their behavior, designing \r\n   application control centers, adapting patterns into your design, and \r\n   making collaborations more reliable.\r\nRecognizing and adapting to different design rhythms is another key to \r\nagility. By sorting design problems into the core, the revealing, and the \r\nrest, you can treat each appropriately, rather than giving them uniform \r\ntreatment. Even so, problems crop up that cannot be anticipated-wicked \r\nproblems that can't be solved by sheer effort alone. They require a blend \r\nof skills: creative problem solving, negotiation, the ability to \r\ncraft-try-rethink-and-propose solutions that combine simpler ideas or \r\npossibly take a leap in a totally new direction. This tutorial gives agile \r\ndesigners some language to describe and characterize their design problems \r\nand solutions.	Tutorials	Tutorial	2005
20050169	Release and Iteration Planning for Agile Projects	Planning is important even for projects using agile processes such as \r\n    XP, Scrum, or Feature-Driven Development. Unfortunately, we've all seen \r\n    so many worthless plans that we'd like to throw planning out altogether. \r\n    The good news is that it is possible to create a project plan that looks \r\n    forward six to nine months that can be accurate and useful. In this \r\n    tutorial we will look at why traditional plans fail but why planning is \r\n    still necessary even on agile projects. You will leave with a solid \r\n    understanding of and experience at agile release planning and iteration \r\n    planning. We will look at various approaches to estimating including \r\n    unit-less points and ideal time. The tutorial will describe four \r\n    techniques for deriving estimates as well as when and how to re-estimate. \r\n    We will look at techniques to create a plan that dramatically improves \r\n    the project's chances of on-time completion. Also discussed will be \r\n    using velocity to track progress against the plan.	Tutorials	Tutorial	2005
20050171	Collaboration Works! Facilitation Skills for Agile Teams	Collaboration happens when all members of a group or team share a \r\n    common purpose, mutual trust and use agreed-upon approaches for their \r\n    work. A well-tuned team operates like a jazz ensemble-multiple voices \r\n    playing inventively, generously and skillfully while sharing a single \r\n    theme. This doesn't just happen. Teams don't just form and jell \r\n    automatically. How, then, can you encourage real collaboration? \r\nFacilitation skills are crucial for agile teams, which must experience \r\nhealthy team dynamics in order to continually learn and adapt. In mature \r\nteams, effective facilitation skills can emerge spontaneously and become \r\nshared amongst team member. How is this accomplished? What specific \r\ntechniques can you use to promote collaboration?  \r\n\r\nThis experience-based tutorial will share a set of effective facilitation \r\nskills and collaboration patterns that will help you and your team to truly \r\ncollaborate better. You will be provided with a rich set of handouts \r\ncontaining specific techniques you can use to promote real team \r\ncollaboration. In this tutorial, be prepared to enjoy recognizing, \r\ncelebrating and appreciating collaboration-because collaboration works!	Tutorials	Tutorial	2005
20050172	Test-Driven J2EE	J2EE applications are complicated, and we're generally pretty bad at \r\ntesting the various parts of them effectively. We tend to rely on end-to-end \r\ntests that are slow, cumbersome and brittle. True, a 4-hour test suite is \r\nbetter than a 3-week manual testing cycle, but we can do so much better. \r\nThis tutorial shows attendees how to add a feature to a J2EE application, \r\nentirely in the test-driven style. It highlights test execution speed \r\ndifferences, as well as the impact of test-driving on design.	Tutorials	Tutorial	2005
20050173	The Whole Enchilada: Effectively Blending Management, Planning & Technical Practices.	While many agile processes excel at management, planning or technical \r\npractices, most don't deliver a complete solution: a process that specifies \r\nhow an entire enterprise can become truly agile.  Partial solutions often \r\nfail to include key parties in agile transitions.  For example, if product \r\nmanagement fails to go agile, you won't deliver valuable software early, if \r\nlegal fails to go agile, you won't get expedient feedback on your iterations, \r\nif you HR rewards cowboy coders, you won't see a lot of teamwork.  In other \r\nwords, the most agile software development team won't provide genuine value \r\nif agility has not penetrated the entire enterprise. \r\nThis interactive tutorial is based on dozens of agile transitions. You'll \r\nlearn how Readiness Assessments prepare the ground for success, how \r\nChartering helps define key parties and interactions within a Project \r\nCommunity,  how Storytest-Driven Development aligns, defines and verifies \r\nthe work of customers and developers, and how Evolutionary Design and \r\nDelivery helps yield faster ROI.  Participants in this tutorial can expect \r\nto come away with ample ideas for how to use these practices to aid them in \r\nsuccessfully blending agile management, planning and technical practices to \r\ncreate a truly agile enterprise.	Tutorials	Tutorial	2005
20050174	Introducing agile practices to your team or organization	Those who attend conferences or read articles see new ideas they want to \r\ntake back to their organizations, but then struggle to make it happen. \r\nThis struggle has become especially apparent of late as enthusiastic agile \r\ndevelopment proponents want to encourage their teams to apply these new \r\napproaches.  The intent of this tutorial is to provide successful change \r\nmanagement strategies to help these agile proponents.	Tutorials	Tutorial	2005
20050175	Hands-on Teaching Agile Programming	As a software team leader, how many times did you ask yourself: \r\nHow shall I convey the magnificent ideas of the agile approach to my team? \r\nAs a university professor, how many times did you try to introduce a new \r\nteaching approach to your institution? This tutorial aims at helping you \r\nachieving these goals, specifically, introducing new ideas related to \r\nsoftware development into your organization, whether it is an academic \r\ninstitution or a software house. This tutorial is based on our rich \r\nexperience in teaching agile methods and practices in different settings \r\nin the industry, the army and the academia, as well as our vast experience \r\nin guiding the implementation them in such organizations. We focus on \r\nhands-on teaching and learning agile practices to enable our participants \r\nto run these processes by themselves. The tutorial consists of three parts: \r\nthe teaching of agile practices in the industry, the teaching of agile \r\npractices in the academia and the guidance of reflective processes.	Tutorials	Tutorial	2005
20050177	Storytest-Driven Development	Falling behind on writing your acceptance tests? This is a common problem. \r\nEither you don't have the right people to produce acceptance tests and/or \r\nyou just never seem to have enough time to implement them. The result is a \r\nbacklog of work and not enough coverage for the features in your system. \r\nThe solution to this problem is called Storytest-Driven Development (SDD). \r\nThis practice advocates that you define storytests (automated acceptance \r\ncriteria) for stories prior to implementing them. Writing the storytest \r\nfirst aids both developers and customers in aligning their efforts. \r\nStorytests are textual descriptions of a test that are easy to read, modify \r\nand execute. Subject matter experts, analysts, testers and programmers \r\nproduce these tests collaboratively. Storytests may be automated using a \r\nvariety of technologies, such as FIT, Ward Cunngingham's excellent Framework \r\nfor Integrated Test. A key benefit of this practice is the design simplicity \r\nthat flows out of starting all work with a failing storytest. This class \r\nwill introduce you to the practice of SDD. We'll explore example code and \r\ndiscuss real-world applications of this practice, then we'll apply Storytest \r\nDriven Development, using FIT for Java and .Net(C#).  We'll also discuss \r\nstrategies for writing Storytests on 'hard to test applications'. \r\nThis tutorial will involve hands-on SDD in pairs, so please bring a \r\nlaptop if you have one.	Tutorials	Tutorial	2005
20050178	Software Metrics for Agile Projects	Metrics are often associated with bureaucratic and prescriptive processes. \r\nThis tutorial will teach how to gather and analyze key metrics in a manner \r\nthat fits well with agile processes.  Attendees will learn how to use these \r\nmetrics to help identify and rank risk hotspots in large and/or unfamiliar \r\ncode bases.  The audience will apply these techniques to several large open \r\nsource projects.  While the techniques taught are applicable to many \r\ntechnologies, the tools taught and projects analyzed will be based on Java.	Tutorials	Tutorial	2005
20050179	Refactoring: keeping software malleable	Most software gets new requirements over time. The accumulated changes \r\noften stress the original design in unanticipated ways. When this happens, \r\nthe software gets more and more difficult to work with: development tasks \r\nget harder, progress slows and bugs appear ever more quickly.\r\nHave you worked on a system like this?\r\nSometimes it becomes so difficult to add new functionality or prevent \r\nbugs creeping in that it seems easier to give up and rewrite the system \r\nfrom scratch. This can be avoided by refactoring.\r\nRefactoring breathes new life into software by changing the way it is \r\nwritten without changing what it does, keeping it malleable and ready to \r\naccept change. Refactoring allows you to remould code with the design it \r\nshould have, rather than the design it ended up with. Done right, it works \r\nin small, easy steps, and doesn't require a big up-front investment.\r\nThis tutorial introduces and explains refactoring in a hands-on way. We'll \r\nhelp you learn to spot "smells" in the code and design, and we'll show you \r\nwhat you can do about them.\t\r\nThe tutorial is based on a simple problem from a real system, and at the \r\nend we'll tell you what really happened!	Tutorials	Tutorial	2005
20050180	Meeting the Agile Leadership Challenge	Many leaders facing the challenge of adapting to their role on agile \r\nprojects find methods from the field of organizational development methods \r\nespecially useful. This tutorial covers how several of the most successful \r\nof these methods work and how each assists the agile process. Strategies to \r\nimplement these tools will be discussed and practiced.	Tutorials	Tutorial	2005
20050181	How to integrate a Test/QA Team into an Agile Development Environment	When we think agile testing, we generally think embedded tester working \r\nclosely with the development and customer team helping to identify \r\nacceptance tests, sometimes coding, sometimes using a tool such as FIT.  \r\nHowever, there are cases where a test team needs to have some independence. \r\nThis tutorial will demonstrate how your test / QA team can work closely with \r\nthe development team yet maintain their individuality.\r\nLarge systems require full system regression testing, deployment testing, \r\nload testing, etc., in an environment that is similar to a customer's site. \r\nMultiple versions of a product require testing and support. When people \r\nthink about agile projects, they usually think about small projects that a \r\nsingle tester or two can work with the developers and complete all the \r\ntesting needed.	Tutorials	Tutorial	2005
20050182	How does Incremental Design Really Work?	Agile Methodologies push teams and individuals to alter the balance\r\nbetween up-front and incremental design.  Being able to evolve the\r\ndesign and architecture of a system as the code is written is an\r\nessential skill in agile software development, yet many programmers\r\nstill struggle to understand how this works in practice.\r\n\r\nThis tutorial will teach you the skills necessary to be successful\r\nwith incremental design.  You will learn how to do "just enough"\r\ndesign at each step of the process.  You will appreciate how working\r\nin small increments with immediate feedback from the code improves\r\nyour ability to design robust, well-factored, maintainable software.\r\n\r\nThe bulk of the time will be devoted to an extended example.\r\nParticipants will practice the technique of incremental design on a\r\nmedium-sized, real-world business problem for which the solution is\r\nnot obvious.  Through an interactive demo, you will observe and\r\nexperience how the simplest and best design emerges--even with no\r\nexplicit up-front work.  Finally, the philosophy and practical\r\napplication of incremental design to large systems will be discussed.\r\nJust how little up-front design can we be successful with, both\r\neconomically and technically?  Seeing is believing--come and learn how\r\nto add this valuable skill to your developer's toolbox.	Tutorials	Tutorial	2005
20050183	Stop super-sizing your release plans! Helping product owners switch to regular, bite-sized iterations.	Product owners - the analysts, product managers and project leads \r\nresponsible for defining the system requirements and business priorities - \r\nincreasingly force their development teams into super-sizing their release \r\nplans.  More features coupled with less priorities and less time lead to \r\n"over eating" when it comes to defining the goals for software releases.  \r\nThe result is software that too-often arrives late, over budget and misses \r\ncustomer expectations. \r\nAs Agile development teams gain success, the team's bottleneck moves up \r\nthe food chain to product owners.  To support rapid and iterative progress, \r\ndevelopment teams are demanding that product owners switch from traditional \r\napproaches of super-sizing long release cycles to a continuous flow of \r\nindependent, negotiable and small, bite-sized morsels.\r\n\r\nIn this session, Ryan Martens and Luke Hohmann will describe and show \r\nproduct owners how to think in terms of small, evenly spaced meals.  They \r\nwill introduce Agile principles, processes, tools and organizational \r\nstructures that enable product owners to support their Agile development \r\nteam's need for continuous, just-in-time elaboration of requirements and \r\nacceptance tests.  Through his own consulting experiences, and leading \r\nteams at U S WEST, Avitek and later BEA Systems, Martens has developed \r\nproven steps that transform the requirements management process into a \r\ncollaborative effort that helps drive the success of the entire Agile \r\npractice internally and for customers as well. \r\n\r\nLuke Hohmann, will work with Martens to help teams understand how to \r\nwork creatively through the common answer, "it can't be done!"  The duo \r\nwill coordinate and facilitate one of Enthiosys' 12-ways exercises called \r\n"Pruning the Product Tree" to help teams creatively break the log jam \r\nassociated with super-sized requirements management.\r\n\r\nParticipants will learn:\r\n\r\n* How to package and prioritize features to accelerate development.  \r\n(An exercise on design continuums and how to drive quickly to acceptance \r\ntests will help attendees gain skills in feeding Agile development teams.)\r\n* How to use the rapid iteration and release process of Agile \r\ndevelopment to help break large requirements into smaller more easily \r\nimplemented designs and solutions. (Enthiosys' Pruning the Product Tree \r\nexercise will provide attendees with one technique to help find creative \r\nsolutions to super-sized requirement jams.)	Tutorials	Tutorial	2005
20050184	Evolutionary Database Development	Evolving the database at the speed of application development is thought to \r\nbe very hard. This tutorial will show, when the team is doing Evolutionary \r\nDatabase Development, rapid database changes are easy to make.\r\nThe common belief that database design cannot be carried out using agile \r\nmethodologies such as XP, coupled with the inbuilt 'conservatism' of DBAs, \r\noften leads application developers to try to 'cut out' the DBA or reduce \r\ntheir interactions with the database team.\r\n\r\nParticipants will be shown how the design, development and \r\nimplementation of an application database could be made agile starting with \r\nmaking the DBA a true member of the team. Pramod will explain, in detail, \r\nhow processes and tools can be used to make the database more manageable \r\nand open to refactoring, both in development and production environments. \r\nThe workshop will focus on practical techniques that have been proven to \r\nachieve this on small and large-scale projects, techniques that can be \r\ntaken and applied to your projects, including:\r\n\r\n*How the database could be structured to provide each team member with \r\ncontrol of their own data space (similar to individual application instances).\r\n*How ANT/MAVEN build scripts can be used to make setup and tear down of\r\n databases a trivial task.\r\n*How to adopt a system where changes to the database can take place \r\neasily.\r\n*How to handle the change management process.\r\n*How migrating to production can be made easy with sequenced script \r\nfiles thus making the process of managing and releasing easy.\r\n\r\nUsing these techniques your development team can be far more confident \r\nabout adapting the application during development, knowing that changes and \r\nalterations will be properly documented, the changes and modifications are \r\nscripted and repeatable, and each change is backed-up by a suite of \r\nautomated tests that ensures the application builds and that the \r\napplication and database are consistent after each build. This level of \r\nconfidence is then sustained right through to production by leveraging the \r\nrepeatability of the changes and modifications.\r\n\r\nPramod will show why the DBA will be far happier to evolve the data \r\nmodel during the development process in step with the agile approach used \r\nto build the rest of the application. How the DBA can be a true member of \r\nthe team and make the agile team more productive\r\n\r\nRecent Presentations and Publications:\r\n\r\nXPAU, Aug 2002, Aug 2004\r\nEvolutionary Database Design (with Martin Fowler), Dec 2002.\r\nSD West, March 2002, March 2003\r\nXP Day Benelux Nov 2004	Tutorials	Tutorial	2005
20050185	Working Effectively with Legacy Code	Test Driven Development and Refactoring are powerful tools in the XP/Agile \r\narsenal. With them you can add new code to systems and make existing code \r\nmore maintainable. However, refactoring code without having tests in place \r\ncan be hazardous. This tutorial presents a collection of dependency \r\nbreaking and test writing techniques that can be used to get existing code \r\nsafely under test for refactoring. These techniques can be used in \r\nconjunction with Test Driven Development to breathe new life into large \r\nexisting code bases.	Tutorials	Tutorial	2005
20050186	Is Your Organization Ready for Agile and Scrum?	Agile software development sounds really good. Higher productivity, better \r\nreturn on investment, quicker delivery of software, motivated and energetic \r\ndevelopers are all appealing. Are you willing and able to do what is \r\nrequired to get these benefits? Some people think all you have to do is \r\nread books, take courses, and then implement Agile. But the work is much \r\ndeeper and harder and has many aspects of organizational change management. \r\nThis tutorial will help you understand how to implement Agile enterprise-wide \r\nand whether your organization has the aptitude for it.	Tutorials	Tutorial	2005
20050187	Agile Development of the Database: A Focal Entity Prototyping Approach	The agile development of the database and the application system is a \r\n    highly productive and successful activity when undertaken in a coherent \r\n    and organized manner. Agility does not preclude structure and order in \r\n    development. The more serial thinking that the entire database schema \r\n    must be developed once and for all, and before any processing \r\n    development can take place, is seen to be incorrect and unnecessary. \r\n    The evolution of the database, like other aspects of evolutionary and \r\n    agile development of software systems, contributes significantly to \r\n    schema quality, correctness and adaptability.  \r\n\r\n    This paper draws upon 20 years of experience in developing database \r\n    systems in an agile, evolutionary manner, and suggests and elaborates \r\n    upon a well ordered and well-organized, but clearly agile approach, to \r\n    database development, which the author has termed "Focal Entity \r\n    Prototyping". This technique takes a domain/conceptual modeling \r\n    approach supported by user interface prototyping which then drives \r\n    development.  Research and experience in both commercial development \r\n    and in an academic project environment has demonstrated the \r\n    reasonableness and efficacy of this approach.	Experience Reports	Experience Report	2005
20050188	Teaching a Goliath to Fly Applying agile methodologies in a large legacy codebase	When Primavera Systems decided to adopt agile methodologies for the \r\n\tdevelopment of their Project management suite, no one expected it to be \r\n\teasy. There were about 1.5 M lines of legacy code, in Delphi and Java, \r\n\tseveral applications, tight release cycles, high demand from marketing \r\n\tfor new features. This paper describes from a software-architecture \r\n\tperspective, the transformation of a largely waterfall-based development \r\n\tstrategy into an agile, test-driven practice.. It looks at the \r\n\tobstacles and difficulties we faced during this change, the way we \r\n\tapproached refactoring legacy code to make it testable. It also looks \r\n\tat the process of creating a Business Object Framework in an \r\n\tevolutionary way to support our test driven development.	Experience Reports	Experience Report	2005
20050189	Challenges of Delivering APIs in an Agile Context	"Platform" technology \r\n    should be stable, and the APIs that express them are normally expected \r\n    to be un-responsive to change. But in a rapidly changing domain \r\n    (biotechnology) in a churning business environment, the challenges of \r\n    providing useful, well-designed APIs rapidly mount. How often will \r\n    other teams pick up new versions of libraries? How do you manage rapid \r\n    database schema evolution? How does a business organization get \r\n    significant code reuse when the concepts are changing rapidly, \r\n    harvesting common features from the work of teams using the APIs? \r\n    What are the Really Big Mistakes that this team made that others in \r\n    the same situation could avoid? Encounters with Big Design Up Front are \r\n    described, as well as successes with incremental delivery to projects \r\n    taking frequent releases of the APIs. Team management issues and \r\n    testing challenges are also discussed, with a few figures about \r\n    number of automated tests, KLOC and code coverage provided.	Experience Reports	Experience Report	2005
20071070	Empowering Agile Transformation	Empowering Agile Transformation\r\n\r\n \r\n\r\nThe irony of Agile development is that â€“ although it is a demonstrably more \r\neffective and efficient way to develop software systems â€“ it is not always a \r\nlasting success.  An Agile team living and working in a traditional, Waterfall \r\nenvironment will struggle for survival â€¦ and many have succumbed to the \r\nmismatch of expectations and values with its business customers and executive \r\nmanagement.  Agile transformation is a challenging process:  Agile adoption is \r\nculture change.\r\n\r\nValtech has many years of experience helping organizations to adopt new \r\ntechnologies, methodologies, and processes.  Through these experiences we have \r\nlearned several secrets to making lasting, successful change.\r\n\r\nOne such secret is the Wheel of Habit:  Language shapes Thought, Thought \r\nchanges Values, Values shape Behavior, and Behavior creates new Language.  \r\nThese four factors shape our habits, both as individuals and as \r\norganizations.  To change habits, then, we must turn the Wheel.  There are \r\nfour forces that act on these four aspects of the Wheel:  Evangelism, \r\nTraining, Mentoring, and Facilitation.  No one or two of these forces are \r\nsufficient to turn the Wheel.  It takes all four forces, in careful concert, \r\nto make lasting change in an organization.  \r\n\r\nValtech Transformation Partnershipsâ„¢ embody this and other hard-won insights.  \r\nWe manage our Transformation Partnershipsâ„¢ as change programs â€“ with clear \r\ngoal structures, integral evaluation of progress-to-goal, active multi-modal \r\nlearning, project and business value focus, and a variety of service formats \r\nthat address unique needs at different stages of advancement.\r\n\r\nIf you are interested in learning more about how Agile adoption can fail and \r\neven more about the secrets to Agile adoption success, then plan to attend \r\nValtechâ€™s presentation Empowering Agile Transformation.	Process Improvement	Vendor Talk	2007
20050190	Promiscuous Pairing and Beginner's Mind: Embrace Inexperience	On an 18-month project that grew from 3 to 11 people, team members \r\n    conducted many experiments with task ownership, pair swap frequency, \r\n    and task assignment methods.\r\n    We experimented with the optimal time between pair swaps. We \r\n    conducted a dozen week-long experiments in which we required pairs to \r\n    switch at specific times, ranging from 30 minutes to one week. We also \r\n    experimented with swapping at will, or on task completion. We found \r\n    that fixed 90 minute swaps had the best impact on our velocity.\r\n\r\n    We also experimented with varying levels of task ownership. We \r\n    gathered a half-dozen data points as follows. One data point was \r\n    completely ad-hoc; every time that a pair formed, it would take an \r\n    arbitrary task from the board. Another point was individual ownership; \r\n    each person owned a set of tasks for the week, and would pick one or \r\n    more sequential partners with whom to work on them. The remainder of \r\n    the points were station-owned tasks; a task would stay at a station, \r\n    and each pair swap would move one partner off the station and leave the \r\n    other. The variance between these points was in the number of swaps for \r\n    which a single person remained. Optimal velocity resulted from \r\n    station-owned tasks with alternating pair swaps.\r\n\r\n    Finally, we tried several methods of task assignment. Here, we \r\n    tested two independent variables. The first variable was pull- or \r\n    push-based task assignment. The second was how to take into account \r\n    knowledge in an area when assigning tasks in that area. The three \r\n    values were to favor local knowledge, disfavor local knowledge, or \r\n    assign randomly. Pull-based assignment disfavoring local knowledge \r\n    resulted in maximal velocity. Additionally, we found that making this \r\n    task assignment the key task for our 2+ daily launch meetings provided \r\n    a clear, concise purpose for those meetings. This kept the meetings at \r\n    less than 5 minutes, even for an 11 person team.\r\n\r\n    Overall, we found this promiscuous pairing to greatly increase the \r\n    flow of information through pair net. In addition to increasing our \r\n    velocity and reducing the number of 15 minute or longer refactorings \r\n    we needed per week, it dramatically decreased our new hire ramp-up \r\n    time. We were able to fully ramp up new hires who had never programmed \r\n    in C++ before - to the level that they could write template \r\n    metaprograms and train the next round of new hires - in one month.	Experience Reports	Experience Report	2005
20050191	Estimating in actual time	I present a proposal for an experience report that describes my team's \r\n    experiences with an estimation scheme that avoids the confusing notion \r\n    of "ideal" time, uses an appropriate level of granularity for the size \r\n    of the story, and which acknowledges the uncertainty inherent in \r\n    estimation. I will describe the scheme, and then will present what \r\n    we've learned using the scheme, both from a process point of view and \r\n    from an empirical, data mining point of view.	Experience Reports	Experience Report	2005
20050192	Improving Agile Team Learning by Improving Team Reflections	Many Agile proponents encourage reflection as part of the\r\nfeedback/learning cycle. When we began using Agile practices, including\r\nreflection, I discovered that our organization's norms and beliefs\r\ntended to discount the value of regular reflection meetings. Many\r\nengineers wanted to avoid anything that might be seen as "touchy-feely."\r\nOur initial attempts at holding regular reflection meetings for agile\r\nteams had mixed results. Some reflections turned into gripe sessions\r\nwhere a lot of venting occurred but nothing changed. Other reflections\r\nwere short and a little too sweet - team members said little and no\r\nlearning occurred. This paper describes some of our efforts helping\r\nteams improve their reflection meetings and relates some of the positive\r\nresults in my organization as a result of regular reflection. It also\r\ndiscusses techniques for overcoming initial reluctance to take time out\r\nto reflect, keeping reflection meetings interesting, and taking\r\nreflection to a deeper level.	Experience Reports	Experience Report	2005
20050193	Introducing Agile Development (XP) into a Corporate Webmaster Environment	In November of 2004, the IBM Corporate Webmaster team deployed a major \r\n    release of their corporate web portal (www.ibm.com).  This effort \r\n    required the updating of over 1.6 million webpages in support of 9 \r\n    countries/languages and required the coordination of hundreds of \r\n    programmers/information architects spanning 4 continents.  While the \r\n    release addressed many facets of the site, including layouts, and style \r\n    changes, new functions were developed, for the first time, using agile \r\n    techniques.  In this paper we present an experience report of our \r\n    development efforts, which utilized extreme programming (XP). \r\n    We will focus on the challenge of moving a large, traditional \r\n    waterfall-driven organization to an agile development methodology.  \r\n    In particular, we address the challenges and value of adhering to the \r\n    full set of XP practices, some of which we found (at times) difficult \r\n    to follow.\r\n\r\n    Among the challenges we faced during the project and that were \r\n    reconfirmed during the project retrospectives were: \r\n    * doing agile development in an organization that interfaces with \r\n    and depends upon non-agile organizational entities\r\n    * meshing agile development cycles with infrastructure changes that \r\n    often happen on different timelines.\r\n    * doing test driven development in an organization that typically \r\n    depends on a separate test and quality assurance teams distributed \r\n    around the world and function according to separate quality assurance \r\n    cycles outside the scope of the development team\r\n    * assessing the need for and effecting education and culture change \r\n    as an important factor in the success of an agile project. \r\n\r\n    Other environmental issues that will be discussed included coping \r\n    with and providing for I/T organizations that require advance \r\n    notification of specifications for the deployment of applications in \r\n    datacenters.  This proved to be especially challenging in an \r\n    environment where a change in the requirements can cause issues with \r\n    application deployment and infrastructure setup such as firewalls and \r\n    secure data communication paths.  \r\n\r\n    Overall we report a positive (although challenging) experience with \r\n    the XP methodology, and we will report on how we plan to modify/augment \r\n    some of the practices and perhaps the environment for future agile \r\n    project development.	Experience Reports	Experience Report	2005
20050194	Staying agile in Government Software Projects	Can government software projects be agile?  What do Scrum and XP \r\n    practices have to offer in this regulated and highly political \r\n    environment?  In this experience report, we will discuss some of the \r\n    unique challenges in our environment and how we have had to adapt these \r\n    practices to produce commercial-grade software.  First, we will provide \r\n    a "report card" on our progress in applying Scrum & XP practices to a \r\n    clinical data management project over a two year period.  Then, we will \r\n    describe the practices that were accepted "religiously", adapted to get \r\n    the job done, and completely abandoned.  In particular, we will discuss \r\n    how we got around bootstrapping, Rational tools, documentation needs, \r\n    and managing a product backlog for a diverse, decentralized user \r\n    community.  In addition, we found that staying agile is just as hard as \r\n    becoming agile.  Putting agile practices to work, although a challenge, \r\n    resulted in better team communication, more usable system, and improved \r\n    partnership between the users and the development team.	Experience Reports	Experience Report	2005
20050195	Selling Agile:Target Cost Contracts	Agile approaches make a lot of sense to software developers, but \r\n    selling Agile to business people can be a tricky task, particularly in \r\n    a consulting situation. It is not difficult to get people to appreciate \r\n    the benefits of Agile, but forming an agreement that embraces change is \r\n    not simple. Target-Cost contracts have been suggested as a solution to \r\n    structuring agile projects, but do they work?  This experience report \r\n    describes how we have successfully used them with three different \r\n    clients.  This approach has allowed us to build better client \r\n    relationships by ensuring that contracts empower both the development \r\n    team and the client to work collaboratively to deliver software that \r\n    meets the client's real needs.  We believe these experiences will add \r\n    value to teams working in both a formal consulting environments as well \r\n    as an internal development department.	Experience Reports	Experience Report	2005
20050198	A False Measure of Success	This experience report examines the changes in workflow and processes \r\n    for the web development teams at a major US financial market and the \r\n    results thereof.  The workflow and practices of these web development \r\n    teams, though not perfect, did satisfy the teams' internal business \r\n    customer.  These customers were pleased in the rapid turn-around time \r\n    these technology teams provided.  Any issues or defects that had \r\n    occurred were within acceptable tolerances for the customer's business \r\n    needs.  However, the management teams of the technology division \r\n    mandated implementation of processes to ensure stability, redundancy, \r\n    and uptime.  Employee goals, and financial bonus, were updated to \r\n    measure qualities such as 99.99% uptime, full redundancy and zero \r\n    defects.  As the development teams came closer to their technology \r\n    goals, the cost of running these projects increased and project turn \r\n    around time decreased.  Defining "What quality level is acceptable" \r\n    and "What cost is acceptable" was shifted from the Business teams to \r\n    the Technology teams.  The business customers were no longer pleased \r\n    with the performance of their technology counterparts, thus creating \r\n    A False Measure of Success.	Experience Reports	Experience Report	2005
20050199	Formalizing Agility: An Agile Organization's Journey toward CMMI Accreditation	Agile methods are quite compatible with formal process improvement \r\n   frameworks. Rather than casting discipline and documentation to the \r\n   wind, agile methods, when seriously applied, are actually very focused \r\n   and comprehensive. Likewise, a framework such as the SEI Capability \r\n   Maturity Model Integrated (CMMI) need not be an overwhelming excess of \r\n   paperwork and bureaucracy; when appropriately implemented, the CMMI \r\n   encourages and enables significant and sustainable improvements.\r\n\r\n    This report describes the ongoing journey of DTE Energy's large IT \r\n    organization in realizing agility and process improvement in a Fortune \r\n    300 corporation. From following waterfall-based approaches to embracing \r\n    agile methods, and from early attempts with the CMM to a renewed \r\n    commitment to continuous improvement by adopting the CMMI, it explores \r\n    cultural and organizational changes that enable real-world process \r\n    improvements.	Experience Reports	Experience Report	2005
20050200	Stretching Agile to fit CMMI Level 3: the story of creating MSF for CMMI Process Improvement at Microsoft Corporation	Agile practitioners pride themselves on their productivity, their \r\n    agility, the low ceremony, lightweight, tactic knowledge processes \r\n    with no waste, adaptive planning and frequent iterative delivery of \r\n    value. It is often assumed that CMMI compliant process need to be \r\n    heavyweight, bureaucratic, slow moving, high ceremony and plan driven. \r\n    Agile developers perceive formal process improvement initiatives as \r\n    managed generated waste that gets in the way of productivity. At \r\n    Microsoft, we've adopted the teachings of Edwards Deming and stretched \r\n    our MSF for Agile Software Development method to fit the requirements \r\n    for CMMI Level 3. It's a highly iterative, adaptive planning method, \r\n    light on documentation, heavily automated through tooling with \r\n    management and organization enabled through agile metrics such as \r\n    velocity and cumulative flow but with an added dimension of an \r\n    understanding of variation - adapted from Deming's teachings. This is \r\n    the story of how mixing Deming with Agile produced a lightweight CMMI \r\n    solution for .Net developers everywhere.	Experience Reports	Experience Report	2005
20050201	Costs of Compliance: Agile in an Inelastic Organization	Doing agile development in an inelastic environment, where policies and \r\n   procedures are virtually unchangeable, creates an impedance mismatch \r\n   between the agile team and its host organization.  Our experience on a \r\n   variety of embedded Java projects has shed some light on the costs of \r\n   complying (or failing to comply) with the policies of the host \r\n   organization.  In keeping with the Agile philosophy, when our efforts \r\n   were failing, we refactored our approach.  We have trialed everything \r\n   from "refusal to comply" to "full compliance".  Regardless of approach, \r\n   there was always an associated cost, such as redrafting documents, \r\n   reducing functionality, spending time in meetings, losing focus on \r\n   deliverables, or deteriorating morale.  In the end, we were faced with \r\n   the questions, "How did we fare?  Which costs were worth bearing? Was it \r\n   all worth it?"	Experience Reports	Experience Report	2005
20050202	Agile Phase I The Pragmatic Case Study of Schneider National.	Schneider National began the journey toward Agile development last year.  \r\nAfter doing some research the company sent three representatives to the \r\n2004 conference in Calgary.  Using some of the learnings gathered from the \r\nconference, Schneider began using Agile in a pilot mode.  Schneider's \r\napproach was pragmatic in the sense that it took its current three release \r\na year waterfall process and made changes in an incremental fashion.  The \r\nsteps included getting organizational buyoff for the pilot, forming the \r\npilot team, breaking up a release into three 6-week iterations, \r\nconstructing an open pod area for the group, integrating a offshore \r\n(on-site and remote site) element comprising 50% of the 25 person project \r\nteam, and as of late introducing an offshore testing team strategy.  Why is \r\nthis a neat story?  Because the first project incorporated delivering \r\n17,000 hours+ in a 4.5 month time frame ... ahead of schedule and under \r\nbudget with a substantial offshore component!	Experience Reports	Experience Report	2005
20050203	Agile Offshore Techniques - A Case Study	The case study will give a brief insight into the different techniques used by \r\n   an Agile project team which was located at two different geographical \r\n   locations. It will demonstrate how the teams used effective tools and \r\n   techniques for collaborating. The case study also talks in detail about team \r\n   dynamics and how the team gelled together as a unit in spite of being \r\n   physically distant. It demonstrates how a flat organization structure can be \r\n   effective rather than a hierarchical structure in using roles rather than \r\n   designations. The case study also shows how the team switched from the \r\n   development to maintenance mode with a different set of techniques which mapped \r\n   sto those used in the development mode.	Experience Reports	Experience Report	2005
20050204	Follow the Sun: Distributed XP Development	In early 2004, a global company with three independent development \r\n   regions, United States (Seattle), United Kingdom (Poole), and Singapore, \r\n   formed into one 24x5 round-the-clock XP team.   A year after merging \r\n   into one team, the company is effectively using full Extreme Programming \r\n   practices across the world on a single code base.  This experience \r\n   report describes the challenges we face in this environment, lessons \r\n   learned, and how we resolved issues such as global continuous \r\n   integration, cultural differences, and conflicting priorities across \r\n   regions.	Experience Reports	Experience Report	2005
20050206	Experiences Integrating Sophisticated User Experience Design Practices into Agile Processes	Most significant software processes involve a wide range of disciplines, \r\n   from programming to testing, and from documentation to database development. \r\n   Unfortunately, agile processes are typically presented from the point of view \r\n   of programmers, with the other disciplines often left feeling excluded and \r\n   disenfranchised.\r\n\r\n \r\n\r\n   One such discipline is that of user experience design (often abbreviated \r\n   UED or Ux), a discipline encompassing several key specialties including user \r\n   research, interface design, visual design and usability testing. UED \r\n   activities span the full lifecycle of product development from early \r\n   requirements analysis to construction and testing, spanning both large scale \r\n   system issues and detailed components, with its work products forming key \r\n   inputs and deliverables of many development activities.\r\n\r\n \r\n\r\n   In this experience report, I discuss my coaching experiences integrating \r\n   sophisticated UED practices into the agile process initiatives of several \r\n   organizations. My background is initially that of a programmer and later \r\n   that of an agile process coach, and I'll explore my journey understanding \r\n   UED practices and how they map to popular agile processes, mainly Scrum and \r\n   Extreme Programming. I'll chronicle the teams' struggles to come to grips \r\n   with the often programming-centric orientation of agile processes, and their \r\n   ongoing efforts to integrate their UED best practices into the incremental, \r\n   collaborative world of agile processes.	Experience Reports	Experience Report	2005
20050207	Improving Communication between customers and developers	Reducing waste and building a system based on the right requirements are \r\n   key benefits of agile methods. Agile delivers on this promise thanks to \r\n   constant business user involvement with developers, and frequent \r\n   checkpoints of working software to encourage a tight feedback loop. \r\n\r\n    In multiple years of exposure to complex business problems that our \r\n    clients present us, however, we have found situations where these \r\n    traditional agile approaches have left us unprepared. In many cases, \r\n    our clients simply cannot continuously work with us because of the \r\n    nature of their business. In others, the complexity of the business \r\n    problem is such that producing working code takes significantly longer \r\n    than we would like. In both cases, we still need to make sure business \r\n    people communicate well with developers, so that we can build the best \r\n    system possible for our clients. In the context of an actual case study \r\n    involving a system developed for the U.S. military, we present a suite \r\n    of techniques we have developed to address these tough but not uncommon \r\n    situations.	Experience Reports	Experience Report	2005
20050208	The Cost/Benefit Paradox of Automated Acceptance Testing	Using FIT for automated acceptance testing supports a process in which developers and customers collaborate on a single executable specification for each story, i.e. the FIT documents.\r\n\r\n \r\n\r\nBy collaborating closely on the FIT documents, the developers and customers reach a shared understanding of the domain and develop the ubiquitous language of the application.\r\n\r\n \r\n\r\nOur experience with this process was ultimately successful but not completely pain free. In this experience report we highlight the benefits and pitfalls and share techniques for achieving successful developer and customer collaboration in specifying executable FIT documents.	Experience Reports	Experience Report	2005
20050209	Test-Driven Porting	Traditional Test-Driven Development focuses on development of new units \r\n(classes) driven by programmer-facing unit tests.  This paper describes \r\nour experiences when using business-facing tests (also known as "story tests") \r\nto guide the porting of a legacy application.  Domain experts specified \r\ntests in a tabular format using Excel spreadsheets.  Developers automated \r\nthese spreadsheets in various ways over time: scripts, generation of JUnit \r\nsource code, and Fit.  These tests were run against the legacy system and \r\nguided the development of the newly ported system.  We found test-driven \r\nporting to be an effective way to port a complex application.	Experience Reports	Experience Report	2005
20050210	Ongoing Quality Improvement, or: How We All Learned To Trust XP	Since VA Software adopted XP 2 1/2 years ago, the understanding of quality \r\n   and the product quality itself have changed dramatically. When we \r\n   started with XP our code had alpha quality. Features were tolerably \r\n   implemented, the UI was very bad and documentation was not even started. \r\n   Today, the complete product (code, UI, documentation, SDKs) is \r\n   constantly at pre-GA level. At any point in our development we can \r\n   provide pre-releases to our customers without any additional testing or \r\n   release effort. Before we adopted XP it took us up to 1 1/2 man years (6 QA \r\n   engineers for 3 months) to bring a product release from development end \r\n   to release. Our first XP release was 6 man months (4 QA engineers for 6 \r\n   weeks). Now we are down to 6 man weeks (2 QA engineers for 3 weeks).\r\n\r\n   For experienced XP practitioners it might seem strange that the \r\n   quality did not immediately jump to the high level that we have today \r\n   after adopting XP. This was caused by a scenario that seems to be very \r\n   typical for companies that have an established waterfall-based \r\n   development process: the engineering team was enthusiastic about the new \r\n   way of development, the product management team was indifferent and. the \r\n   QA team was highly skeptical of the promise of XP to generate an (almost) \r\n   bug-free product without a long and manual testing effort after \r\n   development was done. Nobody in the engineering or product management \r\n   team had any experience with XP, so it was impossible to convince the QA \r\n   team otherwise. (In fact, reports of bug-free code from other XP teams \r\n   were more intimidating then inspiring) So, we started our XP process \r\n   without full QA involvement and a full system test phase after \r\n   development was done.\r\n   This session recounts the evolution of our development process. \r\n   It shows all the phases that our process went through, major changes \r\n   that we made and what the overall impact was.	Experience Reports	Experience Report	2005
20050211	There Has to Be a Better Way!	This is a story about how we influenced an organization developing Class III \r\nmedical device systems and software to adopt Agile Software Development \r\npractices.  Our story describes our frustrations with waterfall and plan-based \r\nmethods, how we came to be interested in Agile and why, and how we facilitated \r\nthe necessary changes.  Finally, our story talks about surveys of our \r\ndevelopment teams that exhibit powerful evidence that we may actually be on the \r\npath to a "better way".	Experience Reports	Experience Report	2005
20050212	Waltzing with Changes	"The only thing that is a constant is change." - Greek philosopher, Heraclitus\r\n\r\n \r\n\r\n   This idiom is especially true when dealing with a software development \r\n   project.  With varying degrees, change impacts project delivery, budget, and \r\n   quality.  Often in today's environment, the requirements for higher quality \r\n   software combined with compressed timelines and fewer developers can make \r\n   change management a difficult task.  This paper focuses on how agile \r\n   practices play a role in managing changes in an industrial software project \r\n   developed at TransCanada.  We discuss how the impacts of changes in \r\n   resources, changes in requirements, and external factors can be minimized.  \r\n   We examine numerous methods of overcoming challenges that often occur during \r\n   industrial software development.	Experience Reports	Experience Report	2005
20050213	Agile Contracts: How to develop contracts that support agile software development	Agile Development sounds great, but it depends on the ability to determine the details of scope as the \r\n\tsystem is developed, driven by feedback from customers and users.  Much software development is done \r\n\tunder contract, where there is often a requirement to determine the details of the system early in the development process.	Workshops	Workshop	2005
20050215	IEEE 1648 Recommended Practice for Agile Methods	Audience:  Those already working on this IEEE effort as well as those who want to get an update on what is \r\n\thappening with it.  People attending should have a reasonably strong interest in work on this standard, \r\n\tthough the first part of the session will be an overview for those less committed to working on it who wish to \r\n\tknow where it stands.\r\n\t\r\n\tGoal:  Review the existing proposed content and take ideas for additions and changes.\r\n\t\r\n\tProcess:\r\n\tThe first 15-20 minutes will be an overview of where the work stands which I will present.\r\n\tThe next 15-20 minutes will be an open discussion on the material covering what a customer should know \r\n\tabout their responsibilities in a relationship with an agile development group.\r\n\tThe next 15-20 minutes will be an open discussion on the material covering what a customer should expect \r\n\tfrom an agile development group.\r\n\tThe next 15-20 minutes will be an open discussion on the material covering issues confronting agile \r\n\tmethods in a more formal methodology environment.\r\n\tThe last 15-20 minutes will discuss relationship of this work with other standards.\r\n\t\r\n\tDeliverables:  Updated draft material for the standard with a summary to be prepared after the conference \r\n\tand posted to the conference wiki.	Workshops	Workshop	2005
20050216	How to apply agile development methods in open source projects	There is a strong affinity between the agile development and the open source communities.  Many projects \r\n\tusing agile development are supported by a wide array of open source tools.  Agile development methods \r\n\thave influenced the organization of many open source projects.  However, many of the assumptions and \r\n\tstructures of the most common agile methods are hard to directly apply in an open source setting.  Typically \r\n\topen source projects are much more widely distributed than the typical agile development project, and \r\n\tparticipants are usually volunteers, employees or a combination of both, as in the example of Apache and \r\n\tJBoss.  How can agile development methods be applied to solving the challenges of managing open source \r\n\tprojects?  During this workshop we will seek to explore these questions.  Participants will be invited to share \r\n\ttheir experience in applying agile development methods in open source projects, or their thoughts on approaches \r\n\tthat could be explored.	Workshops	Workshop	2005
20050217	Androgogical Approaches to Learning in the Agile Software Development Team	This workshop will explore the implications of androgogy (an inquiry-based educational ideology most \r\n\tfrequently appropriate for adult learning) for agile software development teams.  Often, one of the motivators\r\n\t for agility is the fact that technologies change frequently and therefore teams must adapt.  When the \r\n\tchange requires new learning, the standard response is to send people off to training for 3 days or a week \r\n\tand then expect them to be productive with the new tool, technology, or methodology.  This workshop will \r\n\tbring together professionals, academicians and managers to discuss approaches to learning while doing \r\n\tbased on characteristics of adult learners, particularly in the context of the agile software development team.	Workshops	Workshop	2005
20050218	Living the Declaration of Interdependence	In January 2005 a group of agile leaders met in Seattle and created the "Declaration of Interdependence". \r\n\tThe purpose of this group is to start building an alternative to PMI and IPMI for agile project managers - and \r\n\tthe first shipable result of our work is the Declaration:\r\n\t* We increase return on investment by making continuous flow of value our focus.\r\n\t* We deliver reliable results by engaging customers in frequent interactions and shared ownership. \r\n\t* We manage uncertainty through iterations, anticipation and adaptation. \r\n\t* We unleash creativity and innovation by recognizing that individuals are the ultimate source of value, and \r\n\tcreating an environment where they can make a difference. \r\n\t* We boost performance through group accountability for results and shared responsibility for team \r\n\teffectiveness. \r\n\t* We improve effectiveness and reliability through situationally specific strategies, processes and practices.\r\n\t\r\n\tIn this workshop we will examine each of the 6 parts of the declaration. As a participant you will have the \r\n\tchance to share your experiences and to participate in the description of practices that have proven \r\n\tthemselves to support the way of working, that is described by the declaration.\r\n\t\r\n\tThis workshop will be run as an open space discussion - and the process will be exactly the same as the \r\n\tprocess used to come up with the Declaration of Interdependence in Seattle in January.	Workshops	Workshop	2005
20050219	The Courage to Communicate: Collaborative Skills for Agile Teams	Communication, Feedback, Courage, Simplicity. Individuals and interactions over process and tools. \r\n\tApplying the values of Agile approaches to software development projects highlights a shift to increased \r\n\timportance of functioning well in highly collaborative team environments.  The initial excitement of trying \r\n\tsomething new and the intense learning curve of understanding and applying the practices tends to \r\n\tovershadow team member interactions through the first stages of project team development. However, once \r\n\tXP/Agile practices become the usual way of doing business, team members frequently discover the limits of \r\n\ttheir ability to communicate and work collaboratively. Effective, collaborative communication becomes the \r\n\tnext challenge. Three skills in particular help a team make the move from adequate work performance to \r\n\thigh performance. In this highly interactive, experiential tutorial, participants learn the critical collaborative \r\n\tskills of group decision-making, active listening and interpersonal feedback - seeking it, giving \r\n\tit, and receiving it well.	Workshops	Workshop	2005
20050220	Roadmap to Agile Testing	So you want to increase \r\n    your testing agility, but aren't sure how to get there from here? Are you \r\n    somewhere en route to agility and want to correlate experiences with your \r\n    peers? Perhaps you've done extensive exploration in the jungles of Agile \r\n    testing, but aren't quite ready to open up guided tours? Creating a \r\n    roadmap to Agile testing adoption can help us organize and distill our \r\n    experiences and make our journey more enjoyable. This workshop will \r\n    provide an opportunity to share real experiences and distill lessons \r\n    learned from them, which will help particpants at all levels of adoption \r\n    of Agile testing to build and improve their own roadmaps forward.	Workshops	Workshop	2005
20050221	Informative Workspace	Informative Workspace is one of the new XP practices launched in the second edition of XP Explained. The \r\n\tpractice is to build feedback mechanisms around an agile team that support them in their daily work. These \r\n\tfeedback mechanisms can take the form of visual displays (Information Radiators) that are manually updated \r\n\tby the team or electronic eXtreme Feedback Devices (XFD) such as lava lamps or audio signals linked to \r\n\tautomated processes. It is vital to ensure that feedback mechanisms are easy to interpret, low maintenance \r\n\tand adapted to local practices. In this session we will work on new ways to support an Informative Workspace.	Workshops	Workshop	2005
20050224	Stop interacting with the customer! (...until you know the safety rules.)	Pivotal to all agile \r\n    methods is the notion that customers work closely with the development team. Regardless of the excellent customer interaction techniques you've learned elsewhere, you will not be successful until you have established a working relationship. As with any relationship, things can go wrong.\r\nIn this peer to peer session, we will learn to navigate the pitfalls in \r\ncustomer interaction. Endowed with a few simple guidelines, techniques, \r\nand knowledge you and your budding agile team will have the courage to be \r\nmore involved with customers.	Workshops	Workshop	2005
20050225	Achieving Closure: Best Practices for Ending the Iteration	Agile software teams face \r\n    some common problems in doing iterative/time-boxed development.  \r\n    While coaching such teams, we have encountered the following types of \r\n    challenges with ending the iteration successfully.\r\n    \r\n  How do you enforce a true "hard stop" for each iteration?\r\n\r\n  How do you get the entire project community aligned around the iteration "rhythm"?  \r\n\r\n  How do you appropriately celebrate success and make progress visible to stakeholders?\r\n\r\n  How do you get the customer involved in truly "steering" the development effort and providing meaningful feedback?\r\n\r\n  How does hands-on user acceptance testing fit into the iterative schedule?\r\n    \r\n    We have found that specific end-of-iteration activities can be established and structured that address all of these issues.  We are interested in sharing our ideas and in hearing how others have overcome similar problems.	Workshops	Workshop	2005
20050226	Technical Retrospectives	The goal of the \r\n    Technical Retrospectives is to help the team build a set of common \r\n    models that can be used to improve their collective understanding of the \r\n    current design of the system - it is a learning exercise.  We do this \r\n    through various low-fidelity collaborative exercises that encourage us \r\n    to externalise our internal models of the software, and to explore the \r\n    differences that may exist between our understandings - we do this at \r\n    the end of each iteration.  An additional benefit we have found is that \r\n    the documentation produced from this exercise gives us a historic \r\n    snapshot record (a time-series animation, of sorts) of the design \r\n    decisions made by the team, and allow us to reflect and reason about \r\n    why the system design evolved to its current state - useful to current \r\n    team members and also those that will join later in the life of the \r\n    software.	Workshops	Workshop	2005
20050227	Agile Thinking Workshop	An "Agile Thinking Workshop" \r\n    can be used at any level in an organization to introduce Agile principles.  \r\n    It provides participants with an opportunity to explore new ways of thinking \r\n    and behaving and to experience, through a variety of different activities the \r\n    Agile dynamics of self-organization, visibility and emergence.  Using a number \r\n    of different approaches, and relying strongly on experiential learning \r\n    techniques this kind of workshop provides a self-directed learning experience \r\n    which fosters an Agile mind-set and prepares participants for the Agile \r\n    challenge. \r\n    The "Agile Thinking Workshop" Workshop at Agile 2005 will allow \r\n    facilitators, or potential facilitators to experience first-hand a set of \r\n    experiential exercises that they may find useful to introduce into their own \r\n    organizations, to enhance existing Agile training.  The workshop itself will \r\n    emerge from the input of its participants.  It is not formulaic.  There may be \r\n    an output; that too will be determined by the participants.  The focus however \r\n    is on process, not product.	Workshops	Workshop	2005
20050228	Hiring an Agile Tester	Your agile team wants \r\n    to hire a tester.  But there aren't a lot of folks out there calling \r\n    themselves 'agile testers'.  There are plenty of talented testers out \r\n    there who don't know anything about agile development.  How do you find \r\n    them?  When you're hiring a tester for an agile team, what skills, \r\n    characteristics and experience should you look for?  Where should you \r\n    look?  How do you determine if a candidate has the right attitude and \r\n    mindset, let alone the skills your team needs to add?  What questions \r\n    do you ask in phone screening?  What interview questions identify a \r\n    good fit for your team?  In this workshop, participants will work in \r\n    groups and all together to identify where to look for potential 'agile' \r\n    testers, what to include in the job posting, how to screen and interview, \r\n    and other tips to finding the right person to join your team wearing a \r\n    'tester' hat.	Workshops	Workshop	2005
20050229	Extreme Teams Game	It can be difficult to \r\n    demonstrate how multiple agile teams can work together, in this tutorial \r\n    participants will learn how to play and lead the Extreme Teams Game.  \r\n    The Extreme Teams Game is a simple game that requires nothing more than \r\n    pens, index cards, and a bit of preparation to demonstrate the impact of \r\n    changing communication and feedback between multiple agile teams \r\n    working together.  Past, present, and possible future team interactions \r\n    will also be discussed.	Workshops	Workshop	2005
20050230	Tools for Acceptance Testing	Frequent iterations \r\n    make automating acceptance tests especially important to agile teams, \r\n    yet many struggle to make this a reality. Commercial tools often seem \r\n    designed for more traditional divisions of labor. In this workshop we \r\n    will explore the tools that agile teams have used, successfully or not, \r\n    for automating acceptance tests. Are there common characteristics to \r\n    successful tools? Are there commercial tools that are well-suited to \r\n    agile teams?\r\n    We encourage participants to come ready to share their stories \r\n    about tools they've used on agile projects. We expect to hear from \r\n    users of Fit, HttpUnit, QuickTest, Abbot and many other tools.\r\n\r\n    This workshop will result in a report summarizing the views and \r\n    experiences of the participants, and any patterns or trends that emerge. \r\n\r\n    Logistics: Participants will be encouraged to write experience \r\n    reports in advance of the conference. These will be published on a \r\n    website. Participants who have submitted reports will be given priority \r\n    in the discussion. The workshop will use the LAWST-method of facilitated \r\n    discussion.	Workshops	Workshop	2005
20070772	Developing a Safety-critical System	This session is intended for those who want to experience an agile approach to\nsafety engineering. The Fitnesse framework will be used as a tool to identify\nand document a hazard as it emerges from an increased understanding of the\nsystem being developed. Hazard mitigation strategies will be defined by testable\nspecifications, and a developer team will use TDD to make a selected\nspecification pass its test. The results will then be shown to the customer, who\nwill continue to evaluate the efficacy of the mitigation strategy.	Developing	Workshop	2007
20070713	Agile adoption at Google: Potential and challenges of a true bottom-up organization	Despite its size, Google does maintain a strong bottom-up culture. There are few\r\nstandards regarding development process, status reporting and development\r\npractices. Google believes projects perform best if teams create and own their\r\nenvironment.\r\nThis does sound like a perfect environment for Agile processes. But how does\r\nGoogle drive Agile adoption when it knows mandating its methodologies would harm\r\nthat very same culture?\r\nIn this talk we will explore what engineering-driven means at Google, and how\r\nthis culture helps teams find their own process. We will also see how Google\r\nencourages and enables engineers to carry these improvements into the larger\r\nengineering organization as well as various smaller initiatives that encourage\r\nand support agile adoption. Finally, we will examine the "Test Mercenary"\r\nprogram - one of Google's larger programs which was started to improve developer\r\ntesting. And how it was structured to avoid becoming a top-down or ivory-tower\r\nprogram.Target Audience and Benefits:\r\nWhether working for a large or small company, this discussion benefits anyone\r\nwho is driving agile adoption. It demonstrates how agile adoption can be made\r\npart of an engineering culture centered on the idea of giving projects maximum\r\nautonomy. This aspect of agile development arises often in the agile community\r\nwhen discussing how its adoption cannot be the result of top-down pressure and\r\ncontrol. It hopefully encourages some managers to give their engineers more\r\nresponsibility and less standards - at the same time, giving them some insight\r\nwhat they have to prepare for. Also, it might give a taste of the potential that\r\ninternal user groups have - if they are fully supported and part of the company\r\nculture.\r\nA very interesting aspect of the discussion is of the "Test Mercenaries" program\r\nand how it was structured to avoid creating a central process police. It shows\r\nhow executives can empower engineers to do the right thing and to support them\r\nin implementing promising ideas.\r\nFinally, the discussion at the end of the talk might help prepare mid- to\r\nlarge-size companies prepare for unique strains that agile practices can put on\r\nthe corporate infrastructure.Outline:Google culture\r\n      Describing the culture at Google, which was not created by agile\r\npractitioners but as being compatible to agile, encouraging engineers to change\r\nthe engineering organization from within.\r\n  Top-down support for bottom-up action\r\n      How executives, directors and managers can support Agile adoption (or any\r\nkind from and for improvement of the engineering organization).\r\n  20% time and the agile user group\r\n      One of the more known aspects of engineering life at Google are the 20%\r\nprojects. We take a closer look at what these 20% projects mean and how they\r\nhelp run an internal user group.\r\n  Which agile process\r\n      The huge variety of people and projects at Google make it impossible to\r\nstandardize on any Agile process or even a set of Agile practices. One main\r\nfocus of the Agile adoption at Google is to make project leads and teams aware\r\nof the need to adopt. But this leaves the question: where should new projects\r\nwith little to no Agile experience start?\r\n  Where to start and how to expand\r\n      Being an engineering-driven company, it is clear that Google needs to\r\nfocus our efforts on engineers. But we also need to support engineering teams\r\nthat adopt Agile practices to also include other project team members (QA, PM,\r\nPjM, UI).\r\n  Focusing on developer testing\r\n      There has been a lot of focus at Google on improving developer/unit\r\ntesting. This resulted in a Google-wide program (the "Test Mercenaries"). This\r\ninitiative was started bottom-up, went all the way to the top, was significantly\r\nscaled-up and came back down to be executed. How did we structure this program\r\nand how will it help us drive Agile adoption without making it our primary\r\nfocus.\r\n  Technical and logistical challenges\r\n      Continuous Build across 800 projects, the load on an SCM system if 5000\r\nengineers do TDD... Again, Google has not been started by Agile practitioners\r\nbut by people who believed in practices very similar to Agile. So, we already\r\nhit many issues that an organization of Google's size hits when trying to adopt\r\nAgile on a large scale.\r\nBiography of presenter:\r\nMark Striebeck is an engineering manager at Google where he runs a program that\r\nsupports the engineering organization in improving their testing efforts. In his\r\n20% time he runs an internal user group which tries to further the adoption of\r\nagile practices. He has been working for more than 10 years in the software\r\nindustry in a variety of engineering and management positions. Since discovering\r\nXP and agile development methodologies 5 years ago, he has become actively\r\nengaged in the agile community. He constantly tries to put new ideas and agile\r\napproaches to work. The great variety of projects and individuals at Google give\r\nplenty of opportunity for this. Striebeck is a frequent speaker at Agile and\r\nother conferences. He holds two master's degrees in mathematics and computer\r\nscience from the University of Hannover and Brunel University, London.	Leadership	Talking Head	2007
20050231	Agile Embedded Software Workshop	Embedded software has its own set of challenges like limited resources, \r\n    timing constraints, safety concerns, and custom IO as well as all the \r\n    classical problems with software development.  The goal of this workshop is \r\n    to bring together experienced embedded software developers, manager and \r\n    customers.  Those using agile techniques and those thinking about it are \r\n    welcome.\r\nWe would like to hear your experiences and plans.  Come prepared to discuss \r\nyour challenges and the creative agile solutions.  What results are you \r\ngetting?  Has agile improved your delivery? Has agile improved your \r\nreliability? Has agile improved your maintainability? Is it too soon to tell?  \r\nDo you have any metrics?  We would like to collect effective practices, discuss \r\nsolutions to embedded development problems, and hear about attendees \r\nexperiences.  \r\n\r\nMaybe you are considering adopting agile techniques for your embedded \r\nsoftware development team.  What issues are you trying to solve?  What are \r\nthe challenges in your organization?\r\n\r\nExperienced attendees are encouraged to write up a list of the practices \r\nthey are using and the results they have achieved.   Attendees evaluating\r\nagile methods should bring their goals, concerns and hopes.	Workshops	Workshop	2005
20050232	Test Driven Development and Beyond	Test Driven Development \r\n    is becoming a mainstream practice.  However, it is a step along the \r\n    way, not a final destination.  This workshop will explore what the next \r\n    steps and side paths are, such as Behavior Driven Development, Example \r\n    Driven Development, Story-Test Driven Development.	Workshops	Workshop	2005
20050233	Leadership in Extreme Programming	Nobody said that XP was going to be easy, just effective. Anyone who is \r\n\r\ninvolved in applying XP will encounter obstacles that tests their \r\n\r\nabilities to deliver code and create an effective organisation, and \r\n\r\nsome of the ideas in XP contradict conventional wisdom about software \r\n\r\ndevelopment. The growing number of books offer guidance but an outside, \r\n\r\nhuman perspective can also be helpful.\r\n\r\n \r\n\r\n\tIn this workshop, a team of expert practitioners will offer practical \r\n\r\nadvice on how to address the issues you are facing when applying XP. \r\n\r\nThe format is to consider real-life examples from the participants, to \r\n\r\ntalk about what we would do in these situations, and discuss the \r\n\r\nprinciples behind the actions. The goal is to help the participants to \r\n\r\nbe more effective in response to their "leadership moments" as they \r\n\r\napply XP. The practitioners are either managers who have applied XP, or \r\n\r\nconsultants who have converted many different organisations to XP.\r\n\r\n \r\n\r\n\tThe workshop will be kept small to encourage open discussion so, if \r\n\r\nyou'd like to join in, please drop a brief note describing your \r\n\r\nsituation to WK12@m3p.co.uk, or contact Steve Freeman during the \r\n\r\nconference.	Workshops	Workshop	2005
20050234	Research Papers Wednesday AM July 27, 2005	This paper will provide initial results, and experiences from a \r\n   longitudinal, 2 year industrial case study that is near completion. \r\n   The quantitative results indicate that after the introduction of a \r\n   Scrum process into an existing software development organization the \r\n   amount of overtime decreased, allowing the developers to work at a \r\n   more sustainable pace while at the same time the qualitative results \r\n   indicate that there was an increase in customer satisfaction.	Research Papers	Research Paper	2005
20050235	Crossing the Chasm with Agile Methodologies in Software Engineering Education	The introduction of agile methodologies into software engineering\r\neducation progressed much as the marketing of high tech products.  There\r\nwere a small number of "technology enthusiasts" and "visionaries" who began\r\nteaching agile processes and practices very early while the "pragmatists,"\r\n"conservatives," and "skeptics" considered these new teachings to advocate\r\nhacking and to be anti-software engineering.  In this talk, Dr. Williams\r\nwill provide insight into the adoption lifecycle of agile methodologies in\r\nsoftware engineering education and the benefits of this adoption.	Educator's Symposium	Educator Paper	2005
20050236	Introducing Agile into a Software Development Capstone Project	Conveying principles of software analysis, design and implementation in a \r\nclassroom setting is problematic. When the course involves actual hands on \r\ndevelopment with clients drawn from industry, the challenges are magnified. \r\nThis paper discusses the experiences and observations of a set of 10-month \r\nindependent external projects undertaken by final year students in the \r\nComputer Systems Technology Program using Agile for the first time. We \r\ncompare situations and observations of projects developed following an \r\nAgile approach with XP Programming, to our previous projects developed in a \r\ntraditional approach. Based on these observations, an Agile approach seems \r\nto support learning, provide a valuable practical experience and produce \r\nuseable software within an academic environment.	Educator's Symposium	Educator Paper	2005
20050237	Experiences Teaching a Course in Programmer Testing	We teach a class on programmer-testing with a primary focus on test-driven \r\ndevelopment (TDD) as part of the software engineering curriculum at the \r\nFlorida Institute of Technology. As of this writing, the course has been \r\noffered 3 times. Each session contained a mixture of undergraduate and \r\ngraduate students. This paper discusses the evolution of the course, our \r\nlessons learned and plans for enhancing the course in the future.	Educator's Symposium	Educator Paper	2005
20050238	Balancing Hands-on and Research Activities: A Graduate Level Agile Software Development Course	Agile software methodologies promote developing better software faster and \r\nhave been gaining popularity in the industry. However, agile is still \r\nsomewhat a stranger to the academic world. While it is important to \r\nintroduce agile methods to undergraduate students, we believe that having a \r\ngraduate-level course in agile development is as crucial. We offered a \r\ntopic course dedicated to teach agile software development to graduate \r\nstudents emphasizing both hands-on experience and research activities. In \r\nthis course, a phase-in project approach was used with real customers on \r\nreal projects. The result of this approach was well received by students \r\nand has stimulated student research interests in the area. This paper \r\ndescribes our experiences in offering the course.	Educator's Symposium	Educator Paper	2005
20083373	Transitioning a Team to Agile Test Methods	<div class="content">\n    <p>This experience report describes the challenges and steps taken to move a large development team from traditional waterfall test phases to agile test methods. In 2007, our development team started the transition to incorporate agile practices of user stories, daily scrums and time-boxed iterations for our new project. This paper focuses on the changes in test strategies necessary to support an agile development model.  Our product is 20 years old, has millions of lines of code in C/C++ and Java.  Our team consists of hundreds of developers and testers located worldwide. We had to go back to the basics and redefine our test strategy using an incremental approach. Our challenge is to an automated testing model to to enable frequent customer feedback.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Experience report	2008
20050239	How much Agile Should we Teach in a Software Engineering Course? Panel	Agile methods have shown strength in recent years. Although behind the \r\n    curve, academics are catching up in adapting agile methods in the classroom. \r\n    Other than teaching or using agile practices in various computer science \r\n    courses, many academics have also reported teaching agile methods in \r\n    software engineering (SE) courses. However, other than sporadic experience \r\n    reports, there is not sufficient evidence on how much agile coverage is \r\n    best for students in SE classes. Some argue that all agile is as bad as no \r\n    agile while others believe that agile is the way of the future. In this \r\n    panel, we will discuss the balance of agile and traditional methods in a \r\n    SE course. Some of the questions to be discussed include:\r\n\r\n \r\n\r\nIs it necessary to introduce traditional methods such as Waterfall among \r\nothers in a SE course?\r\n\r\nWill students be disadvantaged without adequate exposure to traditional \r\nmethods since they are still widely used in the industry?\r\n\r\nAssuming that teaching agile methods is necessary, should agile methods be \r\nthe primary emphasis in a SE course? Will a simple overview of agile methods be \r\nsufficient?\r\n\r\nIs XP a good representative of agile methods or should we introduce other \r\nagile methods? Which ones?\r\n\r\nShould agile methods be required for projects, if any, in a SE course?\r\n\r\n \r\n\r\nAdditional questions are encouraged from the audience.	Educator's Symposium	Educator Paper	2005
20050240	Student Experiences with Executable Acceptance Testing	This report describes experiences of introducing executable acceptance \r\ntesting in senior software engineering courses. Students in an agile \r\nenvironment completed a five-iteration project with significant portion of \r\nrequirements specified as executable acceptance tests. Furthermore, \r\nstudents were required to write their test suites for an additional \r\ncomponent. Ability to learn and utilize the FIT acceptance testing \r\nframework is evaluated to find out if FIT tests can be used to replace \r\nrequirement documents.  The results of a survey of students' perceptions \r\nand experiences were encouraging.	Educator's Symposium	Educator Paper	2005
20050241	Teaching Agile Project Management to the Project Management Institute (PMI)	This paper describes the experience of teaching Agile Project Management\r\nprinciples as part of the Project Management Institute (PMI) Annual\r\nConference (The PMI Global Congress) and subsequently as part of their\r\napproved traveling training series (The PMI SeminarsWorld Series). It\r\noutlines the challenges of getting material that conflicts with many\r\ntraditional views of project management accepted by the PMI. It also\r\ncontrasts learning styles between students at the PMI SeminarsWorld\r\nseries, who have, on average over 20 years IT experience and graduate\r\nstudents covering the same material as part of an MSc program who have\r\non average 3 years IT experience.	Educator's Symposium	Educator Paper	2005
20050242	Undergraduate Student Perceptions of Pair Programming and Agile Software Methodologies: Verifying a Model of Social Interaction	One of the reasons that undergraduate students, particularly women and \r\n    minorities, can become disenchanted with computer science education is \r\n    because software development is wrongly characterized as a solitary \r\n    activity.  We conducted a collective case study in a software \r\n    engineering course at North Carolina State University to ascertain the \r\n    effects of a collaborative pedagogy intervention on student \r\n    perceptions.  The pedagogy intervention was based upon the practices of \r\n    agile software development with a focus on pair programming.  Six \r\n    representative students in the course participated in the study. Their \r\n    perspectives helped validate a social interaction model of student \r\n    views. The findings suggest that pair programming and agile software \r\n    methodologies contribute to more effective learning opportunities for \r\n    computer science students and that students understand and appreciate \r\n    these benefits.	Educator's Symposium	Educator Paper	2005
20050243	Introduction to Agile Software Development	: In this talk Hubert Smits \r\n    provides a broad introduction to concepts of agile software development and \r\n    agile methods. The talk is based on his experience as an agile coach and \r\n    Certified Scrum Master. Concepts that are known from waterfall or \r\n    plan-driven development are transformed to an agile perspective. Examples \r\n    are release and iteration planning, progress reporting, meeting formats and \r\n    scaling projects from 10 people teams to 300 people teams. The session will \r\n    be interactive and following agile principles: there is more value in \r\n    responding to change than following a plan.	Introduction to Agile	Tutorial	2005
20050244	Engineering Practices of Agile Teams	This session will present short introductions to four practices of agile \r\n    teams. First up will be Gerard Meszaros, a partner at Clearstream Consulting \r\n    and author of Effectiveness of Automated Testing. Gerard will discuss Agile \r\n    Requirements with User Stories. User stories are a lightweight approach to \r\n    requirements gathering that shift the focus from written documents to \r\n    conversation and help projects be agile from their inception. Next up will \r\n    be Mike Cohn of Mountain Goat Software and author of User Stories Applied \r\n    and the upcoming Agile Estimating and Planning. Mike will be discussing \r\n    Release and Iteration Planning, which are important skills for answering \r\n    questions such as when will the product ship, in what order should we build \r\n    features, and how much can we commit to? Next will be Jim Highsmith, author \r\n    of Agile Project Management, Adaptive Software Development, and other books. \r\n    Jim will present on how Agile Project Management supports reliable \r\n    innovation. The final session will be presented by Ward Cunningham and Rick \r\n    Mugridge. Ward is a consultant with C2 and the inventor of FIT, the \r\n    Framework for Integrated Test, along with many other things such as wikis, \r\n    Extreme Programming, and CRC cards. Rick Mugridge is an associate professor \r\n    at the University of Auckland and is the co-author (with Ward) of Fit for \r\n    Developing Software. Rick and Ward will be showing how to perform Acceptance \r\n    Testing with FIT and FitNesse, two related and widely acclaimed, open source \r\n    tools.	Introduction to Agile	Tutorial	2005
20050245	Agile Development Methodologies	Firstly Jean Tabaka, agile coach with Rally Software, will introduce \r\n    Scrum. Her story is based on her experience as a Scrum Master, Facilitator \r\n    and Agile Coach. She will take you through the core of Scrum: the customer \r\n    ownership of the planning process, monitoring the delivery progress through \r\n    daily stand-up meetings and simple reporting, and finally the iteration \r\n    review. Jean expects to publish her book on Facilitation in Agile Projects \r\n    in the autumn. Following Jean with an exploration of Extreme Programming is \r\n    Bob Martin. 'Uncle Bob' is known as co-author, with James Newkirk, of XP in \r\n    Practice, and author of Agile Software Development: Principles, Patterns, \r\n    and Practices. Bob will cover the 12 practices that build up the XP software \r\n    development method and share his experience as an implementer of the method.	Introduction to Agile	Tutorial	2005
20050246	More Practices of Agile Teams	The four speakers for this afternoon take you through four more practices \r\n    that are widely used in the agile community. Mike Clark, author of Pragmatic \r\n    Project Automation, starts the session with Project Automation, a \r\n    practice that provides agile teams with the required support for their short \r\n    development cycles. Mike wrote the online JUnit Primer and developed \r\n    JUnitPerf, an open source collection of JUnit extensions for performance and \r\n    scalability testing. Test Driven Development has moved from one of the 12 XP \r\n    practices into a practice that is widely accepted in agile development \r\n    teams. Joe Rainsberger, author of JUnit Recipes, and founder and president of \r\n    Diaspar Software, highlights and demonstrates this practice. The afternoon \r\n    closes with an introduction by Scott Ambler into Agile Model Driven \r\n    Development (AMDD) and Agile Database Techniques. Scott is the \r\n    well-known author of such books as Agile Modeling, The Object Primer, and \r\n    Agile Database Techniques.	Introduction to Agile	Tutorial	2005
20050248	The Secrets of Leading from a Position of no Power	At some point while deploying Agile concepts within your organization, \r\n    you will find that you need to make changes in areas not under your \r\n    control.  You know what needs to be altered, but you don't have the \r\n    authority to make those improvements.  \r\n    At this point, are you blocked?  Will your Agile movement go no \r\n    further?  \r\n    Are all the benefits of Agile to be lost?\r\n\r\n    Not in the least!  Actually the most powerful and successful way of \r\n    install lasting change is from a position where you do not have the authority \r\n    over that change.\r\n\r\n    To proceed, you need to use some simple techniques where you effectively \r\n    lead from a position of no power.	Introduction to Agile	Tutorial	2005
20050249	Commoditizing Agility	Many organizations can't afford quality, enterprise-wide transitions to \r\n    agility. The costs are simply too high in dollars or time. As a result, \r\n    organizations have settled for watered-down transitions that fail to \r\n    realize the true potential of agility. To dramatically lower the cost \r\n    of agile transitions, we must commoditize agility. Join Joshua \r\n    Kerievsky as he explores the strategies, tools and collaborations \r\n    necessary to help agility succeed on a grand scale.	Introduction to Agile	Tutorial	2005
20050250	Vendor Presentations 2005	Over the last few years, the software development community at large \r\n    has come to recognize the value of agility. Agile methods such as XP, \r\n    SCRUM and others have proven to be a most effective catalyst to *better \r\n    software, sooner*. And while we're still relatively early in the \r\n    adoption curve, there seem to be limitations in sight. Not limitations \r\n    in the sense of how effective agility can be, or even to what kind of \r\n    problem can it be applied. This limitation is much more insidious - \r\n    it's a restriction of who can apply it or where they can apply it. \r\n    Differences aside, several agile methods and their pundits agree: \r\n    'agile software development begins with developers and customer in one \r\n    room'. No such statement exists in the Agile Manifesto, but two passages \r\n    from that infamous decree seem to support the idea of co-location as \r\n    prescribed by the most popular agile methods. But why must this be? Such \r\n    a limitation seems to preclude attempting agility in a multi-site or \r\n    globally distributed team. Most agilites would agree and perhaps \r\n    suggest "better to do your project with a smaller scope and a smaller, \r\n    co-located team". But in these days of globally distributed business we \r\n    find very real situations of globally distributed customers. \r\n    Recommending a co-located team may not be feasible or even logical when \r\n    considering other factors. So what then? Are we confined to experience \r\n    the benefits of agility only when working with a co-located team? The \r\n    Manifesto states that "business people and developers must work together \r\n    daily throughout the project" and "the most efficient and effective \r\n    method of conveying information to and within a development team is \r\n    face-to-face conversation". Why must the \r\nrequirement of face-to-face communication be tied so tightly to only one \r\nsolution: co-location? Indeed, agile methods can and should be utilized by \r\nmulti-site teams, offshore development projects, open source, and all forms \r\nof projects co-located and distributed alike. This discussion recounts one \r\ncompany's experience applying agility to globally distributed teams. Come \r\nhear and see what worked, what failed and what work-arounds made it \r\npossible to distribute agility to global teams.	Introduction to Agile	Tutorial	2005
20050251	Agility without Borders Why should agile methods be restricted to small, co-located teams?	Over the last few years, the software development community at large \r\n    has come to recognize the value of agility. Agile methods such as XP, \r\n    SCRUM and others have proven to be a most effective catalyst to *better \r\n    software, sooner*. And while we're still relatively early in the \r\n    adoption curve, there seem to be limitations in sight. Not limitations \r\n    in the sense of how effective agility can be, or even to what kind of \r\n    problem can it be applied. This limitation is much more insidious - \r\n    it's a restriction of who can apply it or where they can apply it. \r\n    Differences aside, several agile methods and their pundits agree: \r\n    'agile software development begins with developers and customer in one \r\n    room'. No such statement exists in the Agile Manifesto, but two passages \r\n    from that infamous decree seem to support the idea of co-location as \r\n    prescribed by the most popular agile methods. But why must this be? Such \r\n    a limitation seems to preclude attempting agility in a multi-site or \r\n    globally distributed team. Most agilites would agree and perhaps \r\n    suggest "better to do your project with a smaller scope and a smaller, \r\n    co-located team". But in these days of globally distributed business we \r\n    find very real situations of globally distributed customers. \r\n    Recommending a co-located team may not be feasible or even logical when \r\n    considering other factors. So what then? Are we confined to experience \r\n    the benefits of agility only when working with a co-located team? The \r\n    Manifesto states that "business people and developers must work together \r\n    daily throughout the project" and "the most efficient and effective \r\n    method of conveying information to and within a development team is \r\n    face-to-face conversation". Why must the \r\nrequirement of face-to-face communication be tied so tightly to only one \r\nsolution: co-location? Indeed, agile methods can and should be utilized by \r\nmulti-site teams, offshore development projects, open source, and all forms \r\nof projects co-located and distributed alike. This discussion recounts one \r\ncompany's experience applying agility to globally distributed teams. Come \r\nhear and see what worked, what failed and what work-arounds made it \r\npossible to distribute agility to global teams.	Introduction to Agile	Tutorial	2005
20070382	Functional Tests As Effective Requirement Specifications	The Test-Driven Development cycle moves functional test specification to the \r\nearliest part of the software development life cycle.  Functional tests no \r\nlonger merely assess quality; their purpose now is to drive quality.  For some \r\nagile process, like eXtreme Programming, functional tests are the primary \r\nrequirement specification artifact. When functional tests serve as both the \r\nsystem specification and the automated regression test safety net they must be:\r\n\r\nViable for the lifetime of the production code.\r\nEasier to write than production code.  If writing functional tests are \r\na bottleneck to writing production code, they will be considered optional and \r\nquickly become incomplete and obsolete.\r\nMore correct than production code.  Bugs in functional tests will \r\ncreate and/or mask bugs in production code. Functional tests drive what is \r\ndeveloped, and are used to detect bugs introduced over time as the production \r\ncode changes.  \r\nMore readable than production code.  Non-technical subject matter \r\nexperts (SME) are relied upon to validate the correctness and completeness of \r\nthe functional tests.\r\nMore easily and safely maintained than production code.  Functional \r\ntests don't have the same type of regression safety net as production code.\r\nMore locatable than production code.  All of the relevant functional \r\ntests must be found and updated before the production code can be updated.\r\n\r\n\r\nTopics covered include:\r\n\r\nContext: How functional tests fit into the overall spectrum of \r\ntesting. Where functional tests fit into the overall project development cycle \r\nand the test-driven development cycle.\r\nFormats: Functional tests can be textual, graphical, tabular, or \r\nstoryboarded.  \r\nSpecification: A prescriptive test script is refactored step-by-step \r\ninto an effective requirements specification. Emphasis is placed on developing \r\na domain specific testing language, and other best practices for making your \r\ntests a valuable project asset.  Advice is given for how to clean up an \r\nexisting functional test suite.	Testing	Tutorial	2007
20050253	"Showcasing" Agile Development:An Adoption Strategy for Large Organizations	Many large organizations could benefit from adopting some form of agile \r\n    software development.  However, larger companies typically face \r\n    significant organizational barriers to the type of change that agile \r\n    adoption mandates.  Without some evidence that the benefits will \r\n    outweigh the costs in their environment, these organizations are \r\n    hesitant to begin experimenting with agile practices in a significant \r\n    way.\r\n\r\n    In our work over the last several years with large companies, \r\n    we have developed a successful technique for addressing this situation \r\n    which we call "showcasing."  Showcasing is essentially the outsourcing \r\n    of a project to an independent group that can model and demonstrate the \r\n    agile approach while assuming the responsibility for successful project \r\n    completion.  Showcasing sets up a situation where the client can see \r\n    and experience the benefits of agile development while minimizing the \r\n    organizational risks associated with introducing a new process.\r\n\r\n    In this session, we will cover the showcasing technique, and \r\n    discuss our successful use of showcasing as a first step towards agile \r\n    adoption with several Fortune 500 companies.  Attendees will leave with \r\n    a greater understanding of showcasing's value as a tool in the agile \r\n    change agent's arsenal.	Introduction to Agile	Tutorial	2005
20070374	Agile Project Management for Contributors and Management	Summary\r\n\r\nAgile Project Management defines a particular style of management that supports\r\nboth software and other types of projects. The basics of APM are: Embrace Change\r\n(Fundamental mindset change, responding to change is more important than\r\nfollowing a plan), Focus on Customer Value (deploy value early and often, apply\r\nlean techniques), Deliver Chunks of Functionality Incrementally (capabilities\r\nand stories, stories always shippable), Collaborate (cross-functional teams,\r\nconstant interaction with customers), and Reflect and Learn Continuously.\r\n\r\nAPM includes core agile principles, a project management framework, and specific\r\npractices. The framework phases are: Envision â€” determining the product vision\r\nand project scope; Speculate â€” developing a feature-based release plan; Explore\r\nâ€” iteration plan and delivering tested features; Adapt â€” reviewing the delivered\r\nresults and adapting; Close â€” concluding the project.\r\nThis APM presentation will also include a section on Enterprise agile\r\nissuesâ€”getting across to executives what they can expect from agile projects and\r\nto agile developers and project managers how they can present agile in an\r\nâ€œexecutiveâ€ friendly perspective. This section will cover, agile and other\r\nproject management strategies, program and portfolio management and project\r\ngovernance.\r\n\r\nSign up for this session and explore the ideas and practices of APM.\r\n\r\nAudience\r\n\r\nProject managers, team leads, product managers, and executives. Project managers\r\nand team leads will learn about the whole agile project management lifecycle and\r\ntheir roles, product managers will learn how the customer team contributes to\r\nproject success, and executives will learn how to govern in an agile environment.\r\nContent\r\n1.\tAn introduction to Agile Project Management\r\n    *\tThe five fundamentals of agile development\r\n    *\tCollaborative development\r\n    *\tExploration factors\r\n    *\tThe Declaration of Interdependence\r\n2.\tThe APM Framework\r\n    *\tEnvision\r\n    *\tSpeculate\r\n    *\tExplore\r\n    *\tAdapt\r\n    *\tClose\r\n3.\tChartering\r\n    *\tProduct vision\r\n    *\tProject scope & boundaries\r\n    *\tThe project community\r\n4.\tRelease and iteration planning\r\n    *\tStories\r\n    *\tCapabilities\r\n    *\tRelease planning\r\n    *\tIteration planning\r\n5.\tCollaboration\r\n    *\tCommunity practices\r\n    *\tTeam values\r\n    * \tParticipatory decision making\r\n\r\nSupporting Material\r\n\r\nThis session will involve a combination of presentation and audience\r\nparticipation. A detail set of slides will be made available.	Leadership	Beginners Program	2007
20070527	Common Areas At The Heart	In Christopher Alexander's pattern of this name, he says, "No social\r\ngroup--whether a family, a work group, or a school group--can survive without\r\nconstant informal contact among its members." [A Pattern Language] For a\r\nsoftware development team, the practice of sitting together goes a long way in\r\nproviding this informal contact and, ultimately, making it a team instead of a\r\ncollection of individuals assigned to a project. It is easily the best first\r\nstep toward agility.	Other	Experience Report	2007
20070494	Death of the Cubicle; the Open Office Experiment	Open office environments are critical to the success of Agile projects, but \r\ntransitioning an organization from traditional cubicles to an open office \r\nenvironment can be difficult and uncomfortable.  Our company successfully \r\naccomplished this in a stepwise fashion that allowed us to gain acceptance \r\nfrom the developers and management; the end result was an office environment \r\nthat allows our Agile teams to excel.  This report describes our journey to an \r\nopen office environment and our lessons learned.	Other	Experience Report	2007
20071068	ES3: Establishing a Common Agile Repository	This panel-driven workshop will explore the needs of the academic community with\r\nrespect to identifying and (re)using educational artifacts such as lectures,\r\nassignments, projects, and so on. The panelists will discuss what, in their\r\nopinion, is needed to increase the adoption of Agile topics in the university.\r\nEach panelist will present a brief 5-minute position statement that will serve\r\nas starting points for the discussion. The hoped-for results of the workshop are\r\na starting list of items that can be made useful for educators and a plan for\r\nestablishing an Agile repository for educatiors to retrieve the items and\r\ncontribute items of their own.	Other	Educators Symposium	2007
20070975	Introduction to Agile Methods & Knowledge Sharing	The talk will give a compact overview on agile project management and \r\nengineering approaches. In particular, it will discuss how knowledge is shared \r\nin agile teams and contrast this with more traditional approaches.	Process	Beginners Program	2007
20070630	On Rabbits, Space and Cards: Moving Towards an Informative Workspace	This paper addresses the initial experiences of a UK-based software development\r\ncompany while introducing the three elements of the `Informative Workspace':\r\nopen-plan working areas, extreme feedback devices and big visible charts /\r\ninformation radiators.  Our experiences convince us that visibility is vital,\r\nbut the key element to successfully enabling an informative workspace is\r\narguably control and ownership of the environment.	Other	Experience Report	2007
20070921	Web Application Testing In Java	Is your web applications automation strategy currently tightly coupled\r\nto an expensive commercial product or buggy alternative tools\r\n<!--\r\n /* Style Definitions */\r\n p.MsoNormal, li.MsoNormal, div.MsoNormal\r\n\t{mso-style-parent:"";\r\n\tmargin:0in;\r\n\tmargin-bottom:.0001pt;\r\n\tmso-pagination:widow-orphan;\r\n\tfont-size:12.0pt;\r\n\tfont-family:"Times New Roman";\r\n\tmso-fareast-font-family:"Times New Roman";}\r\n@page Section1\r\n\t{size:8.5in 11.0in;\r\n\tmargin:1.0in 1.25in 1.0in 1.25in;\r\n\tmso-header-margin:.5in;\r\n\tmso-footer-margin:.5in;\r\n\tmso-paper-source:0;}\r\ndiv.Section1\r\n\t{page:Section1;}\r\n /* List Definitions */\r\n @list l0\r\n\t{mso-list-id:479734862;\r\n\tmso-list-type:hybrid;\r\n\tmso-list-template-ids:-1072940888 67698703 67698713 67698715 67698703 67698713\r\n67698715 67698703 67698713 67698715;}\r\n@list l0:level1\r\n\t{mso-level-tab-stop:.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\n@list l1\r\n\t{mso-list-id:626086875;\r\n\tmso-list-type:hybrid;\r\n\tmso-list-template-ids:2063518444 67698703 67698713 67698715 67698703 67698713\r\n67698715 67698703 67698713 67698715;}\r\n@list l1:level1\r\n\t{mso-level-tab-stop:.5in;\r\n\tmso-level-number-position:left;\r\n\ttext-indent:-.25in;}\r\nol\r\n\t{margin-bottom:0in;}\r\nul\r\n\t{margin-bottom:0in;}\r\n-->\r\n\r\n\r\nIs your web applications automation strategy currently\r\ntightly coupled to an expensive commercial product or buggy alternative tools?\r\nWatij is an open source, easy to use, reliable, robust web application testing\r\ntool built on top of commercial Java platform integration products.  With Watij you can imitate real user\r\ninteraction with your web application. Simple user actions like navigating,\r\nclicking links, filling out forms, and validating content are a breeze with Watij.\r\nWatij also makes it easy to handle more complex actions like file downloading\r\nand uploading, popup windows and dialogs, and screen captures.\r\n\r\n \r\n\r\nIn this tutorial session you will learn:\r\n\r\nBenefits\r\n     of using a Java based framework for testing over other available\r\ntoolsets\r\n How to\r\n     quickly get started using Watij and the interactive console to automate a\r\n     web application\r\n The\r\n     ins and outs of the Watij API\r\n Applying\r\n     good design principles to your tests in an Agile world\r\n \r\n\r\nIf you would like to do the exercises please bring a laptop\r\nwith internet connectivity and with Java 1.5 or higher installed.  No laptop? \r\nNo worries...we will pair you up with someone who does :)	Testing	Tutorial	2007
20083782	An Agile Classroom Experience	<div class="content">\n    <p>Most Systems Analysis and Design textbooks and courses are based on traditional (and heavy) methods, tools and processes.  I encourage students to apply basic concepts to solve a business problem of their choice and customize the tools they have learned to fit their unique project.   For example, all students start their modelling processes by applying the basic concepts of events and entities.  Those choosing to leverage traditional tools will then create a set of data flow diagrams based on their events table, including a context diagram, DFD fragments and detailed diagrams, entity relationship diagrams, etc.  Those choosing to apply an object oriented approach will take their events table and create a set of use cases, use case diagrams, class diagrams and create additional models of object behavior and sequence diagrams, state chart diagrams, interaction diagrams and other OO models.</p>\n\n<p>I also introduce Agile Practices to enrich the classroom and learning experience by:</p>\n\n<ol><li>Starting each class with a daily standup</li>\n<li>Ending each class with a retrospective</li>\n<li>Share the value of stories through class games, exercises and application to individual student projects</li>\n<li>Empowering students with Open Space and Lightning Talk opportunities and facilitative techniques</li>\n<li>Utlizing  project iteration opens and closes (as part of class presentations)</li>\n</ol><p>I use Mary and Tom Poppendieck’s “Lean Software Development” book to add some powerful, lighterweight tools to the student’s toolkits.  As students complete the “Try This” exercises at the end of each chapter, they relate the core concepts to their projects as well as to their academic, organizational and personal lives, which never fails to spark some original and creative exchanges and learnings, as we review the core concepts around:</p>\n\n<ol><li>Eliminating waste</li>\n<li>Amplify learning</li>\n<li>Deciding as late as possible</li>\n<li>Delivering as fast as possible</li>\n<li>Empowering the team</li>\n<li>Building integrity in</li>\n<li>Seeing the whole</li>\n</ol><p>Agile practices are enriching the classroom experience and student’s creative thinking and mastery of the tools they’ve been learning throughout their academic experiences with impressive results.  Students are learned more creative thinking and a deeper understanding of what they have learned.  The are also realizing success and enhanced business value through iterations and early delivery; and incorporating feedback into their learning loops to exceed their original project expectations early in the semester.  The result is refreshing and energizing:  students can’t wait for the next session.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Experience Report / Talk\n5 Minutes:  Summary of the course objectives, curriculum and student profiles\n15 Minutes:  Overview of the process of introducing Agile into the classroom experience and overall classroom experience\n10 Minutes:  Q &amp; A</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Experience report	2008
20081628	Learning Collaboration and the Planning via the Process Game 	<div class="content">\n    <p>OVERVIEW:<br />\nI propose a fun and simple exercise which is variation on the popular card game Rummy to teach the importance of planning and collaboration.  The game is fun, easy to play, and doesn’t require an in-depth project or any type of case study.  The entire workshop can be completed in 30 minutes.  </p>\n\n<p>SUMMARY:<br />\nIt is difficult to teach people, particularly students in college, the importance of planning.  People tend to get caught in the concrete details of a project and not see that planning how to approach the problem can be as important as actually approaching the problem.</p>\n\n<p>The importance of planning an approach is critical in agile software development, as the approach is often different from project to project and can change between iterations (hence agility).  </p>\n\n<p>This workshop has consistently proven to drive the point home about the importance of planning how to communicate.   This workshop has been presented in the classroom at the undergraduate level and at several professional conferences with great success.  </p>\n\n<p>INTENDED AUDIENCE<br />\nEducators and mentors can benefit from this session since they will see an unusual way to teach process planning from an experiential learning perspective.  Developers and concrete thinkers will benefit from this session by seeing an exercise that drives home the importance of process planning.  </p>\n\n<p>TIMING<br />\n5 minutes: introduction and explanation of the rules.<br />\n18-20 minutes: playing the game, which consists of 3 minutes to plan before the game begins.<br />\n5 debriefing and relating the game to real world experience.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>THE GAME<br />\nThe basic idea of the process game is to divide the students into a number of groups.  Each group has a different communication method.  Each participant in the group gets an incomplete set of rules for the card game.  A few participants in the group get the remaining rules, but the game is set up so that nobody (except a ‘user’) has a complete set of rules.  Certain groups will have a user who has a complete set of rules and variations of the game. </p>\n\n<p>The goal of the groups is play as many rounds of the card game as possible in 20 minutes.  After the game is played, the instructor relates the communication methods to real world applications.  If time allows, each group will have a representative explain their communication mechanism and the problems they had playing the game.  </p>\n\n<p>Variations Among Groups<br />\nThere are 2 dimensions that are varied for each of the groups, communication mechanism and user involvement.  The following list describes the mix for each group.<br />\nGroup 1:    Via Email Only, No additional user, Represents Team geographically distributed across several time zones.<br />\nGroup 2:    Via Email Only, Additional user involved, Represents Team geographically distributed across several time zones.<br />\nGroup 3:    Via Telephone Only,  No additional user,    Represents Team with no documentation.<br />\nGroup 4:    Via Telephone Only, Additional user involved, Represents Team with no documentation.<br />\nGroup 5:    Open Communication, User inserted at last 5 minutes, Represents Team falling behind that has an expert inserted to help.<br />\nGroup 6:    Open Communication, User involved until last 5 minutes, Represents Team that is doing well, so has an expert removed.</p>\n\n<p>Communication Mechanism Descriptions<br />\nGroups designated as “Via Email Only” must communicate only in writing - no hand signals or speaking at all is allowed. One person in the group is selected as the mail server, responsible for routing emails between each player.  Players do not hand the emails directly to other players, but hand them to the email server.  Emails to more than one person will be routed (passed) by the mail server from one person to the next person.  Players must also not email the rules between eachother, but can email their interpretation of the rules.  Note that students can’t see each other’s hands, the deck itself, or any discarded cards.  This information can only be shared via email, therefore one of the participants in the group must be responsible for managing the cards the deck.</p>\n\n<p>Groups designated as “Via Telephone Only” can only communicate via telephone (speaking), in other words, the group cannot show each other diagrams, papers, writeups, cards, or use hand signals. The groups can hold conference calls to multiple people. Members of this group cannot just read the rules, but must explain them.    As with the Email group, students can’t see each other’s hands, the deck itself, or any discarded cards.  This information can only be shared via telephone, therefore one of the participants in the group must be responsible for managing the cards the deck.  </p>\n\n<p>Groups designated as “Open Communication” have free communication, essentially sharing anything the members would.  Again groups in this category can’t just read the rules or pass them around, but must explain them.  </p>\n\n<p>User Involvement Descriptions<br />\nUsers get an entire set of rules as well as a section of rules designated as variations.  The goal of the user is to introduce a different variation for each round.  The variations are not cumulative (only one variation per hand).  The user is part of the groups and can facilitate or assist in any way he/she would like as long as he/she conforms to the communication mechanism.     </p>\n\n<p>The group designated as “Open Communication” with a user involved until the last 5 minutes must not be made aware that the user is going to be pulled from the group at the end, it must be unexpected both on the part of the group and the part of the user.   </p>\n\n<p>The group designated as “Open Communication” with a user inserted at the last 5 minutes must be told that they have no user - the insertion of the user must be unexpected.  In order to accomplish this, a student must be removed from all participation and NOT assigned to any group; keep this in mind when determining the groups.  Tell this student that he/she is a user and give the student the entire ruleset and variations.  Instruct the student to read the rules and practice if needed.  This student will become a relative expert o the game when inserted.       </p>\n\n<p>Determining Groups<br />\nA group consists of 4 to 6 players.  It is important to avoid selecting players who are already in informal social groups as that will effect their communication.  Ideally there should be six groups (24 - 36 students).  If there are more than 36 students taking part, repeat the six communication methods - don’t create groups larger than six participants.  If there are less than 24 students, limit the group communication by eliminating Group 6, Group 5, Group 4, and then Group 3, in that order.  The game requires at least two groups (8 participants).   </p>\n\n<p>Rule Distribution<br />\nThe rules for the card game are divided into three segments. There is an incomplete set of rules that is distributed to everyone in the group. There are two sets of additional of rules that are distributed to other players in the group. This ensures that nobody in the group has all of the rules.  If there are more than 4 players per group, the two sets of additional rules are copied and distributed to four players in the group.  For example if there are six players, two people will have only basic rules, two people will have the basic rules and the first set of additional rules, and two people will have the basic rules and the second set of additional rules.  The game cannot be played without employing all of the rules, so distributing the rules ensures that the group must communicate.  Although all of the groups are actually playing the same game, it is important to tell the groups that each group may have a different game to play so that the groups don’t listen in to another group’s game.  </p>\n\n<p>Playing the Game<br />\nThe first step in the game is to distribute the instructions for the process game, but not the rules for the card game.  These rules describe each group’s communication mechanism and user involvement.  The actual rules of the card game will be distributed when play begins.  As you distribute the instructions, allow the participants to read them, but don’t allow them to discuss the instructions until you give them the signal to start organizing.   </p>\n\n<p>The groups are given a signal that they have 3 minutes to organize themselves using any means of communication they’d like.  Instruct them to determine who is the group leader (if they want one), who is the user (if applicable), and anything else that they need to decide (mail server, names for mail, scribe, etc).     </p>\n\n<p>After 3 minutes, distribute the rules, making sure that everyone gets a copy of the partial rules and the additional sections of the rules are distributed.  The user instructions are also distributed.  The participants are instructed not to read the rules until the instructor signals.  Once all of the rules are distributed to all of the groups, the instructor gives the signal to start the game. Tell the participants that they can spend this time organizing more (within the parameters of the communication mechanism), but at the end of 20 minutes, the game ends and the participants must stop all activities.    </p>\n\n<p>The last step of the process game is for the instructor to relate the communication mechanisms to real world situations.  Group 1 and Group 2, where communication is only via email, can be related to a geographically dispersed organization.  Email is often used as the primary form of communication when a branch office is located in a country such as Australia or India and the main office is in the United States making organized meetings difficult because of time zone considerations.  Group 3 and group 4 use only telephone communication and no written documentation.  This type of communication can be likened to agile processes where documentation is marginalized and oral communication is emphasized.  Group 5 and 6 are mainly affected by user involvement, which is typical in many large organizations where the user is in high demand.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Tutorial	2008
20071028	XR05: Open Workspaces	527. Common Areas At The Heartby George Dinwiddie, Consultant, iDIA Computing, LLC\r\n630. On Rabbits, Space and Cards: Moving Towards an Informative Workspaceby Johanna Hunt, Researcher in Informatics, University of Sussexby Tom Hume, Future Platformsby Devi Lozdan, Future Platforms\r\n494. Death of the Cubicle; the Open Office Experimentby Matthew Plante, Software Engineer, Medtronic, Inc.	Other	Session	2007
20071072	Agile Alliance Members Meeting	The annual meeting of all Agile Alliance members.  All conference\r\nattendees are encouraged to attend for election of officers and other\r\nimportant announcements.	Other	Discovery Session	2007
20070860	A Longitudinal Study of the Use of a Test-Driven Development Practice in Industry	Test-Driven Development (TDD) is an agile practice that is widely accepted and\nadvocated by most agile methods and methodologists.  In this paper, we report on\na longitudinal case study of an IBM team who has sustained use of TDD for five\nyears and over ten releases of a Java-implemented product. The team worked from\na design and wrote tests incrementally before or while they wrote code and, in\nthe process, developed a significant asset of automated tests.  The IBM team\nrealized sustained quality improvement relative to a pre-TDD project and\nconsistently had defect density below industry standards.  As a result, our data\nindicate that the TDD practice can aid in the production of high quality\nproducts.  This quality improvement would compensate for the moderate perceived\nproductivity losses.  Additionally, the use of TDD may decrease the degree to\nwhich code complexity increases as software ages.	Other	Research Paper	2007
20070558	Agile Analysis	One of the basic rules of agility is that "the customer drives." This is\r\ntypically managed by using 'stories', which represent valuable bits of work to\r\nbe done by the team. There is usually a Customer (Product Owner) role that has\r\nthe following responsibilities:\r\n Provide stories that have value to users and other stakeholders,\r\n\r\n Prioritize the backlog of stories for the team's consumption,\r\n\r\n Explain the stories to the team in an ongoing conversation, and \r\n\r\n Validate the resulting product against the stories.\r\n\r\n\r\nThese are a lot of work, and usually require collaboration amongst many members\r\nof the team. One of the major pieces, and often a significant problem, is\r\nfinding the 'right' stories to drive the team with. I use the term "Agile\r\nAnalysis" to refer to this part of the process, which is often done successfully\r\nin an informal, ad hoc, way. Sometimes more formality is required,\r\nespecially if there is a diverse stakeholder community, the problem is complex,\r\nor there are many teams involved. \r\nThis tutorial demonstrates this formality. The students in this tutorial\r\nwill work through an iterative, incremental framework for agile analysis in\r\norder to: \r\n Determine what the capabilities of a system should be,\r\n\r\n\r\n Determine the stakeholder desires for a given capability,\r\n\r\n Discuss and agree on a conceptual solution -- not a detailed design,\r\n\r\n Document an backlog of stories that will drive the team to an initial\r\nsolution, and\r\n\r\n Add stories to the backlog to reflect potential work to expand and improve\r\nthe initial solution as time goes on.\r\n\r\n\r\nThe students will do a role-playing simulation in small groups interspersed with\r\ninstructor training. The student leaves with an appreciation of agile analysis\r\nand how it can improve his/her team, either in a formal or ad hoc way.	Customer	Tutorial	2007
20070552	Agilitizing your Waterfall	How do you move from a waterfall world to an Agile world rapidly without \nupsetting the apple cart and all that are involved in the project? This \nExperience report focuses on the transition of a project team from using \nwaterfall to Agile methodologies and the trials and tribulations of the \nexperience.	Leadership	Experience Report	2007
20070618	An Alternative to Consensus - Individual Decision-Making in Agile	In the recent best-seller /Joy at Work/ Dennis Bakke describes how he \r\neffectively scaled what is essentially an agile approach across his entire \r\ncompany. One practice is distinctly different, however: the way that these \r\nself-organizing teams make decisions. In Bakke's company, teams don't make \r\ndecisions via group consensus. Instead a team member volunteers to be the \r\ndecision-maker on a particular issue. The decision-maker has only one \r\nmandatory rule: follow the "advice process". It is what it sounds like - \r\nasking the advice of others before making a decision. The bigger the impact \r\nthe decision will have on the organization, the wider the quest for advice \r\nmust go, all the way to the board of directors if appropriate. Here is what \r\nBakke says about this approach:\r\n\r\n"The advice process is my answer to the age-old organizational dilemma of how \r\nto embrace the rights and needs of the individual, while simultaneously \r\nensuring the successful functioning of the team or company. I observed that \r\nJapanese companies tended to emphasize the group and consensus, while American \r\nculture pushed rugged individualism. I believe the advice process strikes a \r\nbetter balance. It leaves the final decision to individuals, but it forces \r\nthem to weigh the needs and wishes of the community."\r\n\r\nJoin us for a fishbowl discussion as we debate the merits of Bakke's advice \r\nprocess and whether it's an agreeable option in agile organizations.	Customer	Discovery Session	2007
20070794	Automated Acceptance Testing with StoryTestIQ	Topic\r\n\r\nAutomated acceptance tests for web applications can be\r\nimplemented using popular frameworks like Fit, FitNesse, and Selenium. However,\r\neach of these has practical limitations that are a consequence of their\r\narchitecture and the way they interact with the application under test. SolutionsIQ\r\nhas developed a hybrid of these three frameworks called StoryTestIQ that facilitates\r\ntheir use, offers new derivative features, and frees test authors from constraints\r\nimposed when they are used independently.\r\n\r\n\r\n\r\nThis hands-on session will teach participants about Automated Acceptance Testing,\r\nteach them how to use the open source StoryTestIQ framework, and prepare them\r\nto use automated acceptance testing on their own projects.\r\n\r\n\r\n\r\nAudience\r\n\r\nThe StoryTestIQ tutorial is designed to teach those with no acceptance\r\ntest experience as well as those who use Fit, FitNesse, Selenium, and similar\r\nframeworks.\r\nAcceptance tests are written by people who play the role of Product Owner, Tester,\r\nand Developer; this tutorial addresses the educational needs of each role\r\nindependently and in conjunction with the others. While StoryTestIQ is used for\r\nweb application acceptance tests, those who work with other types of\r\napplications will find the concepts and general techniques applicable to their\r\ncontexts\r\nas well.\r\n\r\n\r\n\r\nBenefits\r\n\r\nParticipants will gain practical experience writing\r\nacceptance tests using StoryTestIQ, which will help them implement automated\r\nacceptance tests in their own projects following common Agile patterns.\r\n\r\n\r\n\r\nThe Automated\r\nAcceptance Tests pattern is one of the most effective and important in\r\nthe Agile software development corpus. It supports User Stories by providing the\r\nexplicit concreteness that implied requirements lack but developers need. It\r\nhelps the team Engage\r\nCustomers and Engage\r\nQuality Assurance through the collaborative effort (Pairing) required to write\r\nhigh quality acceptance tests. It keeps the team anchored and focused so they Never Add Functionality Early\r\nand the Application Design Is\r\nBounded By Test Design. It furnishes system tests that afford maximum\r\nconfidence in efforts to Integrate\r\nContinuously and Refactor\r\nMercilessly. It supplies metrics needed to Radiate Information about the status of application\r\ndevelopment and provides Executable\r\nRequirements.\r\n\r\n\r\n\r\nContent\r\n\r\n1. What are Automated Acceptance Tests?\r\n\r\nAn introductory example of a simple automated acceptance\r\ntest.\r\n\r\n2. Why do we need Automated Acceptance Tests?\r\n\r\nThe Agile context and an explanation of the supporting role\r\nthis pattern plays.\r\n\r\n3. What can you do with Fit, FitNesse, and Selenium?\r\n\r\nBrief overview of each framework with emphasis on their\r\nstrengths and weaknesses.\r\n\r\n4. What is StoryTestIQ?\r\n\r\nThe nature of the hybrid with a high-level explanation of\r\nthe implementation.\r\n\r\n5. What can you do with StoryTestIQ?\r\n\r\nA quick demo of StoryTestIQ features including an example of\r\nstandard FitNesse test use in the framework with a custom Fit fixture.\r\n\r\n6. How do you use StoryTestIQ for Automated Acceptance Testing?\r\n\r\nHands-on exercises facilitated by the presenter's example\r\nwith the assistance of coaches. The majority of our time will be spent here.\r\n\r\n7. How can you use StoryTestIQ on your project?\r\n\r\nClosing summary of StoryTestIQ, interactive Retrospective,\r\nand pointers to the StoryTestIQ repository.\r\n\r\n\r\n\r\nProcess\r\n\r\nSlide Presentation & Demo: 30 minutes\r\n\r\nThe presenter educates the participants using a projected PowerPoint\r\npresentation and software demonstrations that comprise content items 1 through\r\n5 as described above.\r\n\r\nHands-on Exercises: 140 minutes (scaleable)\r\n\r\nThe presenter leads the participants through hands-on\r\nexercises by projected example and discussion. Coaches with StoryTestIQ\r\nexperience will assist participants as needed by Pairing with them. \r\n\r\n\r\n\r\nWe prefer to have enough workstations in the room to allow\r\nall participants to work continuously during this period in pairs. Alternatively,\r\nthe presenter and coaches will have laptops and we will reduce the number of\r\nexercises as appropriate so that as many  participants as possible are able to\r\nwork through at least one exercise.\r\n\r\nConclusion: 10 minutes\r\n\r\nThe presenter summarizes and concludes the tutorial with an\r\ninteractive Retrospective.\r\n\r\n\r\n\r\nPresenter\r\n\r\nPaul Dupuy, Jr.\r\n\r\nPaul leads the Internal Consulting & Review department\r\nand plays the roles of Agile Coach, Lead Developer, ScrumMaster, and Architect\r\nat SolutionsIQ in Seattle. He began developing software professionally in 1984\r\nand made a career of it 11 years ago. Paul has developed and extended\r\napplications that span the range from web application to client-server to\r\nshrinkwrap software using Microsoft, Java, Python, and web client technologies.\r\nHe has ~5 years of Agile experience and is in hot pursuit of a generalized\r\nAgile Pattern Language. Paul created StoryTestIQ and continues to improve it in\r\ncollaboration with a SolutionsIQ team and the Open Source community.\r\n\r\nCoaches\r\n\r\nLance B. Young\r\n\r\nLance has 15 years of software development experience in a\r\nwide range of projects using traditional and Agile methodologies. He began\r\nusing pure Agile development practices in 1999 and has been using Scrum, XP,\r\nand combinations of Agile methodologies exclusively since then. Lance is\r\ncurrently a consultant at SolutionsIQ in Seattle working on outsourced custom\r\ndeveloped business applications as a Development Lead and Enterprise Architect.\r\nLance is a regular presenter at free seminars (the latest cosponsored by Rally\r\nSoftware) and volunteer technical and process groups including the Seattle XP\r\nuser group, Seattle Java user group and the Seattle chapter of the\r\nInternational Association of Software Architects. Lanceâ€™s current focus areas\r\nare bringing business concerns into the Agile process and selling the business\r\nvalue of Agile practices to traditional waterfall companies.\r\n\r\nMonica Yap\r\n\r\nMonica Yap is the Extreme Programming Coach and Head of\r\nGroup Development for WDSGlobal.  Monica has designed and developed\r\nsoftware for the past 15 years on a wide variety of projects from on-line\r\neCommerce sites to property tax management systems.  She has over six\r\nyears of experience with agile processes.  In particular Monica has\r\nfocused on building Agile teams and merging business with Agile process. \r\nShe has presented at Agile2005, local XP groups, and taught classes in Agile\r\nprocesses.\r\n\r\nChris Sterling\r\n\r\nChris Sterling has worked in the technology industry over\r\nthe past 10 years and is currently employed at SolutionsIQ in\r\nSeattle. He has worked extensively on designing network and enterprise\r\nintegration projects for technology startups, corporations, and government\r\nagencies. The experiences gained from these projects have included enterprise\r\narchitecture refactoring and design, service-oriented architecture design,\r\nresearch and development prototyping, and enterprise application integration.\r\nAlong with these technical skills, he has also provided mentoring, lead\r\nmultiple development teams, presented successful technology strategies with\r\nopen source and commercial solutions, and managed development projects using\r\nboth RUP and Agile with Scrum process methodologies.\r\n\r\nMickey Phoenix\r\n\r\nOwner, project manager, and lead designer of software consulting firm from\r\n1997 to 2002.  Pair programming since 1999, full Agile projects since 2004,\r\nCertified Scrum Master, multiple successful Agile projects as Senior Software\r\nDeveloper.\r\n\r\n\r\nHistory\r\n\r\nStoryTestIQ hands-on AAT training sessions have been given\r\nat SolutionsIQ on an ongoing basis since the framework was first created mid-2005.\r\nWe are using StoryTestIQ on many projects (8 at this writing) and all new\r\nprojects are provisioned with the framework and training sessions when they\r\nbegin. SolutionsIQ has released StoryTestIQ to the Open Source community (see http://storytestiq.sourceforge.net\r\n).	Testing	Workshop	2007
20070404	Automated Recognition of Test-Driven Development with Zorro	Zorro is a system designed to automatically determine whether a developer is\ncomplying with an operational definition of Test-Driven Development (TDD)\npractices. Automated recognition of TDD can benefit the software development\ncommunity in a variety of ways, from inquiry into the ``true nature'' of TDD, to\npedagogical aids to support the practice of test-driven development, to support\nfor more rigorous empirical studies on the effectiveness of TDD in both\nlaboratory and real world settings. This paper introduces the Zorro system, its\noperational definition of TDD, the analyses made possible by Zorro, and our\nongoing efforts to validate the system.	Other	Research Paper	2007
20070655	Clean Code 1: Cleaning up a mess.	Keeping code clean is a simple matter of professional ethics.  In this talk\r\nRobert Martin shows how a Java module can start clean, grow to become messy, and\r\nthen be refactored back to cleanliness. Be forewarned: his tutorial is about\r\ncode.  We will put code on the screen and we will read and critique it.  And\r\nthen, one tiny step at a time, we will clean it.  In this tutorial you will\r\nparticipate in the step by step improvement of a module.  You will see the\r\ntechniques of the Prime Directive (Never Be Blocked), and Agile Design\r\nPrinciples brought into play.  You will witness the decision making process that\r\nAgile Developers employ to write code that is expressive, flexible, and clean. \r\nFinally, you learn an attitude of professional ethics that defines the software\r\ndeveloperâ€™s craft.	Developing	Tutorial	2007
20080648	TDD Clinic: incremental design with Mock Objects.	<div class="content">\n    <p><strong>Prerequisites:</strong> Laptop (including power cable!), Java 5 development environment</p>\n\n<p>This hands-on tutorial teaches Test-Driven Development, using Mock Objects to drive the discovery of roles and responsibilities in the code.</p>\n\n<ul><li>Test-Driven Development in context: using high-level tests to drive features, low-level tests to drive design. </li>\n<li>Object-Oriented Design: systems are built up from communicating objects that provide services for each other. Mock Objects helps us focus on the relationships between objects, clarifying their roles and encapsulating implementation detail.</li>\n<li>Test-<em>Driven</em> Development: using problems in testing to help us identify weaknesses in our design, learning to listen to the tests. </li>\n</ul><p>Mock Objects are often presented as a technique to isolate code from external dependencies and make the tests run faster. We think this is backwards, we use Mock Objects to drive the design of our code and write integration tests against third-party libraries.</p>\n\n<p>We will also touch on: what should, and should not, be mocked; how to write resilient tests that express their intent and don’t break for irrelevant changes; how to use tests to identify design issues and then how to fix those issues.</p>\n\n<p>The session will include a programming exercise so that the participants can try out and discuss the techniques for themselves.</p>\n\n<p>We’ve run this session at XpDay London 2007 and Agile India (Bangalore). At XpDay London, the feedback was:</p>\n\n<ol><li>Green (Loved it)   86% “Incredibly useful; the best technical I’ve heard” “Excellent, thanks.”</li>\n<li>Yellow (Good session)  14%</li>\n<li>Red                    0</li>\n</ol><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Intended audience and experience level:</strong> Developers (any level), Knowledge of Java. The exercises are based on jUnit4 and jMock2</p>\n\n<p>We will start by presenting an overview of TDD that addresses the questions raised in the Summary, then describe the scenario that we will use for the pair programming exercise to come. This usually take 40-60 minutes depending on the level of discussion.</p>\n\n<p>We will then TDD with mocks through a live demonstration, writing the first test of the exercise and then just enough code to make it pass. This usually takes 20-30 minutes.</p>\n\n<p>The participants will then work in pairs to implement the first test for themselves and continue with the exercise, which will be run in iterations. After each iteration the participants will share the lessons they learned with the group and we will present more detailed explanations of the issues raised. </p>\n\n<p>We will wrap up the session with a further presentation reiterating the lessons learned and looking at them in more detail, with good and bad code examples. This usually takes 30 minutes.</p>\n\n<p>Originally presented with Nat Pryce and Romilly Cocking. Likely to be run with at least one other presenter.   </p>\n\n<p>This might fit into your TDD clinic. We usually present it as a tutorial.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20090400	Push, Pull, What is the difference	In this talk Ola Ellnestam explains the differences between push and pull in a software development context.\n\nThe difference between push and pull is described and discussed. Followed by examples from other industries. Mentioning Toyota and Dell. After this rather brief introduction follows a simple and easy to understand exercise.\n\nThis talk/tutorial has been run once for the public and a few times in company internal workshops.	New to Agile	Tutorial	2009
20070435	Creating a Comic Book Using Agile Methods	In this session, you will go through three mini-iterations of three "days"\r\neach as you work in small teams to create a comic book that tells the story of\r\nthe Three Little Pigs.  Each iteration will start with a brief planning session.\r\n At the end of each iteration there will be a quick debriefing.  At the end of\r\nthe session, a mini-retrospective will help you to reflect on the experience and\r\narticulate what you have learned.  You will also have created an actual comic\r\nbook (digital photos of the comics will be taken and distributed to all\r\nparticipants)!\r\n\r\nThis is a perfect experiential introduction to agile methods.  Topics\r\ncovered/experienced include timeboxing, planning, self-organizing teams,\r\ndelivering value, prioritized work, dealing with unexpected change, team status\r\nmeetings, refactoring, demos and retrospectives.	Planning	Beginners Program	2007
20070865	Dealing with the Immortal Code Base: More Strategies For Legacy Code	Let's face it, many applications will eventually be rewritten, but there are\r\nmany that won't; they'll just live forever.  In this tutorial, I'll outline\r\ntechniques that you can use to break dependencies and insert test points at the\r\ncomponent and subsystem levels.  You'll also learn how to introduce permanent\r\nscaffolding in your code which makes system evolution easier.  The tutorial will\r\nconsist of lecture and a set of guided exercises in Java.  However, we will\r\ndiscuss the application of the techniques in other languages and environments.	Developing	Tutorial	2007
20070730	Executable project documents: Using essential examples to help bridge the gap between business and software perspectives	Learn the value of using executable project documents to help bridge the\r\ngap between business and software perspectives, while encouraging collaboration.\r\nLearn how to express business rules as executable project documents, and how to\r\nhelp others in your team gain these skills.\r\n\r\nWe'll focus on expressing the essence of the business domain with clarity and\r\nbrevity, using examples in Fit.  Executable project documents serve to\r\nunderstand, clarify and communicate the domain and to aid in developing the\r\nsystem and testing it in a variety of ways.\r\n\r\nParticipants will spend part of the tutorial trying out these ideas on paper\r\nin small teams.	Customer	Tutorial	2007
20070403	Global - Yet Agile - Software Development	On the one hand there are meanwhile not many projects left that are made at home\r\nwithout outsourcing, off- or nearshoring. Thus, global software development\r\nseems to be a fact in state-of-the-art software development. On the other hand\r\nmore and more projects discover the success factor of agile software development\r\nnot only since the Standish Group is recommending this approach. \r\n\r\n\r\nAlthough agile software development requests â€“ among other things â€“ an emphasis\r\non face-to-face communication, several projects have tried meanwhile to combine\r\nglobal with agile software development.\r\n\r\n\r\nIn this tutorial Jutta wants to provide an opportunity to share experiences in\r\nfollowing an agile approach in a global development environment: What are the\r\npossibilities to overcome the challenges global software development provides,\r\nand what are the success factors for implementing an agile software development\r\nprocess within such constraints?\r\n\r\n\r\nIn this session, Jutta will report from her experiences in bringing these two\r\ntrends together and which practices help and which hinder the success of a\r\nproject. Her own experiences are mainly based on large global agile projects in\r\nembedded and commercial software development.	Offshoring	Talking Head	2007
20070929	LS1: A Framework for Agile Leadership	In this session we present a framework that Agile leaders can utilize to help \r\nprovide appropriate leadership to their enterprise and their teams.   The \r\nframework is aligned with the 6 value principles of the Declaration of \r\nInterdependence for Agile Project Leadership and provides some practical \r\nguidelines for:\r\nCreating and Aligning to the Strategic Vision\r\nDispersion of the Strategy via Collaboration and Collaborative Leadership\r\nExecution of the Strategy via effective Project Governance	Leadership	Leadership Symposium	2007
20070920	Movements of a Hypnotic Nature - Incubating innovative products using Agile methods	Title: Movements of a Hypnotic Nature â€“ Incubating innovative products using\r\nAgile methods\r\nType: Hands-on (Full Day: 6 hours)\r\nPresenter: Brent Barton\r\n\r\nAbstract:\r\nUsing a fictitious company, this hands-on exercise provides a holistic approach\r\nto running an Agile project from inception to closure.  The sponsoring\r\norganization, â€œMovements of a Hypnotic Nature,â€\r\nhttp://www.MovementsOfAHypnoticNature.com is funding a set-based\r\ndevelopment to produce several ideas and working prototypes for its next product\r\nline.  \r\n\r\nAn overview of the day will be given in the introduction.  The room will be set\r\nup with big charts on the walls to guide and remind teams what they are supposed\r\nto do so learning is Just-in-time.  New concepts will be introduced just before\r\nbeing needed.  A supply store will be set up to allow the purchase of materials\r\nand a banker will handle the money.\r\n\r\nExercise introduction \t\t\t\t\t\t\t\t\t30 min\r\nIntroduction Story:\r\nI need a new product for my unique company, â€œMovements of a Hypnotic Nature.â€\r\nThe new product must use the existing tools and raw materials available.  You\r\nhave been selected as participants because of your skill and past performance. \r\n I want each team to submit a design solution using the following information:\r\n\r\nâ€¢\tThe design should be pleasing to the eye\r\nâ€¢\tThe design must have some or all parts of it that move\r\nâ€¢\tThe designâ€™s movement should be able to be started intuitively\r\nâ€¢\tThe designâ€™s movement should stop gracefully on its own\r\nâ€¢\tThe movementâ€™s total travel should measure a minimum of 5 inches\r\nâ€¢\tThe design must use much of the existing materials in other product lines to\r\ncontain costs\r\n\r\nNote: Existing materials include: Play-doh, rubber bands, golf balls, golf tees\r\nand rulers.  Exotic materials cost more and have more pizzazz to increase the\r\ntrade-off discussions\r\n\r\nExercises:\r\nAfter forming teams and establishing budgets, (fake) money is allotted to each\r\nteam.  Money is spent on raw materials from â€œthe store.â€ Existing raw materials\r\nare less costly than more exotic materials.  Money is also spent paying the\r\nteamsâ€™ salaries.\t30 min\r\n\t\r\nIntroducing story techniques will help us identify roles and initial product\r\nbacklog items\t60 min\r\n\t\r\nPrioritization and Estimating techniques help us prepare for iteration\r\nplanning \t60 min\r\n\t\r\nWe will run an initial iteration and establish a velocity. (10 min planning, 15\r\nmin work, 5 min review = 30 min)\t30 min\r\n\t\r\nThe team will then conduct release planning using velocity measures.  60 min\r\n\t\r\nEach iteration (#2, 3, 4) will include re-planning, several stand ups and a\r\nreview of the product (3 x 30 = 90 min)\t90 min\r\n\t\r\nFinal Release and product selection\t30 min	Innovation	Workshop	2007
20070364	Planning and Tracking on Agile Projects	Planning is important even for projects using agile processes. Unfortunately,\r\nwe've all seen so many worthless plans that we'd like to throw planning out\r\naltogether. This session will present a quick overview of the roles of release\r\nplanning, iteration planning, and tracking on agile projects.	Customer	Beginners Program	2007
20070719	Presenter First: TDD for Large, Complex GUIs	It is difficult to maintain agile practices when building a large GUI\r\napplication. Unit testing code that accesses the native interface API is\r\nproblematic. Keeping the program logic separated from it is key to using TDD\r\npractices through to the end of your project.\r\nPresenter First (PF) is a scalable strategy for producing fully unit tested GUI\r\napplications directly from user stories in a TDD fashion without the expense of\r\ntraditional GUI testing tools.\r\nPF is about composing applications into cooperating Model-View-Presenter (MVP)\r\ntriads using TDD and driving development from user stories through the presenters.\r\nThis approach to development makes logic, class and module decoupling easier to\r\nachieve and maintain. The code that touches the GUI is kept as simple as possible. \r\nIn this session you will pair with the speaker and other participants in the\r\nconstruction of a GUI application, using and learning about the benefits of\r\nMVP-PF as we go. A laptop with Visual Studio is recommended for following along\r\nwith and completing the exercises.	Developing	Tutorial	2007
20070786	Resistance as a Resource	For many of us who promote the adoption of agile methods or related techniques,\r\ndealing with resistance is part of our every day life. With this in mind, this\r\nworkshop strives to help the participating change agents to collaborate on the\r\nkinds of problems and solutions they face in their working environment and thus\r\nto increase our awareness of different forms of resistance to change and new\r\nideas, to improve our ability to see the change from the resistor's perspective,\r\nand to learn about solutions that can and have helped in dealing with such\r\nresistance.\r\n\r\n\r\nAfter the brief introduction of the workshop's agenda, the presenter will share\r\na couple of examples of resistance he has faced as a change agent and how he had\r\naddressed this resistance. These examples' purpose is to build a safe\r\nenvironment for the participants to share their experiences and break the ice\r\nfor the session's main activity—the Resistance as a Resource game.\r\n\r\n\r\nInvented by Dale H. Emery, the objective of the Resistance as a Resource game is\r\nto "create, learn, remember, and express ideas about how to respond to\r\nresistance." What follows is a paraphrased description of the game's rules from\r\nDale's website.\r\n\r\n\r\nThe game can be played anywhere that ideas can be posted, such as mailing lists,\r\nelectronic forums, and conference rooms with walls, white boards, or flip\r\ncharts. Any number of players can play (although the smaller the group the more\r\nfocused the discussion).\r\n\r\n\r\nThere are no turns—any player can make a move at any time he or she\r\nwishes. In other words, the group will freely organize around the surface with\r\nposted notes, making "moves" at their chosen pace, simultaneously rather than\r\ntaking turns to "step forward."\r\n\r\n\r\nThe available moves include:\r\n\r\n\r\nChange: Post an example of change that you are promoting.\r\n\r\n\r\nResistance: Choose one of the posted examples of change, and post an\r\nexample of a statement that expresses resistance to that change.\r\n\r\n\r\nReason: Choose one of the posted examples of resistance, and post an\r\nexample of a reason why an intelligent, competent, sincere person of good will\r\nmight say or do such a thing.\r\n\r\n\r\nResponse: Choose one of the posted reasons, and post an idea about\r\nhow to respond to someone who has that reason for making that statement.\r\n\r\n\r\nThe participants are encouraged to not discuss the posted examples of resistance\r\netc. during game play. Instead, we'll stop to discuss and reflect on the\r\nrelationships between some of the identified examples and behavior. Because\r\nwe're not likely to be able to discuss all such clusters during the workshop, we\r\nwill select a few interesting or somehow specifically relevant clusters for\r\ncloser elaboration with the whole group.\r\n\r\n\r\nParticipating this session helps you gain awareness for different forms of\r\nresistance as well as sensitivity for the undercurrents the resistance is\r\nbuilding from. From the examples of observed resistance and thinking about the\r\nvarious possible reasons for it—the resistor's point of view—you\r\nwill also learn about potential solutions to resolving the resistance your ideas\r\nare facing.	Individuals & Teams	Discovery Session	2007
20070990	Session RP1: Empirical Evaluation of TDD	860. A Longitudinal Study of the Use of a\r\nTest-Driven Development Practice in\r\nIndustry\r\n\r\nby Julio Cesar Sanchez, Lauire Williams, E. Michael Maximilien\r\n404. Automated Recognition of Test-Driven\r\nDevelopment with Zorro\r\n\r\nby Philip Johnson, Hongbing Kou	Other	Session	2007
20070559	SUCCEEDING WITH AGILE IN THE US FEDERAL GOVERNMENT ARENA	The ways of federal government program procurement and management are \r\nanything \r\nbut Agile.  But Washington is experiencing a heightened awareness and \r\nacceptance of Agile thinking of late and some programs are already \r\nexperimenting with Agile methods.   The current national security situation is \r\none that calls for new levels of flexibility, discovery, and early delivery of \r\nfunctionality.  In this workshop, we will leverage the experience of the group \r\nto uncover key challenges and solutions to how Agile techniques can or have \r\nbeen successfully used in the Federal contracting arena.   Likely topics \r\ninclude how Agile might impact CMMI, EVM, ITIL, Milestone/Phase Deliveries, \r\nContracts, Subcontractor Management, etc.	Leadership	Discovery Session	2007
20070783	The Gentle Art of Pair Programming	The presenters build upon their experience as software professionals and the\r\npair programming practices employed at Oxygen Media, the first and only cable\r\nNetwork owned and operated by women, to teach The Gentle Art of Pair\r\nProgramming.  This tutorial will cover the basic principles of pair programming,\r\nwhy it is a worthwhile practice and how to get started.  Discussion will include\r\nhow to take full advantage of pairing and how to cope with its challenges. For\r\nthose new to pair programming, this will serve as a good introduction and\r\ninclude concrete first steps. For those already in a pairing environment, this\r\npresentation will include new viewpoints and interesting discussions on familiar\r\ntopics. Additionally, everyone will benefit from the interactive and fun games\r\nfor improving and enhancing communication skills. Being women in a male\r\ndominated profession gives the presenters unique perspectives and insights into\r\npairing which they are eager to share in passionate and exciting ways.	Developing	Tutorial	2007
20070641	The Growth of an Agile Coach Community at a Fortune 200 Company	â€œNever doubt that a small group of thoughtful citizens can change the world. \r\nIndeed, it is the only thing that ever hasâ€   - Margaret Mead\r\n\r\n  As with leading through any change, adopting Agile takes perseverance, \r\ncontinued reinforcement, and courage.  Agile Coaches at Capital One have been \r\nable to draw on these requirements for change from a community that emerged as \r\npart of our Agile adoption.  The concept of a community was new to Capital One \r\nand at first, no one truly knew what it meant nor what role each of us played \r\nin being part of the community.  However, over time our Agile Coach community \r\nhas grown into an influential body of change agents across the organization \r\nthat routinely self-organize to address team or organizational initiatives to \r\nsustain the change that Agile has started.  By creating an environment where \r\ntrue community can exist and grow, you will add an element of sustainability \r\nto your Agile adoption and enable continuous innovation for practices and \r\nprinciples.	Leadership	Experience Report	2007
20070789	The Secret Sauce in Ruby: Metaprogramming	Why is everyone so excited about Ruby, Ruby on Rails, and RSpec? It is\r\nbecause they are highly-productively environments that get the job done quickly\r\nand elegantly. A big reason for this productivity comes from the metaprogramming\r\nfacilities in Ruby.\r\nUsing presentations and hands-on exercises, this session will teach you how\r\nRuby's metaprogramming tools are used in Ruby on Rails and RSpec and how you can\r\nharness these tools for your own projects. Even if you are programming in other\r\nlanguages, you will gain a new perspective on how metaprogramming helps create\r\nsoftware quickly and efficiently.	Developing	Workshop	2007
20070736	XP and Junior Developers: 7 Mistakes (and how to avoid them)	In two years of leading agile projects at Avanade, an organization heavy in\r\nrecent college hires, I've learned a number of lessons about how to be\r\nsuccessful with junior developers on an agile team. Indeed, my most successful\r\nteam has been my most junior. \r\n\r\nI discovered that my biggest mistakes with junior teams were related to\r\npartially adopting XP. Where a senior team, by virtue of its experience, can\r\nadapt to replace missing XP practices, a junior team reveals the extent to which\r\nthe XP practices form a whole and are best adopted together.	Other	Experience Report	2007
20060282	Speed Boats & Jacuzzis: Innovation Games(sm) For Customer Understanding	Modern product development practices, especially those that focus on innovative products and services, place great emphasis on having development teams work directly with customers. This is good news, for the foundation of innovation is a genuine understanding of your customers. This tutorial tackles the challenge of developing customer understanding head on by providing you with a fresh perspective on how to use a variety of games with your customers to develop the understanding you need to create innovative, successful products and services. You'll find that if you use them, you'll come to understand what your customers really want. You'll have fun doing it. Perhaps more importantly, they'll have fun doing it.	Tutorials	Tutorial	2006
20071029	XR06: Growing People & Teams	The Growth of an Agile Coach Community at a\r\nFortune 200 Company\r\n\r\nby Chris Doss and Kara Silva\r\nAgilitizing your Waterfall\r\n\r\nby Rich Jochems and Shane Rodgers\r\nXP and Junior Developers: 7 Mistakes (and\r\nhow to avoid \r\nthem)\r\n\r\nby Richard Lawrence	Other	Session	2007
20070567	Agile Development Using a Functional Language	Languages based on object oriented design and development have dominated the\r\nAgile landscape for quite a while.  Functional languages like F#, OCaml, and\r\nHaskell, however, are growing in popularity and lend themselves very well to Agile\r\ndevelopment.  Basic language constructs like strong typing with type inference,\r\nfirst-level functions, and immutable data elements work well with the basic\r\nconcepts behind an Agile style of coding.  This interactive demonstration will\r\nintroduce the OCaml or F# programming language and then illustrate the ways that\r\nfunctional languages align with Agile by building a small application.	Developing	Workshop	2007
20070722	Agile: Adopting a new Methodology at Harvard Business School	Project Background\n\nImagine turning an entire organization of over 100 IT professionals trained to\nmeasure twice and cut once, on its ear. Since its inception in 1996, the\nInformation Technology Group at the Harvard Business School (HBS) used the\nWaterfall method of project management. With a continually growing portfolio of\nprojects and a fixed capacity, team members were pulled into up to ten different\nprojects at a time, making it difficult to keep up with the demands of new\nproject work while maintaining over one hundred and fifty applications in\nproduction. Since team compositions were continually morphing depending on who\nhad available time, it was difficult to transfer knowledge from one project to\nanother. Moreover, little thought was given to commonality of code; therefore\nreuse of valuable code was negligible at best. This very busy schedule, along\nwith a huge demand for more products, made pleasing our partners[1] very\ndifficult. Best summed up by a fellow team member, our partners just expect our\nprojects to be late.	Other	Experience Report	2007
20070959	Can Agile Improve Employee Engagement?	Through extensive research, The Gallup Organization has discovered how\r\nemployee engagement positively correlates to business success and has identified\r\n12 items that accurately measure employee engagement. These engaged employees\r\nand workgroups look a lot like Agile's empowered, self-directed teams.\r\nHow do the best managers engage their teams? Managers can view the 12 items,\r\nknown as the Q12(TM), as a management framework for ways to drive engagement in\r\none-on-one or team interactions. These Q12(TM) management best practices align\r\nclosely with the principles and practices of Agile, particularly the paradigm\r\nshift from command-and-control project manager to servant-leader. Potentially,\r\nAgile adoption leads to better engaged teams, who in turn produce better\r\nresults.\r\nIn this workshop, we will explore Gallup's employee engagement research,\r\nassess participants' engagement, and begin to theorize about the relationship\r\nbetween engagement and level of Agile adoption. Small group discussion will\r\nallow participants to apply these concepts to their own teams. We will compile a\r\nset of participants' recommendations for Agile teams building the empowerment,\r\nservant-leadership, and trust needed to be successful at delivering value-driven\r\nsoftware.	Individuals & Teams	Discovery Session	2007
20070649	Clean Code 2: Craftsmanship and Professionalism	What kind of code do professionals write?  What are the attributes of a\r\nprofessional software craftsman?  In the face of pressure, how do professionals\r\npractice their craft and maintain their professionalism?  \r\n\r\nThis is a talk about code, and there will be a lot of code on the screen.  We\r\nwill study what makes code clean, and how clean code can be crafted.  But this\r\nis also a talk about behavior, attitude, and professional ethics.  A craftsman\r\nis not just someone who knows how to write clean code.  A craftsman has a set of\r\nvalues and principles that guide his/her practice and behavior.  Writing clean\r\ncode is a matter of both skill and character.  This talk studies both.	Developing	Tutorial	2007
20070645	Does the XP environment meet the motivational needs of the Software Developer? An Empirical Study	This paper examines how XP practice meets the motivational needs of software\ndevelopers. Interactions with peers have been identified by others as one\npotential area of (de)motivation but little detail is known. The nature of this\nmotivator, as expressed by software developers themselves, was explored through\nsemi-structured interviews with a high maturity high performing team working on\nsafety critical software applications in a traditional environment. From these\ninterviews, we have identified seven themes which are characteristic indicators\nof peer motivation. We interrogate observational data from five mature XP teams\nto consider whether and how these characteristic indicators are present in an XP\nenvironment. Initial findings indicate that XP provides supportive conditions\nfor nurturing and motivating software developers. However, there are also some\naspects of XP that are less supportive.	Other	Research Paper	2007
20070893	Escaping Legacy: The Good, The Bad, and the Ugly	Teams always have to deal with legacy systems, and some good books have recently\r\nemerged about dealing with them. But at some point, the organization gets hungry\r\nfor the design freedom -- the agility that comes with new code. Then\r\ndiscussion turns to building a new system.\r\n\r\nThis often ends in tears. Instead of exciting new functionality flowing out\r\nfaster than before, a massively expensive effort goes into rebuilding\r\nfunctionality that already existed. New capabilities actually stop coming out.(Bad!)\r\n\r\nThere are other ways to approach the problem, utilizing the existing assets\r\nwithin the legacy while selectively enabling fresh development within\r\nstrategically chosen areas.(Good!)\r\n\r\nThis involves pragmatic compromises in the design and sometimes complex\r\nintegration code. (Ugly!) But the result can be to provide the organization with\r\nreal value, in the short term, drawing stakeholders in, while making development\r\nwork much more satisfying.\r\n\r\nThe context-mapping and strategic distillation techniques of domain-driven\r\ndesign provide a view that guides decision making and communicates the resulting\r\nproject vision.	Other	Tutorial	2007
20070944	Get Your Agile Freak On!	Few businesses are more volatile than the internet; few markets as fiercely\r\ncontested as the still-emerging, passion-inducing and fast-paced world of\r\ndigital music.  What better opportunity, therefore, to apply agile principles as\r\na means of delivering maximum value to a mass market while embracing chaotic change?\r\nYet the elements that made Yahoo! Music cry out for an agile approach also\r\npresented major stumbling blocks â€“ not least the challenge of harnessing teams\r\nand technology obtained by serial acquisition, with competing passions,\r\nperspectives and technical expertise.  Ultimately the team was able to face and\r\novercome these challenges by unifying around an increasingly agile business\r\nphilosophy that addresses not only software development, but the entire Music\r\norganization. \r\nIn this experience report, the lessons of agile adoption at Yahoo! Music are\r\nconsidered, applied and finally distilled into a set of general principles that\r\nwe hope might inspire other teams to get their agile freak on!	Other	Experience Report	2007
20070977	Introduction to Refactoring & Evolutionary Design	Agile Methodologies push teams and individuals to alter the balance between\r\nup-front and incremental design.  Being able to evolve the design and\r\narchitecture of a system as the code is written is an essential skill in agile\r\nsoftware development.  This session will introduce the complimentary concepts of\r\nrefactoring and evolutionary design.  You will learn how to do "just enough"\r\ndesign at each step of the process.  You will appreciate how working in small\r\nincrements with immediate feedback from the code improves your ability to design\r\nrobust, well-factored, maintainable software.	Developing	Beginners Program	2007
20070444	LS2: The Agile Enterprise: Real World Experience in Creating Agile Companies	Creating a successful Scrum team is only the first step on the road to an Agile\r\ncompany. In most enterprises today, you must create a successful product\r\nportfolio delivered by distributed/outsourced teams. Even then, to win in a\r\nmarket segment, an Agile approach to the enterprise product strategy is needed\r\nto dramatically improve opportunity for success. How to implement an Enterprise\r\nType C Scrum will be discussed along with challenges and solutions from several\r\ncompanies currently running an enterprise Scrum with emergent product strategies\r\nand dynamic, iterative changes in company direction at the senior management\r\nlevel to achieve\r\ndeep penetration of a market sweet spot.	Leadership	Leadership Symposium	2007
20070749	Planning Is Good For You - Really! (Backlogs & Burn-downs for Project Planning)	Abstract:\t\t\r\nSoftware developmentâ€™s unpredictable, non-linear, complex and creative nature \r\nhas overwhelmed our ability to manage it with traditional defined process \r\nmanagement (waterfall, plan-driven) techniques.  Software development is more \r\nnaturally suited to empirical process management techniques such as those \r\ndescribed by Agile Software Development. \r\nThis tutorial explains a technique for scheduling, tracking, and re-planning \r\nthat fits the iterative, rapidly changing world of software development \r\nprojects. We will start with a basic explanation of Backlogs and Burn-downs, \r\nthe mechanisms of planning and tracking, and then get into details that show \r\nhow they work on real projects, helping manage real situations.	Customer	Tutorial	2007
20070991	Session RP2: Social Aspects of Agile Teams	627. The Social Nature of Agile Teams\r\n\r\nby Elizabeth Whitworth, Robert Biddle\r\n645. Does the XP environment meet the\r\nmotivational needs of the Software\r\nDeveloper? An Empirical Study\r\n\r\nby Sarah Beecham, Helen Sharp, Nathan Baddoo, Tracy Hall, Hugh Robinson	Other	Session	2007
20070543	Simple Steps toward Excellence	Do you feel that your project isn't getting all the benefits of Agile?\r\n\r\nDo things seem awkward, slow, difficult?\r\n\r\nAre you tempted to improve your process by adding elements, but concerned about\r\nadding complexity?\r\n\r\nLet's talk about improving our processes while making them simpler.	Process Improvement	Talking Head	2007
20070932	Successful Integration of Agile Development Techniques within DISA	The Department of Defense (DoD) and the Defense Information Systems Agency\r\n(DISA) have historically operated on 18-36 months release cycles for major IT\r\nprojects. DISA is now striving towards delivering smaller components in 30-60-90\r\nday release cycles. This presentation discusses Pragmaticsâ€™ successful\r\nimplementation of agile development techniques into a non-agile shop, our\r\nintroduction of agile development techniques to DISA to help them achieve their\r\ngoal of delivering high quality software on shorter release cycles, and our\r\nlessons learned along the way.	Other	Experience Report	2007
20070627	The Social Nature of Agile Teams	Agile methodologies represent a 'people' centered approach to delivering\r\nsoftware. This paper investigates the social processes that contribute to their\r\nsuccess. Qualitative grounded theory was used to explore socio-psychological\r\nexperiences in agile teams, where agile teams were viewed as complex adaptive\r\nsocio-technical systems. Advances in systems theory suggest that human agency\r\nchanges the nature of a system and how it should be studied. In particular,\r\nend-goals and positive sources of motivation, such as pride, become important.\r\nResearch included the questions: How do agile practices structure and mediate\r\nthe experience of individuals developing software? And in particular, how do\r\nagile practices mediate the interaction between individuals and the team as a\r\nwhole? Results support an understanding of how social identity and collective\r\neffort are supported by agile methods.	Other	Research Paper	2007
20071030	XR07: Adoption Stories part 2	Get Your Agile Freak On!\r\n\r\nby Gordon Cloke\r\nAgile: Adopting a new Methodology at Harvard \r\nBusiness School\r\n\r\nby Sarah E Oliveira, Susan Borges and Jennifer Gilmore\r\nSuccessful Integration of Agile Development\r\nTechniques within DISA\r\n\r\nby Sean Cohan	Other	Session	2007
20070947	Project Portfolio Management in the Agile Enterprise	Agile software development approaches have provided teams and organizations \r\ngreat guidance on how to deliver working software in a much more effective \r\nmanner.  Many organizations have adopted this guidance to great success on \r\nsingle projects, or even across multiple initiatives.  While much has been \r\nwritten and discussed about how to develop software using agile techniques, \r\nthere seems to be a dearth of information on how to pick what projects should \r\nbe pursued in the first place, which can play just as big a factor into the \r\nsuccess of the organization.\r\n\r\nThis panel will gather together four practitioners who have had experience \r\nwith project portfolio management.  They may not have all of the answers, but \r\nthe information they can share will provide the audience with some insight \r\ninto what works and what doesn't when trying to decide which projects to \r\npursue in the first place, and how to monitor their progress in an agile \r\nmanner.	Customer	Leadership Symposium	2007
20071064	"But it's not on the Project Plan!", Agile for PMI PMs	This introductory session is aimed at traditional PMI project managers who \r\nwould like to learn how  traditional and agile project approaches map and \r\nconflict.\r\n\r\nWhile the end goal of traditional and agile projects are largely the same\r\n(successful projects, happy stakeholders) the routes that each approach takes \r\nto get there varies considerably. This presentation explains agile terminology \r\nin plain English and introduces leadership principles as the common ground for\r\nbridging the traditional to agile divide. \r\n\r\nAdopting agile methods does not mean giving up valid estimating, planning, and\r\nprogress reporting techniques; instead it means considering some smart\r\nalternatives to these important tasks. Learn how agile addresses the PMI \r\nprocess areas and offers some great new tools for your project management \r\ntoolkit.	Management	Beginners Program	2007
20070770	Agile Adoption AntiPatterns	The anti-patterns that will be discussed in the proposed workshop describe\r\nproblematic solutions to challenges encountered by teams applying agile software\r\ndevelopment methods for the first time (or one of the first times). These\r\nanti-patterns provide early warnings that the organization or team does not\r\nfully understand the values and principles underlying agile methods, as\r\ndescribed in the Agile Manifesto. The refactored solutions provide a suitable\r\nintervention.\r\nI would like to conduct this Discovery Session as a workshop suitable for\r\npractitioners of all experience levels. In the first hour, I'll introduce the\r\ntopic and share in an interactive discussion the anti-patterns I've documented\r\nworking with teams new to XP, Scrum, and RUP over the past few years. In the\r\nremaining two hours, participants can share their stories of failed or\r\nchallenged attempts to adopt agile methods. We will look for recurring themes in\r\nthese stories and document them using an anti-pattern template (discussed in the\r\nattached presentation). The output of the session will be a collection of\r\nanti-patterns suitable for publication to the larger software community.	Leadership	Discovery Session	2007
20060302	The Planning Game	This course will use the release planning game to explore various project planning strategies. The game is played in small groups of approximately four players. Both programmers and customers may play, in any combination. In each cycle of the game, the players plan and "implement" a product. Each time through, they learn some new lessons enabling them to plan and implement better next time. Scoring is based upon each team's total return on investment.	Tutorials	Tutorial	2006
20070468	Agile Blending: How to be a methodologist not a methodist!	It is rare to come across a team that are following an agile software method\r\nexactly as described in books. Most teams come up with their own blend of agile\r\npractices that works for their unique situation.\r\nThis talk provides a guide to Agile Blending. Highlighting what's on offer in\r\nthe different agile methods, where different agile practices add value and how\r\nto go about folding them into your current approach.\r\nThe advice in this talk is based on experiences coaching a variety of\r\norganizations combining techniques from XP, Scrum, Lean and DSDM.	Process	Talking Head	2007
20083715	Punctuated Continuity: Using Ritual and Ceremony to Avoid Process Fatigue	<div class="content">\n    <p>Agile methods like Scrum and XP involve repetitive meetings and actions that can become routine and lose freshness, challenge and novelty. How do we put “heart” into agile processes? How can team members inject variety or even whimsy into what they do every day? What are effective ways to “punctuate” agile routines? And what exactly is “Haiku-Driven Development (HDD)”? In this workshop, we’ll review actual experiences with teams practicing XP and Scrum, and provide examples of how teams avoided having agile processes become more albatross than aid.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I’ve experimented with this topic a number of times, in venues small and large, and drew interest from a number of “thought leaders” who encouraged me to develop it further. And so I have. Almost everyone I’ve talked to contributes their own stories and experiences of what worked and what didn’t. I’m excited about hearing about those, discussing them with practitioners, and then producing something article- or paper-like that can be a continuing resource for the agile community.</p>\n\n<p>So I’ll start with a non-PowerPointy presentation describing what I’ve experienced and gathered to date, then segue into an exercise that helps the group discover a thing or two that might work for punctuating the session itself — or maybe I’ll do those things in reverse order, or stick the exercise into the middle of the presentation. That’ll take 30 to 45 minutes, based on past experience with this material.</p>\n\n<p>Then we’ll work on the more workshoppy part of things, learning how to create then collaboratively creating haiku that offer insights or observations on agile practices and problems, in the style of the famous computer haiku that have circulated around the Net for years:</p>\n\n<p>A file that big?\n<br />\nIt might be very useful.\n<br />\nBut now it is gone.</p>\n\n<p>The Web site you seek\n<br />\nCan not be located but\n<br />\nCountless more exist.</p>\n\n<p>Here’s a fantastic example, culled from a version of this session given at the Sprint 2008 Scrum Gathering:</p>\n\n<p>Thirteen point story.\nSprint ends; story still not done.\nThirteen points too big.</p>\n\n<p>(author unknown, but being sought — contact me and claim authorship, please!)</p>\n\n<p>We’ll gather the results of the session and publish them, in Wiki and maybe even booklet form (credit for that idea going to Jean Tabaka, my muse in this endeavor). At the end of our time, we’ll all have ideas and inspiration on how we can help our teams find freshness in their methods. Attendees will walk away from this talk asking “I wonder if we could do that?” and with some techniques for helping their team find out what might work for them.</p>\n\n<p>The talk consists of some examples of what teams have found to work for them, but then discusses how each team is different, and suggests ways a team can discover their own approaches. Sure, you could say “what would make this more fun for you?” but it’s been my experience that  many teams don’t <em>know</em> what that might be (beyond, maybe, having planning sessions in a bar… ;-) )</p>\n\n<p>Some examples: </p>\n\n<ul><li><p>I worked with an XP team that, for their own reasons, wanted to track the “actual” time they spent on a story and compare it to the “ideal” time — but they kept forgetting to write down when they started a story. (As a poster elsewhere commented, yes, this is pretty much a pointless pursuit, but it was Mostly Harmless — I was sure that the practice would die out once the team realized that it didn’t produce any value). This came up in standup, and we wondered if there was some ritual or habit that might cause the devs to remember to write down the time. Our IT guy, standing off to the side, jokingly suggested, “Well, you could write a haiku.” Everyone laughed. But later that day, the suggestion took root, devs wrote haiku before starting a story and didn’t miss writing down start times anymore. This turned out to have some unexpected, positive side-effects as well, one of which was that the CEO started regularly finding time in her schedule to listen to the team’s review of stories so that she could hear them read the haiku!</p></li>\n<li><p>Planning meetings had turned into slogs that, while producing a good set of stories for the iteration, ended “with a whimper.” Much of the team shared an interest in Zen and Eastern ritual; on a lark, the customer proxy started presenting the set of chosen stories to the team with a miniature ceremony, with a representative of the team accepting the stories. From that grew a ritual of offering along with the user stories a choice of Zen stories, which were then read and reflected upon. We managed to turn a “petering out” ending into an end that had the team leaving with smile and thoughtfulness.</p></li>\n</ul><p>There are a lot more, of course, and I hope to gather even more at this session, along with presenting ideas on how a team can discover or stumble upon its own rituals, instead of having them imposed by a well-meaning Scrum master or team member.</p>\n\n<p>So the point of the talk is not “try these things and your team will be happier” — it’s “here are things that worked for some teams, and how we discovered them; here are some hints on how to stumble on what you don’t know you’re looking for!”</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Workshop	2008
20091097	What is an Agile Project Manager anyway?	Project Managers comprise the single largest category of agile practitioners that are actively engaged in the industry (18%). However, there is no clear consensus on the role of project manager within the Agile community.  Viewpoints range from:\nâ€¢ The PM is complete waste. \nâ€¢ The PM is a necessary part-time helper.\nâ€¢ The PM is a crucial communicator and facilitator.\n\nSo who's right? This interactive session will seek to address these questions about who is good, who is bad, why they are, and who says so.	Leadership & Teams	Clinic	2009
20070585	Agile Development Iterations and UI Design	Many agile projects require user interaction (UI) design, but the\r\n  integration of UI design into agile development is not well\r\n  understood.  This is because both agile development and UI design\r\n  are iterative --- but while agile methods iterate on code with\r\n  iterations lasting weeks, UI designs typically iterate only on the\r\n  user interface using low technology prototypes with iterations\r\n  lasting hours or days. Similarly, both agile development and UI\r\n  design emphasise testing, but agile development involves automated\r\n  code testing, while UI must done by expert inspectors or ideally\r\n  potential. We report on a qualitative grounded theory study of real\r\n  agile projects involving significant UI design.  The key results\r\n  from our study are that agile iterations facilitates usability\r\n  testing; allows software developers to incorporate results of those\r\n  tests into subsequent iterations; and crucially, can significantly\r\n  improve the quality of the relationship between UI designers and\r\n  software developers.	Customer	Research Paper	2007
20070706	Agile Principles as a Leadership Value System: How Agile Memes Survive and Thrive in a Corporate IT Culture	What agile approaches are effective to introduce and sustain meaningful change \r\nin an IT organization? How can agile approaches be leveraged beyond project \r\nwork? What processes are involved in introducing agile approaches into an \r\norganization, and how might a leader become more agile in adopting agile \r\napproaches?\r\n\r\n\r\nDTE Energy's Information Technology Services (ITS) organization continues to \r\nembrace and extend the agile mindset throughout its culture. Our organization \r\nfirst embraced agility eight years ago, and we continue to refine our agile \r\nmethodologies as we deliver and support world-class business solutions.  The \r\nmore we apply agile methods to our project work, the more we find them to be of \r\nvalue to leadership as well as operational work.\r\n\r\n\r\nIn this report we discuss our experiences applying agile methods outside of \r\nsoftware development projects in a broader context of operational work and \r\norganizational leadership. We assert that agile principals and techniques \r\nassociated with software development projects can be readily applied in other \r\ntypes of organizational work and in creating and sustaining an effective \r\nleadership culture.	Leadership	Tutorial	2007
20070698	Are your tests really driving your development?	Everybody knows that TDD stands for Test Driven Development. Too often, \r\nhowever, people \r\nconcentrate on the words Test and Development and don't \r\nconsider the what \r\nthe word Driven implies. For tests to drive development they must do \r\nmore than just test \r\nthat code performs its required functionality: they must express that \r\nrequirement to the reader.\r\n\r\nTests that are not written with their role as specifications in mind can be \r\nvery confusing to read, \r\nwhich inhibits the team's ability to change the code. In this session, \r\nattendees will explore the experience \r\nof understanding and writing tests for code.	Developing	Discovery Session	2007
20070565	Coaching 101: A Role-Playing Session	The role of coach is an important one on a software development team that is\r\ntrying to adopt or improve their use of agile practices.  The coach's job is to\r\nteach new skills, offer encouragement, and provide feedback to team members as\r\nthey experiment with new ways of working.  But being an effective coach is\r\ndifficult, whether you are an external consultant, a project leader, or just a\r\nteam member acting the part.  How can you influence change and behavior without\r\nnecessarily having the specific authority to do so?\r\n\r\nThis discovery session allows participants to practice the "softer skills" that\r\nare essential in being an effective coach.  It consists of a series of\r\nrole-playing exercises in which participants struggle to decide what coaching\r\ninterventions (if any) would be most effective in a variety of situations.  In a\r\nsafe environment, participants can both give and receive feedback on their\r\ncoaching style, using actual scenarios encountered by Digital Focus coaches\r\nworking with new agile teams.	Leadership	Discovery Session	2007
20070493	Embedded Agile - Issues and Practices - Continued	At Agile 2006 a Discovery Session was held on the adoption of Agile techniques \r\nin the Embedded Software community.  The group discussed and delivered a \r\nprioritized list of issues that challenge adoption of Agile in the embedded \r\nworld and a list of practices that are essential to successful use of Agile in \r\nthis highly challenging field.  This year's Discovery Session will build on \r\nlast year's work by probing in detail the top issues and practices identified \r\nlast year.	Developing	Discovery Session	2007
20071022	Enterprise Agile at Yahoo!	See the file.	Leadership	Tutorial	2007
20070832	Full-stack webapp testing with Selenium and Rails	Want to test your entire Web 2.0 app, from AJAX and DHTML through\r\nbrowser-rendered HTML into a live instance of your application and database?\r\nMost web testing frameworks have gaps in their coverage: JUnit and Test::Unit\r\nmiss the client frontend; JSUnit misses the server backend; web testing\r\nframeworks miss some or all of the JavaScript. With Selenium we have a framework\r\nthat can test the whole application, from browser-executed JavaScript, through a\r\nlive application backend, then back to assertions on browser-rendered DOM code.\r\nSelenium RC takes this further: since you write your tests in your application\r\nlanguage, your tests can do data setup and assertions based directly on\r\nserver-side domain objects that may be inaccessible or only partially accessible\r\nfrom the client side. On our teams we have used and developed a series of helper\r\nmethods and assertions that allow testing of AJAX and DHTML functions as well.\r\n\r\nIn this tutorial we outline the architecture of Selenium RC and walk through\r\ncode and examples illustrating how to do full-stack testing against a Ruby on\r\nRails application. All demos are live; all code is from working applications.	Testing	Tutorial	2007
20070678	Growing a Build Management System from Seed	Even organizations that purport to be Agile often try to solve configuration \r\nmanagement (CM) problems with big up-front design. For organizations just \r\ntrying to integrate agile practices into their waterfall process, it is almost \r\ninevitable to find a CM process that looks a lot like the SEIâ€™s model CM \r\nplan1. \r\nUnfortunately, both groups generally forget that CM is not the same thing as \r\ncontinuous integration. This paper will consider three projects, describing \r\ntheir CM systems, and their strengths and weaknesses in supporting continuous \r\nintegration. It will also show that a CM system should be built using agile \r\nprinciples and help promote those principles. Finally, it will argue that it \r\ntakes more than just a system of processes and software to make continuous \r\nintegration happen.	Other	Experience Report	2007
20091414	BDD clinic - the doctor is in	How's your Behaviour Driven Development? Healthy, sick or new-born? Drop in to the clinic at any point during the session and find out. Bring your code, tests, examples and scenarios in to the experts for a thorough check-up, diagnosis and prescription. We can give your code base a full going-over, from business value through unit tests, mocking, and code. Got problems? Not sure who to talk to? Just making sure everything's all right? Let us help!\n\nWe are able to work with Java, C# and Ruby, and will consider other species if you can describe them to us.	Developer Jam	Clinic	2009
20060313	A Canary in a Coal Mine	Why has top management started to really, really care about Scrum. Scrum	Main	Talk	2006
20070481	Integrating Personal Practices into a Development Process	It is critical that Agile processes be tuned by the team to fit the specific \r\nproject context.  If the team is just working from books, white papers, or \r\ntraining material, how can they ensure a shared vision of the actual process \r\nthey apply?  Do they have a shelf of books with each person told we do X and Y \r\nfrom this book, but not Z; instead of Z we do A and B from this other book, \r\nbut C would never work for us; and we have our own little technique of Q... \r\ntalk to Dave about that?\r\n\r\nThe notion will be introduced of breaking a process into interrelated chunks \r\n(like the Software \r\nProcess Engineering Metamodel or the description of Scrum here)\r\n with roles, work products, tasks, and guidance.\r\n\r\nAn exemplar process, OpenUP, \r\nwill be presented that provides a full process description that is lightweight \r\nand includes guidance on various agile techniques (e.g. TDD, Scrum-like \r\ntasking, agile estimation).\r\n\r\nThe combination of the notion of a process model and the OpenUP process will \r\nbe demonstrated in the process content authored with the open source Eclipse Process \r\nFramework Composer tool.\r\n\r\nAttendees will be invited to remark on quality practices they apply that are \r\nmissing in the process, or to argue that something is "wrong" in this process \r\nfor their context.  For example, one person might remark that Pair Programming \r\nis missing in the process while another person would argue that "Project \r\nManager" would never fly in their organization and the term "Team Lead" with a \r\ndescription more tuned for a Servant As Leader model should replace it.\r\n\r\nThe EPF Composer tool has a fill-in the blank model for method elements \r\nincluding roles, work products, tasks, guidance, etc.  In the session, paper \r\nforms will be available for attendees to describe a practice or edit existing \r\ncontent.\r\n\r\nThe instructor will select a handful of process updates from the group and \r\napply them to the process with the tool live resulting in an updated, \r\npublished process tailored for the needs of the attendees.\r\n\r\nThe EPF Composer tool and the OpenUP process library are available to \r\nattendees for free download under the Eclipse site.  After the session, Number \r\nSix will host a copy of the presentation used for the overview content as well \r\nas the process content imported from the attendees' ideas.	Process	Workshop	2007
20070833	ISO 9001 and Agile	Conventional thinking would conclude that agile and ISO must not be \r\ncompatible.  After all, ISO is often characterized as being heavy on process / \r\nheavy on documentation â€“ the opposite of agile.  Just as the assumption that \r\nagile is about no documentation is faulty, so are the assumptions that ISO \r\nneeds to be a burdensome process.  ISO 9001:2000 is not only compatible with \r\nagile, but can provide just enough structure to help ensure your agile \r\nprocesses are followed.\r\nThis paper describes how Primavera Systems, a developer of enterprise project \r\nmanagement software, established a Quality Management System (QMS) that was \r\naligned with ISO 9001 while still maintaining all of the benefits of its \r\nScrum / XP agile practices	Other	Experience Report	2007
20070670	Learning to Say No	Even though we're heavily involved in the agile community – a community \r\nthat\r\nstresses the importance of \r\na sustainable pace – we continue to witness both clients and colleagues\r\nstruggling with their workloads. \r\nWhether it's a desire to please, or a fear of being labeled as unhelpful, or\r\nsimply a passionate interest that \r\ndrives them, these bright and focused people consistently over-commit\r\nthemselves. This reoccurring \r\npattern of being unable or unwilling to say "no" goes against the values of\r\n"courage," "respect," and \r\n"openness" espoused by many agile methodologies. Let's figure out why we have\r\ntrouble saying "no" and \r\ncome up with ways that help us overcome our reticence to say "no".  The goal is\r\nto leave with ways to say \r\n"no" that leave us feeling safe, don't shut down conversation, and aren't \r\noffensive.	Customer	Discovery Session	2007
20071040	LS3/XR17: Leadership Symposium	706. Agile Principles as a Leadership Value\r\nSystem: How Agile Memes Survive and Thrive in a Corporate IT Culture\r\n\r\nby Steve Baker and Joseph Thomas\r\n948. Test Team\r\nIntegration in \r\nLarge-Scale Scrum Implementations\r\n\r\nby Shaun Bradshaw and Tony Brill\r\n1022. Enterprise Agile at Yahoo!\r\n\r\nby Gabrielle Benefield	Leadership	Leadership Symposium	2007
20071069	LS3: Agile Leadership Clinic	In this Discovery Clinic, leaders volunteer to describe case histories\r\nof stubborn impediments they've encountered while leading the way to an\r\nAgile enterprise. Groups of peers ask questions to thoroughly diagnose\r\nthe source of the impediments, bring new perspectives and experience to\r\nthe situation, then offer suggestions for moving toward recovery. We\r\ntime-box each individual Clinic diagnostic period to keep the session\r\nlively and to consider the maximum number of case histories.	Leadership	Tutorial	2007
20070605	Open Source Testing Tools to support Agile Development/Testing	Over the last few years, open source testing tools have become an important part\nof the agile practitionerâ€™s toolkit for both developers and testers alike: \n\nFor developers\n     ... Unit testing has become central to the way many developers write\n     software. A maintained suite of unit tests captures the system design in a\n     practical form, provides the best form of documentation for the system\n     classes, determines when each part of the system is complete, gives developers\n     confidence in their code and provides a basis for refactoring without\n     introducing errors.\n For testers\n     ... Budgets for expensive testing packages have been shrinking due to the\n     business driver for IT to provide more value for money. In addition, tools\n     which are foreign to developers sometimes hinder testing team acceptance\n     by developers. Also, given the rapid change of technology, proprietary\n     tools do not or are slow to support testing of the latest emerging\n     technologies. Proprietary tools also don't always focus on testing the\n     open source technologies being used by more and more developers. \nThis tutorial outlines some of the more popular open source tools for\ntesting traditional, web-oriented and component-oriented applications. The\ntopics related to testing Web Applications are applicable to .Net, PHP and\nother systems as well as Java-based web application servers and Java EE\nsystems.	Testing	Tutorial	2007
20070718	Requirements-Driven Workshops for Agile Projects: Essentials for Product, Release and Iteration Planning	Summary:  \r\n\r\nThis experience-based tutorial will share effective, time-tested practices for \r\nplanning, designing, and facilitating requirements-driven workshops for large \r\nagile projects.                                                        \r\nAbstract:                                                                      \r\n \r\n\r\nLearn how to use collaborative requirements workshops to smart start on your \r\nlarge agile projects. This tutorial teaches you how to use a series of \r\ninterwoven workshops - product roadmap, release roadmap and iteration \r\nworkshops - to provide just enough requirements-related information at the \r\nright time.\r\n\r\nRequirements are the foundation of all the software work of your agile project \r\nand drive all product development activities. Well-designed and well-run \r\nfacilitated requirements workshops are one of the best ways to overcome the \r\nmyriad of problems that arise from guessing which slice of the product to \r\nstart with, encountering extensive rework due to undetected architectural \r\ndependencies, and suffering from inadequate customer involvement. These \r\nworkshops reveal not just functional requirements, but also the quality \r\nattribute and technical infrastructure needs that are crucial to most large, \r\ncomplex products. These workshops actively engage customers early in the \r\nproject and provide a framework for making decisions about when and what to \r\nbuild. \r\n\r\nThe objective of this tutorial is to give you a toolkit of guidelines and \r\npractices, reinforced with brief practice sessions and group discussions that \r\nyou can apply to improve the quality of your product development efforts.	Customer	Tutorial	2007
20070425	Scrum and CMMI Level 5: The Magic Potion for Code Warriors	Projects combining agile methods with CMMI  are more successful in producing\r\nhigher quality software that more effectively meets customer needs at a faster\r\npace. Systematic Software Engineering works at CMMI level 5 and uses Lean\r\nproduct development as a driver for optimizing software processes. Valuable\r\nexperience has been gained by combining Agile practices from Scrum with CMMI.\r\n\r\nEarly pilot projects at Systematic showed productivity on Scrum teams almost\r\ntwice that of traditional teams. Other projects demonstrated a story based test\r\ndriven approach to software development reduced defects found during final test\r\nby 40%.\r\n\r\nWe assert that Scrum and CMMI together bring a more powerful combination of\r\nadaptability and predictability to the marketplace than either one alone and\r\nsuggest how other companies can combine them.	Other	Experience Report	2007
20070992	Session RP3: Agile Usability	585. Agile Development Iterations and UI\r\nDesign\r\n\r\nby Jennifer Ferreira, James Noble, Robert Biddle\r\n829. Towards Extreme(ly) Usable Software:\r\nExploring Tensions Between Usability\r\nand Agile Software Development\r\n\r\nby Jason Chong Lee, D. Scott McCrickard	Customer	Session	2007
20070830	Skills for the Agile Designer	What makes an agile designer effective? Agile designers need to quickly see \r\nthe essence of a problem, shape reasonable solutions, and communicate complex \r\nideas. When things don't exactly go according to plan, they must react, \r\nreadjust their thinking, and try again. This tutorial introduces several \r\ntechniques and vocabulary for articulating the nature of design problems and \r\ntheir solutions: Problem frames identify the "typical structure" of software \r\ntasks. Designer stories set the stage for collaborative design. Role \r\nstereotypes are useful for assigning or assessing object behaviors. Control \r\nstyles can help characterize and communicate control center designs. Trust \r\nregions can aid in spotting places where "defensive" programming is needed.\r\n\r\nSeasoned designers strike a balance. They know the difference between core and \r\nrevealing design tasks and plan accordingly. When unanticipated difficulties \r\ncrop, they adapt their work rhythms. Finally, we conclude by introducing \r\ndifferent forms of criticism and how to handle them on the spot so you can \r\nhold your own and even learn something instead of having a heated discussion.	Other	Tutorial	2007
20070635	Techniques for Understanding the Agile Customer	Agile techniques depend on accurate, continuous, timely customer feedback to\r\nkeep iterative development on track. But what if your system will serve an\r\nentire market? What if your customers are distributed around the globe? What if\r\nthey are too busy to devote focused time to your development effort? This\r\ntutorial introduces tried-and-true techniques for understanding customer needs\r\nand applying their feedback: Contextual Inquiry and Affinity Diagrams. The\r\ntutorial positions these techniques in the context of agile development,\r\nintroduces them, and provides hands-on practice. Attendees will leave with an\r\nawareness of the techniques and a basic understanding of how to run a Contextual\r\nInquiry session, how to build an Affinity, and how to use the understanding thus\r\ngained to guide an agile team.	Customer	Tutorial	2007
20070948	Test Team Integration in Large-Scale Scrum Implementations	Approximately two years ago, a major healthcare solutions provider made a \r\nstrategic decision to move all software development to the Scrum methodology \r\nfrom the waterfall SDLC.  While some areas of the IT organization were able to \r\nmake a relatively smooth migration to the new standards and procedures, the \r\nsheer size of the organization (over 1000 IT resources), created significant \r\nchallenges in terms of team integration, especially for the test team.  As a \r\nresult, the test organization commenced a project to assess the best course of \r\naction for fully integrating its resources into the Scrum projects.\r\n\r\nThis experience report will cover the results of that assessment and the \r\nlessons that any large organization can learn from their experience; \r\nprimarily that moving to an Agile development methodology is relatively easier \r\nfor the development team, and can be more difficult for other teams within the \r\nIT department.  Successfully integrating supporting teams, such as testers, \r\ninto the process may require alternative tactics prior to starting the \r\nAgile-based projects.	Leadership	Tutorial	2007
20070825	The Agile Maturity Map - A Goal Oriented Approach to Agile Improvement	Fulfilling the potential of Agile development depends on people truly wanting \r\nto change how they work. Transitioning to new methods of development is \r\nparticularly daunting in a large organization that already has a sizeable \r\nexisting code base and a broad set of existing customers. In our experience, \r\ndevelopment teams tend to reach a plateau implementing a subset of Agile \r\npractices, and those tend to be generally focused on the planning and \r\niterative aspects of Agile. This paper describes our experience in overcoming \r\nthe barriers to increasing the adoption of Agile practices. Drawing from Agile \r\nprinciples, we have developed an approach for improvement that enables teams \r\nto accelerate change, deepen their degree of understanding, and increase their \r\nsuccess in execution. We have found this helps teams to overcome the plateau \r\neffect.	Other	Experience Report	2007
20070829	Towards Extreme(ly) Usable Software: Exploring Tensions Between Usability and Agile Software Development	Design is an inherently multidisciplinary endeavor.  This raises the question of\r\nhow to develop systems in ways that can best leverage the perspectives,\r\npractices, and knowledge bases of these different areas. Agile software\r\ndevelopment and usability engineering both address important aspects of system\r\ndesign, but there are tensions between the methods that make them difficult to\r\nintegrate.  This work presents a development approach that draws from extreme\r\nprogramming (XP), a widely practiced agile software development process, and\r\nscenario-based design (SBD), an established usability engineering process.  It\r\ndescribes three key questions that need to be addressed for agile software\r\ndevelopment methods and usability engineering practices to work together\r\neffectively, and it introduces interface architectures and design\r\nrepresentations that can address these questions.	Customer	Research Paper	2007
20071031	XR08: Process Improvement	ISO 9001 and Agile\r\n\r\nby Bill McMichael\r\nThe Agile Maturity Map - A Goal Oriented\r\nApproach to Agile Improvement\r\n\r\nby Jay Packlick\r\nScrum and CMMI Level 5: The Magic Potion\r\nfor Code Warriors\r\n\r\nby Jeff Sutherland, Carsten Ruseng Jakobsen and Kent Johnson	Other	Session	2007
20071057	Lightning Talks	On Friday, the last day of the conference, we want to hear your opinion on\r\n*anything* agile. In this session, "Lightning Talks" will be presented, which\r\nwill last no more than 5 minutes. Power point is not allowed, only flip charts!\r\n\r\nPlease submit your proposal at the registration desk. Here is the final schedule:\r\n\r\n1. InfoQ for the agile community - Deb Hartmann\r\n\r\n2. Why Scrum works - Mark Levison\r\n\r\n3. Examples not definitions - Keith Braithwaite\r\n\r\n4. Recognition of the evolution of the agile model - Joe Arnold, Karl Scotland,\r\nDavid Anderson\r\n\r\n5. Planning naked - Arlo Belshee\r\n\r\n6. 200 agile principles, 50 square feet of carpet - Jim Shore\r\n\r\n7. Good software for good causes - Pam Rostal\r\n\r\n8. The unspoken problem - Brian Marick\r\n\r\n9. Types of customers - Askhat Urazbaev\r\n\r\n10. Learning is the bottleneck of software development? - Amr Elssamadisy	Other	Discovery Session	2007
20070347	'Talking the talk': Is intermediate-level conversation the key to the pair programming success story?	Pair programming claims to provide benefits over and above those offered by a \r\nprogrammer working \r\nalone. In particular, a number of studies have suggested that pair programming \r\nimproves software \r\nquality. The literature speculates that the â€˜driverâ€™ (the programmer currently \r\ntyping in the code) and \r\nâ€˜navigatorâ€™ work together in a complimentary manner, and that the nature of \r\nthese roles may be key in \r\nrealizing the reported benefits. Here we dispute two of these existing claims: \r\n(i) That the navigator \r\nproviding a â€˜continual reviewâ€™ of the driverâ€™s work and highlighting errors \r\n(i.e. acting as a reviewer); (ii) \r\nThat the navigator is focused on a higher level of abstraction that the driver \r\n(i.e. acting as a foreman). \r\n\t\r\nOur findings suggest that the key to the success of pair programming does not \r\nlie in the differences in \r\nbehaviour or focus between the driver and navigator. Rather, we suggest an \r\nalternative perspective (the \r\nâ€œtag teamâ€) and remark upon the proliferation of talk at an intermediate level \r\nof detail in pair \r\nprogrammersâ€™ conversations. This leads us to suggest that producing the type of \r\ntalk necessary to work \r\neffectively together may itself be fundamental in realizing the reported \r\nimprovements in software \r\nquality.	Other	Research Paper	2007
20070896	A Strategy for Balancing Business Value and Story Size	What would your Analyst team do when torn between meeting Customer versus \r\nDeveloper demands? When their needs conflict with one another, how do you \r\nappease them both? The report outlines the successful strategy one team used to \r\ndecompose their Stories to serve both the development team needs to demonstrate \r\nprogress as well as address Customer needs to see value.  Teams adopting Agile \r\nfor the first time in an enterprise environment will no doubt encounter these \r\nvery same challenges. Faced with similar start-up challenges on future \r\nprojects, with this decomposition strategy, teams will no longer have to make \r\nthe trade-off between business value and Story size; stories of happy \r\nCustomers, happy Developers and successful projects can still be told.	Customer	Experience Report	2007
20070738	Corporate Judo - Guerilla Tactics For Agile Transition	How do we become better change agents?\r\n\r\n\r\n\r\nIn the agile community we have all "seen the light." We know all the things \r\nthat are broken in traditional IT organizations. We also know all the \r\nsolutions. \r\n\r\n\r\n\r\nYet for some reason we are not very efficient at making the transition happen -\r\n and even when we manage to change things for the better the organizations \r\noften revert to their old ways when we leave.\r\n\r\n\r\n\r\nIn this workshop, we will work in groups and draw on our experience to \r\nidentify the best "corporate judo moves": those that make the agile change \r\nhappen, and make it stick.	Leadership	Discovery Session	2007
20070960	From Analyst to Owner	Oftentimes as a software development organization begins to adopt Agile \r\nmethods,\r\nthe organization doesn't know what to do with Business Analysts. Meanwhile, BAs\r\noften aren't sure what to do with themselves; a method that seems to throw out\r\ndetailed requirements specifications leaves BAs wondering what to do with their\r\ntalent for detailing requirements.  \r\nHowever, for many Business Analysts, Agile provides a perfect--and ultimately\r\nmore rewarding--role: Product Owner.  And many BAs will need to rethink their\r\nrole and their talents to succeed as Product Owner.  In some organizations, BAs\r\nsupport the Product Owner rather than holding that position themselves.\r\nIn this facilitated workshop heavy on exercises and discussion, we will explore\r\nhow BAs fit on an Agile team. We will discuss why BAs can make good POs, and\r\nwhat changes they should expect in their role. We will examine which skills and\r\ntalents that have served BAs can also serve them as POs. We will explore how \r\nBAs\r\nmight need to work differently within their organizations in order to succeed \r\nas\r\nan owner/customer.	Customer	Discovery Session	2007
20070554	From Waterfall to Agile - How does a QA team transition?	ChannelAdvisor has been developing software with a strict waterfall mentality \nfor several years.  Our testing cycle is broken up into distinct phases for \nfunctional, system and regression testing.  One phase did not start until the \nprevious one was completed.  One of our strengths has been our testing team.  \nThe entire team is a highly skilled group of automation testers using \ntraditional, expensive off the shelf automated testing software.  As we \nswitched over to agile development using the Scrum framework, we really \nstruggled with how to incorporate our traditional automated testing strategies \ninto the agile world.  Is testing in a waterfall project really that different \nthen testing in an agile project?  YES!	Testing	Experience Report	2007
20070483	Introduction to Continuous Integration	From Martin Fowler's frequently-quoted\r\narticle:\r\n\r\n\r\n\r\nContinuous Integration is a software development practice where members of a\r\nteam integrate their work frequently, usually each person integrates at least\r\ndaily - leading to multiple integrations per day. Each integration is verified\r\nby an automated build (including test) to detect integration errors as quickly\r\nas possible. Many teams find that this approach leads to significantly reduced\r\nintegration problems and allows a team to develop cohesive software more\r\nrapidly.\r\n\r\nContinuous Integration is one of the core development practices within agile\r\ndevelopment, and fortunately is typically a relatively simple one to setup.\r\n\r\nIn this session Mike Roberts will be drawing on 5 years of experience using\r\nand implementing Continuous Integration strategies to show you how you can add\r\nsuch a practice to your own development team.	Developing	Beginners Program	2007
20070423	LS4: The Role of Leadership in Software Development	When you look around, there are a lot of leaders recommended for software \r\ndevelopment.  We have the functional manager and the project manager, the \r\nscrum master and the black belt, the product owner and the customer-on-site, \r\nthe technical leader and the architect, the product manager and the chief \r\nengineer.  Clearly thatâ€™s too many leaders.  So how many leaders should there \r\nbe, what should they do, what shouldnâ€™t they do, and what skills do they \r\nneed?  \r\n\r\nThis will be a presentation and discussion of leadership roles in software \r\ndevelopment â€“ what works, what doesnâ€™t and why.	Leadership	Leadership Symposium	2007
20070993	Session RP4: Impact of Agile Practices	708. The Relationship between Customer\r\nCollaboration and Software Project Overruns\r\n\r\nby Kjetil Moløkken-Østvold, Kristian Marius Furulund\r\n347. 'Talking the talk': Is\r\nintermediate-level conversation the key to the pair\r\nprogramming success story?\r\n\r\nby Sallyann Freudenberg, Pablo Romero, Benedict du Boulay\r\n727. The Role of Incremental Change in\r\nAgile Software Processes\r\n\r\nby Neal A. Febbraro, Vaclav Rajlich	Other	Session	2007
20060335	Agile Factors	When a team sets out to apply agile software development on a project, there are a bunch of parameters and variables that need to be set. For example, how long will their development cycles be, when pair programming makes sense, who maintains tracking information, etc. This workshop aims to provide a guide to teams on topics that they will need to develop working agreements on and help team get clear about how they want to apply agile techniques.	Discovery Sessions	Workshop	2006
20070931	The Agile Release Testing Experience	Agile testing can be a big change for teams. We'll experience a quick tour of an\r\nAgile Release cycle from Release Planning all the way to Release Acceptance as\r\nviewed by the testing activities. Join Jean as we experience some of\r\nthe important activities for successful agile testing. We stop along the way to\r\ntalk about the differences in Agile Release planning over traditional. We'll\r\nexperience a Release Explorathon to get a taste of a great way to validate your\r\nquality process. We'll do an Iteration Planning session to see how stories and\r\ntasks apply to agile testing, and we'll look at Acceptance testing in the\r\nIteration Tracking & Acceptance stop. No Agile Release is complete without a\r\ncelebration - so we'll be sure to have a good one!	Testing	Beginners Program	2007
20070708	The Relationship between Customer Collaboration and Software Project Overruns	Most agile projects rely heavily on good collaboration with the customer in \r\norder to achieve project goals and avoid overruns. However, the role of the \r\ncustomer in software projects is not fully understood. Often, successful \r\nprojects are attributed to developer competence, while unsuccessful projects \r\nare attributed to customer incompetence. A study was conducted on eighteen of \r\nthe latest projects of a software contractor. Quantitative project data was \r\ncollected, and project managers interviewed, on several issues related to \r\nestimates, key project properties, and project outcome. It was found that in \r\nprojects where collaboration was facilitated by daily communication between the \r\ncontractor and the customer, they experienced a lesser magnitude of effort \r\noverruns. In addition, employing a contract that facilitates risk-sharing may \r\nalso have a positive impact.	Other	Research Paper	2007
20070727	The Role of Incremental Change in Agile Software Processes	This paper presents a model of incremental change that consists of concept\r\nlocation, impact analysis, actualization, change propagation, supporting\r\nrefactorings, and testing. Repeated incremental change is the foundation of an\r\nagile process called Concept-based Incremental Development (CID). A case study\r\nof a Point of Sale system illustrates the usefulness of CID. The paper argues\r\nthat CID complements those agile processes that concentrate on team and\r\nmanagement issues, and therefore can be combined with them.	Other	Research Paper	2007
20070563	The UCD Perspective: Before and After Agile	In the agile and user centered design (UCD) communities it is often believed \r\nthat agileâ€™s quick development cycles do not allow time to fully understand \r\nour userâ€™s needs. In my experience it is just the opposite: agile and UCD \r\nmethods are not at odds with each other. In fact, the iterative approach to \r\nagile is a natural fit for UCD. We are successfully demonstrating how adding \r\nadditional UCD teammates to the agile team can aid in upfront and continual \r\nuser input. This can easily be integrated into an agile project when itâ€™s \r\nplanned from the start.	Customer	Experience Report	2007
20071074	Welcome to DSDM Atern - the new Agile Project Delivery Framework from the DSDM Consortium	On-time and on-budget delivery of business change programmes and projects has\r\nnever been more vital. Since 1994, the DSDM Consortium has been at the forefront\r\nin developing processes which combat the common causes of project failure -\r\nthereby ensuring time, quality and cost targets are met. \r\n\r\nDSDM Atern is a new agile project delivery framework from the DSDM Consortium. \r\nIt is the culmination of practitioners' experiences, drawn from a wide range of\r\npublic and private sector projects over more that a decade. This unparalleled\r\nexpertise has resulted in a robust, but agile framework, which can be\r\nsuccessfully applied across a variety or organisation and project contexts.\r\n  \r\nAdded to this, Atern is now completely free to use in your own organisation - no\r\nneed to be a member - and the hyperlinked guidance manual is available on line\r\nat www.dsdm.org\r\n\r\nDot has been central to the construction of DSDM Atern and will share with you\r\nsome of the key aspects of this exciting new agile on-time delivery approach.	Customer	Beginners Program	2007
20071032	XR09: Supporting the Product Owner	A Strategy for Balancing Business Value and\r\nStory Size\r\n\r\nby Hai Ton\r\nThe UCD Perspective: Before and After Agile\r\n\r\nby Heather and Andrew Ferguson\r\nFrom Waterfall to Agile - How does a QA team \r\ntransition?\r\n\r\nby Megan Sumrell	Customer	Session	2007
20070967	A Case Study in the Agile Enterprise - How to take Agile to the Enterprise!	As the Agile conversation moves into the early adopters segment of the Steven \r\nMoore Technology adoption curve, it is crucial that we the supporters of the \r\nagile community ready agile for the Enterprise.  This talk will be a case \r\nstudy in what is required to insure the rapid and smooth adaptation of Agile \r\ninto the Enterprise, and overcome the fear that Agile is not scalable approach.\r\n\r\nTo date, Agile has been mostly a grass roots movement invigorated by \r\ndevelopers and the technical community, whish is used mostly on projects not \r\nas an Enterprise approach to IT delivery.  It has had success and has started \r\na movement that is gaining momentum but in order for Agile to become and \r\nEnterprise approach, it must first address the following:\r\nEnterprise Value Management and Portfolio Management\r\nBetter Adoption, Visibility and  Control at the Middle Management Layer\r\nA Compromised But Value Centric BA and SME Design and Requirements \r\nLayer\r\n\r\nIn order for the Agile approach to truly address the highest level of IT \r\nmanagement, it must be able to connect Agile software construction to IT Value \r\nDelivery and Portfolio management.  This discussion will explore two customers \r\nand provide a case study in how and why this is necessary for Enterprise \r\nAdoption.  Additionally, Agile must adopt a PMO and Project Management like \r\ncontrol structure to insure proper visibility to Project Management, Business \r\nAnalysis and Subject Matter Expert interfaces to the Agile value proposition.  \r\nAttendees should expect to receive real life case studies on how Agile can be \r\nscaled up to support and Enterprise wide IT Delivery model.	Enterprise Agile	Vendor Talk	2007
20060344	Do You Get What You Measure?	In this workshop, we will work with the audience to explore the use of metrics to influence the evolution of development teams in a genuinely agile approach to Software Process Improvement. We will experiment with a selection of established performance and quality metrics and test their design to see what kind of behaviours they might encourage when they're applied. We will also explore "gaming" of metrics by development teams to hit performance targets without achieving the desired effects, and try to propose changes to the design of each metric which might make it more robust.	Discovery Sessions	Workshop	2006
20070375	Adaptive Performance Management for Agile Enterprises	In a 2006 Cutter report, Helen Pukszta, wrote, â€œI recently asked a colleague\r\nwhether he would prefer to deliver a project somewhat late and overbudget but\r\nrich with business benefits or one that is on time and underbudget but of scant\r\nvalue to the business. He thought it was a tough call, and then went for the\r\non-time scenario. Delivering on time and within budget is part of his IT\r\ndepartment's performance metrics. Chasing after the elusive business value, over\r\nwhich he thought he had little control anyway, is not.â€\r\n\r\nIf we are ultimately to gain the benefits of agile project management and\r\ndevelopment, if we are ultimately to grow truly agile, innovative organizations,\r\nthen, as the above stories show, we will have to alter our performance\r\nmanagement systems. Having a â€œsystemâ€ that leads managers, and others, into\r\nvaluing â€œconformance to planâ€ while delivering â€œscant business valueâ€ will\r\nseriously impede agility, whether in projects or the entire enterprise.\r\nConforming to plans is a budget-driven mentalityâ€”a mentality in which the\r\nbudget, or plan, is sacrosanct. Never mind that the budget is months out of date\r\nand the competitive situation has changed three times since the budget was\r\ndeveloped. \r\n\r\nThis tutorial explores the concepts and practices of one solution to the\r\nâ€œconformance to planâ€ mentality at an enterprise level, an Adaptive Performance\r\nManagement System (APMS) that has two key objectives:\r\nÂ·\tTo focus any enterprise group (team, project team, department, division, or\r\ncompany) on a set of desired strategic or tactical outcomes.\r\nÂ·\tTo encourage those groups (project teams) to perform at a high level.\r\nTo make the transition from a few agile project teams in an organization to a\r\ntruly agile organization performance management systems must be overhauled. This\r\ntutorial addresses three measurement ideas critical to creating an adaptive\r\norganization: \r\nÂ·\tFirst, We must acknowledge that our performance measurement system impacts\r\nagility. \r\nÂ·\tSecond, We must alter our obsession with time to an obsession for customer value; \r\nÂ·\tThird, We must separate the project performance management system from the\r\nteam performance management system.\r\n\r\nThe tutorial looks at two conceptual bases on which to base this adaptive\r\nmeasurement systemâ€”Beyond Budgeting from Jeremy Hope and Robin Fraser and Rob\r\nAustinâ€™s views on performance measurement in organizations. Both have a\r\ndistinctly agile or adaptive perspective and both deal with measurement systems\r\nin general, not just software project management.\r\n\r\nIn Beyond Budgeting: How Managers Can Break Free from the Annual Performance\r\nTrap Jeremy Hope and Robin Fraser outline a measurement system, and in fact an\r\nadaptive, decentralized management style, that fits with an adaptive, agile\r\nenterprise. It is unrealistic to assume that agility at lower levels in the\r\norganization can be fully implemented without a change, at the very top of an\r\nenterprise, in how performance is measured. \r\n\r\nPerformance measurement and management has proven to be much more difficult than\r\npeople expect. Rob Austinâ€™s Measuring and Managing Performance in Organizations\r\n, a sobering look into why measurement systems can go so awry. Measurement\r\nâ€œsystemsâ€ are difficult, according to Austin, because â€œunlike mechanisms and\r\norganisms, organizations have subcomponents that realize they are being\r\nmeasured.â€ In his introduction, Austin states that â€œif there is a single message\r\nthat comes from this book, it is that trust, honesty, and good intentions are\r\nmore efficient in many social contexts than verification, guile, and\r\nself-interest.â€ It is the intentions of the managers who use the measurement\r\nsystems that ultimately determine its veracity.\r\n\r\nDrawing from the ideas from Hope, Fraser, and Austin, the four key guidelines\r\nfor the Adaptive Performance Measurement System will be presented and discussed\r\nduring the tutorial.\r\n\r\nThe tutorial will keep a focus on the two key APMS objectives: To focus any\r\nenterprise group (team, department, division, or company) on a set of desired\r\nstrategic outcomes; To encourage any enterprise group to perform at a high\r\nlevel. The presentation material and subsequent discussions should leave the\r\ntutorial participants with a lot of questions about their performance management\r\nsystems, and possibly a few answers also.	Leadership	Talking Head	2007
20070399	Making Process and People Congruent	Agile processes suggest that they work better if developers and customers have\nparticular characteristics, such as the capability to handle rapid change or to\npair program.  Members of an agile team cannot always be selected to insure that\nthey possess these capabilities.  The implementation of a process may need to be\nadapted so that team members can work effectively.  This workshop investigates\npeople issues that agile team members have faced and ways that those issues have\nbeen approached or could be approached to form a successful team.	Individuals & Teams	Discovery Session	2007
20070602	Agile Business Analysis	Those of us who regularly do Business Analysis are in a tough spot. The BA role\r\nis not widely understood or agreed-upon, and has few resources available to it.\r\nAdditionally, some Agile methodologies do not allow for a BA role in their\r\nworldview and/or hold a negative view of the BA role. \r\n\r\nThis session will be a hands-on mini-sprint workshop targeted at\r\ncompiling -- in real-time -- an "Agile Business Analysis" resource that will\r\naddress as many pain-points, lessons-learned, and unanswered-questions\r\nconcerning Agile Business Analysis as we can cover in 3 hours. Due to\r\ntime-constraints, the resource will likely be built "on the wall" during the\r\nworkshop - using sticky-notes, easel pads, markers, and static whiteboard sheets\r\n- then transferred to electronic form after the workshop, and posted online. \r\n\r\nIf you have pain-points, lessons-learned, unanswered-questions, and/or something\r\nelse useful to share regarding Agile Business Analysis, you are invited to join\r\nus. Feel free to attend the full workshop or only part of it -- whatever is\r\nuseful to you. \r\n\r\nAlso, if you have a laptop, books, print articles, or some other resource that\r\nwould be useful for finding answers to questions or issues raised, feel free to\r\nbring them to the workshop as well. \r\n\r\nIf you have questions before or after the session, feel free to contact this\r\nworkshop's "coach" at Thom W Vincent at Gmail.	Customer	Discovery Session	2007
20070692	Agile Rails Fest	The agile community has started to embrace rails as a complimentary technology\r\nfor its strong ethos of change adaptability.  The rails framework allows for\r\nfast development and fast changes to be made, all on top of an elegant language,\r\nruby.   \r\n\r\nWe want to provide a atmosphere for those rubyists to get together and\r\ncollaborate.  From the person who has just heard about ruby to the expert, the\r\nworkshop will provide interesting material for them all.\r\n\r\nHands on session will be the best format.  Anyone is free to stop in and write\r\nsome code with the participants or and expert ruby developer.  There will be an\r\napplication that will be developed throughout the course of the workshop, so\r\npeople coming into the workshop at any time can pick up a story card and start\r\ncoding.\r\n\r\nSpeakers\r\nMicah Martin â€“ Micah Martin is senior craftsman and founder of 8th Light, Inc. \r\nHe has been practicing Agile software development for over 6 years.  As a\r\nconsultant he has assisted many software teams in adopting Agile processes.  As\r\na mentor he has trained many individuals to become fluent in agile software\r\npractices.  Micah is co-creator and lead developer of FitNesse, an open source\r\nacceptance testing framework.  He has also been developing in Rails for the pas\r\nyear.\r\n\r\nPaul W Pagel â€“ Paul works for 8th Light Inc, and has been developing software\r\nfor two years, and apprenticed for three years before that at Object Mentor. \r\nHas actively worked on rails project and developed a system in ruby on rails, as\r\nwell as a few web sites.\r\n\r\n\r\nTime can be expanded for the entirety of the conference.	Developing	Workshop	2007
20070976	Agile Testing Practices:  What You Need to Know	What's the minimum you and your team need to know for successful agile testing?\r\n Come along on an "iteration in the life of an agile tester" and learn how your\r\nrole as tester will change, and the minimum you and your team must know about\r\nagile testing practices.  We'll look at the biggest testing challenges for agile\r\nteams, such as "keeping up" with short iterations, proactive ways to capture\r\nrequirements, knowing what types of testing to do when, what to automate and\r\nwhen, how much testing is enough, and how to continually improve your team's\r\ntesting success.  Janet Gregory and Lisa Crispin will share their extensive and\r\nvaried experiences helping testers make the transition to agile.  We'll reserve\r\ntime for Q&A, so bring along your testing-related problems and questions.	Testing	Beginners Program	2007
20070841	Agility and the Inconceivably Large	This report outlines the experiences of the Microsoft Visual Studio Tools for \r\nOffice product unit as it applied \r\nagile principles and practices while developing features for one of the \r\nlargest commercially available pieces of software in the world, Microsoft's \r\nVisual Studio development system. Scaling agile to very large projects has \r\nproven challenging because of the escalating coordination requirements between \r\nmany small teams. The product unit used the feature crew model to decouple \r\nindividual teams within the project. This allowed teams to operate in a more \r\nagile manner while still participating in a much larger undertaking.	Other	Experience Report	2007
20070592	Are we done yet? Team Velocity Game	The Team Velocity Game is a fun way to reinforce the concept of "done" in \r\nagile development.  As we play the game together, we will reinforce important \r\nconcepts around velocity, self-organizing teams, roles, time-boxed \r\ndevelopment, retrospectives, and doneness. Come participate, and learn how to \r\nanswer the question, "Are we done yet?"	Planning	Beginners Program	2007
20070842	Over the waterfall in a barrel - MS IT adventures in SCRUM	This paper will provide a look into how the software giant's IT shop is \r\norganically growing the adoption of SCRUM.  Focusing in on how one group of \r\nintrepid IT developers began with one small project and how their efforts are \r\ngrowing across MS IT.  We will address questions like can SCRUM live happily \r\nside by side with development teams married to Waterfall and can executive \r\nmanagement and demanding Business Unit customers accept their role as \r\nchickens?  We will cover how SCRUM is being introduced to our 2500+ developers, \r\nprogram managers and testers, how SCRUM is being sold to demanding management \r\nand others, and how the team handles the challenges of working across three \r\ncontinents and working with our vendor teams.  The unique challenges of working \r\nwith SOX compliance and other Security concerns will be addressed.	Other	Experience Report	2007
20070532	Scaling Testing in Scrum	Scrum has become one of the foremost Agile Methodologies used for scaling\r\nagility towards larger projects and teams with its hierarchical Scrum-of-Scrums\r\nmodel. However, there are challenges within the approach. One of the more\r\ncritical is guiding the testing effort as project size and complexity increases,\r\nparticularly for enterprise level projects. \r\n\r\nThis presentation will show you how to face some of these scaled testing\r\nchallenges including: handling legacy and non-green field projects, managing\r\ndistributed testing, integration testing of large-scale systems, coordinating\r\nwith multiple product owners, and successfully marrying traditional testing\r\nexpectations & techniques with those of the agile teams. Beyond this, we'll\r\nexplore strategies for traditional testers to successfully transform their\r\nskills and experience into their agile teams to make a high quality impact.	Developing	Tutorial	2007
20090266	How to be really awesome at Continuous Integration.	Continuous Integration is a key practice in the agile toolkit.  The practice is pretty simple - when checkins occur, some process is run against the codebase. This usually includes compilation and unit tests, but could include all sorts of things. \n\nThe panel of CI experts host discussion of the audience's problems, questions, concerns and ideas about how to make best use of CI.\n\nWe aim to draw together the experience of the panel with the enthusiasm and fresh eyes of the participants to share our collective CI knowledge with those having issues with their CI implementations. 	New to Agile	Clinic	2009
20070774	Are we missing the point?  User-Centered Design for Agile projects	We all know that Agile teams can produce high quality products quickly and\r\nefficiently.  But Agile provides no guarantee that the team is building the\r\nright product--a product that meets real user needs.   By combining\r\nuser-centered design techniques with key Agile methods, Gabrielle Benefield and\r\nAviva Rosenstein will show you how to improve your chances of producing high\r\nvalue products every time.  Theyâ€™ll reference real life projects and outline the\r\nproblems, solutions, and open issues they have experienced while applying these\r\nprinciples.	Customer	Tutorial	2007
20070610	CI for the Web 2.0 Guy (or Gal)	In this session, you will learn everything you need to set up a basic \r\nContinuous Integration (CI) system for your project, with a specific emphasis \r\non full-stack testing of "Web 2.0" apps.  It is a complete, comprehensive, \r\nhands-on, no-hand-waving tutorial \r\nshowing how to quickly create a CI environment that uses CruiseControl.rb to \r\nprovide automated testing \r\nfor Ruby on Rails (Test::Unit), Javascript (JSUnit), and Web UI (Selenium).  \r\nThe practices and tools used can be applied to multiple applications, languages \r\nand platforms.  There will not be a lot of in-depth details on how to use the \r\ntools - the emphasis will instead be on setting everything up from scratch and \r\nmaking it work together in an automated way.  A VMware Virtual \r\nMachine "sandbox" approach will be used to ensure maximum compatibility and \r\nportability, and VM images in various stages of completion will be provided to \r\ngive you a headstart and reference point.\r\n  \r\nEvery step and command is documented in detail in the \r\npresentation, so that you can easily create a similar system on your own for \r\nyour project after the conference - this includes screenshots of VMware and \r\nUbuntu \r\nLinux installation, URLs and commands for download and installation of all \r\ntools, etc.  The tools are \r\nfree, and will be available \r\nfor download from my website, and also on a limited number of USB/Firewire \r\ndrives before and during the presentation.  You are welcome to download and \r\ninstall the tools prior to the presentation, especially VMware.  This is a \r\nthree hour and thirty minute presentation, with a break.  We will attempt to \r\nquickly complete the presentation and live demo in the first half with minimal \r\nquestions.  The remainder of the time (and lunch too, if you wish) will be \r\ndevoted to breaking out into pairs, completing the tutorial, answering \r\nquestions, and providing individual assistance.  The presentation and all \r\nmaterials are available at  \r\nhttp://thewoolleyweb.com/ci_for_the_web_2.0_guy_or_gal/	Developing	Tutorial	2007
20070956	Coder's Dojo: Acceptance Test-Driven Development in Python	The Coder's Dojo is a useful format for teaching and learning programming\r\nskills, and particularly for learning about test-driven development. It is built\r\naround the concepts of learning by doing and the way in which Judo is taught and\r\nlearnt by practicing "Kata" exercises. We have used this format in a variety of\r\nsituations and believe it to be a fun and productive way to see how things work\r\nin practice.\r\n\r\nThis workshop uses the Dojo format to explore the idea of driving development\r\nfrom acceptance tests, (rather than unit tests), while coding using the Python\r\nlanguage. We believe that Test Driven Development is an essential skill for\r\nagile developers and that this workshop will introduce the subject from a\r\nslightly different angle to usual. Since we will be coding in Python it will\r\nalso expose workshop participants to this powerful and expressive language.	Testing	Workshop	2007
20070925	Cynefin - Making Sense of Agile	People don't make rational decisions - it's not the way the brain evolved.\r\nInstead they make first fit (not best fit) pattern matches with prior experience\r\n(either their own, or others conveyed through stories) and then retrospectively\r\njustify them as "rational".\r\nThis is no way to run a development effort (among other things).\r\nThis fact means that you either have to convey a new message in such a way that\r\nit "resonates" with an existing prior pattern of success, or disrupt those\r\npatterns so that people see things from a different perspective, with a\r\ndisposition to act. The Cynefin (http://www.cynefin.net) multi-ontological\r\nsense-making framework provides an unbiased, pre-hypothetical basis for\r\nanalyzing situations, issues and problems, and serves as a basis for discovering\r\nnovel, oftentimes optimal solutions to them.\r\nThis workshop will introduce parts of the Cynefin framework, drawing on a decade\r\nof theoretical research and practical experiments to work with the reality of\r\nhuman decision making, and will cover:\r\n\r\nComplex systems approaches to the forced evolution of systems - allowing\r\napplications to emerge from the interaction of objects with people and\r\nprocesses; avoiding end state design.\r\nNew approaches to project management based on the ideas of social\r\ncomplexity, which legitimize formal, rapid and agile design methods within\r\nboundaries.\r\nGaining senior management acceptance to radical ideas.\r\nThe application of the Cynefin framework for problem-solving in the Agile\r\ndomain.\r\nUnderstand Agile techniques by mapping them to the Cynefin sense-making\r\nframework.	Organizational Change	Tutorial	2007
20070822	Incremental Releases Users & Stakeholders Will Love	One of the benefits of Agile Software Development is â€œearly and continuous\ndelivery of valuable software.â€  Dividing development work up into small pieces\n(user stories or backlog items) then building the most valuable parts first\nsounds like a simple idea, but thereâ€™s often a bit more to it.  Sometimes it\ntakes a few not-so-valuable parts to allow users to take advantage of the most\nvaluable parts.  At times the most valuable parts may show well, but without a\nsufficient amount of software implemented, users may be unwilling to set aside\nlegacy software or even manual processes to actually put the new software into\nuse and earn the return on investment incremental release should bring.\n\nIn this tutorial participants will learn the basics of planning incremental\nreleases that are useful to their users.  Weâ€™ll discuss strategies for splitting\nuser stories into the small but useful parts that allow releases to contain more\nuser stories.  Youâ€™ll learn more about the â€œmyth of the finished user storyâ€ and\nwhy, if youâ€™re not cautious, your stories may inflate while youâ€™re not looking.	Customer	Tutorial	2007
20070407	Introducing agile practices (or any new idea) to your team or organization	Those of us who attend conferences or read articles see new ideas we want to\r\ntake back to our organizations, but then we struggle to make something happen.\r\nThis struggle has become especially apparent of late as enthusiastic agile\r\ndevelopment proponents want to encourage their teams to apply these new\r\napproaches. This tutorial will provide successful change management strategies\r\nto help agile proponents and anyone who wants to influence others to adopt a new\r\nidea.	Innovation	Tutorial	2007
20060357	Introducing Lean Principles with Agile Practices at a Fortune 500 company	Why is the introduction of Agile software practices within a large corporation pose a difficult and challenging prospect? How can Lean principles mitigate and enhance your success? The intent of this report is to share the experience of implementing Agile at a Fortune 500 company and how the deliberate merging of Lean principles with Agile practices lead to a well-received pilot and launched successive roll-out efforts.	Experience Reports	Experience Report	2006
20060361	Scripting Web Tests	Abstract: This workshop is a hands-on introduction to automated testing using Ruby, Watir and a web-based application, all of which are open-source. It presumes no prior knowledge with these tools. It allows key issues related to automated acceptance testing to be raised in a natural environment. Please see detailed submission.	Tutorials	Tutorial	2006
20071056	Introduction to Agile for Traditional PMI Project Managers	This session is specifically aimed at traditionally trained project managers \r\nwho\r\nare new to agile, and who \r\nwould like to be able to relate the Project Management Institute's (PMI) best\r\npractices to their equivalent \r\npractices in agile.  As a result of being able to associate many of these new\r\nagile ideas to things you are \r\nalready familiar with, you can begin the conference with a new shared lexicon\r\nand clear knowledge of \r\ngeneral agile concepts. In addition to the mapping of PMBOK knowledge areas to\r\nagile practices, the \r\npresenters will also focus on how the job of the traditional project manager is\r\nre-defined into a new - and \r\noften more important - role in the agile development process.  Leave with a\r\nbetter understanding of some \r\nof the necessary changes you'll need to make in order to lead and support an\r\nagile team. Use this new \r\nawareness to guide you as you make your selections from the many offerings in\r\nthe conference schedule.	Management	Beginners Program	2007
20070752	Making movies and software at the speed of thought!	Director Robert Rodriguez (Spy Kids, El Mariachi, Sin Cityâ€¦) is an Agile\r\nDirector.  He enjoys making highly creative movies quickly and cheaply.  His\r\nambition is to make movies â€œat the speed of thoughtâ€.   To achieve this goal, he\r\nworks in small teams to develop the ideas, visualize them quickly, shoot the\r\nmovie fast, and build the movie in layers.  This workshop will introduce\r\nRodriguezâ€™s approach to filmmaking by screening several of his â€œ10 minute flick\r\nschoolâ€ featurettes and we will explore if and how these techniques translate to\r\nsoftware development in a lively group discussion.	Individuals & Teams	Discovery Session	2007
20070820	Managing a Large Agile Software Engineering Organization	Managing a large "Agile" organization - After four successful agile releases,\r\nthe leader of the BMC Performance Manager Engineering organization\r\nreflects on an innovative approach to leadership which enabled considerable\r\nproductivity and quality improvements.\r\n\r\nBusiness pressure for rapid improvement was growing. As a result, the \r\norganization would be required to demonstrate significant improvements in a \r\nvery short timeframe. It was clear traditional software development \r\nmethodologies simply would not work. Under the influence of Israel Gat and \r\nother "Agile" thought leaders, the team adopted scrum as the chosen agile \r\nmethodology. Today the product line is considered revitalized. There have been \r\nfour successful releases and the team is on a release cadence which will \r\ndeliver three releases per year. This presentation will focus on key \r\nmanagement concepts which enabled an organization of over 200 engineers in 4 \r\nlocations to overcome such a monumental challenge.	Leadership	Experience Report	2007
20070496	Planning with Distributed Teams	In my work as an agile coach I regularly facilitate planning sessions. Iâ€™ve \r\ndone\r\na few where part of the team was only available through a phone or video link.\r\nThese were the hardest sessions to get to results. The aim of this session is \r\nto\r\ndiscover practices for teams that have to plan while not being able to be \r\ntogether.\r\nI will prepare a project description and (using Scrum terminology) a backlog\r\nwith priorities and estimates. I will also create descriptions for multiple\r\nteams and their roles in the project. In the session we will use this project\r\ninformation to simulate a release planning session: the group has to create a\r\nrelease plan, based on the backlog and the capacity of the respective teams.\r\nThey will have to find dependencies between the teams, and create solutions for\r\nthem. The agenda for the session is based on the agenda for release planning\r\nmeetings as I run them with clients. \r\nThe big impediment I will impose is to separate the teams. With a small\r\nattendance it will be two team on two sides of the room, with a larger group it\r\nwill be possible to emulate time differences by removing one team completely\r\nfrom the room.\r\nWhile the group is working through the planning session they will discover\r\npractices that work (or not work) and take note of these. Each team will have a\r\nscribe assigned to this role. The last part of the session will bring those\r\nlessons learned together, and the group as a whole will prioritize the \r\npractices\r\nand recommendations. This is the material that will be posted on the wiki, and\r\npossibly in an article.	Leadership	Discovery Session	2007
20070478	Scaling Agile Methodologies for Developing a Production Accounting System for the Oil & Gas Industry	This report discusses the employment of Agile methodologies in what can be\ndescribed as a medium to large scale project [1]. Production Accounting is the\nprocess of tracking the oil & gas products and their by-products as they travel\nthrough the complicated networks of Wells, Batteries, Gathering System, Gas\nPlant, and End-point facilities. The Production Accounting System (PAS) is an\nenterprise application developed by CGI together with four oil & gas companies.\nThe PAS project is in its 3rd year of development. The team consists of\napproximately 70 developers, business analysts, and QA. In this report, we will\ndiscuss the impact Agile methodologies had on the project over the period of two\nand half years and the lessons learned while scaling agile techniques to a\nrelatively large team. We will discuss some interesting experience â€“ good and\nbad â€“ encountered during the course of this project.	Leadership	Experience Report	2007
20070413	Smells in Agile Software Development	Over the last few years, the adoption of agile methods has rapidly spread and\r\nagile methods are now state-of-the-art. Many teams, projects and even\r\norganizations around the world are using Scrum, XP, Crystal Methodologies, or\r\nother well-known or self-made agile methods. However, not every organization and\r\nproject is succeeding in making agile work.\r\n\r\n\r\nWhat makes an agile project successful? And how can we recognize common traps or\r\n"smells" that prevent or limit success with agile?\r\n\r\n\r\nLet's take a common trap as an example: Agile practices like pair programming or\r\ntest-driven development are often applied properly but the underlying agile\r\nvalue system is not embraced. This leads to a mismatch of expectations: The\r\nresults can't keep up with the expectations people have about agility and its\r\nbenefits.. \r\n\r\n\r\nIn this workshop, Roman and Jutta want to highlight recurring common smells\r\nteams often trap into when following an agile approach. Additionally, we will\r\ncollect recommendations how to avoid and to get out of these traps. With the\r\ncombined experience of both the workshop facilitators and the participants, we\r\nwant make smells transparent, help to prevent failure and to set up teams for\r\nsuccess.	Individuals & Teams	Discovery Session	2007
20070823	Storytelling Skills for Agile Teams	An agile project starts when a customer brings a wish list to a development \r\nteam to be shaped into a release plan; a guide to what can be delivered and \r\nwhen. Agile teams use story telling to explore user needs and tease apart the \r\nrequirements into a prioritised list based on business value but also \r\nconsidering technical dependency and risk. \r\nThis tutorial takes you thru the process of story shaping, from raw \r\nrequirement to release plan. Along the way we introduce participants to \r\ncritique and argument moves that help get to the essence of the story.	Individuals & Teams	Tutorial	2007
20070417	The Facts of Work: Living with Power and Politics	We all have complained about "the politics" in our organizations; we want \nthings to change but often say that we just don't have the power to get \nanything done. Power and Politics are present everywhere we look. There are \nmany sources of power, and politics are not something to avoid, or run from. \nPolitics must be mastered and sources of power must be identified and \nleveraged in order to effect change. By learning the tactics to influence and \nresolve conflict, you gain some real power to change your organization. You \ndon't have to be the CEO to do this, even though that is one source of power!	Customer	Tutorial	2007
20071061	VT3	967. A Case Study in the Agile Enterprise - How to take Agile to the Enterprise!by Bob Myers, President of Pillar Technology Group\r\n970. Using Visual Studio Team System for Agile Developmentby Ajoy Krishnamoorthy, Microsoftby Stephanie Saad, Microsoft\r\n969. Enterprise Agile: The Struggle With Organizational Dysfunctionby Michael Granetz, Senior Director of Marketing, Command Informationby Gina McCabe, Vice President, Corporate Development, Command Information	Other	Session	2007
20071033	XR10: Scaling Up	Managing a Large Agile Software Engineering \r\nOrganization\r\n\r\nby Paul Beavers\r\nAgility and the Inconceivably Large\r\n\r\nby Ade Miller and Eric Carter\r\nScaling Agile Methodologies for Developing\r\na Production Accounting System for the Oil & Gas Industry\r\n\r\nby Harprit Grewal and Dr Frank Maurer	Other	Session	2007
20070970	Using Visual Studio Team System for Agile Development	Visual Studio is widely used for software development. Are you ever curious \nabout how you can use Visual Studio in agile development, and how well it \nreally works? We'll talk about all the agile support features in Visual Studio \n(several of which are new), what works and what doesn't, and how to be \nsuccessful using Visual Studio. We'll also talk briefly about what Visual \nStudio is thinking in terms of agile support for the future.\n\nAs a bonus, we'll spend the final segment of the session talking about how \nVisual Studio itself adopted agile processes on a product team of 45 and went \non to ship in record time a product that now has great reviews. We'll talk \nabout what works for us, what didnâ€™t, and how we're adapting agile practices \nto work for one of our larger teams.	Process Improvement	Vendor Talk	2007
20070969	Enterprise Agile: The Struggle With Organizational Dysfunction	For large organizations, fully realizing the benefits of agile requires change \r\nand support across the enterprise--beyond IT and project stakeholders. In \r\nCommand Information's work with Fortune 1000 clients and government entities, \r\nwe've found that embarking on agile project delivery quickly brings \r\norganizational dysfunction to the surface. Traditional operational processes \r\nthat previously supported waterfall development now slow down agile project \r\nprogress, causing interruption, adding waste to activities, restricting \r\nflexibility and limiting innovation. \r\n\r\nIn this session, we'll discuss the common organizational characteristics that \r\nhave impeded agile progress across Command Information's client base. Then, \r\nwe'll share insight into how innovative leaders are driving change in the way \r\ntheir companies operate to enable the frequent delivery of business value, \r\nembrace change, and build a culture of continuous improvement. We'll examine \r\nclient case studies where we've tackled challenges in areas including \r\nprocurement, human resources, planning, and staffing to enable greater agility.	Enterprise Agile	Vendor Talk	2007
20070899	Creating Change one "Tic Tac" at a Time	Agile Development builds upon some simple principles to offer compelling\r\nbenefits, but there is a \r\nhidden catch:  Agile means change, individual and organizational behavior\r\nchange, a huge obstacle to \r\novercome.  Broadly speaking "why is change so difficult?" and "what can we do to\r\nimplement successful \r\nchange?" are the topics of this workshop, and we are seeking to explore two\r\nmodels that suggest \r\npossible answers to those questions.\r\n\r\nThe first model we offer is the "capability dip" model of change. In this model\r\nany change in behavior is \r\naccompanied by a drop in capability as the skills and habits of the new behavior\r\nare acquired. For a \r\nwhole host of really strong and valid reasons change is innately scary, and this\r\ndip combined with those \r\npre-existing fears provoke fierce resistance.\r\n\r\nWhile human psychology raises specters that must be overcome it also offers\r\nmechanisms that will ease \r\nand enable the process of adopting change. The second model on offer, the Tic\r\nTac model, explains \r\nwhy some practices reinforce change through providing tokens to mark small wins.\r\n Behind this model \r\nis the observation that people move into better habits when they receive\r\nfrequent small prizes, not \r\nwhen promised of a big prize at the end of a long journey. Seeing a bit of\r\nimprovement; completing a \r\nbit of work; getting feedback on an idea, all these count as wins and therefore\r\nprizes, and support the \r\nmove to new habit. Common automated and interpersonal agile practices (daily\r\nstand-up meetings, \r\nmonthly reflection workshops, information radiators) supply those wins.\r\n\r\nIn this workshop we want to move as a group towards conscious competency as\r\nagents of change, with \r\nboth the collected folklore of a set of practices that have proven useful and\r\nalso an understanding of \r\nthe psychology of change that can help lead us to new practices.	Leadership	Discovery Session	2007
20070542	large build teams: Help or hindrance?	The submitters were all members of a build and deploy team for a project being\nrun from the UK and the USA.  On this project they used agile techniques to\ntrack their non functional requirements and assist the development team in\ndelivering business value to the end users of the application.  Many questions\nwere asked and many issues were encountered as the team maintained Continuous\nIntegration for the developers and devised the deployment processes for the\nfinal release.  This paper attempts to explore and answer some of those questions.	Developing	Experience Report	2007
20060372	Making Process and People Congruent	Agile processes suggest that they work better if developers and customers have particular characteristics, such as the capability to handle rapid change or to pair program. Members of an agile team cannot always be selected to insure that they possess these capabilities. The implementation of a process may need to be adapted so that team members can work effectively. This workshop investigates people issues that agile team members have faced and ways that those issues have been approached or could be approached.	Discovery Sessions	Workshop	2006
20070808	Agility in Distributed Software Development with Asynchronous Teams	Practical issues of real distributed software development\r\nhave not been considered in Software Engineering Graduate Programs.\r\nTraditionally the programs only present to their students some new\r\ntechnology or recently scientific aspect but do not present real\r\naspects in practice of software development. This paper presents an\r\nexperimental initiative on incorporating practical issues of\r\ndistributed software development. Software teams with real projects\r\nand deliverables are settled up in four months. We report our\r\nexperiences and results with the use of several software processes,\r\nincluding agile and traditional methods, in the context of\r\ndistributed teams with high temporal distance, and low geographical\r\nand cultural distance.	Other	Research Work In Progres	2007
20070418	Learning Test-Driven Development	While the description of test-driven development ("tests are written first")\r\nseems simple enough, there are many ways to implement the practice.\r\nUnfortunately, many of these approaches will lead you down a less-than-optimal\r\npath. In this hands-on session, you'll learn a solid foundation for how to\r\nprogram using TDD. Jeff Langr, author of Agile Java: Crafting Code With\r\nTest-Driven Development, will teach you the techniques, the principles, and some\r\nof the pitfalls to avoid when practicing TDD. \r\n\r\n\r\nThis session is geared toward programmers. The live examples during the session\r\nwill be presented using Java. Even if you don't know Java, I'd still love for\r\nyou to attend. The most valuable part of this lesson is the TDD technique, not\r\nthe language or tool specifics. Programmers from most other languages should be\r\nable to easily follow along. Also, attendees will be encouraged to pair with\r\nothers during the session, so you'll have help if you need it. I've seen even\r\nmanagers get their hands dirty when pairing is available!\r\n\r\n\r\nThe session is intended to be hands-on, but you can also just come to watch and\r\nlearn.\r\n\r\n\r\nIf you plan on programming along, you should ensure that your laptop is\r\nconfigured with:\r\nJava JDK version 5.x or 6.x\r\na Java IDE, such as Eclipse, NetBeans, or IDEA (or minimally, a decent\r\neditor such as TextPad)\r\nJUnit version 4.x (Eclipse and most other IDEs already include this)\r\n\r\nA couple weeks prior to the conference, I will be updating the page http://langrsoft.com/agile2007.shtml\r\nwith more detailed setup information.	Developing	Beginners Program	2007
20070965	Mingle: A New Agile Project Management Application	At ThoughtWorks, our clients consistently ask us to recommend Agile tools that\r\nallow teams to plan in an Agile way, that use Agile concepts and terms, but\r\nremain flexible enough to be customized to the unique attributes of their\r\nproject. Since we could not find a tool which does this all, we created Mingle â€“\r\na powerful Agile project management tool that helps teams deliver.\r\n\r\nCome hear ThoughtWorks Studios Product Manager for Mingle, Julian Boot, discuss\r\nhow the challenges we routinely encountered delivering complex business systems\r\nled us to develop Mingle. And how Mingle can provide intelligence on your projects.\r\n\r\nMore about ThoughtWorks Studios: http://studios.thoughtworks.com	Project Management	Vendor Talk	2007
20070617	Performance Testing on an Agile Project	Conservative Extreme Programming (CXP) is a software methodology designed for\nuse within traditional software development environments.  Conservative XP\nattempts to take advantage of the Extreme Programming coding practices whilst\nsimultaneously taking advantage of more traditional quality assurance\ntechniques, such as the use of a test team, proper requirements analysis, and\ncontinuous design.\n\nCXP has been used in settings that are not considered natural home grounds for\nagile projects.  Such home grounds include teams  working in the context of \nwaterfall, batch and queue, organisations;  projects that are staffed with\njunior and/or un-committed team members; and projects where very high quality is\nimportant.\n\nThis experience report is about how CXP was used as the methodology to create a\nmission critical integration layer for a large Dutch client.  This report\nfocuses on how the team carried out performance tests iteratively and how a\nlarge array of processes and techniques were employed to support a specialist\nperformance test team.	Testing	Experience Report	2007
20070883	Push to Pull: How Lean Concepts Improve a Data Migration	A complex Enterprise Relationship Planning (ERP) data migration was in trouble:\r\nlow quality, poor performance, instability, and an overworked team threatened\r\nproject success. Facing failure, a small group of the original developers\r\nachieved a tremendous turnaround by applying Lean and Theory of Constraints\r\n(TOC) concepts directly to the data migration architecture. Their success shows\r\nhow agile applies beyond software development, and can help others look for new\r\nways to solve problems.	Developing	Experience Report	2007
20070412	The Enterprise and Scrum	This session is for anyone who wants to use Scrum throughout their enterprise\r\nfor product or systems development. Right now you may have pockets within your\r\nenterprise that use Scrum, and they are more effective than elsewhere. You are\r\nat least partially convinced that using Scrum throughout the enterprise may be a\r\nway to make the whole enterprise more effective, but you could use some help in\r\nfiguring out how to do so. \r\nIn this session, I'll talk about the preparation, kickoff, and implementation of\r\nScrum throughout an Enterprise. I'll also enumerate the types of changes that\r\nyou can anticipate, and some approaches that you can use to solve them. \r\nAn understanding of Agile processes and iterative, incremental development will\r\nbe necessary to understand this session.	Leadership	Talking Head	2007
20070480	To Catch a Bug, Think Like a Bug	Legacy code is infested with bugs. You, the developer, are the exterminator and on top of that you are \r\nadding new features to that code. "Unit testing is a great way to stop bugs", you are told. "Test Driven \r\nDevelopment is even better." But, cracking open legacy code to augment it is like turning over logs at \r\nnight, little bugs come running out in all directions. This hampers the good intentions to adopt more \r\nagile development practices like developer testing.Â \r\n\r\nOf all the tools available to you, the least understood, the least discussed, but the most powerful, is the \r\nlowly assertion statement found in any unit testing framework. Assertions are a tool for talking about \r\ncode, which is where bugs live. Assertions make it easy to think like bugs, and therefore they make it \r\neasy to trap bugs. But you need a plan, especially for legacy code! This interactive tutorial will show \r\ndevelopers how to examine their code and how to trap the bugs effectively and systematically.\r\n\r\nAttendees will learn a plan for trapping bugs in their code with assertions, while not laying traps for \r\nthemselves in the future. The plan is simple, easy to use, and comprehensive. After this talk, you will \r\nknow how to effectively test your code as deeply and completely as you need or want, and best of all, \r\nyou'll know how complete your tests are if you need to apply more effort in the future.	Developing	Tutorial	2007
20071062	VT4	965. Mingle: A New Agile Project Management Applicationby Chad Wathingtonby Wang Pengchao\r\n963. Assuring Distributed Enterprise Agility with Sapient ResultSpaceby Erik M Gottesman, Senior Manager, Technology, Sapientby Brian Carter, Sapient\r\n971. VersionOne + Subversion + FitNesse = Blissby Andy Powell, Sales Engineer, VersionOne	Other	Session	2007
20060380	Collaborative Workplaces: Creating an Open Environment for Agile/Adaptive Projects	Agile flourishes in collaborative workplaces with open environments. Self-organizing teams thrive in organizational climates that stimulate communication, foster working relationships, encourage feedback and strengthen innovative thinking. Creating these open environments requires attention to a collaborative model as well as continuing focus on small, daily interactions and information flows. Business prospers where teams can collaborate and contribute.	Tutorials	Tutorial	2006
20071036	XR13: Technical Stories	Performance Testing on an Agile Project\r\n\r\nby Jamie Dobson\r\nLarge build teams: Help or hindrance?\r\n\r\nby Julian Simpson, Shane Duan and Rolf Russell\r\nPush to Pull: How Lean Concepts Improve Data \r\nMigration\r\n\r\nby Rand Bradley	Developing	Session	2007
20084080	Systemic Coaching Techniques for Agile Coaches	<div class="content">\n    <p>Relationship systems coaching is a new and emerging discipline—embodying “systemic” coaching methods—that provides Agile Coaches a new model to work with the whole system, not just individuals. By cleanly standing outside the team, we help reveal the system to itself, leading to greater team self awareness, higher cohesion and more conscious self-organization. Moving beyond the right and wrong of individual issues, we facilitate long-term persistent changes which benefit the whole system. We will demonstrate three techniques with the audience as participants to demonstrate this exciting new approach.</p>\n\n<hr /><p><strong>Background</strong><br />\nA new and emerging discipline arising from the confluence of the individual coaching tradition and systems theory is that of relationship systems coaching. Coaching relationships as systems (teams, partners, organizations) shifts the focus from the individuals to the relationship system itself: an important player called the “Third Entity” (<a href="http://www.therelationshipcoaches.com/thought-leadership.html" title="http://www.therelationshipcoaches.com/thought-leadership.html">http://www.therelationshipcoaches.com/thought-leadership.html</a>). This so-called Third Entity is more easily felt or sensed than directly perceived. It is related to the “feel” of a team, whether they are fiesty and challenging, warm and supportive, or alternatively playful then confrontational.</p>\n\n<p>Systemic coaching methods can provide Agile Coaches with a model to work directly with the system rather than merely doing individual work with members of the group. It involves skills that may be new such as “reading the emotional field,” standing outside the system, and so-called metaskills such as Inquiry/Awareness, Playfulness, Respect and Deep Democracy (<a href="http://en.wikipedia.org/wiki/Deep_democracy" title="http://en.wikipedia.org/wiki/Deep_democracy">http://en.wikipedia.org/wiki/Deep_democracy</a>).</p>\n\n<p>System coaching is a way to cleanly stand outside the team and help reveal the system to itself, which leads to greater team self awareness, higher cohesion and an increased ability to meaningfully self-organize. The question we ask teams from this perspective is not, who’s right and who’s wrong, but rather…what’s trying to happen here?</p>\n\n<p>This workshop will introduce coaches to relationship system coaching methods as a new way to both perceive and coach teams. Three specific systemic techniques will be run as exercises with members of the audience as participants to demonstrate this approach, including: evoking the Third Entity, Lands Work and Constellations. </p>\n\n<p><strong>Intended Audience</strong><br />\nThis workshop is designed primarily for experienced Agile coaches. </p>\n\n<p><strong>Benefits of Participating</strong><br />\nThis workshop will help participants to:<br />\n+learn a very powerful way of seeing teams, as the ‘third entity’ that lives between the members of the team<br />\n+experience three different techniques for working with teams from this new perspective  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The workshop is based on techniques taught in the Organization and Relationship System Coaching program by the Center for Right Relationship (<a href="http://www.therelationshipcoaches.com/training.html" title="http://www.therelationshipcoaches.com/training.html">http://www.therelationshipcoaches.com/training.html</a>). We are introducing these new techniques as potential new skill areas for development by Agile Coaches. These techniques provide a very different, complete and systemic way of seeing the teams we coach. As such, they offer a very different way of seeing and acting as a Coach.</p>\n\n<p>The workshop will demonstrate multiple exercises. </p>\n\n<p>The session will be highly interactive and has the protential for deep impact on participants, based on past experience with the exercises.</p>\n\n<p><strong>Timetable</strong><br />\nOpening / Introductions - 10 min.<br />\nBackground: Overview of Relationship Systems Coaching Model (Third Entity, System as Client, Metaskills, etc.) - 20 min.<br />\nExercise #1 - Coaching the Third Entity (exercise setup, enlisting volunteers, setting up fish bowl, conducting exercise, debriefing) - 20 min.<br />\nExercise #2 - Lands Work (exercise setup, describing the context of the exercise, conducting exercise, debriefing) - 30 min.<br />\nExercise #3 - Constellation (exercise setup, enlisting volunteers, setting up fish bowl, conducting Constellation, debriefing) - 25 min.<br />\nSession Debrief - 10 min.<br />\nConclude - 5 min.  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Workshop	2008
20070963	Assuring Distributed Enterprise Agility with Sapient ResultSpace	Agility and distributed delivery are not oil and water. Nor does simplicity\r\nimply settling for inadequate tools. But todayâ€™s agile-oriented tools have yet\r\nto find a comfortable place in distributed corporate IT environments. Similarly,\r\nthe application lifecycle management (ALM) tools commonly found in large\r\nenterprises either lack explicit support for agile methods or accommodate them\r\nin a woefully over-engineered manner, leaving their benefits unrealised.\r\nResultSpace, Sapientâ€™s agile ALM platform, fills this gap in the tools landscape\r\nwhether yours is a small, agile organisation with few structured delivery\r\nprocesses or a larger enterprise concerned with portfolio performance\r\nmanagement, formal quality programmes such as CMMI, and cross-organisation\r\nknowledge management and reuse. We will introduce and demonstrate key features\r\nof ResultSpace that directly support delivery excellence in a distributed,\r\nenterprise-agile environment. This talk will focus primarily on ResultSpaceâ€™s\r\nagile adoption and metrics capabilities, its unique activity-oriented user\r\nexperience, and how we have leveraged Lean concepts throughout the product to\r\nreduce waste and cycle times for distributed-agile teams.	Enterprise Agile	Vendor Talk	2007
20070971	VersionOne + Subversion + FitNesse = Bliss	Wouldnâ€™t it be great if ALM tools could talk with Source Control Management\r\n(SCM) Systems and Automated Test Systems?  \r\n\r\nCome see how VersionOne has integrated with Subversion and FitNesse and learn \r\nhow to improve the productivity of your teams.  Weâ€™ll demonstrate both the \r\nease of configuring the integration and how it will improve the effectiveness\r\ndevelopment team members.	Integration	Vendor Talk	2007
20070640	A Technical Story	Across the Agile community there is a lot of discussion about the use of\r\ntechnical stories during the planning game.  While the community seems split\r\ninto two camps, it seems the majority of extreme programming practitioners\r\nprefer to define the system using only the traditional user stories that are\r\ncustomer focused.  In some cases the arguments for and against technical stories\r\nis academic, but this experience report demonstrates clearly why sticking to\r\nnon-technical stories is a good approach.  Our experience, using Scrum and XP,\r\nhas been that allowing technical stories into the process can de-rail the\r\nability to deliver constant, measurable business value per iteration, as well as\r\ninhibit the planning process.  Once technical stories are allowed, the customer\r\ncan be alienated very quickly, especially when they have no engineering\r\nbackground.  Furthermore, as our experience shows, when problems occur and the\r\ntechnical stories begin to slip, the customer can be left in a very difficult\r\nposition, not knowing how to re-prioritise or embrace change.  Our intention is\r\nto highlight some of the pitfalls that can result from using technical stories.	Customer	Experience Report	2007
20070777	Agile Ghettos or Thriving Communities? Are Agile Principles Suitable Only for Development Teams, or Can They Guide Executive Practice Too?	If agile practice is good for development, then is agile practice good for\r\nexecutive management? Some think so. Others donâ€™t see a need. \r\n\r\nThis Think Tank seeks to explore the application of agile principles to\r\nexecutive management practice â€“ whether in development arenas or other functions\r\nâ€“ for effective leadership and governance. We will present our data in the form\r\nof case studies and personal experiences, and then invite attendees to join us\r\nin a search for consensus answers to these questions:\r\n\r\nCan you have a healthy agile development environment governed by siloed\r\nexecutive ranks, or, in order to maintain agile health in development, must\r\nexecutive ranks adopt agile leadership practices?\r\n\r\nWhat agile practices translate to non-engineering executive environments, and\r\nwhat benefits do they provide?  \r\n\r\nIs this a moot point since yesterday's agile engineers are graduating into\r\nmanagement ranks and will take their agile practices with them, or will a siloed\r\nexecutive culture extinguish the agile fire as one climbs the ranks?\r\n\r\nThis session will:\r\n1)\tDescribe specific agile challenges and resulting changes in management\r\npractices that have improved organization performance\r\n2)\tDescribe ways to implement (sell) these changes\r\n3)\tAnd then open discussion about other details, unusual cases, how to deal with\r\nproblems, and what others may have done.	Leadership	Discovery Session	2007
20070512	Agile Interaction Design & Usability	The workshop will bring together researchers and practitioners who are\r\ninterested in integrating agile methods with interaction design and usability\r\nengineering.\r\nWorkshop Schedule\r\n14:00-15:30: Perspectives on Agile Interaction Design - Short presentations \r\nby workshop orgranizers & group discussion\r\n16:00-17:30: Roundtable discussion: How can agile teams can create usable \r\nsoftware?	Customer	Discovery Session	2007
20070448	Agile Retrospectives: Making Good Team Great!	Project retrospectives help teams examine what went right and what went\r\nwrong on a project. But traditionally, retrospectives (also known as\r\n"post-mortems") are only held at the end of the project--too late to help. \r\nIn organizations where teams develop using iterative, incremental methods,\r\nAgile retrospectives at the end of each iteration or increment stimulate\r\ncontinuous improvement throughout the project. Exceptional software process\r\nand project improvement grows out of solid data and good planning. \r\n\r\nEsther Derby and Diana Larsen, authors of Agile Retrospectives: Making Good\r\nTeams Great, will introduce you to a framework for effective retrospectives,\r\nprovide tips and pointers for sustaining interest in retrospectives\r\nthroughout the project, and suggest ways to maintain the relevance of\r\nimprovement to the work of your team.	Retrospectives	Tutorial	2007
20070816	Design Sense - Can We Teach Deep Design Skill With Perceptual Examples?	Software development is hard.  It takes years to become a good developer and\r\nmany more years to become an expert.  How much of this time is necessary?  Are\r\nthere any shortcuts?\r\n\r\nIn his book 'Blink', Malcom Gladwell makes the case that experts don't "think\r\nthrough" problems when solving them, they arrive at solutions almost\r\nunconsciously.  The thing that differentiates an expert from a novice is not the\r\nability to "reason through" but rather the ability to see a problem differently\r\nthan a novice would.  This different way of seeing is something that experts\r\narrive at through their experience and long periods of exposure to problem contexts.\r\n\r\nIn this workshop, we will explore this theory and work through a large\r\ncollection of code examples.  We'll examine our initial reactions to the code\r\nand run experiments to see (1) whether we agree about whether particular pieces\r\nof code are "good" or "bad", and (2) whether the examples can be structured to\r\nhelp novices develop "design sense", a gut feel for whether a solution is right\r\nin context.	Developing	Discovery Session	2007
20080628	The Agile Playground - Learning Games for the Agile Practitioner	<div class="content">\n    <p>—— begin 90 word abstract ——<br />\nThis fun, energetic, and interactive session will explore techniques for accelerating the adoption and understanding of Agile principles through experiential learning . The audience will participate in games and exercises that will illustrate how to target unique learning Vectors (Physical, Emotional, and Impressional) to maximize understanding.\nThis session is for anyone looking to learn new and powerful techniques to convey and reinforce the concepts and principles behind Agile.\nAll participants will leave with a complete toolkit containing descriptions of all the games and exercises.<br />\n—— end 90 word abstract ——</p>\n\n<p><strong>Overview</strong></p>\n\n<p><em>playground |ˈplāˌground|</em>  noun<br />\na place where a particular group of people choose to enjoy themselves :   </p>\n\n<ul><li>the mountains are a playground for hang gliders.</li>\n<li><strong>this session is a playground for Agile teachers and learners.</strong></li>\n</ul><p>This fun, energetic, and interactive session will explore the concept of experiential learning and how it accelerates the adoption and understanding of Agile principles. The audience will participate in games and exercises that will illustrate how to target unique learning Vectors (Physical, Emotional, and Impressional) to maximize understanding.  </p>\n\n<p><strong>I am going to attend this session</strong> because;</p>\n\n<ul><li>I want to have <strong>fun</strong>.</li>\n<li>I am an <strong>instructor</strong> and I want to learn new and powerful techniques to convey and reinforce the concepts and priniples behind Agile. </li>\n<li>I am a <strong>coach</strong> or <strong>Scrummaster</strong> and I need efficient and effective tools to help teams become confident and capable at applying Agile practices as quickly as possible.</li>\n<li>I am a <strong>lead on my team</strong> and I need a toolset to change the way my team works together</li>\n<li>I am <strong>new to Agile</strong> and I want to learn the principles behind Agile in a fun and interactive way.</li>\n</ul><p>All participants will leave with a complete set of all the games and exercises.</p>\n\n<p><strong>Intent</strong>  </p>\n\n<ul><li>Provide case for why games are sometimes necessary for learning  </li>\n<li>Learn a toolkit for developing and applying games to your team/class.</li>\n</ul><p><strong>Outline</strong><br /><em>Why games are necessary</em>  </p>\n\n<ul><li>Challenges with learning concepts and principles  </li>\n<li>Shortens time to “get it”  </li>\n<li>Welcome distraction</li>\n</ul><p><em>Understand learning approaches</em>  </p>\n\n<ul><li>Experiential Learning</li>\n<li>Learning Vectors\n<ul><li>Physical  </li>\n<li>Emotional  </li>\n<li>Impressional</li></ul></li>\n<li>How and when to apply them  </li>\n<li>Examples of each </li>\n</ul><p><em>Applying games</em>  </p>\n\n<ul><li>Know your audience - learner patterns  </li>\n<li>In the classroom  </li>\n<li>In the project room  </li>\n<li>Planning, Preparation, and Execution  </li>\n</ul><p><em>How to Create a Game</em>  </p>\n\n<ul><li>Understand Learning Objective  </li>\n<li>Choose appropriate Learning Vector  </li>\n<li>Sources and Toolkits  </li>\n<li>Just do it!  </li>\n<li>Tips and Tools  </li>\n<li>Evaluating and improving your game. </li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Approach</strong>  </p>\n\n<p>This session will have a number of engaging exercises interspersed throughout.  We have a growing list (currently at 20) of games that will make up the toolkit which will be handed out to participants.  These will be a mix of demonstrations, role play, discussions, and more.   We will select 4-5 of these to play/demonstrate during the session.<br />\nThere will be two 10 minute breaks and a Q &amp; A period at the end.</p>\n\n<p><strong>Timing</strong>  </p>\n\n<p><em>Intro</em>  10 minutes  </p>\n\n<p><em>Why games are necessary</em>   20 minutes  </p>\n\n<p><em>Understand learning approaches</em> 90 minutes    </p>\n\n<ul><li>Learning Vectors\n<ul><li>Physical    5 minutes  </li>\n<li>Exercise and review , 20 minutes</li>\n<li>Emotional  5 minutes  </li>\n<li>Exercise and review, 20 minutes</li>\n<li>Impressional  5 minutes  </li>\n<li>Exercise and review, 20 minutes</li></ul></li>\n<li>How and when to apply them  10 minutes  </li>\n</ul><p><em>Applying games</em>  20 minutes  </p>\n\n<p><em>How to Create a Game</em>  30 minutes  </p>\n\n<p><em>Conclusion /  Q&amp;A</em></p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Workshop	2008
20090839	Agile Hats Art Show	An agile-tester needs to wear many different hats to be effective in their role. Sometimes they have the 'Detective' hat on, sometimes the 'Scientist' and others the 'Police Officer'. Working in small groups we will create a taxonomy of the hats testers wear. Once a the list is produced we will then see which are the most common, enjoyable, frustrating, Agile and a number of other attributes.	Testing	Workshop	2009
20060389	Keynote	TBD	Main	Talk	2006
20070462	Designing Collaborative Workspaces	One of the key success factors in Agile projects is the workspace environment.\r\nDoes the workspace facilitate or hinder collaboration? E.g. is there a wall that\r\ncan be turned into an information radiator? Which team members should sit next\r\nto each other? Are there frequent interruptions? How does the workspace meet\r\nhealth & safety requirements?\r\n\r\nIn this workshop, we will explore issues of project workspace design. By\r\ncreating the "workspace from hell" and the "workspace from heaven", we will\r\nidentify key aspects of both successful and unsuccessful environments. For\r\nhellish environments we will investigate how we can workaround the difficulties;\r\nfor heavenly environments will we identify weaknesses.	Individuals & Teams	Discovery Session	2007
20070450	Executable Specifications with Green Pepper	Executable Specification (ES) or Automated Acceptance Tests are starting to be\r\nrecognized as a cornerstone of an optimal software development process.\r\nGreenPepper provides a large array of tools and integration capabilities in\r\norder to harvest the benefits of ES within your development environment.\r\n\r\nGreenPepper delivers integration capabilities for Executable Specifications with\r\nProject Management software, Enterprise Wiki, developer's IDE and automated\r\nbuild systems, among others. In order to make it fit into your reality, Green\r\nPepper's team worked hard to develop identical integration capabilities under\r\nboth Java and .Net platforms.\r\n\r\nHave a look at our products and discover how GreenPepper can help you\r\nto... \r\nBuild The Right Software!	Customer	Vendor Talk	2007
20070827	How We Made Onsite Customer Work - An Extreme Success Story	The Agile Manifesto emphasizes customer collaboration over contract \r\nnegotiation. No Extreme Programming practice embodies this more than onsite \r\ncustomer. This paper describes our experience in adopting onsite customer in \r\nan environment where the practice was long considered impractical. We \r\nsuccessfully overcame many obstacles to bring busy airline employees for \r\nextended periods of time to our development site thousands of miles from their \r\nhomes and have them work with our team. We have realized significant gains in \r\nproductivity, quality, and customer satisfaction as a result. Onsite customer \r\nhas now become a standard way of doing business.	Customer	Experience Report	2007
20070600	Introduction to Scrum	Scrum is an extremely popular agile project management framework, with more than\r\n10,000 Certified Scrum Masters worldwide. This tutorial gives an overview of\r\nthe 'basic scrum engine' -- its philosophies, methods, and roles -- as well as\r\nintroducing additional topics that are applicable to scrum. The attendees will\r\nunderstand how and why Scrum works, and thus why it is so popular. Ken Schwaber\r\ndefines Scrum as\r\n"... an agile, lightweight process that can be\r\nused to manage and control software and product development using iterative,\r\nincremental practices. Wrapping existing engineering practices, including\r\nExtreme Programming and RUP, Scrum generates the benefits of agile development\r\nwith the advantages of a simple implementation. Scrum significantly increases\r\nproductivity and reduces time to benefits while facilitating adaptive, empirical\r\nsystems development."\r\n\r\n\r\nThis tutorial describes the basic Scrum engine and additional topics including\r\nreporting, metrics and scaling. The attendee leaves with a knowledge of the\r\nbasic process and practices involved in scrum.	Customer	Tutorial	2007
20070903	Lean Is More - Using Lean Software Development to Guide Agile Transitions	It's not hard to get confused about lean software development and agile \r\nmethodologies. Is lean part of agile? Is agile part of lean? Or are they really \r\nthe same thing? How can I best use them to help improve my software process?\r\n\r\nLean software development is an effective approach for analyzing and\r\nimproving your entire software product development process. Agile processes,\r\nsuch as Scrum and Extreme Programming, provide your software development teams\r\nwith effective strategies and practices designed to deliver high quality\r\nsoftware systems in shorter release cycles. While neither is ideal on its own,\r\nit's the combination of lean software development and agile\r\nprocesses that offer a far more powerful approach to software process\r\nimprovement.\r\n\r\nAs agile practices have gained widespread adoption, the specific\r\ntechniques have become familiar to many teams.  What's needed now are tools to\r\nhelp us choose the right mix of agile practices for our projects, and to \r\nmeasure and guide our transitions.  The lean\r\napproach provide these tools, and this tutorial will show you how to use\r\nthem.\r\n\r\nIn this intensive tutorial, you will learn how to effectively apply lean \r\ntools such as value stream mapping and waste analysis to your software projects \r\nto identify areas for improvement. Each tool will be illustrated with exercises \r\nwhere you will gain direct hands-on experience with each technique. You will \r\nthen learn how to use the results of the lean analysis to drive the selection \r\nof appropriate agile practices that best match your needs. Through an extended\r\nreal-world case study, you will learn how to develop an agile transition plan\r\nthat effectively addresses your most critical issues.	Process Improvement	Tutorial	2007
20070634	Octopus micro-finance suite: an agile software development applied to our imperfect world	Agile practices bring very successful improvements to building software. \r\nDespite these improvements we have all experienced and tried to reduce the \r\nunknown part in software projects: the famous â€˜human factorâ€™. We are still in \r\nthe pursuit of the magic potion - that will help us solve issues like initial \r\ndata capture, parallel run and change management. \r\n\r\nThis session will explain how we have developed and deployed a micro-\r\nfinance piece of software, the achievements and issues we faced in \r\nchanging people's practices remotely in poor countries like Tajikistan and \r\nAfghanistan.\r\n\r\nWe hope our feedback from the field will help you find your own Holy Grail!	Customer	Experience Report	2007
20070716	Refactoring Databases : Evolutionary Database Design	For years the norm for object developers was to work in an evolutionary \n(iterative and incremental) manner but for database developers to work in a \nmore serial manner.  The predominance of evolutionary  development \nmethodologies such as Extreme Programming (XP), Feature Driven Development \n(FDD), the Open Unified Process (OpenUP), and the Rational Unified Process \n(RUP) it is clear that the two groups need to work in the same manner to be \nproductive as a team.\n\nScott and Pramod will present material from their book "Refactoring \nDatabases:Evolutionary Database Design" on how to go about doing evolutionary \ndatabase development and will talk about the following techniques:\n\n1. Database refactoring.  Evolve an existing database schema a small bit at a \ntime to improve the quality of its design without changing its semantics.\n\n2. Evolutionary data modeling.  Model the data aspects of a system iteratively \nand incrementally, just like all other aspects of a system, to ensure that the \ndatabase schema evolves in step with the application code.\n\n3. Database regression testing.  Ensure that the database schema actually \nworks.\n\n4. Configuration management of database artifacts.  Your data models, database \ntests, test data, and so on are important project artifacts which should be \nmanaged just like any other artifact.\n\n5. Database Schema Deployment.  Ensure that the scripts used to build \ndevelopment environments are the exact same used in QA, UAT and production.  \nEnsure deployment to production is not a surprise and not a project in itself.\n\nObjectives: Tutorial participants will gain in depth knowledge about different\nways to refactor their database. Detailed instructions on refactorings will be\nprovided. This will include systematic instructions along with application and\ndatabase code examples with UML diagrams.\n\nAudience: Developers, DBAs, Change Managers, Deployment Managers, and Project\nManagers.	Developing	Tutorial	2007
20070677	Team Estimation Game	Agile development teams need to be able to provide estimates for sets of User \nStories in reasonable amounts of time.\n\nEstimation sessions sometimes become lengthy because team members want to \ndelve into the details of each story before they are comfortable enough \nto â€œcommitâ€ to a numeric estimate.\n\nThe Team Estimation Game offers an interactive way for teams to quickly \nestimate user stories using relative story complexity, without numbers.	Developing	Discovery Session	2007
20070596	The Business Case For Agility: The Lean-Agile Connection	Mary and Tom Poppendieck put forth 7 principles of lean software development \r\nin their seminal text: Lean Software Development: An Agile Toolkit for \r\nSoftware Development Managers. These 7 principles are:\r\n\r\n  deliver fast \r\n  optimize the whole \r\n  eliminate waste \r\n  build integrity in \r\n  create knowledge \r\n  respect people \r\n  defer commitment \r\n\r\nThis seminar presents the case for why we must develop software consistent \r\nwith the agile methods of Scrum and Test-Driven Development. Four aspects of \r\nagile methods in particular are investigated:\r\n\r\n1. Iterative development. The best way to eliminate waste is to not build \r\nthings that aren't needed. This implies an iterative process where priorities \r\nare continuously re-examined. \r\n\r\n2. Scrum. Lean's workcell concept is manifested in Scrum's cross-functional \r\nteam. Scrum's emphasis on team also includes the principles of amplifying \r\nlearning and localizing responsibility. \r\n\r\n3. Automated testing. Test-Driven Development is consistent with the Lean's \r\nautonomation principle of a smooth flowing production line that is stopped \r\nanytime there is an error to get at the root cause of the problem. This \r\nfollows the principle of build integrity in. \r\n\r\n4. Writing quality code that can be refactored. Deferring commitment is an \r\nintegral part of agile coding. By writing just what you need now, you don't \r\nbuild in structure until you later discover what is truly needed. \r\nThis seminar provides insights into how Lean guides many current agile \r\nprocesses. This provides both a business case for agile methods as well as \r\ngiving developers insights into how to better follow agile methods.\r\n\r\nOutline:\r\n * The seven principles of Lean Software development Eliminate waste \r\n    * Deliver fast \r\n    * Optimize the Whole \r\n    * Eliminate waste\r\n    * Build integrity in \r\n    * Create knowledge\r\n    * Respect people\r\n    * Defer commitment \r\n * The Lean-Agile Connection \r\n    * How Lean implies an iterative process \r\n    * Lean and Scrum: Work cells and cross-functional teams. Building code as \r\nan integrated process of analysis-design-code-test. \r\n    * Automated testing: Building code only after its acceptance requirements \r\nhave been specified \r\n    * Eliminating waste by managing change. \r\n    * Conclusions	Process	Talking Head	2007
20070406	The Daily CI: Continuous Integration for Beginners	Continuous Integration (CI) is one of the core practices of an Agile project.\r\nHowever, adopting CI in an existing project or team can be challenging. In this\r\nhands-on session, we propose to introduce attendees to the processes and\r\nconcepts of CI systems and making best use of the CI methodology. \r\n\r\n\r\nDelegates will work in small teams on an Agile non-software project: producing a\r\nfictitious online newspaper.  Each team will play one story per 10-15 minute\r\niteration to add editorial features and content to the newspaper.  Delegates\r\nwill be occasionally rotated through the teams to reflect a real-world project\r\nenvironment.\r\n\r\n\r\nThe presenters will provide stories with acceptance criteria, and a CI system to\r\nrun automated tests and publish the newspaper.  The presenters will not only be\r\ntechnical facilitators, but will also be available as on-site customers to guide\r\ndelegates in completing their stories.  The content will be printed during the\r\nsession and copies will be available to participants as a memento.\r\n\r\nRequirements:\r\n\r\nNo development skills are assumed in the session but delegates will be\r\nexpected to edit simple HTML documents using commonly available utilities\r\nprovided by the presenters. such as a text editor, and a word count utility.\r\nDelegates will need to bring a laptop to the session.	Developing	Workshop	2007
20070474	Transitioning to Agile Project Management	Agile methods (Scrum, eXtreme Programming, Crystal, Feature Driven \r\nDevelopment, etc.) have been moving into the mainstream over the past few \r\nyears. Industry leaders like Yahoo, Travelocity, DTE Energy and Capital One \r\nhave proven that, implemented appropriately, agile accelerates project \r\ndelivery times, increases customer and employee satisfaction, and provides \r\nflexibility to changes in business requirements.  Forrester Research reports \r\nthat 14 percent of North American and European "early adopter" enterprises are \r\nalready using agile, and a second wave of adoption involving another 19 \r\npercent is underway with corporate IT enterprises leading the way. \r\n\r\nIn this session, Sanjiv Augustine will cover the basic principles and \r\npractices of agile methods and Agile Project Management (APM).  Participants \r\nwill learn the differences between agile methods and traditional waterfall \r\ndevelopment; and how to interpret the fundamentals of APM: throughput, \r\nteamwork and leadership, when transitioning to managing agile projects.	Leadership	Beginners Program	2007
20070451	UAT and Beyond... Getting the Most From Your "Customer Team"	When we think agile testing, we often think testers working closely with the\r\ndevelopment and customer teams, helping to identify acceptance tests using a\r\ntool such as FIT.   What do you do when your company has an independent test\r\nteam? How do you integrate that team into the agile process?  How can they work\r\nwith the customers or marketing teams?\r\n\r\nThis tutorial will give specific techniques that your testers can use to help\r\nunderstand their role. It will have a special focus on how testers interact with\r\nthe customer throughout the whole development lifecycle, helping them achieve\r\n'advance clarity' before starting a release/sprint cycle, eliciting requirements\r\nand turning them into tests, right through to UAT and release.\r\n\r\nManagers will get ideas on how to structure the team so that testers keep their\r\nindependent role fulfilling audit requirements, but still adhere to the agile\r\nvalues and add value to the team. \r\n\r\nWe'll use hands-on exercises, examples and lecture/discussion to help testers\r\nunderstand their role working on mainstream agile projects and helping to\r\nachieve successful customer team participation.   The session  will be tailored\r\nas much as possible to the needs of the actual attendees by means of polling\r\nthem at the start and adjusting the content and focus accordingly. Participants\r\nwill also learn from each others' experiences through discussions.	Customer	Tutorial	2007
20071063	VT5	450. Executable Specifications with Green Pepperby Andre Brissette, Product Director, Pyxis Technologiesby Francois Beauregard, Pyxis Technologies\r\n1055. The Ripple Effect of Agileby Charlie Rudd, President and CEO, SolutionsIQ\r\n1071. Enabling Enterprise Agilityby Brad Murphy, Valtech	Other	Session	2007
20071035	XR12: Business and Technical People Working Together	827. How We Made Onsite Customer Work - An Extreme Success Storyby Jay Packlick, Agile Evangelist and Coach, Sabre Airline Solutionsby Scott Coburn , Sabre Airline Solutionsby Rajeev Bellubbi , Sabre Airline Solutionsby Michelle Williams , Sabre Airline Solutions\r\n640. A Technical Storyby Alex Vandenberg, Consultantby Vivake Gupta, Lab49\r\n634. Octopus micro-finance suite: an agile software development applied to our imperfect worldby Eric GROISE, Octopus Product Manager, OCTOby Nicolas Mangin, OCTO	Customer	Session	2007
20090403	Ugly Code vs Clean Code: A/B Comparison of Legacy/Test-Driven Implementations	The instructors wish, when they were first learning test-driving, refactoring, and OO, that they had had a side-by-side comparison between code Heaven and code Hell. Such an object lesson would have made the value and benefits of agile programming practices so much more plain, so much sooner. Alas for us, but hurray for you! In this workshop you will be able to compare and work with two very different implementations of the same problem domain: one of them fabulously ugly, and the other of them â€” well â€” a lot better. This is a close-repeat of a successful session we gave at Agile 08.\n\n	Developer Jam	Clinic	2009
20070405	XUnit Test Patterns and Smells; Improving Test Code and Testability Through Refactoring	XUnit is the generic name name given to the family of  tools/frameworks used by\r\ndevelopers when  developing automated unit tests. The community has now had\r\nenough experience with using XUnit to start cataloging â€œbest practicesâ€ and â€œnot\r\nso best practicesâ€ as patterns and smells. This tutorial introduces a number of\r\nthese â€œtest smellsâ€, describes their root causes, and suggests possible\r\nsolutions expressed in the form of a pattern.  \r\n\r\nXUnit Test Patterns and Smells will be of most interest to developers,\r\ndevelopment leads, coaches and architects working in a Test-First or Test-Driven\r\nDevelopment environment. While some exposure and prior usage of one of the\r\nmembers of the XUnit family of test automation frameworks (e.g. JUnit, VbUnit,\r\nRUnit, CppUnit, etc.) is beneficial, even people new to automated testing using\r\nXUnit will get benefits. It is not, however, an introduction to the use of XUnit\r\nin general or any one member of the family in particular.\r\n\r\nMost experienced practitioners of Test-Driven Development will tell you that you\r\nshould expect to have as much test code and production code. â€œYikes! Wonâ€™t that\r\ndouble my cost of producing working software?â€ You ask? The answer, as always is\r\nâ€œIt depends!â€ Test code is not all created equal. There is Single Glace Readable\r\ntest code and there are Obscure Tests. There are Independent Tests and there are\r\nInteracting Tests and Test Run Wars. There are Robust Tests and there are\r\nFragile Tests. In each case, the former are easy to write and maintain while the\r\nlatter increases the cost of ownership of the automated test suite considerably.\r\nThis tutorial provides the participants with a vocabulary of smells and patterns\r\nwith which to reason about the quality of their test code and a set of reusable\r\ntest code design patterns that can be used to eliminate the smells	Testing	Tutorial	2007
20071055	The Ripple Effect of Agile	Join a somewhat different take on a vendor talk. Charlie Rudd, SolutionsIQ \r\nPresident and CEO, engages in an informal session to discuss how adopting \r\nAgile practices has created interesting and positive ripples throughout the \r\ncompany. The question is continuously asked: are we Agile and what does that \r\nmean? Not just by software engineers but also by sales people, recruiters and \r\nadministrators. Adopting Agile practices is not about being Agile but becoming \r\nmore and more Agile over time. Consequently, there are never final answers to \r\nthese questions and more and more of the company needs to get involved for \r\nprogress to continue. This poses interesting challenges and opportunities that \r\nrequire the careful balancing of opposing forces.	Enterprise Agile	Vendor Talk	2007
20071071	Enabling Enterprise Agility	The biggest challenge to the Agile development community may not be from \r\nwithin Agile development.  Instead, the challenge is likely to be in its \r\nrelationships with its customers and executive management.  Valtech is \r\nredefining the relationship between business and IT in order to bring agility \r\nto the greater enterprise, not just to the development team.  \r\n\r\nWith its OnDemand offering, Valtech is extending the notions of backlog \r\nmanagement, Agile team roles, and Agile project and program management.  \r\n\r\nInsight OnDemandâ„¢ brings agility to the area of business needs clarification \r\nand project definition.  The new agile role of Feature Manager creates a \r\ndiscipline around defining and managing a business needs backlog, out of which \r\na set of product feature backlogs are abstracted and managed on the business \r\nside.  By concentrating this function on the business side, the business is \r\nempowered; its needs, priorities, and essential tradeoffs become clearer; and \r\nits new agile values come into alignment with those on the development team, \r\nthereby greatly facilitating communication and understanding.\r\n\r\nSolutions OnDemandâ„¢ turns outsourcing and offshoring models on their heads.  \r\nIt demonstrates the power of Agile practices when organized with an efficient \r\nfeature management discipline (i.e., Insight OnDemandâ„¢) and with the stable \r\nteams concept in cost-effective development proximity centers.  The Lean \r\ndevelopment concept of stable teams is a crucial and innovative aspect of \r\nSolutions OnDemandâ„¢.  A stable team is one which is founded to serve a \r\ncustomer, not just a project.  This customer-focused team executes a number of \r\nprojects, sometimes simultaneously, for a customer.  This approach â€“ which \r\nbelieves that it is much more efficient to assign projects to teams than teams \r\nto projects â€“ utilizes project latency on one project to advance another, \r\ngreatly improving efficiency, the ability to respond to change, and making \r\ndevelopment tradeoffs more explicit.\r\n\r\nIf you are interested in learning what business agility means, in building \r\nmore effective relationships with your business partners, and in getting the \r\nvery most out of Agile development, plan to attend the Valtech presentation on \r\nEnabling Enterprise Agility.	Enterprise Agile	Vendor Talk	2007
20070586	Agile Enterprise Rollout--The Greening of the Software Industry	This talk is being offered by Jean Tabaka, Agile Coach at Rally Software\r\nDevelopment, and Ryan Martens, CTO and Founder of Rally Software Development.\r\n\r\nAbstract: During the 20th century, many materials-based industries, such as\r\nmanufacturing and high technology, relied on a Take-Make-Waste model of product\r\ndevelopment, delivery and selling.  But a 21st century perspective on a growing\r\nscarcity of resources and the expense of waste has led such industries to\r\nrevisit their Take-Make-Waste way of doing business. A â€œback to the\r\nresource-usage drawing boardâ€ has led to an emerging trend toward what are known\r\nas Green Businesses; that is businesses in which waste is viewed as a drain on\r\nthe economy and innovation of the business. \r\n\r\nIn contrast, the software industry has considered itself immune to the\r\ncriticisms of waste associated with the Take-Make-Waste model of product\r\ndelivery. We are knowledge workers: we apply our knowledge as our resource and\r\ncreate digital output as our product. No â€œtakingâ€ on the front end, and no\r\nâ€œwasteâ€ on the back end as a result of our â€œmakingâ€. However, a bit of closer\r\nscrutiny under this non-waste â€œsheep skinâ€ reveals some uncomfortable truths.\r\n\r\nTo stem this model of waste and poison for a more sustainable 21st century\r\nmodel, the software industry has an opportunity to lead in the greening of the\r\nHigh Technology industry. But to do so, it must recalibrate its definition of\r\nproduct development, delivery and marketing. Existing patterns of practices\r\nestablished for classic Green Businesses are a useful starting point for such\r\nwork.  For the software industry, this translates to the following three\r\nsoftware-based trends of a zero-waste model: deliver Software as a Service\r\n(SaaS); apply Agile Software Development for sustainable flow of value; and rely\r\non Social Networks for product uptake. \r\n \r\nAdopting these new practices of doing software business may prove daunting.  \r\nEnterprise Adoption of Agile software development provides both the culture of\r\ndiscipline and planned in innovation necessary to transition to this new\r\nparadigm for the industry. Our Agile Enterprise Roadmap creates such a path of\r\nAgile Software Development adoption. This in turn guides organizations to a\r\nsuccessful adoption of the SaaS delivery and social network promotion and support. \r\n\r\nIn this talk, we present our premise around the necessity of the greening of the\r\nsoftware industry and the trends such a transition requires: SaaS, Agile\r\nSoftware Development, and Social Networks. We will then define our 3-stage\r\nEnterprise Agile Rollout approach for adopting Agile practices that directly\r\nattack the Take-Make-Waste model. We refer to our rollout approach as: Flow,\r\nPull, and Innovate. For each of these stages of the rollout, we will provide\r\nspecific practices; what benefits they bring businesses in the 21st Century,\r\nwhat roadblocks businesses may have to overcome in order to derive these\r\nbenefits; and, how businesses will know if they have truly adopted the practices.\r\n\r\nBenefits to this presentation: Ryan Martens founded Rally Software Development\r\nbased on his convictions around restorative economies and the preservation of\r\nnatural capital.  He passionately believes that software businesses must attack\r\nwaste, not solely for the wealth the business may enjoy, but also for the global\r\ngrowth such conservationist approaches can promote. This talk is an opportunity\r\nto learn about how a passionate view into heatlthy ecomonies guided Ryan and can\r\ntherefore guide other software organizations.\r\n\r\nOutline:\r\nI.\tThe Argument for the Greening of the Software Industry\r\nII.\tWhy SaaS Requires Agile\r\nIII.\tThe Disciplines of the Ideal Software Development Organization\r\nIV.\tAgile Adoption Patterns that Bring Continuous Flow of Value\r\nV.\tCreating a Discipline of Flow at the Team Level\r\nVI.\tHow to Pull Value and Vision from the Business and Market\r\nVII.\tInstilling a Culture of Continuous Innovation Organization-wide	Enterprise Agile	Tutorial	2007
20070616	Agile in the Waterfall Enterprise	In large organizations, itâ€™s simply not practical to just â€œflip a switchâ€ and \r\nhave your IT department start doing agile all at once.  In these situations, \r\nagile pilot teams and non-agile teams/departments find themselves having to \r\nfigure out how to work together during the transition.  Attendees will learn \r\nto factor their companyâ€™s business needs into their existing agile procedures, \r\nand how management can begin the investigative work of determining how to \r\nstreamline these traditional process requirements and activities so that they \r\ndonâ€™t hamper the project. From 10 tips to peacefully coexisting to a list of \r\nhurdles the agile team will have to overcome, the experiences Michele shares \r\nwill help you introduce and keep agile in your traditional environment.  As \r\nnot all companies will choose to move every single software development \r\nproject to an agile paradigm,this agile/waterfall cooperative becomes even \r\nmore important to master.	Leadership	Talking Head	2007
20070633	Community Reflections	The agile community / movement is growing and changing faster every day. As \nthe initial agile flavors blend, the community continues to reach out, \ngathering new ideas from other communities and disciplines. One such practice, \nretrospectives / reflections, is an example of the agile community embracing \nan idea that harmonizes with the core principles of agile. As retrospectives \nand reflections are now a mainstay for many agile communities, this session is \na way for the community to share in this practice. Using the fishbowl format, \nthe session will start with a discussion among long time players in the agile \ncommunity. Once the conversation is rolling, anyone interested may join the \ndiscussion, sharing their experiences or opinions.  The moderator will be \ngathering questions for the fishbowl and keep the conversation flowing through \nthe many topics present at the conference and during the session. Over all, \nthis is a place for the community to meet and reflect on where we have been, \nwhat we have learned, and discuss topics and paths for the future.	Individuals & Teams	Discovery Session	2007
20106143	That Baby Is Ugly: Protecting Naysayers and Guarding Quality on HPTs	Sometimes you just have to call the baby ugly - that is hard to do when the baby belongs to you - or your team.  However, an objective view reveals that software product is in distress, features are getting less and less stable at each release, the user hasn't been considered, but the team wants to stay positive. \n\n	Building High Performance Teams	Workshop	2010
20060254	Are Agilists the Bonobos of Software Development?	The chimpanzees and the bonobos are the animals whose genetic make-up is closest to that of human beings, but their “cultures” (and, yes, animals definitely do have well-defined cultures) are very different.  The chimpanzees are aggressive, and operate in a strict alpha male-dominated hierarchy, while the bonobos are gentle and promiscuous!  What sort of tie-in could this have for those of us who favor agile development over plan-driven?	Main	Talk	2006
20060255	Overview of Agile	In this talk Hubert Smits provides a broad introduction to concepts of agile software development and agile methods. The talk is based on his experience as an agile coach and Certified Scrum Master. Traditional concepts from waterfall or plan-driven development are transformed to an agile perspective. Examples are release and iteration planning, progress reporting, meeting formats and scaling projects from 10 people teams to 300 people teams. 	Beginners	Tutorial	2006
20060414	Burning Down the House	Abstract pending	Main	Talk	2006
20060420	Panel: Give it your best shot: Favorite lectures from agile teachers	Panel: Give it your best shot: Favorite lectures from agile teachers	Main	Talk	2006
20060256	Agile Practices I	This session will contain four presentations which cover key aspects of agile development: planning and tracking, writing and telling user stories, testing, and project management. Each presenter will speak for 45 minutes, providing introductions, examples, and experiences helping communities employ agile techniques. All the presenters have published on the topics, and they are currently helping project communities of all sizes and shapes transition to agile. This session will be beneficial to people new to agile, or using agile and those looking for more guidance or insight from working professionals. 	Beginners	Tutorial	2006
20060257	Is Agile Software Development Still Agile?: A fishbowl discussion to decode the mixed messages in the Agile Manifesto and our observations about Agile Development 5 years later	Agile Software Development has now been around for five years. The term Agile along with the Agile Manifesto united processes such as XP, Scrum, Crystal, Adaptive, and FDD under a common name and mostly common cause. But after the shine starts to dull on our freshly discovered common cause, one has to take a closer look back at the Agile Manifesto as it relates to what we've actually been doing over the past five years. If Individuals and Interactions are valued over Process and tools, why is it we have so many books and conference tutorials about process along with so many neat tools to support those well documented processes? The irony doesn't stop there. You'll find Agile books on documenting better user stories, tutorials on writing better customer contracts, and expert guidance on increasing the rate and efficiency of our planning activities. Oddly, we seem to be doing all out innovation on the right side of the Agile Manifesto statements - presumably the side we value less. Are we becoming the process dependent junkies we originally feared? These questions and more will be discussed and argued as we look back at Agile development over the past 5 years and ask "Is Agile Development still Agile?"	Discovery Sessions	Workshop	2006
20060258	Agile Web Development	Agile web development using “standard” frameworks – such as .NET or J2EE – is difficult, mainly because the environments have test-averse constraints such as runtime code generation.  Over the past two to three years, a series of lightweight technologies have radically changed the landscape in the Java world. This session is a fully hands-on guided opportunity to test-drive real software changes using both unit and acceptance level tests working with these frameworks. The specific technologies to be used include Java, Spring, Hibernate, Velocity and FitNesse. People attending this session are highly recommended to also attend Test-Driven J2EE: Life Outside the Container with J.B. Rainsberger for a more in-depth understanding of the principles and techniques involved.	Hands-on	Workshop	2006
20060259	Agile Software Development: The Current State of the Union	In March 2006, Scott ran an online survey via Software Development and Dr. Dobb’s Journal, two magazines which were recently combined into the new Dr. Dobb’s Journal.  The survey explored whether organizations were adopting agile methods and techniques, which ones they were adopting, and how successful they were in doing so.  Over 4,200 people responded to the survey, representing a range of organization sizes as well as various positions within those organizations.  This talk will share the results of this survey.	Main	Talk	2006
20060261	Agile Software Development in the Large	A lot of people still believe that agile software development is for small teams only. However, the agile value system and the principles behind as stated in the agile manifesto don't say anything about team or project size. Furthermore the projects I'm working on are typically large, distributed and mission-critical. Therefore, several years ago I took the challenge and tried agile software development in the large. Meanwhile I made the similar experience on many large projects: Also large and even distributed teams can benefit from a value system that is beneficial for small teams. In this tutorial I want to show how to scale agile processes to teams of 200. In fact, the same techniques are also relevant to teams of ten or more developers, especially within large organizations.	Tutorials	Tutorial	2006
20060262	Intro to the Agile Manifesto	The agile manifesto was created to succinctly capture the common aspects of agile development. The presenters in this session will each spend 20 minutes talking about one of the four items from the agile manifesto: 1) Individuals and interactions over processes and tools, 2) Working software over comprehensive documentation, 3) Customer collaboration over contract negotiation, and 4) Responding to change over following a plan. Along with being key players in the agile community, several of the presenters we among the group that crafted the original manifesto.	Beginners	Tutorial	2006
20060270	Agile Architecture	Let's say your team has been Listening Testing Coding and Refactoring along for years. You've said everything there is to say Once and Only Once. You check your velocity from the burndown on your information radiator at the end of every sprint, so you've got that process thing down...and all of a sudden that's just not nearly good enough any more. How could a Lego model of a steam locomotive provide deeper insights into architectural choice in an agile environment that could get you out of that fix? Join this interactive tutorial to experiment, challenge and develop ideas about "architecture" and "merciless refactoring". You'll come away with a new insight into the techniques that long established Agile teams are discovering to obtain the step-changes in productivity that business demands.	Discovery Sessions	Workshop	2006
20060271	Earned Value and Agile Reporting	This paper reviews the concepts of Earned Value Reporting established in traditional project management, and determines whether and how they can be applied to software development projects following an Agile methodology. First the origins and concepts of Earned Value, are reviewed followed by its application in traditional projects. Then the application of Earned Value Management to Agile software projects is investigated.	Research	Research Paper	2006
20060263	Exploratory Testing is Really Agile Testing	Traditional lore in the agile world holds that testing is essentially a process of confirmation, asserting the product works properly and that it can be refactored with greatly reduced risk. Yet to be effective, testing must also be a process of investigation - asking challenging questions about the product, and answering them by operating and observing the product. Exploratory testing is a simultaneous process of designing tests, executing them, and learning is key to serving this part of the testing mission. There are many misconceptions about exploratory testing - that it is sloppy, random, unaccountable, or unstructured. (Interestingly, agile processes are sometimes accused of the same things.) This tutorial explains exploratory testing, shows its structure and discipline that may not be apparent to the untrained eye, and engages participants in exercises that give a feel for the process and some experience with it. Since it involves rapid learning, adaptation to new information, and lowered documentation overhead, participants should recognize that exploratory testing is a truly agile process, and should leave the presentation knowing how to do it better. Exploratory testing exemplifies the agile preferences for working software over comprehensive documentation, and for responding to change over following a plan.	Tutorials	Tutorial	2006
20060264	Making movies and software at the speed of thought!	Director Robert Rodriguez (Spy Kids, El Mariachi, Sin City) is an Agile Director. He enjoys making highly creative movies quickly and cheaply. His ambition is to make movies "at the speed of thought". To achieve this goal, he works in small teams to develop the ideas, visualize them quickly, shoot the movie fast, and build the movie in layers. This workshop will introduce Rodriguez's approach to filmmaking by screening several of his "10 minute flick school" featurettes and we will explore if and how these techniques translate to software development in a lively group discussion.	Discovery Sessions	Workshop	2006
20060265	Incremental Releases Your Users Will Love: How to deliver functionally complete releases without blowing your brains out	One of the benefits of Agile Software Development is early and continuous delivery of valuable software. Dividing development work up into small pieces (user stories or backlog items) then building the most valuable parts first sounds like a simple idea, but there's often a bit more to it. Sometimes it takes a few not-so-valuable parts to allow users to take advantage of the most valuable parts. At times the most valuable parts may show well, but without a sufficient amount of software implemented, users may be unwilling to set aside legacy software or even manual processes to actually put the new software into use and earn the return on investment incremental release should bring. In this short tutorial participants will learn the basics of planning incremental releases that are useful to their users. We'll discuss strategies for splitting user stories into the small but useful parts that allow releases to contain more user stories. You'll learn more about the myth of the finished user story and why, if you're not cautious, your stories may inflate while you're not looking.	Tutorials	Tutorial	2006
20060266	Refactoring Games	Learning code smells and refactorings can aid in our communication and deepen our understanding of design and how to evolve it. But many developers fail to find the time to study code smells and refactorings on their own. In this session, you will learn to play several games that teach code smells and refactorings. We will use decks of refactoring playing cards that include cards for code smells, refactorings, and qualities of good code. These games have been used in many workshops and have proven to be both effective and fun. You will also get your own deck of cards so that you can play these games with your friends and project teams.	Discovery Sessions	Workshop	2006
20060267	The Role of the Customer Team	Agile processes require that developers have a close working relationship with their customers. What is the nature of this relationship? This tutorial explores this question, and defines and explains the set of responsibilities the customer has. Two things that are certain are: 1. The existence of a good customer is a primary success factor; and 2. Being a good customer is one of the hardest things to do. The exploration starts small. The two most popular small-team agile methods are eXtreme Programming (XP) and Scrum. Superficially, one would suppose that XP's Customer and Scrum's ProductOwner were "one and the same", but closer inspection shows that there are both similarities and differences. By studying these (and other) processes' views of customers, we arrive at a small set of primary responsibilities for the customer: - Determine what the stakeholders want / need from the System; - Prioritize what will actually be developed; - Refine the requirements with the development team; and - Validate that the System delivered is the one agreed upon. To get all of this done usually takes a collection of people we call the CustomerTeam. In this tutorial we describe the challenges in detail and give some tentative solutions.	Tutorials	Tutorial	2006
20060268	Functional Acceptance Testing: The Essentials	Functional testing is challenging whether you are working on an agile project that develops tests before developing system code, or working on a more traditional project that has left functional testing until the end. Different choices must be made in each situation in order to develop a successful functional testing strategy. It is crucial that automated functional test suites employ established testing best practices in order to avoid common pitfalls. Topics covered include: 1. Context: How functional tests fit into the overall spectrum of testing. Where functional tests fit into the overall project development cycle. 2. Strategy: A functional testing strategy is a collection of decisions relating to creating, maintaining, and executing functional tests. Various project characteristics drive these decisions. 3. Specification: Functional tests can be textual, graphical, tabular, or storyboarded. Emphasis is placed on developing a domain specific testing language, and other best practices for making your tests a valuable project asset. 4. Automation: Several tools are compared with respect to readability, maintainability, declarativeness, effort, results reporting, etc. 5. Case-Study: Description of a project that evolved its focus over time (from porting to enhancements), and how the functional testing strategy was developed to evolve successfully.	Tutorials	Tutorial	2006
20060269	Agile Before They Know It: Tips for Agilists in a Non-Agile World	"If only my project were more agile!" How many times have we heard, and made, this plea? As Agilists, we long for something better than what we have. We try to influence our projects to be more agile. Sometimes we have great success, but other times it just doesn't seem to click. This workshop is an opportunity to share simple, practical tips for Agile conversion that work. Imagine a swap meet where tools for Agile adoption are shared, explained, demonstrated and practiced. We will diversify our toolboxes so that when we go home to our respective projects, we can be a little less frustrated and get a little more done. We may back off the wrecking ball in favor of the surgeon's scalpel. In fact, our coworkers may find that they're Agile Before They Know It!	Discovery Sessions	Workshop	2006
20060272	An Empirical Study of Using Planning Poker for User Story Estimation	Group estimation of user stories is an important part of most agile processes, used for both planning and pricing. Research has shown that although group estimates in many cases are superior to individual estimates, there is still a need for improvement. For instance, group estimation performance can be reduced by dominant personalities and anchoring effects. Through the analysis of 101 user story estimates made by an agile development team, we investigate whether the introduction of a voting process, derived from Wideband Delphi, improved the estimation ability of the team. The results show that the voting technique improved the team's estimation ability in most cases, but that it increased estimation error in the extreme cases. We believe that the voting technique can improve agile teams' ability to deliver promised functionality on time, improving time-to-market.	Research	Research Paper	2006
20060273	AgileEVA - Earned Value Management in Scrum Projects	AgileEVA is a simplified set of earned value calculations. Adding AgileEVA to Scrum yields simple and effective what if scenarios for balancing scope, schedule and budget. The balanced information helps keep focus on "return on investment." Using only five initial values and four data points, AgileEVA adds almost no overhead to a Scrum Project and adds particularly valuable cost performance information which is important for helping measure productivity improvements. For organizations required to use Earned Value Analysis (EVA), AgileEVA provides additional support to assert that Scrum is a viable project management method. Using AgileEVA will help organizations familiar with traditional project management interpret the results of Scrum projects. For organizations running Agile projects, AgileEVA contributes to balanced practices. AgileEVA is intended to help ScrumMasters, Project Managers, Product Managers and Key Stakeholders involved in project delivery. This is especially true for organizations struggling with the implementation of Agile software development.	Research	Research Paper	2006
20060274	Extreme Test Makeover	Are your tests disheveled, flabby, or unfocused? Bring them in for a makeover! We’ll have makeover artists who are experts in unit and acceptance testing, with tools such as Fit, JUnit, NUnit, Watir, and more. This is a hands-on session – bring your laptop with your tests and a development environment, running and ready to test. Or just come and observe how the experts work. Your application can be a toy or a real application, though we really encourage you to bring a real application. We’ll have two tables with multiple sessions per day—90 minutes each (including a little overhead time). We’ll have sign-up sheets for each slot. At the end of each session, we’ll capture “lessons learned” and share them with others at the conference.	Hands-on	Workshop	2006
20060276	Demonstrating Responsibility: The Mindset of An Agile Leader	Demonstrating personal responsibility is the first step in leading anybody, changing anything, solving any problem, and managing every relationship. Everybody knows that. But not everybody knows how to take responsibility. More importantly, even highly responsibility people do terribly irresponsible things on a frequent basis because they don't understand the Responsibility Process. The failure to take responsibility stalls projects. And it's a leading reason why smart executives fail. This tutorial will show you: - why agile leaders success soars when they take 100% responsibility - the inner workings of personal responsibility and how to tap into it at work, and - exactly what to do to take personal responsibility for your agile projects and to build responsible leaders, teams, and communities.	Tutorials	Tutorial	2006
20060277	Overview: Agile Styles	There are many ways to practice agile development. The speakers in this session will each spend 30 minutes talking about a specific style of agile development. This session will provide insights that may help you determine which agile style might be a good fit for your company and culture. The speakers and the topics are: Kent Beck on XP, Ken Schwaber on SCRUM, Mary Poppendieck on Lean, Jean Tabaka on DSDM, David Anderson on FDD, and Alistair Cockburn on Crystal. If you are new to agile, do not miss this session - a gathering of this group of speakers is a unique experience.	Beginners	Tutorial	2006
20060278	Rapid Testing Approaches for Agile Development	Agile processes are sometimes disparaged by traditionalists because agile teams prefer working software to comprehensive documentation. Yet some agile adherents, in their choices of testing strategies and tools, may themselves run the risk of producing more documentation and doing less testing than they might. Rapid Testing, a complete methodology designed by James Bach, shares the anti-clerical, anti-bureaucratic point of view espoused by agile proponents, and focuses on providing feedback quickly through rigorous, aggressive, mission-focused testing. Rapid Testing also encourages teams to expand ideas about testing, to make pragmatic choices about test automation, and to investigate the product to find important bugs quickly. In this Discovery Session, Michael Bolton provides an introduction to Rapid Testing - defined as the fastest, least expensive testing that fulfills the mission. Rapid Testing is built on thinking skills-general systems thinking, critical thinking, and context-driven thinking - but it's also focused on action, lightweight tools, and rapid cognition. Michael will highlight the central skills and practices of the approach, show how it fits in an agile environment, challenge some dogma, welcome discussion and debate, demonstrate quick tests that provide some information at minimal cost, and present several exercises from the Rapid Software Testing course.	Tutorials	Tutorial	2006
20060279	Is Your Organization Ready for Agile?	Topic: How to assess organizational readiness and lead the change to agile development Agile software development sounds really great. Higher productivity, better return on investment, quicker delivery of software, motivated and energetic developers are all appealing. Are you willing and able to do what is required to get these benefits? Some people think all you have to do is read books, take courses, and then implement Agile. But the work is much deeper and harder and has many aspects of organizational change management. This tutorial will help you understand how to assess your organization and determine whether the conditions are right to make a change to agile a success.	Tutorials	Tutorial	2006
20060280	The Lego XP Game	This variation on the classic XP game has been used effectively as a teaching tool within ThoughtWorks and with our clients. Unlike the traditional XP game, where the tasks being worked on are unrelated and repetitive, instead each team will iteratively develop a series of models. Whilst we talk specifically about XP, many of the topics covered are generic to all agile development methodologies.	Tutorials	Tutorial	2006
20060281	Agile Practices II	Adding to the introduction series, the speakers in this session will each talk for 45 minutes, diving deeper into various agile topics. Scott Ambler will discuss agile modeling and how it fits into agile development. Joshua Kerievsky will talk about the challenging and important concept of evolutionary design. Esther Derby will talk about the many team dynamics that lead to successful adoption of agile, and Mike Hill will conclude the session with an overview of essential todos associated with healthy transitions to agile development.	Beginners	Tutorial	2006
20070676	Effective product ownership within a multi-component project	Does SCRUM scale is a question that many people ask especially by people who \r\ndonâ€™t want to implement the process in the first place. Our experience tells \r\nus that it does, but not without a few bloody noses along the way especially \r\nfor the product owner. Teams and Scrum masters seem to naturally scale, but in \r\nour experience the role of product owner did not. Our report shows what we did \r\nto effectively scale product ownership and the highs and lows of the journey \r\nwe took getting there.	Customer	Experience Report	2007
14354	How to Mentor Software Apprentices	Everyone is looking for seasoned programmer to add to their organization.  There is another option:  Grow your own.  Come learn about how to start an apprenticeship program within your organization.  By` drawing on centuries of learning in craft and trade, we'll explore how you can build  a program to teach programers in one of the oldest and best proven methods of education.	Coaching & Mentoring	Lecture	2012
20060283	Tracer Bullets Reloaded	It's not about hitting a target, but rather constantly checking that you are heading in the right direction. It is better to include early attempts and take small steps to improve your aim. In this workshop attendees will experience an extreme simulation of building software using the principle of extensive feedback and evolution, which is at the core of XP. Teams will have to build a product from things like wood, sticky tape and pins in a non-software game within a short timeframe. In our experience of working within agile teams, we have found that it is just as important to apply the principle of extensive feedback and evolution to the development process as it is to the software itself. The XP values and core practices can be used as a recipe to create a specific XP flavour within a team environment. Using feedback, one can then adjust the recipe to taste. The workshop is structured in such a way that we investigate and apply this principle and, through coaching and reflection, we expect to draw conclusions that show how to make the process itself as agile as the software developed.	Discovery Sessions	Workshop	2006
20060284	Skills for the Agile Designer	What makes an agile designer effective? Agile designers need to quickly see the essence of a problem, shape reasonable solutions, and communicate complex ideas. When things don't exactly go according to plan, they must react, readjust their thinking, and try again. This tutorial introduces several techniques and vocabulary for articulating the nature of design problems and their solutions: Problem frames identify the typical structure of software tasks. Designer stories set the stage for collaborative design. Role stereotypes are useful for assigning or assessing object behaviors. Control styles can help characterize and communicate control center designs. Trust regions can aid in spotting places where defensive programming is needed. Seasoned designers strike a balance. They know the difference between core and revealing design tasks and plan accordingly. When unanticipated difficulties crop, they adapt their work rhythms. We'll outline strategies for identifying and tackling wicked problems that can't be solved by sheer effort alone. Finally, we conclude by introducing argument moves so you can analyze others' positions, think critically, and hopefully hold your own in a heated discussion.	Tutorials	Tutorial	2006
20060285	Do Less and Deliver More; Lessons from Lean Production.	For everyone new to agile methods, this workshop will give you hands on experience with how agile methods work. For individuals experienced with agile, this workshop will give you deeper insights into why agile methods work and how to accelerate your results. Participants will run a business simulation, where teams compete to produce products in a marketplace. The simulation will surface issues that recur in the real world, giving participants an opportunity to try out new behaviors and beliefs to resolve these issues. As teams review financial and operational metrics, they will iteratively refine their approach and discover key principles from lean production, theory of constraints, and product development. The group will link these principles to software development and understand how higher performance demands agile practices. Attendees should dress comfortably as this experiential learning activity will require a great deal of movement around the room. The presenters have run this simulation many times for audiences ranging from executive management to development teams adopting agile. Attendees have described this workshop as "illuminating, an eye opening way to accelerate software development."	Discovery Sessions	Workshop	2006
20060286	Refactoring with Contracts	Design by contract is a practical methodology for developing code together with its specification. The contract consists of class invariants and method pre- and postconditions. As the code is refactored, specifications of internal units change with the code. There are mutual influences between the code and the contract. The assertions that constitute the contract are Java expressions; refactorings such as Rename Method must change these assertions as well as the code. The contract has methodological implications, which serve as preconditions on some refactorings; these must be checked before performing those refactorings. In addition, some contract modifications follow from certain refactorings, and can be done automatically. Development environments that support design by contract must take these influences into account. We report on the implementation in Eclipse of several refactorings that involve both code and contract. These show how contracts are modified in response to code changes, how contracts prevent certain changes, and how new contracts are computed for newly-generated methods and classes.	Research	Research Paper	2006
20060287	Executable Acceptance Tests for Communicating Business Requirements: Customer Perspective	The study investigates capability of executable acceptance test (storytest)-based specifications to communicate and validate functional business requirements. The central hypothesis of whether customers in partnership with an IT professional can effectively specify acceptance tests was supported. Learnability and ease of use analysis indicates that an average customer may experience difficulties learning the technique. Several additional propositions are evaluated and usage observations made.	Research	Research Paper	2006
20060288	On Agile Performance Requirements Specification and Testing	Underspecified performance requirements can cause performance issues in a software system. However, a complete, upfront analysis of a software system is difficult, and usually not desirable. We propose an evolutionary model for performance requirements specifications and corresponding validation testing. The principles of the model can be integrated into agile development methods. Using this approach, the performance requirements and test cases can be specified incrementally, without big upfront analysis. We also discuss a rare experience in the field and how our model relates to the results of the case study.	Research	Research Paper	2006
20060289	Implementing Agile Methods in Large Organizations	In the last couple of years agile methods have become increasingly mainstream. Whereas several years ago agile methods were being implemented in a few project teams in an organization, today CIOs and VPs of engineering are funding initiatives to implement agile methods widely in their organizations. This tutorial is about one such implementation at Kronos, a 500+ person software engineering organization, and how what we learned from this engagements can help others facing this opportunity. The presenters for this unique tutorial are Peter George, VP of Engineering at Kronos, Inc. a worldwide provider of workforce management software, Jim Highsmith, Sr. VP of Agile Practices at the Cutter Consortium, and Josh Kerievsky, Founder of Industrial Logic. This tutorial will cover this major agile implementation initiative from: Peter's initial investigations into improving software development; to a 6-week in depth qualitative and quantitative assessment done by Jim and Josh (and Michael Mah, a metrics consultant); to Peter's rationale for such a momentous change; to creating an implementation strategy and action plan; to the training and coaching of 40 project teams, to the results achieved by Kronos in the first year of this transition. There will be ample time during this tutorial for interaction with participants to discuss how this experience, and others, could help your organization's transition to agile.	Tutorials	Tutorial	2006
20060290	A Case Study on the Impact of Customer Communication on Defects in Agile Software Development	Effective communication and feedback are crucial in agile development. This has been emphasized especially in Extreme Programming (XP) which embraces both communication and feedback as interdependent process values which are essential for the project to achieve successful results. Our research presents empirical results from three different case studies with partially onsite customer and one with onsite customer. The case studies applied face-to-face communication to different extent and used email and telephone to manage customer-developer communication inside the development iterations. Our results indicate that increased reliance on less informative iteration time communication channels resulted in higher defect rates. These results suggest that the selection of communication methods to be used inside development iterations must be paid significant attention by agile organizations working with partially available customers. This paper also proposes some guidelines for selecting proper communication methods.	Research	Research Paper	2006
20060291	The Role of Story Cards and the Wall in XP teams: a distributed cognition perspective	Much of the knowledge used within an XP team is tacit, i.e. it is hidden and intangible. Two tangible artefacts that carry information about the team's work are the index cards which capture stories and tasks to be implemented and the wall where they are displayed (which we refer to as the "Wall"). It is widely acknowledged that these are key elements supporting the work of the XP team, but no systematic investigation of their role has been reported to date. In this paper, we focus on the use of these artefacts within one XP team. We use distributed cognition, a framework for analysing collaborative work, to explicate the information flows in, around and within the team that are supported by the index cards and the Wall. We then interrogate the models produced using this analysis to answer "what if" questions.	Research	Research Paper	2006
20060293	Context Driven Agile Leadership	Agile approaches have become increasingly popular among teams looking to shed unnecessary process overhead in order to maximize the velocity of business value delivery. However, it is a challenge to understand just what is "sufficient" and what is an appropriate leadership style for any given project. One thing that has become quite apparent is that what is "barely sufficient" for one project may be insufficient for another, or overhead for yet another. When looking at our project history, we observed two primary attributes that influenced the type of leadership process used: complexity and uncertainty. Starting from a core set of common practices, the assessment of these complexity and uncertainty attributes enable us to craft a process generally suitable for a given project. One benefit of this approach has been identifying these project drivers and providing earlier guidance to project teams so that they can start with a process that is close to appropriate.	Tutorials	Tutorial	2006
20060294	Introducing agile practices to your team or organization	Those who attend conferences or read articles see new ideas they want to take back to their organizations, but then struggle to make it happen. This struggle has become especially apparent of late as enthusiastic agile development proponents want to encourage their teams to apply these new approaches. The intent of this tutorial is to provide successful change management strategies to help these agile proponents.	Tutorials	Tutorial	2006
20060295	Delivering Flawless Tested Software Every Iteration	Are you delivering software iteratively, but still struggling with bugs and poor customer satisfaction? Many teams leap feet-first into agile development only to discover that it's not always easy to write good software without detailed requirements. Sometimes it seems like testers are running an iteration behind the rest of the team and are constantly playing catch-up. This tutorial introduces the agile acceptance testing process. Automating acceptance testing is a big part of the picture, but even more important is agreeing as a team on key attributes of the system being built. This tutorial heavily emphasizes building consensus so that by the end of the Iteration Planning Meeting, the whole team agrees on exactly what to build. We'll discuss what makes a good user story, how and when to elaborate your stories with detailed acceptance criteria, and how to use Fit/FitNesse to turn those criteria into automated acceptance tests. We'll work through exercises and specific examples, so that participants leave knowing what they need to get started with agile acceptance testing.	Tutorials	Tutorial	2006
20060296	Systems Thinking - drawing causal loop diagrams to effect change	This session introduces systems thinking using causal loop diagrams (a.k.a. diagrams of effects). Systems thinking is a methodology independent tool for understanding team and project dynamics and for finding effective interventions. This tutorial is for software developers, project leaders, coaches, customers, anybody involved in (IT) projects. Participants are not required to have any knowledge or experience in systems thinking. In our work as software development coaches, we have noticed that changing your software development method changes your organisation. We have run into questions like: why can't the customer keep up with the programming team and what can be done about it? How can we get a team to start unit testing? Is the lack of unit testing really the team's biggest problem? We have found that systems thinking is a simple but powerful technique for finding answers to these questions. Participants will learn to apply the Diagram of Effects (or Causal Loop Diagrams) technique, to different situations in projects, teams, and organisations; they also have an opportunity to share experiences in a structured way. After this workshop, participants can apply systems thinking to effectively influence the dynamics of their software development projects, teams, and organisations.	Tutorials	Tutorial	2006
20060297	Agile Metrics and Diagnostics: Knowing When and What to Measure	Little has been written to date by the Agile community on metrics. Or, more precisely: few hard-and-fast Agile Metrics have emerged as effective measures. This might seem surprising, but perhaps the temporary and contextual nature of agile metrics explains the emergence of a more heuristic approach. Teams are creating metrics on demand, in support of their goals, applying their understanding of Agile principles and values to create useful measurement tools on the fly. We propose to call these local, contextual measurement tools diagnostics to distinguish them from more long-term metrics used to measure contribution to overall organizational goals. Since Team metrics or diagnostics are highly contextual, they need to be evaluated carefully to know if they are useful. We will present both long term metrics used by the business, and potential diagnostic measures used by the team. We will present our tool for evaluating diagnostic metrics for Agile teams, and invite participants to bring their own team metrics to evaluate with this tool. Together we will discuss both the agile diagnostics workshopped and the value of the tool itself.	Discovery Sessions	Workshop	2006
20060298	Test Driven Development in C++ Hands-on Tutorial	Test Driven Development is a state of the art software development practice. When using TDD, programmers get instant feedback that the code they are writing does what they intend. An open source test harness is used to collect, organize and automate unit tests for your C++ code. This class shows the motivations behind TDD, but does not stop there. Attendees get first hand experience at TDD. You will write code that has extremely high test coverage. You will see how tests can prevent many bugs. You will see how TDD can help programmers prevent memory leaks.	Tutorials	Tutorial	2006
20060299	Storytelling with FIT	This workshop is about how to write acceptance tests that are meaningful, focused, and understandable. On an Agile project, the acceptance test suite is the medium that bridges between the technical and business members of the team to ensure that the right functionality is delivered. The tests must be clear and understandable by both sides, which implies building a common language within the team. This was the original motivation of the FIT framework, and our workshop focuses on the communication aspects of writing acceptance tests. We will not be implementing or running any code during this session. The tutorial is designed to: * motivate readable acceptance tests (as specifications) * show the importance of declarative style testing vs. procedural testing * provide experience in growing an acceptance test language * pass on our experience of using FIT for acceptance testing on multiple projects.	Tutorials	Tutorial	2006
20060300	Running an Agile User Group	The local Agile User Groups around the world are playing a very important role in the Agile movement. They have been an important source of knowledge about Agile Software Development - and they have inspired a large number of individuals and organizations to lighten up their heavy processes. But how do you start a User Group?. Where do you find the members? How do you get people to sign up? Where do you meet - and how often? How do you run the meetings? Do you charge a fee - or is it for free? And last but not least - how do you find the time and energy to keep running your User Group. In this highly interactive workshop, we will share our experiences and ideas about starting and running an Agile User Group.	Discovery Sessions	Workshop	2006
20060301	Tool Words, Weapon Words	Like many other fields, software development uses jargon. IT is filled with terms borrowed from industry, architecture, and other work cultures. Such words are not just tools that help us describe what we do. Words also shape the context in which we work, in ways that serve definite (but unmentioned) agendas. In this session, we present models and tools to detect the use of such weapon words. We show how to deconstruct their meaning, understand the agendas they promote, and disarm them through their use in new, provocative ways.	Discovery Sessions	Workshop	2006
20060303	The Agile Marathon	Many companies today are facing the challenges of moving their project teams to use agile development methods. Much of the discussion these days centers on dealing with the issues and hurdles that must be cleared for teams to achieve success on their agile projects. This paper is about our experience in what we're calling the Agile Marathon. The long-term view of how to maintain success after your team begins to see that they have achieved the benefits of using agile techniques. Our focus and experience is in commercial product software development. We hope to shed some light on the challenge of keeping agile success going over a long period of time. We have faced the challenge to keep our teams motivated and focused on releases lasting over 18 months; the same product, same people, just new releases. Once the team recognizes its success, a new phase begins where it becomes difficult to hold everything in place knowing you've got a long road to travel.	Experience Reports	Experience Report	2006
20060304	Formalizing Agility, Part 2: How an Agile Organization Embraced the CMMI	Most large IT organizations need the best of both worlds - working software that supports ever-changing business needs, and a process for delivering software that is predictable, trainable, and auditable. Organizations with agile software teams often receive timely, cost-effective solutions of sufficient quality. Organizations with formal processes often benefit from industry-recognized certifications and robust process improvement mechanisms. Rarely does a single large organization achieve both. DTE Energy has such a combination; its lightweight yet CMMI-compatible methodology is now used across its 600+ person IT organization to deliver and support working software. Its small teams embrace core agile principles as they provide "just enough" solutions that satisfy maturing business needs. Yet they passed two formal SCAMPI appraisals toward CMMI Level III accreditation, scheduled for mid-2006. This report continues last year's popular experience report on the journey of DTE Energy's agile IT organization toward CMMI accreditation. This report briefly recaps their seven years of agile experience, presents governance mechanisms and change management techniques, and highlights their three-release, nine-month plan for CMMI Level III accreditation. Finally, this report offers suggestions on embracing a formal process framework that are applicable to any agile organization.	Experience Reports	Experience Report	2006
20060305	A Tale of Two Projects	Why do some agile initiatives meet with resistance while others march on to success? How do agile techniques gain a foothold in traditional corporate environments? While the answers to these questions are undoubtedly complex and varied, we had a unique opportunity to experience and analyze the adoption of agile practices on two projects at a major car rental company which, although sharing many similarities including staff, professed commitment to agile process, architecture, and programming environment, experienced two drastically different outcomes. The first became bogged down and eventually went to production late, over budget, with fewer features than expected, and only reluctantly embraced by its user community. The second reached its first production milestone after only 12 weeks, was enthusiastically embraced by its users, and went on to become an unqualified success and a model for other software development projects at this company. In this presentation we will analyze the similarities between these two projects, highlight the differences, and draw conclusions about the factors critical to the success of agile projects in large corporate environments.	Experience Reports	Experience Report	2006
20070978	Introduction to User Stories	Agility is often described as iterative development.  But in truth, it's more \r\nof an iterative analysis process with the pieces being built right after they \r\nare discovered.  The heart of this process is the User Story.  A collection of \r\nrequirement description, value, cost, architecture, test case -- all rolled \r\ninto one.  While at first glance seemingly simple, user stories play a key \r\nrole in all agile methods.  What makes a good one?  How do you write it?  How \r\ndo you make them the right size?  These are all questions we answer in this \r\nseminar.	Customer	Beginners Program	2007
16683	A learningful life: Staying relevant and agile in high tech	What kinds of learning will keep me relevant?\n\nLearning and agile seem to go together, why is that?\n\nHow do you decide where to focus learning?\n\nHow does learning contribute to resilience, versatility, and adaptability?\n\nIs this like that generalizing specialist thing I hear about in agile? Why can t I just get good at one thing and have that be enough?	No Bull Know How	Workshop	2012
20060306	Extreme Construction	Get a jumpstart on the basics of Agile Development and Extreme Programming (XP) in a day, without programming. This workshop will use non-programming construction techniques to teach most of the XP practices in a fun and interesting format. Build a non-software artifact using practices of XP. See how the synergy of the XP practices brings benefits to you and your organization. Many people have an interest in agile methodologies, and XP in particular. Managers need a way to evaluate XP from an institutional benefits perspective and knowing how it actually works can be a help in this. Programmers need to learn the practices before they can begin to effectively use them. They also need a way to see how their current development habits may be in conflict with XP practices. Educators and coaches want effective ways to introduce XP and build teams. This workshop can provide required background for all of these needs in a fun and informative way. This workshop has been given many times in industrial, conference, and academic settings. It has proven to be an effective way to train individuals and teams, and also to help a new agile team coalesce into an effective working unit.	Hands-on	Workshop	2006
20060307	Homer’s Odyssey or My Year of Living Dangerously (Monsters, Magicians, and Domestic Enemies) in Agile Software Projects	In 850 B.C. the literary genius, Homer, captured the adventures of the well-meaning Greek, Odysseus, a young, who fought magicians, monsters, and even domestic enemies in order to return successfully to his home. In 1922, James Joyce, recounted the tale of Buck Mulligan echoing those Odyssean trials in his Dublin home. In 2000 A.D., the Coen brothers out of Minneapolis Minnesota, applied this same classical framework to their wacky film "Oh Brother, Where Art Thou?" In 2005 A.D., an agile mentor (me) out of Boulder Colorado dealt with her own cadre of magicians, monsters, and domestic enemies in order to return successfully to her home. In this offbeat presentation, I will compare the impediments and obstacles encountered by an agile mentor (me) with those detailed in Homer's classical reference. Through the presentation and dialogue, we will discover who plays which classical roles in an organization's effort to adopt agile practices: Cyclops, the Sirens, Poseidon, Circe, Cicones, the Lotus-Eaters, and even the good-and-faithful dog Argus. Each has its modern-day equivalents in agile adoption. We'll confront these pesky impediments and obstacles in agile projects along with advice about: how to recognize them; how to navigate around or through them; and how to know what actions work best in defeating them.	Tutorials	Tutorial	2006
20060308	Extreme Teams	This tutorial will examine some of the ways size, feedback, and communication effect how people work together in teams as well as how teams work with each other. The tutorial format consists of gaming, lecture, and discussion. Real life examples of various team collaboration strategies will be presented with guidelines for building communities of practice.	Tutorials	Tutorial	2006
20060309	The Pairing Session as the Atomic Unit of Work	We have an Extreme Programming team at a small company dedicated to the Agile approach. Our team of 7 developers decided to use the pairing session as the fundamental unit of work for all organizing, planning, estimating, tracking, and of course, pair programming. It's been a great way to structure the day, provide rhythm and facilitate partner swaps. Estimating and tracking in pairing sessions provides us real feedback for improving estimates, resulting in highly effective planning and an extremely stable velocity. We have been working in this way for about a year with wonderful results.	Experience Reports	Experience Report	2006
20060310	Multiple Simultaneous Projects With One XP Team	Why take on multiple simultaneous projects with one XP team? Many people feel that too much time would be wasted task-switching, that the team would suffer too much from fractured thinking, or that a sense of team would be lost. For our group, multiple simultaneous projects is a reality that we needed to face. This presentation will describe some of the reasons why we feel working on only one project wasn't an option for our team, some of the problems we struggled with initially, and what approaches we've developed over the past year to deal with this situation.	Experience Reports	Experience Report	2006
20060311	Value-Based Extreme Programming	Agile methods, such as Scrum and XP, are not known for carefully tracking to time and cost estimates. On most Agile projects, schedule slips are expected and cost increases are predictable. Every slip and increase has a large impact on total value delivered and we need to start acknowledging this fact. Furthermore, project overruns cause other high-value projects to be delayed or canceled, creating a negative value impact. What is missing in these methods is the concept of financial responsibility. Agile needs a better way to measure total value delivered and Agile methods should be more focused on on-time delivery. To ensure that the development process only generates software that provides the highest value for our customers, we need to schedule, prioritize, and deliver the highest value features without any waste. A research study by Jim Johnson at XP2002 showed that 64% of the features in a typical system are rarely or never used. Lowering the percentage of unused features would hugely boost the value generated.	Experience Reports	Experience Report	2006
20060314	Agile Estimating and Planning	is a leading indicator about the overall health of the enterprise, its investment of funds, and - most importantly - its ability to effectively compete. Scrum provokes the most fundamental changes within an organization, changes that reverse over thirty years of waterfall thinking. This is extremely hard for customers and product management to understand and accept, much less for engineering to facilitate. However, when an enterprise's ability to survive is at stake, top management makes the change happen. This head talk will discuss this topic.	Tutorials	Tutorial	2006
20060315	Example-Based Specifications	Some tests are thinly-disguised walkthroughs of a user interface. Other tests are so voluminous that you suspect that even their author didn't read them. But some tests seem designed to facilitate conversations about the key objects and processes in a domain. How can we foster the latter style, to create specifications useful to both machines and people-including end users, product owners, testers, and programmers?	Discovery Sessions	Workshop	2006
20060316	The Truth about Programmers and Testers	Most of today's process definitions mandate separating programmers from testers, not only to different teams, but often to different physical locations. This separation leads to testers and programmers treating one another as adversaries, rather than as members of the same project community. When members of the project community see each other as adversaries, the project can only succeed in spite of, rather than because of, their efforts. Project success, then, depends more on luck than anything else unless testers and programmers work together. In this workshop, participants share experiences and discuss how to create a harmonious relationship among testers and programmers, as well as trace project problems back to a lack of cooperation between these groups. We hope to gather ideas for how to detect and fix problems in communication and cooperation among programmers and testers.	Discovery Sessions	Workshop	2006
20060326	The Principles of Agile Design	It has been said that Agile Software Development improves the design of software. What are the principles of that improvement? How do we know that certain refactorings should be undertaken? How do we know when certain patterns should be used. In this set of tutorials we will discuss the principles of Object Oriented Agile Development. These principles guide software developers in the management of module and component dependencies so that they can create systems that are highly flexible, expressive, maintainable, and decoupled.	Tutorials	Tutorial	2006
20060327	Coaching Software Development Teams	When we first get into software development, we concentrate on technical skill. We learn how to program, how to debug, and how to design effectively. If we are lucky, we work in an environment where most of that work isn't wasted effort. Most of us gradually realize that we are sensitively dependent on our team. The way that we interact with our coworkers, and they interact with each other, can make work productive and fun, or wasteful and hellish. In this tutorial, I'll outline techniques you can use to help software development teams overcome obstacles, gain confidence, and work well with their surrounding organization. You'll learn when to use them, and more importantly, when not to as you work with your coworkers to make your team more fun, effective, and humane.	Tutorials	Tutorial	2006
20060328	The Deployment Production Line	Testing and deployment can be a complex and time consuming process in complex environments such as application servers, messaging infrastructure and interfaces to external systems. We have seen deployments take several days, even in cases where teams have used automated builds to ensure their code is fully tested. In this paper we describe principles and practices which allow new environments to be created, configured and deployed to at the click of a button. We show how to fully automate your testing and deployment process using a multi-stage automated workflow. Using this "deployment production line", it is possible to deploy fully tested code into production environments quickly and with full confidence that you can fall back to a previous version easily should a problem occur.	Research	Research Paper	2006
20060329	The Cost of Code Quality	The paper investigates the limitations of different agile coding methodologies and finds the boundaries within which those methodologies are effective. Using data from 80 development projects, the paper attempt to answer the question: How much effort should be invested into code quality? It is shown that a "quick and dirty" approach is actually preferable in some situations. Requirements volatility, expected breadth of usage, customers' defect tolerance, cost of defect fixing and system lifespan are suggested as the main factors determining how much effort to spend on improving code. The conclusions are used to demonstrate situations where XP coding practices are inefficient and to find boundaries within which simpler, less expensive methods give better results.	Research	Research Paper	2006
20060330	Appropriate Agile Measurement: Using Metrics and Diagnostics to Deliver Business Value	Agile Software Development continually measures both our product and the process used to create it, to allow improvement. With increased popularity, more risk-averse groups are being drawn to Agile, bringing with them modes of evaluation incompatible with Agile values and principles. These outmoded metrics drive dysfunctional behaviors which threaten the integrity of an emerging Agile culture. This paper collects some of the current thinking on appropriate Agile metrics, and proposes simple tools which organizations or teams may use to develop more congruent ways to measure Agile work.	Research	Research Paper	2006
20060332	by TBD	In order for a business to respond to rapid changes in its competitive environment, application development must be able to provide rapid and sometimes daily turnaround on changes, enhancements, and new functions. The agility the business requires from application development organizations is not exactly the same capability as described in most books on agile methods.  This talk will review the demands application developers must satisfy to support agile businesses.  It will compare these demands to the current practices and principles of agile methods to suggest where they are aligned and where they may conflict.  Some problems in business process management will be discussed in relation to whether they are helped or hindered by agile methods, and some new perspectives on agility will emerge.	Main	Talk	2006
20060333	From Concept to Cash: Managing the Pipeline	Deciding what collection of development opportunities will be funded is one of the most challenging problems that development managers face. Not only are these decisions are crucial for the long term health of the organization, they have a huge impact on the ability of development teams to adopt lean principles and agile practices. This tutorial will look first of all at innovation: discovering and nurturing brilliant ideas that delight customers. Then it will consider how to keep the pipeline flowing with new applications and features without exceeding the capacity of the development teams to deliver.	Tutorials	Tutorial	2006
20060334	Project Status: Writing on the Walls	How is your project doing ? How long does it take to find out what's going on? Where is the essential information? Is it hidden, squirreled away inside thousand-line code files, spreadsheets and Word documents ? Or is it "in your face", shown where you can't help but see it every day ? A successful project isn't successful because the team makes no mistakes, or suffers no setbacks. Whether your project sinks or swims is determined not by circumstance but by the speed and quality of your team's response. This tutorial presents simple techniques to make project status visible early and continuously, so a team can respond effectively. The techniques can be implemented with simple office tools: flipcharts, markers and yellow stickies.	Tutorials	Tutorial	2006
20060336	Dispersed Agile Development	Until very recently the only way of learning how best to operate a dispersed team was to try it. This tutorial provides a shortcut: the presenter has been part of several dispersed project teams, and has learnt the hard way what works and what doesn't. He has also benefited from extensive communication with others who have gained similar experience. The tutorial explains why dispersed agile development might be attractive and appropriate, how best to organize a dispersed team, what tools to use, and how agile practices fit with dispersion (or not).	Tutorials	Tutorial	2006
20070817	Less, Never more; Launching a product with critical features, and no more	Mixd.com is a mobile social networking experiment developed by Yahoo!  The\r\nproduct set out to explore college studentsâ€™ usage of mobile phones to organize\r\nad hoc events.  The aim of the project was to get it to market as quickly as\r\npossible while providing compelling user experience to see if the product was\r\nworth commercializing.  The development team was distributed between the US and\r\nIndia and the team chose to use an Agile process.  We learned about the market,\r\nwe learned about the process and gained a lot from using Agile as the\r\ncommunication and development method to drive this type of project.  From\r\nconcept to launch the product took nine months.	Customer	Experience Report	2007
20060337	How BMC is Scaling Agile Development	Title: Successfully Scaling Agile: Tales from the Trenches at BMC Software Sure, agile development works for small teams. But what happens when you use agile development for a project that involves 200+ developers and testers spread from India to Houston to Israel? In less than a year, BMC Software's Infrastructure Management division transformed their development organization using agile development practices to deliver a major replacement product to the market in less time with and higher quality than previously possible. Along the way, we encountered significant challenges - from skepticism on the agile approach to coordinating distributed teams to less-than-optimal organizational structures. We learned how to expand agile beyond the development team to advance the relationship between product management; and how to meld the existing engineering practices and business processes we still valued with changes required by our new agile world. Most importantly, we got our first taste of how agile can enhance the value we deliver to our customers. Using the format of a release retrospective, we will share our firsthand experience and hard-learned lessons on how to successfully scale agile to transform a large and distributed development organization, and how we're expanding these successes to create a highly responsive agile enterprise.	Experience Reports	Experience Report	2006
20060338	Lessons Learned from an eXtremely Distributed Project	Distributed projects are fraught with problems of visibility, communication and tacit knowledge flow. These combine to reduce productivity and increase project risks and setup costs. The potential savings of distributed development can be all but wiped out by these problems. Before embarking on a distributed project we should evaluate the potential project risks against the financial benefits and determine the best approach to establishing the distributed teams and processes for supporting delivery. On a recent 30 person, multi-site, urgent project we saw a number of serious problems arising from the distribution of our team. The most serious problems we saw were with tacit knowledge, communication and visibility. To combat these we tried a number of techniques including stand-ups, story boards, video documentation, remote desktops, instant messaging, voice-over-ip and continuous integration. We will describe each problem area we faced, and the lessons learned applying each technique to the problem. Conclusion: Despite using these techniques, the impacts of a distributed team out-weighed the financial benefits. Looking back, we believe that this project was not suitable for distribution, and would generalise that many distributed projects would be in a similar situation.	Experience Reports	Experience Report	2006
20060339	Agile Testing of Web Applications using WebTest	WebTest is an open source acceptance testing tool which extends upon the Apache Ant declarative build tool to allow declarative specification of tests using an XML syntax. No extensive programming is required to make use of WebTest however programming skills can be used to customise and extend the tool. In addition scripting languages such as Ruby, Python or Groovy can be used within your tests. WebTest has a main focus on testing web applications but can also test PDFs, Excel Spreadsheets, XML Web Services, files and Email delivery systems.	Tutorials	Tutorial	2006
20060340	Enhancing Diversity in Agile Software Development Environments	Diversity can be expressed in different ways, such as nationalities, worldviews, gender and minorities, cultures, skills and life styles. In general, studies tell us that no matter how diversity is expressed, it benefits with societies that foster it. In this panel we highlight the notion of diversity in agile software development environments. The panelists will present their perspective at the topic, each one based on his/her own professional experience (academia, industry and consultation), specifying how diversity can be expressed and fostered.	Discovery Sessions	Workshop	2006
20060341	XP Geography: A Guide to Mapping Your First Steps	We will start by discussing why and when to use XP and how to jump into the pool and get started. Next we will explore the primary practices of XP in detail using mind mapping exercises. You will examine your needs and find practices to address them. We will discuss the change process, how to reach agreement on goals and principles, how to implement new practices and how to sustain them. You will make a plan to share with your team and set up incentives for accountability. This tutorial will be interactive and involve many colored felt pens.	Tutorials	Tutorial	2006
20060342	Agile User Interface Development	Graphical User Interfaces (GUIs) have become an almost universal way of interacting with computer programs. GUIs provide a front-end to the underlying application code that makes software easy to use. Since most of the software development is GUI-centric, testing user interfaces is vital to ensure the system's safety, robustness and usability. Despite the fact that GUI testing is an essential part of software development, most developers don't do test-driven development (TDD) of the user interface because it is complex and error-prone. This hands-on tutorial presents techniques to develop user interfaces using TDD, as well as testing existing user interfaces. The audience will learn how to test Swing GUIs using Abbot and Costello and web user interfaces using Selenium. While the principles for testing rich GUIs are focused on Java, the techniques for testing web user interfaces are applicable to many technologies such as static HTML pages or dynamically generated web user interfaces created in Java, .Net, PHP, etc.	Tutorials	Tutorial	2006
20060343	Engaging the Customer: Empowering and Engaging customers and end-users in Agile projects	Agile approaches have long touted frequent "customer" involvement and feedback. But, in fact many organizations commonly use the term "Agile customer" to refer to the individual or team of people that guide developers by writing user stories, making decisions about development priority, and describing acceptance criteria. The demands of the Agile customer role don't always match up with the skills and availability of actual users of the software. Consequently the role is often filled by someone standing in for the user. On many Agile projects it may be difficult to find and successfully engage a system's actual end-users. But without them, we lose much of the benefit we'd gain from their frequent input and feedback. This discovery session will explore the involvement, successful and otherwise, of actual customers and users in the day-to-day software development process. Participants will learn about: * The range of approaches that can be used to involve customers and users; * Pitfalls common to those approaches; * Possible strategies to avoid those pitfalls. The discovery session will be hands-on, with participants collaborating together in small groups, then sharing and discussing results with all participants.	Discovery Sessions	Workshop	2006
20060345	Agile Estimation Techniques	Many software teams face planning and estimation with a sense of fear and loathing. Their feelings are hardly surprising considering that they are required to generate numbers based on relatively little information and are then held accountable to the accuracy of these guesses. However, it need not be this way. This tutorial presents some concrete, Agile tools and techniques for helping teams improve the accuracy of their estimates, while simultaneously making estimation faster and more fun. The tutorial is designed to be interactive, giving attendees the opportunity to share their experiences and participate in hands-on activities.	Tutorials	Tutorial	2006
20060346	Integrating Agile with the PMO	Agile Project Management techniques and tools are often at odds with those specified by the traditional Project Management Office (PMO). PMO's frequently prescribe, and check for adherence to traditional waterfall techniques; yet when projects have high risk and/or high exploration characteristics they better suit an agile approach. Both traditional and agile techniques strive for successful projects, but their differences in values, techniques and terminology can lead to conflict and confusion. The purpose of this Workshop is to identify and record practical processes, tools & techniques for integrating Agile project management into the PMO environment. Through the collection of existing successful approaches, capture of group contributions and open space problem solving a comprehensive arsenal of PMO alignment/transformation tools will be established.	Discovery Sessions	Workshop	2006
20060347	Ssh, we are adding a process...	Google is very successful in maintaining its startup culture which is very open and engineering-centric. In terms of the Agile Manifesto Google is almost entirely on the "left hand side" (with the exception of "Working Software"). Project teams don't have a project manager, but organize themselves and communicate directly with all stakeholders. Most feature decisions are made by the engineering teams themselves. As well as this works for products like search, gmail - it creates issues for the AdWords frontend (AWFE) application. AWFE is much more product management and release date driven then other Google applications. This presentation discusses how we carefully introduced agile practices to coordinate the AWFE development teams and made the process more efficient and predictable.	Experience Reports	Experience Report	2006
20060348	Self-Similarity Applied: Agile and Britain's Largest Telecoms Company (Global Fortune 150)	What happens when the United Kingdom's largest telecoms company decides to go Agile? In this presentation, we will look at BT's journey to reform its IT capabilities. We'll look at the significant challenges or as we like to describe them opportunities that we encountered and the journey we needed to take, and are still taking, to resolve them. Some of the journeys we'll discuss include People Issues (transforming an overall organisation of 100,000 people with 8,000 in IT alone, low morale due to outsourcing and previous change initiatives, and strained relationships between IT and business); dealing with strict job roles in a large corporation; tackling project issues from the size of a team (8 to 800 people) through to the pragmatic application of Agile techniques in mature (not green-field) projects; solving the lack of Agile experience in a large organisation; constructively dealing with immensely distributed teams and, finally, addressing the need to understand cultural issues involved in outsourcing.	Experience Reports	Experience Report	2006
20060349	Something to Believe In	In 2005, we initiated the Agile Workstream to enable an agile development process in one of the major divisions of our company. Our strategy was to prove out the process with an initial project and extend it other projects and teams around the group. At the time of this writing, development is still underway, but we are nearing the launch of this new product and the business remains enthusiastic about the agile process. The journey has not been easy, however. We had to learn how to integrate other disciplines in the process, work with teams that are not agile, learn hard lessons about keeping release plans up to date, and educate senior management about the process while meeting their expectations about budget and delivery - all of this under an intense spotlight in a very large organization. We still have a lot to learn and do, but what we discovered was that Agile became a beacon of light, a rallying call - it gave the group something real to believe in. Emboldened by the promise of what Agile could do, the organization began to change at multiple levels. We are now in the process of leveraging the results of the first project for other projects, learning new lessons about scaling up and institutionalizing the process.	Experience Reports	Experience Report	2006
20060350	Coders' Dojo	If I want to learn judo, I will enroll at the nearest dojo, and show up for one hour every week for the next two years, at the end of which I may opt for a more assiduous course of study to progress in the art. Years of further training might be rewarded with a black belt, which is merely the sign of ascent to a different stage of learning. No master ever stops learning. If I want to learn object programming... my employer will pack me off to a three-day Java course picked from this year's issue of a big training firm's catalog. Nuts to that -- acquiring coding skills is not an "instant gratification" process.  The Coder's Dojo offers a way of teaching and learning programming in a more appropriate manner, respecting the depth and subtlety of the craft. A Dojo is a weekly meeting between programmers of varying skill levels. They come together as equals - in physical, not virtual space - around an ongoing series of coding challenges called "code kata". The first Dojo originated in Paris; others have started up in the US (Pittsburgh, PA), Finland, the UK... The intent of this workshop is to reproduce the mechanics of one Dojo session, to encourage participants to start their own !	Hands-on	Workshop	2006
20060351	User Stories for Agile Requirements	The technique of expressing requirements as user stories is one of the most broadly applicable techniques introduced by the agile processes. User stories are an effective approach on all time constrained projects and are a great way to begin introducing a bit of agility to your projects. In this session, we will look at how to identify and write good user stories. The class will describe the six attributes that good stories should exhibit and present thirteen guidelines for writing better stories. We will explore how user role modeling can help when gathering a project's initial stories. Because requirements touch all job functions on a development project, this tutorial will be equally suited for analysts, customers, testers, programmers, managers, or anyone involved in a software development project.	Tutorials	Tutorial	2006
20070479	Ript (TM): Innovation and Collective Product Ownership	In 2006, Oxygen Media CEO Geraldine (Gerry) Laybourne, the woman largely\r\nresponsible for Nickelodeon's early success, partnered with her XP/Scrum\r\ndevelopment team to create a new mission and new revenue stream for her company.\r\nThis experience report covers product conception through initial release of a\r\nsingle product. It describes how Gerry's leadership qualities paired with agile\r\npractices to engender deep mutual trust and collective ownership over technical\r\nexecution and business outcome. This unbounded collaboration provides a template\r\nfor future projects at Oxygen and other organizations with innovation as part of\r\ntheir agile product development strategy.	Customer	Experience Report	2007
20071034	XR11: Product Ownership	Ript (TM): Innovation and Collective\r\nProduct Ownership\r\n\r\nby Ken H. Judy and Ilio Krumins-Beens\r\nLess, Never more; Launching a product\r\nwith critical \r\nfeatures, and no more\r\n\r\nby Gabrielle Benefield and Scott Gatz\r\nEffective product ownership within a\r\nmulti-component project\r\n\r\nby Mike Lowery and Marcus Evans	Customer	Session	2007
20070623	Agile Development for Enterprise Software:  Anecdotes of Adoption	Agile2007 Submission>  Agile Anecodtes for Enterprise Software Developing enterprise software is a challenging endeavor. Myriad competing\r\nforces converge on engineering, all with urgent demands, yet with minimal\r\nvisibility into the totality of requests nor the significant time loses they\r\noccur. This is a maelstrom -- it is worse than chaos. Nonetheless, product must\r\nbe shipped via a coordination of many diverse contributors, stakeholders, allied\r\nroles, all of whom have contrasting time lines, conflicting priorities, and\r\nparticular perspectives. The purpose of this talk is to describe the adoption of\r\nagile practices, based mainly on the tenets of Scrum, in support of creating\r\nenterprise products that combine hardware and software.\r\n Target Audience\r\n This talk is targeted at anyone who has a stake in successfully\r\ndelivering enterprise software, irrespective of the size of the organization nor\r\nwhether they're in product development or IT services. It provides real\r\nexperiences about tailoring agile practices for a particular situation and how\r\nthe adoption of agile practices follows from adopting a mindset of lean\r\ndevelopment and continuous improvement. Attendees are expected to leave the talk\r\nhaving heard direct experiences regarding successful agile adoption amidst the\r\ncomplexity of enterprise software.\r\n Outline \r\nFortnight development  After much deliberation, an iteration duration of\r\ntwo weeks was chosen. This results from extant practices in code reviews,\r\nallowances for 20% time projects, the complexity of the codebase, the durations\r\nnecessary for testing software on large corpora of mixed documents. This will be\r\na brief story on why the fortnight time frame was selected. \r\n\r\n  Multifunction teams  We work with a very advanced codebase which\r\nreflects a complex and broad architecture. Many diverse domains are represented\r\nin every product release (e.g., crawling, indexing, interaction, serving,\r\nsecurity, OS, etc.). The marriage between software and hardware also requires\r\nspecial skill and testing. Hence, each product results from the work of numerous\r\nallied professionals -- some have hard and fast deadlines such as managing a\r\nmanufacturing supply chain, others can react rapidly to whatever code change is\r\nneeded. This will be a brief story of how these multifunction teams work and\r\nself-organize around the backlog, and keep each other on track.  \r\n  Balancing stakeholders  A gaggle of stakeholders are present\r\nin enterprise software whose interests need to be balanced in the long run.\r\nThese include release engineering, quality assurance, documentation, support\r\norganizations, hardware manufacturing, operations, and product management. All\r\nthese stakeholders have distinct values and priorities and each puts direct\r\ndemands on engineering's time. Drawing everyone together is a delicate balancing\r\nact that is never stable. This is a brief story about balancing these roles such\r\nthat forward progress continues.  \r\n  Community of\r\npractice  Prioritizing sessions are necessary for establishing a backlog\r\nthat is respected. Near-daily "scrum-ish" meetings keep everyone engaged and\r\nfosters the emergence of a community of practice around the code base and coding\r\npractices, as well as progress on the backlog. Thursday is a "meeting free day"\r\nso team members spontaneously began the "eScrums" to convey to each other their\r\ncurrent situations. This will be a short story on how meetings are used, the\r\nrecords that are kept, and the dialog that is fostered and how this fosters the\r\nevolution of a community of practice.  \r\n  Defending the\r\nbacklog  It is necessary for the program manager / scrum master to\r\nvigorously defend the backlog once it is prioritized. It's all too common for\r\nstakeholders to seek to add to it, attempt to redirect team members to pet\r\nprojects, or re-purpose the iteration. Many competing stakeholders all have\r\nlegitimate claims, but engineering resources are highly constrained. This will\r\nbe several anecdotes about the backlog, how it is presented, explained,\r\ndefended, and most importantly, finished. \r\n The Demo(s)\r\nWe've instituted the practice of delivering working code through the vehicle of\r\nbiweekly demos -- and with a multifunction team, there often more than one item\r\nto be shown, time permitting. The demo is seen as an event and a broad array of\r\ninterested parties are invited. The purposes for this include: creating a\r\ndistinct marker of forward progress, providing an empirical framework for\r\nsubsequent planning and prioritizing conversations, and ensuring that allied\r\nroles that may be moving at a different pace or presently servicing another\r\nproject, get to see the working state of things. A few anecdotes about managing\r\nthe sociology of the demos and the participants will be presented.  What we've learned  \r\n Communicate constantly with short,\r\nfocused messages about iterations, backlogs, stand-ups, demos \r\n\r\nAgile methods treat developers as professionals whereas planned methods treat\r\nthem as skilled trades people  \r\n Old habits die hard -- especially for\r\nthose who are sources of frequent interruptions  \r\n Visibility is not\r\nuniversally welcomed, although people are obliged to not argue publicly against\r\nit \r\n Hard things are easier if you hire great people and respect\r\nthem   Iterative development provides direct and nearly immediate\r\nvalue  Biography of the Presenter\r\nJamie Dinkelacker is a program manager for Enterprise Engineering at Google Inc.\r\nHe is responsible for the upcoming software releases for the Google Search\r\nAppliance, the Google Mini, and the enterprise platforms and OS group. He is a\r\nmember of Google's Agile Leadership. He has been managing software development\r\nfor over 15 years in Silicon Valley at companies such as Apple, Netscape, and\r\nHewlett Packard Labs. Prior to Google, Jamie was a consulting professor of\r\nsoftware management at Carnegie Mellon University's West Coast campus. He has\r\nfocused on lean development and organizational processes for two decades. Jamie\r\nholds a bachelors degree in management science and a masters in communication\r\nresearch, both from Rensselaer Polytechnic Institute, and a PhD in communication\r\nresearch from Michigan State University. He is an experienced public speaker,\r\nand worked in broadcasting and live musical performance for many years. His\r\npersonal page is at http://sunarcher.org/jamie/.	Enterprise Agile	Tutorial	2007
20060352	Humans: Designed for Interaction (Dynamic Intelligence in Agile Communication)	Customer meetings, planning meetings, design meetings, pair programming... You've reduced a lot of that written electronic and paper correspondence with the intent of providing more "face time" with each other... but is the project team up to the challenge? Unfortunately, difficult personalities, hidden agendas, and lack of participation are getting in the way. Sound familiar? Software development is rife with miscommunication and misunderstood intentions leading misdirected solutions, wasted time and fruitless effort. In this session you will explore new, revolutionary methods being used by psychologists and educators to peer inside the minds of those with social deficits, autism, and asperger's syndrome (http://www.wired.com/wired/archive/9.12/aspergers_pr.html). With consistent application of six principles of Dynamic Intelligence (http://www.rdiconnect.com/RDI/DynamicIntelligence.asp), latent abilities can be drawn out of even the most reticent (or overly enthusiastic) communicators: - Emotional Referencing - Social Coordination - Declarative Language - Flexible thinking â€¢ Relational Information Processing - Foresight and Hindsight Together we will discover how to best employ these principles in the many face-to-face communication opportunities afforded by all agile methodologies, with a nod toward the XP values of "Communication", "Simplicity, "Feedback", "Courage", and most recently (and importantly), "Respect".	Discovery Sessions	Workshop	2006
20060353	Cynefin - Making Sense of Agile	People don't make rational decisions - it's not the way the brain evolved. Instead they make first fit (not best fit) pattern matches with prior experience and then retrospectively justify them as "rational". This is no way to run a development effort. This fact means that you either have to convey a new message in such a way that it "resonates" with an existing prior pattern of success, or disrupt those patterns so that people see things from a different perspective, with a disposition to act. The Cynefin sense-making framework provides an unbiased, pre-hypothetical basis for analyzing situations, issues and problems, and serves as a basis for discovering novel, oftentimes optimal solutions to them. This tutorial will introduce parts of the Cynefin framework, drawing on a decade of theoretical research and practical experiments to work with the reality of human decision making, and will cover: * Complex systems approaches to the forced evolution of systems. * New approaches to project management based on the ideas of social complexity, which legitimize formal, rapid and agile design methods within boundaries. * Gaining senior management acceptance to radical ideas. * The application of the Cynefin framework for problem-solving in the Agile domain.	Tutorials	Tutorial	2006
20060354	Agile Practices and challenges in the embedded world	Agile practices originated in companies and the minds of thought leaders that primarily engage in enterprise software development. Consequently, there is limited treatment or published material on how well agile methods map to companies that deliver embedded software. Of particular interest are companies that routinely develop hardware in parallel with software to run on that hardware. Companies like this tend to think their environments are distinctly different than pure software companies and thus can be skeptical of adopting agile practices for this reason. This session seeks to explore this topic in an informal way and will generate a prioritized list of issues that highlight the specific areas that make embedded software development unique and identify which agile practices are most important in this environment	Discovery Sessions	Workshop	2006
20060355	What Are We Arguing About? A Framework for Defining Agile in our Organization	How do we implement Agile? Is Agile a good thing for my organization? What barriers will I have to overcome? All of these are important questions when deciding whether and how to apply Agile Software Development to an organization that is used to working in a different way. To enable a good discussion, the language of that discussion must be established. As Medtronic adopted Agile, we realized how important it was to put effort into the language. We established a framework for that language, organizing our thoughts into three areas: Principles, Practices, and Benefits. When talking with visionaries, evangelists, or Stage 4 learners, we speak in terms of Principles to understand WHY Agile is the way it is. With practitioners, pragmatists, or Stage 1 learners, we speak in terms of Practices to understand HOW to do Agile. With skeptics, we speak in terms of Benefits to determine whether Agile is a good thing for us. In most cases, an effective conversation needs to address all three perspectives. The framework and language help us determine whether issues are related simply to communication barriers, or are related to the decisions of whether and how to apply Agile to our world.	Experience Reports	Experience Report	2006
20060356	Trouble in Paradise: The Open Source Project PyPy: EU-funding and Agile Practices	Can agile methods be employed in an Open Source project with a distributed/dispersed development style while also being funded by European Commission, following a fixed price contract model with structural requirements much more similar to plan-driven approaches? In this paper we will present the agile methods that made this hybrid structure not only possible but that formed the basis of a successful first year of the PyPy project. The PyPy project started as a grass root effort in the Python Community, building a highly flexible and fast Python implementation purely written in Python. After less than a year of work the community and the core developers started to work on a proposal for EU-funding (summer 2003). The partially funded EU-project started in December 2004 and have, in January 2006, successfully passed the EU review of the results of the first year. A consortium of seven companies and one university was created around and within the original community in order to fulfill the EU-contract.	Experience Reports	Experience Report	2006
20060359	A History of Lean	Topic: This tutorial traces the history of Lean Thinking from 1800 to the present. It gives an historical perspective on the Toyota Production System and examines the thinking of its founders. The tutorial traces the route of lean thinking as it moved from manufacturing through operations and product development to software development. The principles of Lean Software Development are summarized in the light of this history. Benefits: Lean initiatives are spreading rapidly throughout the business community as executives look for competitive levers in an increasingly fast-paced business environment. Because lean thinking is popular with business managers and executives, it creates a framework for understanding agile software development that senior managers can relate to and support. This tutorial will take you down the historical trail of lean thinking and show how that trail inevitably leads to the best practices of agile software development.	Tutorials	Tutorial	2006
20060360	Organizing People Patterns for Improvement	This workshop is designed to engage participants in understanding and applying pattern languages in organizational settings. Participants will classify organizational, fearless change, experiential learning, feedback, communication, and active learning pattern languages (as well as others suggested by the attendees) against an improvement model that allows the relationships among the patterns to emerge. The starting model is “Autochthony,” a developmental model that shows how cultural aspects (i.e., history, beliefs and intent) combine with organizational/structural aspects (i.e., definition, collaboration and management), and delivery/action-oriented aspects (i.e., process, roles and methods/tools) to define a holistic approach to group advancement. By using, customizing or replacing this model, we hope the workshop will show how these “people patterns” interrelate and support each other with the goal of helping people who design their own future to “learn how to learn” to create it. The model is generic enough to support a complete agile overhaul, introduction of a few new agile practices, or adoption of a specific management technique like Scrum that requires cultural support. The output of the workshop is intended to be a set of “pattern dialects” that address scenarios for improvement in particular environments suggested by the participants.	Discovery Sessions	Workshop	2006
20060362	Crushing Fear under the Iron Heel of Action	Emotions can run high during a project; quite often these emotions are reflections of or related to fear. How much of what happens in your project is motivated by fear? Is your code full of type checks? Are there magical implementations that everyone knows are faster, even if we don't measure their performance? Is there code that no one dares to touch? Are there things you can't possibly tell the boss? Are there things that no one can say, or people that no one can work with? Do team members resort to sarcasm as opposed to honest and direct communication? Are project reports unclear or untrue? Is the real status hidden in a mountain of process-dictated forms, or buried in vague terminology of your own invention? We've been there, and done that, and we'll talk with you about it. It'll be interesting, it'll be entertaining, it'll be worth your time. In this tutorial we will discuss how to recognize when we are acting out of fear, and what to do about it. We will explore how fear impacts our projects and what actions we can take to crush it.	Discovery Sessions	Workshop	2006
20060363	Test-Driven J2EE	Experience Test-Driven Development by building J2EE components! Many students of Test-Driven Development are introduced to the subject through simple problems, such as the classic "Money" example from Kent Beck's Test-Driven Development: By Example. Although some people enjoy exploring new topics by tackling simple problems, there are those who would rather dive into the deep end, than merely get their feet wet. This tutorial is for those people. Test-Driven J2EE gives you the opportunity to practice the techniques of Test-Driven Development with J2EE components, including servlets, JMS and page templates. The goal is to build a small, but useful slice of a J2EE application while following the cardinal rule of Test-Driven Development: Never write a line of production code unless somewhere, a test fails. You will add a feature to an online Coffee Shop application, giving you an opportunity to see how to test-drive new features for existing systems, complete with typical end-to-end concerns, such as performance and security in a multi-tier application.	Tutorials	Tutorial	2006
20060364	Programmers are from Mars, Customers are from Venus: A practical guide to working with customers on XP Projects	This interactive and informative tutorial will introduce you to practices that will increase the effectiveness of the customer on your XP project. Customers have one of the most complex and difficult roles on a project, yet XP includes very few practices that support the customer in their role - the aim of this tutorial is to change that. Over the last three years, we have investigated many projects around the world to identify how customers succeed in this complex and difficult task - discovering not what people think should have happened, but what really happened and what actually worked! This tutorial distils this research, grounded in practical experience, into a 3 hour session, so that by the end of this tutorial you will have gained: * A realistic understanding of the complexity and difficulty of the XP Customer role. * An understanding of the key roles required on a customer team, both what they are and why they matter. * An understanding of the nine practices that enable customers to sustainably drive XP projects to successful completion - think XP practices BUT for customers.	Tutorials	Tutorial	2006
20060365	Community Reflections	The agile community / movement is growing and changing faster every day. As the initial agile flavors blend, the community continues to reach out, gathering new ideas from other communities and disciplines. One such practice, retrospectives / reflections, is an example of the agile community embracing an idea that harmonizes with the core principles of agile. As retrospectives and reflections are now a mainstay for many agile communities, this session is a way for the community to share in this practice. Using the fishbowl format, the session will start with a discussion among long time players in the agile community. Once the conversation is rolling, anyone interested may join the discussion, sharing their experiences or opinions. The moderator will be gathering questions for the fishbowl and keep the conversation flowing through the many topics present at the conference and during the session. Over all, this is a place for the community to meet and reflect on where we have been, what we have learned, and discuss topics and paths for the future.	Discovery Sessions	Workshop	2006
20060366	Introducing Agile Concepts in “Traditional” Environments	This session will explore how to present agile concepts to those unfamiliar with agile methods, but who follow some process probably based on waterfall concepts (possibly with iteration). A keynote and one Open Space session from Agile 2005 suggested that introducing, and selling, agile concepts was a topic worth addressing. Ideally, attendees would have some experience in trying to introduce agile concepts into their (or someone else's) environment. The key is how they explained and tried to adopt/adapt agile principles and values to an environment employing other methods/approaches. It would be very helpful for attendees to bring written positions/ideas with them (200-250 words) so they come with some pre-conference thought in place. The submissions would be collected at the start of the session and read during the session. Open Space would be used to continue the work/discussion started at this session throughout the week. Introducing Adopting Explaining	Discovery Sessions	Workshop	2006
20060367	T3 - Tool for Monitoring Agile Development	The T3 tool is a lightweight framework based on JUnit that provides visibility into project progress to support rapid development. Using story-centric views, Agile teams can quickly assess status, determine dependencies and identify pain-points. We were inspired to create T3 to report realistic project status and improve communication among geographically distributed team members1 without incurring a lot of extra baggage. This report describes T3, highlights the benefits, and demonstrates its application in a project.	Experience Reports	Experience Report	2006
20060368	Optimizing Major Release Frequency Using Agile Practices	My experience report focuses on the Image Processing Toolbox story, how we transitioned to agile practices to address the problem of needing more frequent major releases of our shrink-wrapped product, and how we have continually adapted our processes in the context of an evolving business environment. Over the last three major releases of the product, we have evolved from being primarily scope-driven to finely balancing scope and schedule over the entire span of the release. The most recent major release was planned to be diversified in scope and was delivered right on its planned schedule, fifteen months after the previous major release.	Experience Reports	Experience Report	2006
20060369	Three-way Cultural Change: Introducing Agile within Two Non-Agile Companies and a Non-Agile Methodology	This paper describes our experience iteratively developing an agile methodology within the context of two professional services companies, each with its own non-agile methodology and culture. By being sensitive to the distinction between values and practices, which imperfectly express those values, we were able to implement agile without unnecessary cultural friction. The result has been one of the most successful projects in our region.	Experience Reports	Experience Report	2006
20060370	The Agile/Waterfall Cooperative	In large organizations, it's simply not practical to just "flip a switch" and have your IT department start doing agile all at once. In these situations, agile pilot teams and existing waterfall teams find themselves having to figure out how to work together during the transition. In this tutorial, attendees will learn to factor their company's business needs into their existing agile procedures, and management will learn how to begin the investigative work of determining how to streamline these requirements and activities so that they don't hamper the project. Whether your agile project is dealing with waterfall-up-front (project approval process, for example), waterfall-at-end (separate system testing, for example), or waterfall-in-tandem (products so complex that multiple teams are required to work together to complete a release), you'll learn specific techniques that will make coexisting less painful. Attendees will learn specific points in the project where agile and waterfall teams must plan, coordinate, and review progress - both in the development of the product and in the viability of the transition plan. As not all companies will choose to move every single software development project to an agile paradigm, the agile/waterfall cooperative becomes even more important to master.	Tutorials	Tutorial	2006
20060371	Discussing the need for Agile Certification	Since software products are affecting the most critical areas in our lives, e.g. medical systems, security systems, financial systems, etc., shouldn't the Agile teams developing these systems be certified in similar ways? Those developers who have a college degree have often studied in non-software disciplines such as electrical engineering and mathematics. How do we know software teams made-up of diverse individuals have the proper background and skills to build a mission critical system using Agile techniques? With certain organizations being obligated to use a certified process, why isn't certified Agile one of their options? How should we go about creating a means for certifying Agile processes and teams? Should the Agile Alliance or similar body be responsible for certifying Agility? Is Agile ready for certification? Bring your ideas and we will facilitate an open discussion.	Discovery Sessions	Workshop	2006
20060373	Adventures in Promiscuous Pairing: Seeking Beginner's Mind	Agile development practices are coming into the mainstream with a vengeance. This is evident by the number of books released annually as well as the exponential attendance growth seen at conferences such as Agile 2005 (and expected in 2006). This growth brings with it a lot of questions and a lot of experimentation as organizations figure out what works best for them and their projects. My team was no different. We were constantly experimenting with new techniques and approaches to problems. Some approaches worked, some did not. This paper discusses the adoption and experimentation of an Agile 2005 XR titled "Promiscuous Pairing and Beginner's Mind" by Arlo Belshee. It highlights the key success and unexpected problems that our team encountered while trying to implement the practices outlined in the paper, specifically around pair churn & team owned tasks, seeking Beginner's Mind and utilizing the least qualified person to do tasks. It also validates the unanticipated side affect Belshee identifies in his paper, introducing new team members and getting them up to speed.	Experience Reports	Experience Report	2006
20060374	Automating Functional Tests with Selenium	Ever in search of a silver bullet for automated functional testing for Web Applications, many folks have turned to Selenium. Selenium is an open-source project for in-browser testing, originally developed by ThoughtWorks and now boasting an active community of developers and users. One of Selenium's stated goals is to become the de facto open-source replacement for proprietary tools such as WinRunner. Of particular interest to the agile community is that it offers the possibility of test-first design of web applications, red-green signals for customer acceptance tests, and an automated regression test bed for the web tier. This experience report describes the standard environment for testing with Selenium, as well as modifications we performed to incorporate our script pages into a wiki. It includes lessons we learned about continuous integration, script writing, and using the Selenium Recorder. We also discuss how long it took to write and maintain the scripts in the iterative development environment, how close we came to covering all of the functional requirements with tests, how often the tests should be (and were) run, and whether additional automated functional testing below the GUI layer was still necessary and/or appropriate.	Experience Reports	Experience Report	2006
20060375	Presenter First: Organizing Complex GUI Applications for Test-Driven Development	Presenter First is a scalable strategy for producing fully unit tested GUI applications directly from user stories in a test-driven development fashion. Testing through the GUI by inserting events and making assertions on the state of the application is expensive and increases the burden of test maintenance. Presenter First uses a variant of Model View Presenter (MVP), a particular means of composing MVP triads, and a strategy for the order in which the elements of the triad are developed and tested. We have used Presenter First on projects ranging in size from several to several hundred MVP triads. This report and presentation will reveal the difficulties we encountered in scaling the use of MVP, discuss the approaches we tried and rejected, and describe our GUI application development best practices. It will also show how MVP triads can be effectively combined, and how and why they may be extended into more than three cooperating objects with the adaptor pattern. Finally, we'll demonstrate how particular tools decrease the burden of creating and maintaining hundreds of MVP triads in large applications.	Experience Reports	Experience Report	2006
20060377	Agile Meets Offshore	While Agile methodologies and values are getting more and more attention in the software development world - many companies are starting to outsource parts of their development activities to countries like India and China. Based on my own experiences offshoring in India, Pakistan and Ukraine and based on others experience reports from both India and Europe - I will try to answer the following questions:  Why offshore your development activities - What to offshore - and what to keep "at home"  - Where are the biggest challenges - Why did some outsourcing projects fail - What about the infrastructure - What about collaboration and communication when you are thousands of kilometers apart \nKey Points : If you think it is hard to make up your mind about maybe offshoring some of your own companies development activities - come and get some input for your decision.  \nHear about offshoring from a person who has tried it himself.  Get an overview of experiences with outsourcing from a number of companies Participants will walk away from this tutorial with an overview of challenges and best practices from 8-10 offshore projects.	Tutorials	Tutorial	2006
20060378	Refactoring Databases: Evolutionary Database Design	For years the norm for object developers was to work in an evolutionary (iterative and incremental) manner but for database developers to work in a more serial manner. The predominance of evolutionary development methodologies such as Extreme Programming (XP), Feature Driven Development (FDD), the Agile Unified Process (AUP), and the Rational Unified Process (RUP) it is clear that the two groups need to work in the same manner to be productive as a team. This workshop is organized into parts: A presentation where Scott and Pramod describe evolutionary database development techniques and a discussion where participants will describe their experiences with evolutionary database development. The presentation will describe database refactoring, evolutionary data modeling, database testing, the need for sandboxes, and configuration management of database assets. During the discussions attendees will be prompted to share their experiences with adopting and applying evolutionary database development techniques. Potential discussion topics include: Tool support for database refactoring; How to test your database schema; How to convince traditionalists to adopt these techniques; How can DBAs and agile developers work together effectively; and The challenges/impediments to adopting these techniques.	Tutorials	Tutorial	2006
20060379	Getting the Software You Need:  A Practical Approach for Stakeholders	You're a tester, business expert, project manager or analyst with an agile (or even not-so-agile) software development team. You write the stories/requirements/use cases and/or the acceptance tests. You're the judge of whether the delivered software accomplishes what you specified. You own or share responsibility for the success or failure of a software development project. How do you make sure you get what you and your business require? This tutorial will use a combination of hands-on exercises and lecture/discussion to teach practical skills that help you define clear goals for your team, define team roles, help different players work together, help business experts understand technical issues, measure progress, clearly communicate business priorities, clearly define and communicate stories and requirements, design tests to migitage risks, estimate realistically, plan at the project, release and iteration levels, leverage business experts' domain knowledge, and more. The tutorial will be tailored as much as possible to the needs of the actual attendees by means of polling them at the start and adjusting the content and focus accordingly. Participants will also learn from each others' experiences.	Tutorials	Tutorial	2006
20060381	Enterprise Scrum	Scrum is spreading through enterprises, either through bottom-up adaptation or through top-down management initiative. Either way, the depth and difficulty of the implementation is greater than might be anticipated. Our industry is used to planned "rollouts" of new approaches, but spreading Scrum throughout an enterprise is an extensive change process, focusing mostly on engineering/software development and customers and product management. It turns out that Scrum can't be used in isolation, but rather most of the dysfunctional behavior that organizations have garnered through years of waterfall development must be corrected The correction is made more difficult because the habits are deeply ingrained and unconscious.	Tutorials	Tutorial	2006
20060382	The Drawing Carousel - a Pair Programming Experience	Working in a single pair is different from working on your own: You have to articulate what you want to do, the other person (probably) has some different insights, and the result will be different from what you would have done on your own. But... this is only half of the story: working in a Pair Programming Team has many more advantages: knowledge is spread, the team creates an own style, parallel development becomes easy, truck factor is reduced. The team creates the product (instead of individual programmers creating the parts), the product is a whole, not a mixture of individual results. You will learn about the necessity of agile tools like daily standup meetings, pair rotation, coding standards and collective code ownership, how they work, and what their effects are. You will experience improvements for the quality of you product, and for the productivity of the team.	Discovery Sessions	Workshop	2006
20060383	The Agile Product Owner and Customer Field Guide	Effective product management has always been important to any successful development effort. The definition of requirements, prioritization of deliveries and alignment with business goals are no less crucial in agile processes. All of the most popular agile processes define roles responsible that perform these activities, most often call the Product Owner or Customer. Working through mechanisms such as the Product Backlog, User Stories and Release Plans, the Product Owner ensures the agile team receives a solid pipeline of well-conceived requirements. This intensive, hands-on tutorial provides you with a comprehensive toolbox of practices and techniques for agile product management. As each of the major responsibilities are explored, you will participate in exercises and simulations that enable you to gain direct experience to apply to your projects. This is participation-based tutorial, so prepare yourself to be actively engaged creating product backlogs and user stories, mapping requirements to agile project plans, working with stakeholders, and guiding a project to deliver the most value for your business. This half-day tutorial is intended for team members who are interested in gaining hands-on expertise in agile requirements management practices. Although no prerequisites are required, knowledge of the business, strategic product planning, and product management aspects of the overall development cycle is recommended. Familiarity with Agile development processes such as Extreme Programming or Scrum may be helpful.	Tutorials	Tutorial	2006
20060384	Ready, Set, Go Agile: A step-by-step guide for managers and executives	"You need to improve product development!" Maybe you are hearing this from your customers. Maybe your prospects. Maybe your staff, boss, CEO or Board. Maybe you are saying this to another. Maybe you are feeling the pain of missed released dates. Maybe it's poor product quality. Maybe even the wrong product. Maybe your best people are leaving. There are as many reasons as there are paths that lead people to exploring the benefits of Agile. If you're like most, you'll have many more questions than answers at this point. When is it right to become Agile? What does becoming Agile really mean? Is Agile an all or none proposition? How much will Agile cost? What are the likely benefits and risks of Agile on customers and the P&L? How will the organization maintain and scale Agility? For managers and executives, becoming Agile means numerous questions and decisions. This tutorial takes a few steps back and scrutinizes the big picture of contemplating and then successfully executing a transition to Agile. Using real world examples, managers and executives will be presented with and engaged in the realities, options and decision-making involved in becoming and remaining Agile.	Tutorials	Tutorial	2006
20060385	Hiring for an Agile Team	We work in all kinds of teams at work, and an Agile team and environment can be very different from other kinds of teams and environments. In successful Agile teams, people work differently, treat each other differently, can discuss certain issues more openly, and may be rewarded differently. All of those factors are part of hiring for a particular cultural fit, a key part of hiring for an Agile team. In this session, Johanna will facilitate your discovery of your unique characteristics and environment at your culture. Armed with that information, we will discuss how to ask questions and use auditions to hire for your team. We will create an environment in which you can practice your questions and auditions.	Tutorials	Tutorial	2006
20060386	Adding Usability Testing to an Agile Project	The PRI project consisted of two releases. The first release of the application did not incorporate any usability testing of the software and that resulted in the number of UI enhancements we had to build before the users would accept the release. For the second release of the project we incorporated paper prototyping, "wizard of oz testing" and usability testing of the nearly finished UI. This resulted in a dramatic reduction in the number of usability issues raised during acceptance testing.	Experience Reports	Experience Report	2006
20060387	A Tale of Two Writing Teams	This presentation is intended to provide participants with insight and experience related to technical writers' transition to and scaling with Agile teams. The session will focus on two case studies. Sometimes considered an "afterthought" in the product development lifecycle, writers often struggle to become part of a performing Agile team. Plagued with thoughts of inferiority, self-doubt and perceived (or real!) lack of recognition, tech writers can become lost when trying to transition from waterfall to Agile.	Experience Reports	Experience Report	2006
20060388	How Not to do Agile Testing	When our team adopted Extreme Programming and Scrum, there were a number of challenges. Integrating an Agile team in a "traditional" organization created friction and conflict with management. The team consisted of volunteers new to Agile practices. We had difficulties with planning and estimation, task breakdown, managing requirements and working together in a collocated space. However, the biggest challenge the team encountered was not in any of these other areas, but in one that most of the team figured was simple: Testing.	Experience Reports	Experience Report	2006
20060390	Agile Simulation	This course is a simulation of our agile software development process.  Its purpose is to show anyone who is associated with software development why agility works by simulating a software project.  No coding experience (or even direct experience of development) is needed.  The core game includes the roles of customers, business analysts, project managers and developers and is easily extended to include the role of testers and business owners. The simulation works by “building” an imaginary software product.  Each team works in an agile fashion, using simulated 2-week iterations.  “Event” cards create challenges and opportunities for the team.  They also include instructions on how to deal with good and bad events on an agile project..	Hands-on	Workshop	2006
20060391	eXtreme Project Management Applied: How to deliver value in the face of volatility	No sooner do you say the word “plan,” when something else has changed.  Instead of managing priorities, you often find yourself prioritizing crises.  Traditional project management practices simply don’t cut in on today’s volatile, high-change, high-speed, high-stress ventures.  To succeed on these extreme projects, the new breed project manager needs to be able to unleash motivation and innovation, keep the project under control, deliver value to the customer each step of the way, and at the same time, ensure an acceptable quality of life in the process.  Based on his work with over 250 project teams from around the world, Doug, with the help of his African drum, will share proven principles, practices and tools that have been captured in his book, eXtreme Project Management: Using Leadership, Principles and Tools to Deliver Value in the Face of Volatility.	Main	Talk	2006
20060392	Clean Code	This tutorial is about CODE. We will put code on the screen and we will READ it and CRITIQUE it. And then, one tiny step at a time, we will CLEAN it. In this tutorial you will participate in the step by step improvement of a module. You will see the techniques of the Prime Directive (Never Be Blocked), and Agile Design Principles brought into play. You will witness the decision making process that Agile Developers employ to write code that is expressive, flexible, and CLEAN.	Tutorials	Tutorial	2006
20060393	Offshore Agile Maintenance	Predominantly the Agile literature covers applying the values and practices to a green field project using a co-located team. However, offshore/distributed development is the reality of the software industry. Offshore organizations have started with maintenance of non-critical business applications and moved over to green field development of business critical applications in a distributed fashion. Maintaining and enhancing business critical applications is the key to an organization's success. The existing literature states the following as challenges with distributed/offshore team: 1. Decrease in communication bandwidth 2. Lack of visibility into project status 3. Configuration management 4. Art of Command and Control structure 5. Cultural difference But based on my experience the above points are by-product of something more important. The root causes according to me are the following: 1. Lack of trust 2. Loss of context, both business and technical 3. Offshore team/s not getting equal stakeholder status 4. Abstraction of business and technical problems and decision In this discussion I would like to explain how we address the above issues and turned a failing project into a success story.	Experience Reports	Experience Report	2006
20060394	Extreme Construction: Making Agile Accessible	In recent years agile software development methodologies have become important. Extreme Programming (XP) is perhaps the best known of these. XP involves about a dozen key practices that work synergistically to provide quality software in an environment in which change is likely to occur. Here we present an exercise that we have developed and used successfully to train novices in the techniques. This exercise is novel in that it is accessible to programmers and non-programmers alike. In an industrial setting, this makes it available to managers and customers. In the educational setting, it becomes possible to teach the techniques to novices before they have learned any programming. It is intended for those who intend to develop object-oriented (OO) software. Extreme Construction is a game that is both fun and informative. It teaches the fundamentals of any agile methodology while helping build a closely-knit team.	Educator's Symposium	Research Paper	2006
20060395	Forming Successful eXtreme Programming Teams	XP is a lightweight process that provides principles for guiding projects and relies on the participants for its success. However, despite these guidelines, projects can be unsuccessful. We have previously identified that participants' levels of buy-in into the ethos of the methodology is a significant determinant of project success. This paper investigates how team formation influences buy-in and how buy-in, in turn, affects success, learning and working attitude within an academic environment. The empirical study shows that teams comprised of people with similar understandings of, and attitudes towards, the process tend to have a higher level of buy-in and, as a result, exceed their expected performance potential.	Educator's Symposium	Research Paper	2006
20060396	The Impact of Agility on a Bachelors Degree in Computer Science	Shippensburg University offers a Computer Science degree with the choice of five concentrations including Software Engineering. We first introduced agility as an XP component in part of our two-semester product development sequence. Within the software engineering concentration, agile concepts spread into our course on Software Metrics and Process Management. With that experience, our faculty have become interested in including agile concepts into other courses. This paper describes how a number of our undergraduate courses, the content of our computer science core, and our department's general health have been affected by agile techniques and philosophies.	Educator's Symposium	Research Paper	2006
20060397	Using Agile Management to Share Course Projects Among Multiple Classes	Project based courses have become popular as a way of engaging students and providing practical experiences. Sharing a single project between two course provides advantages of permitting more focus on the subject of each class, larger projects (more help and expertise is available) and greater opportunities for coordinated team work, and to appreciate how disciplines interact. A disadvantage is scheduling and managing class activities and risk to assure that useful project work is done at a pace benefiting both classes. This paper describes an experience in which an Agile approach was used to successfully coordinate project activities among a Software Development course and a User Interaction Design course.	Educator's Symposium	Research Paper	2006
20060398	Examining the Compatibility of Student Pair Programmers	Pair programming has been shown to be beneficial for both students and teaching staff in university courses. A two-phased study of 1350 students was conducted at North Carolina State University from 2002-2005 to determine if teaching staff can proactively form compatible pairs based upon any of the following factors: personality type, learning style, skill level, programming self esteem, work ethic, or time management preference. We examined compatibility among freshmen, advanced undergraduate and graduate student pair programmers. We have found that overall 93% of students are compatible with their partners. Students notably preferred to pair with a partner that he or she perceived to be of similar or higher skill level to them, which can be predicted by grouping students with similar grade point average. Additionally, pairs comprised of a sensor and an intuitor learning style seem to be compatible, and pairs with differing work ethic are generally not compatible.	Educator's Symposium	Research Paper	2006
20060400	Ward's Top 10 Favorite Wiki Postings Explained	Ward created Wiki because that is how he wanted to write.  He had the wisdom to let others finish his sentences and that gave his wiki much of its early charm.  But that doesn’t mean he doesn’t have strong opinions.  For this talk he will choose 10 mostly agile topics and tell you what he really thinks.	Main	Talk	2006
20060401	The Crystal Methods, or How to Make a Methodology Fit	Just as projects vary in size, criticality and priorities, and so should your methodology. The strengths and weaknesses of the organization, the specific people, even the office layout affects how the team best works, and should influence the methodology. Crystal is a family of highly tolerant, lightweight methodologies built from core principles, techniques for tuning them to your specific situation, and specific examples to copy from. Inside the rule set for a Crystal methodology may be any topic or convention the team agrees to, including level of document detail and formality, reviews used, office seating and even quasi-unofficial parties. The Crystal methodology family aspires to be the most tolerant, habitable and yet effective methodology for any particular project team. Besides the Crystal family genetic code, this tutorial describes the principles and techniques for shaping a methodology to the project-team combination, introduces the colors in the Crystal family, compares different examples of the Crystal family to each other relative to the principles, and shows the differences between Crystal Clear and XP. Expect to learn the methodology tuning principles, and experience how easy and fruitful a methodology-tuning session can be.	Tutorials	Tutorial	2006
20060402	Introduction to Automated Acceptance Testing	This tutorial will provide in depth answers to the following questions. * What is Automated Acceptance Testing. Why do we need? * Where does Acceptance Testing fit in an agile process? * What does the term Automated Specification mean? * What roles do QA's play? What roles do developers play? * What impact does Acceptance Testing have on quality and productivity? * What tools are available? (FIT and FitNesse) * How do you write Acceptance Tests first, before the code executes? * What is the best way to organize the tests.	Tutorials	Tutorial	2006
20070465	Back to Basics: The Role of Agile Principles in Success with an Distributed Scrum Team	Agile processes rely on feedback and communication to work and they often work\r\nbest with co-located teams for this reason. Sometimes agile makes sense because\r\nof project requirements and a distributed team makes sense because of resource\r\nconstraints. A distributed team can be productive and fun to work on if the team\r\ntakes an active role in overcoming the barriers that distribution causes. This\r\nis the story of how one product team used creativity, communications tools, and\r\nbasic good engineering practices to build a successful product.	Leadership	Experience Report	2007
20060403	Tuning Up: A Team Leader’s Guide to Retrospectives for Agile Development	Agile development teams learn and improve by inspecting and adapting. High performing teams inspect and adapt not only their code and tests, but also their methods and interactions. Through regular retrospectives they become skilled at acquiring and using collective wisdom, accessing best practice thinking, devising meaningful experiments, and increasing opportunities for successful innovations. For teams to reap these benefits, Retrospective Leaders employ skills in design and facilitation for teams to reap these benefits. In this interactive workshop, based on a forthcoming book by the presenters, the participants will apply a framework for retrospective design and obtain experiential understanding of retrospectives from both a participant's and a retrospective leader's point of view. Participant will practice designing an iteration or release retrospective. Workshop topics include:  Overview of Retrospectives for Agile Development --Preparing for a Retrospective -- Retrospective Simulation -- Design Practice and Feedback: Choosing Retrospective Exercises and Activities	Tutorials	Tutorial	2006
20060404	Discovering Whole-System Approaches to Enterprise Agile Adoption	More and more large companies are beginning to adopt Agile practices. However, many companies are facing new challenges in implementation. The project management and software development focus of Agile, as it is largely construed both in practice and in the literature, is often puzzling to senior corporate leaders and middle managers alike. The goal of this highly interactive and participant-driven Discovery Workshop is to gather insights, knowledge, and experience from among the participants that will advance thinking and practice for Enterprise Agile adoption. Of particular interest are "whole system" approaches that engage multiple management levels and diverse functional areas of the enterprise, from C-level managers to developers to support staff. The final output of the session will be a concrete artifact - something which others in the Agile community could learn from, and something which could be a foundational contribution to an emerging set of principles and patterns for Agile adoption in the large enterprise. This could be collection of Wiki entries, an article, or a white paper. Meanwhile, participants will also have gained a wealth of knowledge and insight which they can bring back to their workplace environments, as well as a support network of new friends and colleagues.	Discovery Sessions	Workshop	2006
20060405	Working Effectively with Legacy Code	Test Driven Development and Refactoring are powerful tools in the XP/Agile arsenal. With them you can add new code to systems and make existing code more maintainable. However, refactoring code without having tests in place can be hazardous. This tutorial presents a collection of dependency breaking and test writing techniques that can be used to get existing OO code safely under test for refactoring and enhancement. These techniques can be used in conjunction with Test Driven Development to breathe new life into large existing code bases.	Tutorials	Tutorial	2006
20060406	Multi-level Planning in Agile Environments	Participants will learn that extending the planning horizon beyond the iteration does not violate agile principles and can help project teams to set clear goals for a project. They will learn that estimation, prioritization and commitment is required for all people involved in the development of a product. They will walk away with a clear chart that summarizes which planning activities (prioritizing, estimating, committing) happen when, by whom and how. They will have built this chart themselves, adding understanding to the words, gained through discussions with each other and with the coaches.	Tutorials	Tutorial	2006
20060407	Facilitating Lasting Change: A Cornucopia of Tools, Tricks, Tips, and Techniques	Title: Facilitating Lasting Change: A Cornucopia of Tools, Tricks, Tips, and Techniques for Transforming Your Enterprise using Agile Making the move to Agile across an organization is an ambitious undertaking. This highly interactive and participative session will provide you a basic framework for understanding how organizations change. It will then allow a small group to drill down on several aspects of this change framework to provide each other hard won tips, generate or share tools, discuss techniques, talk about lessons learned, all while having fun. By the end of the session, we will have collectively created a complete toolset from over 30 concurrent such sessions for sharing with each other and the world.	Discovery Sessions	Workshop	2006
20060408	The Psychology of Build Times: Keeping the Tests Fast Enough	Build times matter. Agile development methodologies rely heavily on the practices of continuous integration, automated testing, and frequent builds. As build times grow, it becomes increasingly difficult to maintain the effective use of these practices. A slow set of automated tests, for example, prevents many teams from running any tests often enough to get the kind of feedback that agile development demands. This tutorial introduces the psychology of build times and provides practical approaches for making tradeoffs in running builds and tests. We provide a guidance model for enterprise builds and discuss how distinguishing between different kinds of builds can be helpful. Common pitfalls encountered by agile development teams in automating builds and tests will be discussed. During the second half of the tutorial, participants will be challenged to revisit their understanding of different kinds of automated tests. Guidelines for helping teams distinguish between "slow" and "fast" tests will be given, and concrete coding examples will be provided to show how to improve the fast/slow ratio.	Tutorials	Tutorial	2006
20060409	Introduction to Holacracy™: A Framework for Agile Leadership & Decision Making	Agile software development harnesses self-organizing teams that adapt rapidly to change. This requires highly effective team decision making, the ability to rapidly evolve policy and process decisions as feedback arrives, and leaders that add expertise without resorting to autocratic fiat. This differs considerably from the usual top-down predict-and-control corporate model, and a more agile replacement for autocratic decision-making and management can dramatically improve productivity and quality of life for all involved. This session introduces Sociocracy, a system of decision-making and governance that harnesses self-organization and facilitates rapid adaptation to change. Sociocracy fills a gap in most Agile methods, by adding an agile decision making process and management structure that values self-organization and integrates with agile software development processes. Sociocracy adds significant value when applied on a single agile team, and its fractal structure can integrate agile decision-making and leadership across multiple teams, a large department, or an entire company. Attendees will leave with an understanding of the benefits and practices of Sociocracy, as well as hands-on experience applying the model to enhance agility, improve decision-making, and more easily integrate feedback into decisions, processes, and practices.	Tutorials	Tutorial	2006
20060410	Agile Project Initiation Techniques - The Inception Deck and Boot Camp	Expecting new teams to pick up and apply Agile software development practices without any training or guidance is unrealistic. Just as an army wouldn't send its soldiers to battle without basic training, nor should we begin Agile projects under similar circumstances. If team members new to Agile become frustrated and struggle while trying to learn how to apply the techniques, there is a risk they will revert back into their old bad habits. All Agile projects should begin with a boot camp. Boot camps help teams gel, decide on a code of conduct, and set expectations appropriately. Teams that use boot camps also have less internal conflict, apply the Agile practices at a higher level, and experience greater productivity.	Experience Reports	Experience Report	2006
20060411	A Self Funding Agile Transformation	How can a developer bring about change within their team. How can a development team influence the processes outside their direct control? A consultant will tell you to hire a consultant or go on an immersion course. But Big-Up-Front-Training doesn't seem to be in the spirit of agile. What is more, having to get authorization and capital investment up front in order to act is counter to Kaizen principles. An alternative is to bootstrapped agile practices using your own people. Then pay for further improvement by using funds freed from efficiency savings generated by Agile. This experience report will describe the benefits and drawbacks of a DIY agile implementation, and what kind of time-line you can expect. We will also explain how the developers sold agile to management and the rest of the company. We want to motivate other individuals and teams to act independently and find ways of moving forward in their own organizations, with or without the help of external consultants.	Experience Reports	Experience Report	2006
20060412	Embedded Agile Project by the Numbers With Newbies	This session will present detailed metrics from a three year long agile project where a newly formed development team produced a new spectrometer product from scratch. The team experimented with various agile practices while recording data on bug rates, bug root causes, code size, schedule compliance, and labor expended. What makes this project even more unusual is that most of the team members lacked important technical skills for this work but they outperformed far more experienced teams. The natural learning environment and safety net that Agile provides allowed them to learn fast while keeping them from serious mistakes.	Experience Reports	Experience Report	2006
20060413	Workshop: Teaching Agile -- Agile Teaching: Creating an Holistic Learning Environment	Teaching and learning agile principles and practices is more than teaching pair programming and test-driven development, yet that is typically where the focus lies in programming and software engineering courses. We want to consider the challenges and opportunities for creating a holistic teaching-learning environment for agile principles and practices: * When to introduce agile into the curriculum (learning experience) - at beginning (perhaps coordinated with OO) or later after they have had some "traditional" software development education o Where in the curriculum - put in a single course or distribute throughout program. * Which methodologies to introduce and use - does it matter - XP, scrum, etc. * Agile think first, then agile software development? What is best way to instill the principles? * Apply agile approach to teaching - don't teach it all in one lump. * How to teach (transfer) experience? Students and faculty come with different levels of experience in software development. How to capitalize on this diversity of skill, experience and interest? * How should traditionally educated faculty get the required skills? * Team teaching team learning - building the community. * Text and materials * Retrospectives * Agile development projects - infrastructure, platform, programming language(s), open source o Games, tools, techniques	Main	Talk	2006
20060415	The Test-Driven Development Pairing Game: Making Pairing Fun	The Test-Driven Development (TDD) Pairing Game is a fun approach for introducing software engineers to TDD and pair-programming. The structure of the game encourages a higher level of pair-wise collaboration when compared to traditional pairing. The foundation of the game allows the pair to improve upon the TDD experience by creating an environment in which the two developers compete, in a fun way, to write better tests and better code. In the end, the winner is the customer. What results is always a mystery, but one thing is for sure, the collaboration between the pair encourages a careful negotiation of the scope as both the tests and the implementation are created. In the end, this results in higher quality software and a more collaborative experience when compared with traditional approaches. Use this game to introduce test-driven development and pair programming to your organization. Keep using the game to keep the team engaged and excited to come to work.	Tutorials	Tutorial	2006
20060416	Selling Agile Project Management to Bean Counters	CFOs, COOs, and CEOs make decisions based on a simple algorithm. Every initiative the company launches should contribute to increasing the company's revenues or decreasing the company's costs. As the agile evangelist in your company, you must arm yourself with the correct data and understand what arguments will convince the bean counters that an APM initiative makes economic sense. This presentation will introduce you to the language and formulas used by upper management to make decisions and how APM measures up.	Tutorials	Tutorial	2006
20060417	Using an Agile Approach in a Large Traditional Organization	Can Agile approaches be used successfully in large organisations, where traditional methods and governance are the norm? In this presentation, we will discuss some of the challenges we faced in bringing in DSDM to OCLC, Dublin , Ohio. Founded in 1967, OCLC Online Computer Library Center is a nonprofit, membership, computer library service and research organization dedicated to the public purposes of furthering access to the world's information and reducing information costs. We will concentrate on how we were able to incorporate DSDM into a development culture that was deeply-routed in "traditional" software development methods. We will use examples from multiple projects to illustrate how DSDM helped OCLC change its culture. We will give an example of the current development cycle and show how OCLC's TLC dashboard is used to track the effectiveness of the development cycle, showing metrics back to 2003	Experience Reports	Experience Report	2006
20060418	Using An Agile Approach To Free The Organization From "R&D Paralysis"	This experience report describes how an agile development methodology approach was used to sell a major R&D undertaking within a Swedish technology organization dominated by traditional waterfall projects. By offering management the combination of early and continuous delivery of value and the possibility to change their minds along the way, it became possible to get past the problems of a prohibitively large price tag and too long time to market. The report deals with the entire life cycle of the project, including the initial sales pitch, team setup, challenges related to introducing agile development and project execution. Conclusions include that selling agile methodology takes time, needs to be an ongoing activity within an organization, and that it may actually be easier to convince higher management than developers of the virtues of agility.	Experience Reports	Experience Report	2006
20060419	Extreme Selling in the Early Stage Space	Agile Development may be used as an effective software development methodology as well as a marketing differentiator. Ternary Software has implemented a two-tiered marketing strategy in the early stage space, with Agile Development at the hub. At one level, Ternary attracts early stage entrepreneurs with the adaptability of the development process, and ability to get to market quickly. At a second level, Ternary appeals to supporting organizations, such as angel investors and law firms with emerging stage practices with the risk minimization inherent in an Agile Process. The two tiers intersect. Not only do the supporting organizations provide exposure to Ternary Software, but they also provide valuable investment dollars to the early stage firms who embrace agile development.	Experience Reports	Experience Report	2006
20070683	Collaboration and Facilitation with Dispersed Teams	Collaboration, individual interactions, and face-to-face conversation are \r\nfundamental concepts in agile software development. Consequently, agile teams \r\nbenefit greatly from a co-located environment. Ideally, team members can spend \r\nsignificant time working in one room, sharing information, pair-programming, \r\nand conducting their meetings and design sessions in full-view of the story \r\ncards, tasks, and charts hanging on a wall.\r\n\r\nBut what if an organization's structure or physical environment prevents co-\r\nlocation? What if team-members that need to work together are stationed in \r\nseparate offices, work remotely at their homes, or are dispersed across \r\ngeographic regions or time zones? How can these resources still collaborate \r\nsuccessfully in an agile development environment?\r\n\r\nAs more organizations move to adopt agile principles and practices, \r\nconfronting these questions will become more common.\r\n\r\nThis session will focus on the organizational and environmental factors that \r\npresent challenges or perceived barriers to agile adoption and implementation, \r\nand identify potential solutions, whether available or needed.	Individuals & Teams	Discovery Session	2007
20070570	Design The Agile Conference	The goal of this Discovery Session is to help the conference committee better \r\nunderstand what conference delegates seek in future Agile conferences by \r\nplaying the Innovation Games(R) Product Box and Spider Web. At the same time it \r\nwill provide conference delegates in hands on "learning by doing" of how to \r\nplay these games.	Other	Discovery Session	2007
20070889	Domain-Driven Design: Strategy	Agile teams aim to adapt quickly and adapt the system quickly to new learning\r\nand new conditions. Some design decisions affect the trajectory of the whole\r\nproject, and so a team serious about agility must attend to certain vital\r\naspects of the design. \r\nAgile teams aim to make software that is valuable to the customer. To make sure\r\nthat development is being invested in the part of the software with core value\r\nto the business requires a deeper conversation about the domain that usually\r\nhappens in typical planning sessions.\r\n\r\nIn fact, modeling and agility are tightly connected on a complex project.\r\nModeling is best carried out by small, dynamic teams with a lot of autonomy, yet\r\ncreating large systems requires coordination and project-spanning decisions.\r\nManagers and developers alike need to pay close attention to this intersection\r\nof design, project organization, and politics. Modeling is most needed in\r\ncomplex circumstances, yet the typical dynamics of large projects often derail\r\nmodeling or disconnect it from the real design. This tutorial introduces them to\r\na suite of techniques for that purpose.\r\n\r\nFirst, distilling a shared vision of the system's core and the roles of its\r\nparts can focus development effort on real business assets, and tell when "good\r\nenough is good enough" versus when to push for excellence. It can guide\r\ndecisions about what do develop in-house, what to buy, and even where agile\r\nprocesses will matter most.\r\n\r\nThen, "context mapping" addresses a vital fact of life: different groups model\r\ndifferently. Ignoring these realities leads to dumbed-down models and costly,\r\nbuggy integrations, and disruption of project plans where they depend on other\r\nteams. Defining the boundaries within which these various models apply allows a\r\nteam operating within such a boundary to iterate and refine its model and design\r\nwithout being suffocated by interdependencies with other teams, yet without\r\nblinding slamming into insurmountable integration problems.\r\n\r\nThe combination of context mapping and distillation of the core domain provides\r\na powerful view of the big picture.\r\n\r\nFinally, who makes such decisions and how? Architecture teams disconnected from\r\ndaily development make decisions with unintended consequences. Agile processes\r\nemphasize staying close to the hands-on development work, but such decisions\r\nalso need a broad view. Without prescribing a particular organization, we will\r\nconsider guidelines for strategic decision making.	Developing	Tutorial	2007
20070861	Evolution of Inter-Team Collaboration Models	As the Software development industry is evolving, we are realizing the\r\nimportance of small, highly collaborative teams. Today, a given software\r\ndevelopment team needs to collaborate with more  and more specialized &\r\ndecentralized teams that may or may not deal with end-user requirements\r\ndirectly. For agile values to persist, the various teams need to collaborate\r\njust as efficiently as members of a small team collaborate with each other.\r\nWorking on large enterprise projects, we have realized the importance of\r\nestablishing good collaboration models between the teams. Most of the\r\norganizations we have worked with, establish a model for inter-team\r\ncollaboration to start with. As they transition through Agile, the teams learn\r\nand adapt to new and better ways of collaborations. In this paper, we'll try to\r\nhighlight our experience evolving these inter-team collaboration models,\r\nespecially on large enterprise projects.	Other	Experience Report	2007
20070950	Forming to Performing: The Evolution of an Agile Team	Using Bruce Tuckmanâ€™s [1] â€œForming â€“ Storming â€“ Norming â€“ Performingâ€ model of \r\nteam development we review the effects of change on our team through each \r\nstage. We go on to show how in certain cases this change is cyclic and \r\ntechniques abandoned in one phase may well be re-introduced in another. While \r\ntools, techniques and processes may change we observed that despite the \r\ncultural change there is one thing that remains constant: The agile principles \r\nand values.	Other	Experience Report	2007
20070631	Groovy: a language for Agile Development and Testing	Groovy is an open source language which runs on top of Java. It is fast becoming\r\nthe second most popular dynamic language behind Ruby. It offers all the great\r\nproductivity features of Ruby but with a Java-friendly syntax and automatic\r\nintegration with the vast library of available Java libraries. Itâ€™s built-in\r\ntesting and mocking facilities make it ideal for agile development teams wanting\r\nto boost their testing productivity through an Agile language. Like Ruby, Groovy\r\nmakes programming fun again!	Developing	Tutorial	2007
20070370	Hiring For An Agile Team: Detecting Candidates Who Will Fit With the Team	We work in all kinds of teams at work, and an Agile team and environment can be\r\nvery different from other kinds of teams and environments. In successful Agile\r\nteams, people work differently, treat each other differently, can discuss\r\ncertain issues more openly, and may be rewarded differently. All of those\r\nfactors are part of hiring for a particular cultural fit, a key part of hiring\r\nfor an Agile team.\r\n\r\nIn this session, Johanna will facilitate your discovery of your unique\r\ncharacteristics and environment--your culture. Armed with that information, we\r\nwill discuss how to ask questions and use auditions to hire for your team. We\r\nwill create an environment in which you can practice your questions and auditions.	Leadership	Tutorial	2007
16684	It's all about teamwork - getting a team to turn into a high-performing engine	Why aren t all teams hyper productive?\n\nWhat s fun got to do with work performance?\n\nWhat first three steps should a new team take to move toward high performance?\n\nMy manager wants performance metrics, what team performance measures do you\n\nuse? How can you tell when a team is becoming more productive?\n\nWhat s the most high performing team you ever saw and how did you know?	No Bull Know How	Workshop	2012
20070366	Succeeding with Agile: A Guide to Transitioning	Transitioning to an agile development process is unlike most transitions an\r\norganization may make. Many transitions begin when a strong, visionary leader\r\nplants a stake in the ground and says, "Let's take our organization there."\r\nOther transitions start with a lone team thinking, "Who cares what management\r\nthinks, let's do this." The problem in transitioning to agile is that neither of\r\nthese approaches alone is likely to lead to the long-term sustainable change\r\nrequired.\r\nTransitioning to agile is harder than many other corporate transitions\r\nbecause the transition process must be congruent with development process we are\r\ntrying to adopt. We cannot, for example, wish to adopt an agile process because\r\nwe believe in the power of self-organizing teams but then use a transition\r\nprocess that is not itself self-organizing. Nor can we adopt agile because it\r\nacknowledges the inherent uncertainty in precisely planning a project but then\r\nhope to precisely plan the transition to agile.\r\nOrganizations-especially ones adopting an agile process-are complex adaptive\r\nsystems reliant on self-organization and this must be acknowledged throughout\r\nthe transition process. This session will outline the three critical factors\r\nnecessary for self-organization to emerge and then use those as a framework for\r\nthinking about and guiding a transition to agile.	Leadership	Talking Head	2007
20070540	Transforming a Six Month Release Cycle Into Continuous Releases	conject used to release complete modules of their Internet platform once every six months. Customers \r\nwere forced to wait for months to get access to new features. Once they arrived, the big bang releases \r\ndisrupted the user experience due to bugs lurking in the new software. Despite what seemed to be an \r\nimpossible task, the team successfully transformed their software development process into one with a \r\nstable and continuous flow of small releases. Now features are delivered to customers more quickly and \r\nwith much higher quality. This paper tells the story of how the team managed to speed up delivery whilst \r\nraising quality at the same time.	Other	Experience Report	2007
20070414	XP 2000-2007: My Greatest Misses	Any successful recording artist eventually submits to releasing a "Greatest\r\nHits" album. They collect their best-loved, most successful songs and put them\r\ninto a neat package that not only provides great marketing material, but neatly\r\nsums up their career to that point. It therefore seems only fair that a beat-up\r\nXP coach who has been through the ringer a few times should collect his biggest\r\nand furthest-reaching mistakes, bring them together in a neat package and\r\nrelease them to the public. This is that talk.\r\nThis talk could also be named "Ten ways to guarantee your Agile transition is\r\na total failure", or "Apologies of an XP coach"; however I'm sure I'll mention\r\nmore than ten mistakes and I make no apology for them.\r\nYou'll laugh, you'll cry, and leave with a greater appreciation for the\r\ndifficult task of helping people learn to become agile software practitioners.	Leadership	Tutorial	2007
20071038	XR15: Release Management	Over the waterfall in a barrel - MS IT\r\nadventures in \r\nSCRUM\r\n\r\nby Jeanne Lewis and Kevin Neher\r\nTransforming a Six Month Release Cycle\r\nInto \r\nContinuous Releases\r\n\r\nby Matthias Marschall and Dan Ackerson\r\nGrowing a Build Management System from Seed\r\n\r\n\r\nby Narti Kitiyakara and Joseph Graves	Other	Session	2007
20070989	Scaling-up Agility to Globally Distributed Teams The Eclipse Way	Many aspects of agile development support smaller teams working together in proximity. The Eclipse \r\nPlatform was developed using agile practices, but the team never had the luxury of developing in a single \r\nlocation or even a single time zone. And, in the course of pursuing our goal of ongoing project health \r\nthrough continuous consumption and feedback, we adapted and evolved our practices and those we \r\nlearned from the agile community. This has resulted in what we now refer to as the "Eclipse Way" practices \r\nthat we (and others) have applied to other software development efforts as well. In this talk we take a look \r\nat the Eclipse Way with a particular focus on how we tuned our agile practices to work for a globally \r\ndistributed team. Being tool smiths ourselves, we have naturally been exploring how tools can help with \r\nthese practices and further support collaboration to ship quality software on time.	Other	Keynote	2007
20071050	Agile Estimating	Estimating software development effort and schedules has long been an activity \r\nprone to inaccuracy.  The emergence of agile software development has \r\nintroduced both additional problems and opportunities for the estimating \r\ncommunity.  Initially, agile developers were skeptical of traditional \r\nestimating techniques.  However, as agile moves into mainstream software \r\ndevelopment, there are many factors that make traditional types of estimating \r\ncritical for agile developers. At the same time, there is an opportunity for \r\ntraditional estimators to use agile thinking to improve their own processes.  \r\nThe CAM-EP, Composing Agile Methodology â€“ Estimating Process, is introduced \r\nhere to accomplish just that.  That methodology was used to develop ELFE, \r\nEarly Lifecycle Functional Estimating.	Other	Research Work In Progres	2007
20071048	Agile Metrics - Waste or Necessity?	Five years of coaching over a hundred teams in a large company have exposed \r\nextreme views on the need for process data To persuade teams to use new \r\npractices data is needed to compare against the data gathered over the years \r\non established methods. But practitioners and business leaders remain divided \r\ninto those who want metrics or those who hate them. Who is right?  Research \r\nminded experts agree data is vital, but how do we convince others?  This \r\nposition paper discusses both sides, examines common mistakes, and then \r\nasserts that rather than being a waste, metrics are key to building \r\norganizational and industry credibility for the techniques we value	Other	Research Work In Progres	2007
20071046	Agile Narratives: Gathering Stories	This paper presents preliminary research conducted as\npart of the Agile Narratives Project.	Other	Research Work In Progres	2007
20071044	Agile Software Assurance	Agile Software Assurance - An Abstract\n<!--\np.MsoBodyTextIndent2\n\t{margin-bottom:.0001pt;\n\ttext-align:justify;\n\ttext-indent:12.25pt;\n\tfont-size:10.0pt;\n\tfont-family:"Times New Roman";\n\tfont-style:italic;\n\tmargin-left:0cm; margin-right:0cm; margin-top:0cm}\n-->\n\nSince Agile methods were presented in the 90s, many papers, \narticles and books have been published about Agile. However, little work \nfocuses \non Agile Software Quality. Therefore, the main goal of this research is to \nstudy \nthe quality of Agile projects, in order to help software development \norganizations to have deeper understanding of Agile methods, principles and \npractices. In addition, this research aims to produce a successful quality \nassurance model for Agile projects in order to increase the successful use of \nAgile in both industry and academia. Moreover, the research will help \nevaluating \nthe quality of Agile projects. This paper presents the work done so far, which \nincludes studying number of Agile projects using interviews and \nquestionnaires. \nThe results of the work are presented and discussed, as well as the future \nwork. \nOur initial findings are that organizationsâ€™ understanding of Agility varies; \nthat they are more likely to adopt Agile practices than pre-defined \nmethodologies, and that the most popular practices are continuous integration \nand automated unit testing.	Other	Research Work In Progres	2007
20071051	Applying Agile Principles in an UED Environment	Applying Agile principles in a UED environment has required utilizing a \ncombination of software engineering disciplines in order to coalesce the Agile \nand UED points of view. User experience design, or UED, is used primarily for \nweb design projects where the focus is on the interface and visual design \ncomponents.  UED has a reliance on presenting the client with a digital \nstrategy and accompanying look and feel prior to programming phase.\n\nIt has proved challenging to try to incorporate Agile/XP principles with a \nteam unfamiliar with the methods used XP.  As the first Agile project this \nteam has embarked on, I have had to be creative when providing deliverables to \nthe team and client that are familiar to both while keeping focused on \ncreating the software requirements that are suited to the programming phase of \nthe project.  \n\nTheir expectation of a feature set was vastly different from what was provided \nas a required deliverable form the client, but it was a gentle nudge towards \nXP feature stories.  This paper will examine the differences in typical UED \nwaterfall projects and the transition to an Agile/XP way of thinking.  The \nteamâ€™s understanding of user stories in the development of a feature set for a \nlarge and complex web development project has proved to be the catalyst \nproving to the team that Agile/XP is a viable development methodology.	Other	Research Work In Progres	2007
20071023	Climate in Agile Software Development Teams: The Case of Quality Climate and Teamwork Climate	This short paper proposes to use organizational behavior studies in general, \nand studies about the concept of climate in particular, for the exploration of \nperformance and processes of agile software development teams. The current \nstudy focuses on two dimensions of climate: quality climate and teamwork \nclimate.	Other	Research Work In Progres	2007
20071052	Developing a Survey to Collect Expertise in Agile Product Line Requirements Engineering	The need to rapidly deploy high quality families of software products has lead researchers and \r\npractitioners to investigate how to integrate agile methods and product line engineering techniques in \r\nmultiple phases of the software development lifecycle.\r\n\r\nOur research focuses on the requirements engineering (RE) activities. In particular, we are investigating \r\nhow to select a requirements engineering process that provides the necessary degree of agility and \r\nsupport for specifying a product line application. As a first step in this research, we have designed a \r\nquestionnaire for gathering from experts the knowledge that influences the RE process selection. Here \r\nwe describe the development methodology and provide an overview of the questionnaire. The \r\nquestionnaire has been created using established principles of good questionnaire design; it has been \r\ndeployed as a web based application, implemented in C#.	Other	Research Work In Progres	2007
20070402	Enhansing Extreme Programming for Not-so-extreme Programmers	With the announcement of the Agile Manifesto, many agile methods have emerged. \nThey proposed various practices to improve software quality. Extreme \nprogramming (XP), for example, claims to push software development to its \nextreme, reaching extreme quality. However, there seems to be an unrealistic \nassumption with XP that only the best programmers are deployed. No XP practice \nwhatsoever has addressed the issue of deploying ordinary, not-so-extreme \nprogrammers. To solve that, we propose three cognitively-based practices to \nenhance XP: 1) Design sketch and pseudo code, 2) High-level data structure, \nand 3) Pre, post conditions. They assist ordinary programmers to think more \naccurately and orderly than otherwise, thus to increase software quality. More \nimportantly, these practices are integrated into XP to form a new agile \nmethod.	Other	Research Work In Progres	2007
20071043	Enterprise in Transition: Governance Meets Agile	The transition of a large enterprise to agile methods is a gradual and complex \nprocess. Governance in such organizations can be described as the process of \nexercising authority to direct, control and measure something within the \nboundaries of an organization. We are conducting a study of the governance \nmechanisms in a large organization undergoing a transition to agile methods. \nWe report initial findings from this ongoing study and discuss areas for \nfurther research.	Other	Research Work In Progres	2007
20070526	eXtensible Development System (XDS)	Agile 2007 Conference Draft/Proposed Abstract\n\nTitle: eXtensible Development System: Agile Practice Integration\n\nTopic Summary: Extensible Development System (XDS) is an EDS-proprietary blend \nof Agile Practices that was initiated in order to establish a comprehensive \npeople, process, tools and techniques approach to enterprise agile application \ndevelopment and delivery.\n\nThis includes overcoming the â€œfriction pointsâ€ that are often revealed when an \norganization attempts to integrate agile application delivery techniques into \ntheir organization.\n\nRecommended Track for Presentation: Research Work In Progress (or possibly \nTalking Heads)\n\nBenefits: Presents an approach for blending Agile practices in order to \nleverage those practices that yield the most value to your organization.\n\nContent Outline:\n1. Building an Agile Roadmap: Where to Start, Where to Finish\n2. Identifying and Overcoming the Friction Points to Adopting Agile\n3. XDS: a view into an Enterprise Agile Strategy\n4. Recommendations on Formulating an Agile Strategy for your organization\n\nPresenter Bio:\nJeff Sage serves as an enterprise technology consultant at Electronic Data \nSystems in support of the General Motors account. His expertise resides in \nenterprise application and solutions delivery. Prior to joining EDS, Mr. Sage \nhas held technology positions at Accenture, General Electric and International \nBusiness Machines.\n\nHistory of presentation: This presentation and material has not been publicly \npresented prior to this conference.\n\nEmail: jeff.sage-eds@eds.com	Other	Research Work In Progres	2007
20070972	How Does Readiness for Agile Software Development Relate to Team Climate and Individual Personality Attributes?	In this short paper we present an intermediate stage of our research on \nrelationships between specific indices of organizational climate \n(team/management climate), level of individual self-efficacy as a personality \nattribute, and software practitioners' readiness for agile software \ndevelopment. Management and behavioral sciences theories are used to design the \nresearch model. Data analysis involves statistical methods. Research results \ncan help organizations predict the readiness of employees to implement agile \nmethods and/or to work effectively in an agile environment.	Other	Research Work In Progres	2007
20071045	IMPROVING RESOURCE LEVELING IN AGILE SOFTWARE DEVELOPMENT PROJECTS THROUGH AGENT-BASED APPROACH	Successfully project planning, coordinating and controlling in order to deal \neffectively with projects sponsors, customers, unexpected risks and changing \nscope are difficult tasks even for the most experienced project managers. The \ntight deadlines, volatile requirements and emerging technologies are the main \nreasons for this lake of performance. This agile project environment requires \nan agile project manageÂ­ment. \n\nDifferent approaches to project planning and scheduling have been developed. \nThe Operational Research (OR) approach provides two major planning techniques: \nCPM and PERT. Artificial Intelligence (AI) initially promoted the automatic \nplanner concept. In order to plan a project, the automatic application of \npredefined operators is required. However, most domains are not so easily \nformalized in the form of predefined planning operators. The new AI approaches \npromote model-based planning and scheduling that are more appropriate for the \nagile project management. \n\nThe paper focus is on the agent-based approach to project planning and \nscheduling, especially in Resource Leveling issues. The authors have developed \nand implemented the ResourceLeveler system, an agent-based model for leveling \nproject resources. The objective of Resource Leveler is to find a scheduling of \nresources similar to the optimal theoretical solution which takes into \nconsideration all constraints stemming from the relationships between projects, \nactivity calendars, resource calendars, resource allotment to the activities \nand resource availability. ResourceLeveler was developed in C# as a plug-in for \nMicrosoft Project. Future work will focus on the development of agile software \nagents for resources leveling.	Other	Research Work In Progres	2007
20071042	Introducing User-Centric Approach into Agile Software Development	In this work we focus on the user role and examine the relationship between \nthe agile approach and the user-centric approach. We describe a case study in \nwhich both approaches are used. We found that when combining HCI design with \nthe agile approach, the user evaluation is fostered by the process agility and \nthe product development benefits from keeping the design updated according to \nthe evaluation outcomes.	Other	Research Work In Progres	2007
20071053	Learning from the Best: An Appreciative Inquiry into Industry-Leading Agile Practices	Appreciative Inquiry (AI) is an approach to organizational change that involves structured inquiry into \r\nbest practices, and collective visioning of a desired future.  A proven method for fostering large-scale \r\nchange and whole-system engagement in high tech environments, AI fosters positive relationships, \r\nleverages strengths, and enhances the systemâ€™s capacity for ongoing collaboration and change. \r\n\r\nThis paper provides the conceptual overview and outline for a one-day capacity-building conversation \r\namong Agile practitioners. Through structured conversation and cross-organizational inquiry,  \r\nparticipants will increase their understanding of Agile techniques and how they best align with software \r\ndevelopment practices. Through presentations, they will learn the basic principles and practices of \r\nAppreciative Inquiry.  Finally, as they go through the workshop, they will experience AI as a process for \r\nchange that they can use in the future to enhance their effectiveness as team members and as change \r\nagents.	Other	Research Work In Progres	2007
20070878	Minimum Integration Testing	Traditional Integration testing requires the actual deployment and execution of\nall participate components. But the cost associated with setup and execution of\nsuch tests is usually high. It is also impractical to exhaust testing all\ncombinations of execution paths when integrating many components. This paper\nexplores a minimum integration testing which only involves unit testing on\nparticipating components. The premise is to not only avoid complexity and cost\nbut also make integration test cases more effective and manageable. Some\nexamples and practical issues are also discussed.	Other	Research Work In Progres	2007
20070804	Okay, can you give me an example of that?	Agreeing on the behavior we want in our applications and verifying it - nothing\r\ncould be more central. But in spite of the focus Agile Development places on\r\nstories and storytests, why do we still find it so hard to define and test for\r\nacceptance? \r\n\r\nAsk yourself: \r\nDoes your project have an effective way to capture those key details from\r\nconversations with customers?\r\nDo you have a shared language that spans the customer, developer and QA\r\nroles?\r\nDo you have a way of testing for acceptance?\r\n\r\nIf you answer no to any of these questions, then it's time to recognize the\r\npower of examples.  \r\n\r\nOur session will be a blend of games, simulations and workshopping our\r\ncollective experience. We will explore \r\nUsing games to learn how to extract good examples from natural language\r\nstories.\r\nUsing interactive discovery to recognize smells in poorly written examples.\r\nMakeover challenges to refactor smelly examples into solid specifications.\r\nBridging the gap: what non-developers need to know about how to specify\r\nexamples that can be automated. This will not be focused on a particular\r\ntechnology but will provide guidance on which technologies are best suited to\r\nwhich kind of storytest.\r\n\r\nParticipants will come away with a deepened understanding of how to generate\r\nexamples, how to mine them for their most value and how to teach this process to\r\nothers. \r\n\r\nThis presentation will use online, interactive e-learning\r\nexperiences rather than static handouts. To get the fullest benefit from this\r\nworkshop, participants should bring a laptop with wireless access.	Testing	Discovery Session	2007
20071054	Research in Progress - Adopting Agile Software Development Practices for Extreme Programming to Non-Software Development Business Processes	Agile/XP methodologies have been reported to improve productivity, quality and customer satisfaction \r\ncompared to traditional methods. Traditional business processes including those for software \r\ndevelopment methods are linked to the traditional management views of Frederick Winslow Taylor [1]. We \r\nhave conducted an industrial case study to provide quantitative evidence on the results of adopting XP \r\npractices to non-software development processes. Initial findings indicate XP practices can be adapted to \r\nprocesses previously reliant on traditional methods while improving productivity, quality, and customer \r\nsatisfaction.	Other	Research Work In Progres	2007
20070983	Scaling Agile in a RUP Enterprise	Managing the needs of a complex and growing enterprise can push agile \nmethodologies to their limits.  Projects that were once small are not so small \nanymore.  The team that used to fit in a single room now fills the entire \nfloor.  You might even have part of your team in another state; some may be in \nanother country.  \n\nAs your company grows, the leadership may decide that these agile \nmethodologies no longer work in a mature organization.  They may declare their \nintent to implement a more heavyweight process and demand more controls.  \nRegulatory compliance has created a high ceremony culture where documentation \nand their requisite sign-offs rule the day.  Delivering software quickly and \nin the simplest way possible becomes a challenge that the successful \ndevelopment organization must address.  \n \nThis experience report will demonstrate how CheckFree has overcome many of the \nobstacles that make managing large agile projects difficult.  It will show not \nonly how to scale agile practices, but specifically how to adapt their use \nwithin IBMâ€™s Rational Unified Process framework.  This document will \nillustrate how the team has remained agile in spite of rapid growth and the \nintroduction of offshore development.  Using these best practices, our team \ndelivers on a large portfolio of projects meeting the needs of multiple \nproduct owners.	Other	Research Work In Progres	2007
20071047	Stories and Process: Conversational Storytelling Across Agile Systems Development Practices	To produce non-negligible software programmers must\r\ncollaborate and communicate; with each other, with management\r\nand sometimes directly with customers and users.\r\nThis paper presents a proposed narrative-ethnographic\r\nstudy into programmer communication over a period of process\r\nimplementation.	Other	Research Work In Progres	2007
20071041	Tear Down the Barriers: A first report into the relationship between people and agile software development.	This paper describes the first step of a qualitative investigation into the \ndeterminants for effectiveness of agile software development. During a \nworkshop at Agile 2006 21 participants were queried for what they liked or \ndisliked about agile software development in their own personal experience. \nThis data was then analyzed to begin developing a Grounded Theory of how an \nagile methodology contributes to the overall effectiveness of a software \ndevelopment team. Our early results show barriers erected as a result of both \nindividual and organizational deficiencies block feedback and threaten the \nsuccess of an agile software development project.  Further research is \nrequired to understand these barriers and how agile methodologies reduce these \nbarriers.	Other	Research Work In Progres	2007
20070982	Useful Sprint Metrics	This research work in progress describes metrics that were devised by \nparticipants in an open space, which was held to address the question â€œWhat \nmeasurements shall we use at the end of each sprint to determine whether our \nproduct is 30 days from release?â€  We will also examine how to gather and \nreport the metrics at the end of each sprint, and the interesting effects the \nmetrics have.	Other	Research Work In Progres	2007
20082404	The Learning Circle: an evolution of Agile for learning environments 	<div class="content">\n    <p>THE LEARNING CIRCLE: Action, Reflection, Learning, Planning in light of guidance. An approach to learning for individuals and groups using Agile.</p>\n\n<p>The Learning Circle is an approach to learning for individuals and groups, and is a generalized agile framework that you can use outside of software development.  By using the Learning Circle, you follow a cycle of activities that flows through the steps of Action, Reflection, Learning, and Planning, all in the light of guidance.</p>\n\n<p>The Learning Circle is a tool that can be used at several levels: moment-by-moment, day-by-day, every iteration, or at the level of the product release or project.  It is a tool used for evaluating the process as well as the end result of the process. The retrospective in the Agile approach can be enhanced by using The Learning Circle. Synthesis and creativity are experienced and made conscious through successive applications of The Learning Circle. The relationships of inner synthesis and outer creativity are mirrored in the group and in each individual within the group. It is a memorable and usable model for a variety forms of capacity building that makes synthesis and creativity conscious, thus providing a key to transformation.</p>\n\n<p>In this session, I will present the Learning Circle, stories of its use, and lead the group through a participatory exploration of the Learning Circle.</p>\n\n<p>Background Notes:\nSeveral years before I knew there was such a thing as Agile I begin to apply agile-like strategies as a director working in video production. It was a natural way of working with teams, tight budgets, and short time lines. When I began to understand how Agile methods worked my first understandings were naturally framed in terms of television production.</p>\n\n<p>Agile methods raise questions about creativity in terms of the individual vs. the group. The retrospective can play an important role in addressing these questions. This part of a sprint or product release, is similar to doing a critique in art where several excellent critical methods have been developed. However, these methods are most often applied only to finished work. \nThe Learning Circle is a method for developing a critique to tune the process of work as well as to critique the end result of the process. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>A projector for a Power Point presentation with stories and pictorial examples of the application of The Learning Circle ( About 35 minutes ) \nColor and Memory ( About 35 minutes ) a participatory exploration of The Learning Circle  using the example of the importance of color in our memory. \nQ/A and feedback. ( About 15 minutes) \nBeginning and ending ( About 5 minutes)</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Experience report	2008
20084261	Coding Dojo: an environment for learning and sharing Agile practices	<div class="content">\n    <p>A Coding Dojo is a meeting where a group of programmers gets together to learn, practice, and share experiences in an inclusive and collaborative environment, while solving together a programming challenge. In this session, the presenters will share their experiences of creating and running a Coding Dojo in São Paulo, Brazil. They will present their tailored process to conduct the sessions, outline lessons learned from the weekly meetings since the first session in July, 2007 and discuss the aspects of a Coding Dojo that foster learning and tacit knowledge sharing.</p>\n\n<hr /><p>A Coding Dojo is a weekly meeting where a group of programmers gets together to learn, practice, and share experiences. The session is organized around a programming challenge (Code Kata) where people are encouraged to participate and share their coding skills with the audience while solving the problem. In an inclusive and collaborative environment, the participants discuss and practice a wide range of topics, such as: TDD/BDD, Agile, refactoring, pair programming, OO, design, Algorithms, different programming languages, paradigms, and frameworks.</p>\n\n<p>In this session, the presenters will share their experiences of creating and running a Coding Dojo in São Paulo, Brazil. They will present their tailored process to conduct the sessions, improved over time by retrospectives. They will also discuss the aspects of a Coding Dojo that foster learning and tacit knowledge sharing, presenting the lessons learned from the weekly meetings being held since the first session in July, 2007.</p>\n\n<p><a href="http://www.flickr.com/photos/dtsato/2291619037/" title="Dojo@SP Mind Map by dtsato, on Flickr"><img src="http://farm4.static.flickr.com/3212/2291619037_80b1085a79_o.png" width="799" height="594" alt="Dojo@SP Mind Map" /></a></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Introduction</strong> (10 min)</p>\n\n<ul><li><em>Why a Coding Dojo?</em></li>\n<li><em>What is a Coding Dojo?</em></li>\n<li><em>Coding Dojo @ São Paulo</em>\n<ul><li>Our numbers (session agenda, # of participants, # of meetings, …)</li>\n<li>Our process</li>\n<li>Our roles</li></ul></li>\n</ul><p><strong>Lessons Learned</strong> (10 min)</p>\n\n<ul><li><em>What went well?</em>\n<ul><li>The goal is not to finish</li>\n<li>Information radiators</li>\n<li>Communication</li>\n<li>Inspiration for the meeting</li></ul></li>\n<li><em>What went less well?</em>\n<ul><li>Moderating brazilians (hard not to speak on red)</li>\n<li>TDD/BDD and algorithms</li>\n<li>Balancing randoris and prepared katas</li>\n<li>Programming environment</li></ul></li>\n<li><em>What puzzles us?</em>\n<ul><li>How to reach a wider audience?</li>\n<li>How to share our efforts with the community?</li>\n<li>How to keep attendees engaged?</li></ul></li>\n</ul><p><strong>Dojo and Learning</strong> (10 min)</p>\n\n<ul><li><em>Deliberate practice</em></li>\n<li><em>Collaboration and self-organization</em></li>\n<li><em>Creating and sharing knowledge</em></li>\n<li><em>No single master</em></li>\n</ul><p>PS: The “Lessons Learned” represent our current view on the subject, reflecting the experience of the last 8 months. Until the conference, we may have more to share and the proposed time for each section may change. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Experience report	2008
20085008	Eleven Guidelines for Implementing Pair Programming in the Classroom	<div class="content">\n    <p>Utilizing pair programming in the classroom requires specific classroom management techniques.  We have created eleven guidelines for successfully implementing pair programming in the classroom. These guidelines are based on pair programming experiences spanning seven years and over one thousand students at North Carolina State University.  In Fall 2007, pair programming was adopted in the undergraduate human-computer interaction (HCI) course at Virginia Tech.  We present the pair programming guidelines in the context of the HCI course, discuss how the guidelines were implemented, and evaluate the general applicability and sufficiency of the guidelines.   </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We will present the guidelines and our experience with the guidelines.  We can ask for audience feedback about the guidelines.  If time is available, we can take 90 minutes and can have an audience participation workshop on the guidelines.   We include a 11-page paper of the guidelines and the experiences at Virginia Tech with the guidelines.  Our aim is that this paper would appear in the conference proceedings.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Experience report	2008
20080257	An Agile Classroom Experience: Teaching TDD and Refactoring	<div class="content">\n    <p>As Agile software development principles and practices gain widespread adoption there is a growing need to ensure that graduating students have a basic understanding of core technical practices such as test-driven development and refactoring. In this session we will discuss how I embrace the Agile principles of simple design, low tech tools, and evolutionary development to teach Java in a test-first manner, giving students a foundation in unit testing and refactoring while learning the Java language.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I have been teaching Java for 3 years and would like to share my experiences and get some feedback with others who have done it or are planning on trying it. There are quite a few things that I am not covering and would like some feedback about how to incorporate the topics while not taking away from the focus on Java. This would likely take the form of a presentation (with Java examples) and maybe a CWAC (or Lounge…) session. :)</p>\n\n<p>I teach an entry level course and here is some context:</p>\n\n<p><em>Entry level programming students:</em></p>\n\n<ul><li>JUnit is intimidating</li>\n<li>Little OO exerience</li>\n</ul><p><em>Informtion overload, students are learning:</em></p>\n\n<ul><li>unit testing</li>\n<li>test-first</li>\n<li>Java</li>\n</ul><p><em>We take some shortcuts:</em></p>\n\n<ul><li>We test getters and setters (in practice, I don’t)</li>\n<li>Integration testing, not unit testing (i.e. no mocks)</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Experience report	2008
20082300	Scrum Accelerator - The Game	<div class="content">\n    <p>While delivering the Agile Mastery and Agile Estimation and Planning courses as part of Valtech’s Agile training programs, Tim developed the “Scrum Accelerator”, a simulation activity game. This is a very fun and a ‘generatively’ competitive training tool that re-enforces the scrum process and agile best practices. By using a timer to simulate the days in a sprint, a dice is rolled moving stories and tasks forward (and sometimes backwards!) through the scrum task board. Students maintain iteration burn downs at the end of each period of play, and release burn down bar charts each round. Players have to negotiate scope creep and experience first hand what empirical planning is all about, while having a heck of a lot of fun in the process. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Projected Keynote presentation with lecture and some minor props to illustrate concepts. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Workshop	2008
20080433	Who's Teaching Best Practices?  A review of Canadian CS/SE curriculums and how to improve integration of agile/best practices.	<div class="content">\n    <p><strong>Abstract:</strong></p>\n\n<p>This session is inspired by a short series of blog posts I wrote last year exploring the extent of best practices instruction within Canadian Computer Science and Software Engineering departments.  We will be reviewing my findings, including a discussion on exemplary and not so exemplary schools and their approach to integrating concepts such as agile/lean/iterative software development, TDD, refactoring, design patterns and agile requirements gathering into their course offerings.  We will conclude with a workshop where attendees will collaborate to develop their own university level best practice curriculums.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session will break down into the following segments:</p>\n\n<p><strong>Part I:  Review of the 2007 Canadian CS/SE Best Practices Analysis (30 mins approx)</strong></p>\n\n<p>a) Introduction of topic and summary of thesis</p>\n\n<p>b) Exploration of criteria and process (very brief)</p>\n\n<p>c) High-level summary of findings</p>\n\n<p>d) Quick overview of the schools to avoid for CS/SE, ie. “worst practitioners”</p>\n\n<p>e) Criticisms of the Investigation:  CS/SE Pursefight</p>\n\n<p><strong>Part II:  Creating the Ideal CS/SE Best Practices Curriculum</strong></p>\n\n<p>a) Building on the results covered in Part I, participants will be broken down into several teams who will have approx 30 minutes to develop a set of best practices curriculum that could be taught at a university level, which will be reported on at the end of the session.  They will need to follow a basic set of criteria:</p>\n\n<ul><li>List the theme for the delivery of the content:  Is this only for 4th year students or is it delivered continually throughout the program (ie. years 1-4) ?</li>\n<li>List the topics to be covered in the courses - here, the teams can refer to the schools I’ve highlighted for examples on how they approached course breakdowns;</li>\n</ul><p>b) Reporting Curriculums:  Leads for each team will take the podium to report their suggestions for best practices courses, what years that they would be taught (1-4) and if they would apply universally to CS and SE schools as well as their rationale for the decisions.  Further, they will be asked about mechanisms they could use to monitor the progress of best practices delivery.  (15 mins approx)</p>\n\n<p>c) Big <em>“IF”</em> here:  I may be able to reach an Adjunct prof at UofT for his input at this point on the courses created by the teams and for insights on how U of T implemented their programs. (15 mins approx)</p>\n\n<p>Slides will be minimal, opting for the Steve Jobs’ school of presentations.  For the reporting portion, I’m thinking of just having Notepad2 open and projecting to display results - these could then be collated and posted to the conference site on wrap-up.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Workshop	2008
20084257	Game Design Workshop	<div class="content">\n    <p>Many meeting and training sessions rely on exercises in which the group generates data, which is then reviewed to create an understanding of the possible answers to a posed question. Variations on this theme can be found in reviews of business proposals and prioritizing requirements. Thiagi (full name Sivasailam Thiagarajan) has created so called ‘frame games’ that allow an adaption to the specific needs of a situation.   </p>\n\n<p>In this workshop I will provide an introduction of the frame-games to the participants. We then actually run a game, to become familiar with the concept and to select the framework which we will use in the workshop. Given a reference structure which I will provide (i.e. which kind of decision will the game which we design support) I will put the group to work (and participate) in creating the game. Once done we’ll run it, to learn if the game needs tuning.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>During the workshop I’ll take the audience through the following agenda:   </p>\n\n<ul><li>Welcome and introduction to the Frame Game concept (20)   </li>\n<li>A Frame Game trial: Deciding on the team structure in this workshop (30)  </li>\n<li>Introduction to the game we will design (10)   </li>\n<li>Game design (30)   </li>\n<li>Break (15)   </li>\n<li>Design review, and selection of the game to be run (20)  </li>\n<li>Game run (20)   </li>\n<li>Tuning discussion (20)  </li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Workshop	2008
20084563	Cross Cultural Casino	<div class="content">\n    <p>Drawing from our experience implementing Agile not only across cultural and physical boundaries with on/off shore blended teams, but within limitations that aren’t so obvious -  we play an interactive game to learn about how people from diverse groups with different learning styles can gain knowledge and insight in cooperative and competitive settings.    We will draw from this workshop’s experiential learning to feed a larger discussion about intercultural work groups, whether these groups are from different countries or different work disciplines.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Workshop	2008
20084720	(Re)Defining the Agile Coach	<div class="content">\n    <p>What is an Agile coach?  What is not agile coaching?  How do I start and grow as an Agile coach?  <em>A short introduction by Erik Lundh, founder of Agile Coaches Guild, and member of a cross-disciplinary team that currently trains a significant number of agile coaches for a large international development organization.</em>\nProfessional coaching organizations define coaching as helping people use the knowledge they already have. Agile coaches, however, often have to double as teachers bringing in knowledge to the team. And some of us, proud to call ourselves seasoned agile coaches, nevever stand between the team and the people they have to work with. Most agile coaches cherish the moment when the team take over and fly!\nWhat are the necessary skills for an agile coach? Of course we need to master how to do and coach key agile techniques like TDD, pair programming, continuous integration, refactoring etc. We need to help teams and their partners to be successful with low-fi, getting-things-done style planning and retrospectives. But we also need to understand the different personalities (and their dynamics) of individuals and teams. How teams form and respond to changes. How different personalities interact. How different people learn.</p>\n\n<p>We also talk about having the courage to not stick with the team. Being a successful agile coach is often a transitional relationship with a team.\nSeasoned coach or beginner? Join us in a conversation on what agile coaching is today and what it should be!</p>\n\n<p>Agile Coaches Guild is an international network of people interested in the art and improvement of agile coaching.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Introduction to Agile Coaching followed by a conversation/experience exchange between agile coaches</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Workshop	2008
20084812	Beer Miles! The Product Owner Simulation.	<div class="content">\n    <p><strong>Congratulations! You’ve just been granted initial funding for your Agile project! As the product manager you understand the market opportunity for your new Beer Miles rewards loyalty program, but how do you go from the business case to a product backlog? Your accountant says return on investment is key, the Marketing Director says user experience and community are key, while the IT says scalability and fault tolerance are high priorities. You have limited time and budget, and the pressure is on to make the product a success.</strong></p>\n\n<p>Working in teams, students participate in hands on exercises that go from business case through to a first production release. The session presents a Product Owner framework for thinking about Product backlog development. This interactive session covers business drivers, Product Backlog development, release planning, re-planning based on new data, and incremental releases. The training and skills are based on real world product owner issues, and are directly applicable and usable by product owners upon completion.</p>\n\n<p>Students learn to go from business case to backlog, prioritize with missing information, evaluate Return on Investment models, and utilize team feedback in decision making.</p>\n\n<p>All major product owner learning areas are covered in this tutorial. The exercises are fun, with a number of “gotchas” designed to catch people making assumptions, create emotional attachment, and drive home learnings that will persist with the attendees.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>An interactive session combining power point slides, business case handouts, card based planning and sorting, and poster paper. We have conducted this session for client businesses with excellent feedback.  As recommended on the form I have not uploaded the whole presentation and instead have uploaded the Beer Miles business case. I can provide the whole presentation on request.</p>\n\n<p>This session is facilitated by two experienced Agile trainers who consult on large agile implementations, and regularly provide training services. We believe having two trainers improves the experience of this class, and brings an additional perspective and to the discussions.    </p>\n\n<p><strong>Session Timing:</strong>\n</p><ul><li> 30 minutes  - product ownership<br /></li><li> 130 minutes - simulation<br /></li><li>20 minutes  - debrief<br /></li></ul><p><strong>Room setup:</strong>\n<strong>Facilitators</strong>\n</p><ul><li> LCD or DLP Projector for laptop<br /></li><li> wireless mics (2)\n</li></ul><p><strong>Each team should be 4-5 people. Each team requires:</strong><br /></p><ul><li> Co-located table space (rounds, 8-10 are fine)<br /></li><li>  Facilitator prepared printed cards<br /></li><li> Poster paper/easel<br /></li></ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Tutorial	2008
20084141	Coaching Agile Teams	<div class="content">\n    <p>The goal of the workshop is to collect and develop useful guidelines for Agile Coaches. We encourage you to come along to share coaching experiences of what worked (or did not work) for you. You will have the opportunity to meet other practicing Agile Coaches and hearing how they work with their teams.</p>\n\n<p>Background: </p>\n\n<p>The surge in Agile adoption has created a demand for project managers and technical leads who coach rather than direct their teams. A sign of this trend is the ever-increasing number of people getting certified as scrum masters and agile leaders. Training courses that introduce agile practices are easy to find. But making the transition to coach is not as simple as understanding what agile practices are. Your challenge as an Agile Coach is to support your team in learning how to wield their new Agile tools in creating great software. </p>\n\n<p>By running this session as a workshop, we’ll bring together practicing scrum masters, agile project managers and coaches at the conference who want to help their team get Agile.We’ll be sharing techniques that you can use when working on-site rather than in a classroom. And exploring different coaching styles with tips and tricks from practicing coaches who have experiences from working with many teams. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We'll start with an introduction from presenters and lead into the topic of coaching with some examples from our experience. We'll also have some time for sharing coaching stories from the workshop participants. [15mins]</p>\n<p>Next we want to shift into a simulation to exploring coaching styles. We'll be working in small teams of 4 people each with a coach and an observer. Each team will have a task to perform and some practices to use to accomplish the task (such as user stories or working in pairs). The coaches work to coach the team and the observers note how the coaches go about this. We'll wrap this section up with a debrief - what did people in the exercise notice happening and do these shed any insights on coaching techniques. [30mins]</p>\n<p>Now we shuffle into groups of 6-8 people, who will work to distill their ideas into guidelines for coaching agile teams. Teams will need some fliphart paper and markers for this. [30 mins]</p>\n<p>Each work group will take a turn to present the coaching guidelines that they have developed to the session group.[15 mins]</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Workshop	2008
20080336	Fostering Software Craftsmanship in a Corporate Setting	<div class="content">\n    <p><strong>At a Glance</strong><br />\nThis session provides ideas and approaches on how to promote a culture of continuous improvement and perpetual learning among teams of software developers in a corporate setting.  It provides specific examples of approaches that have been successful at large companies such as Travelers Insurance and Google, focusing not only on how to spread knowledge, but also on how to evaluate progress and measure success.  It also presents some lessons learned, and looks to the audience to share their thoughts and experience on where to go from here.</p>\n\n<p><strong>Intended Audience</strong><br />\n- Team leads interested in learning techniques for mentoring developers on their team<br />\n-  Managers interested in creating a culture of learning and self improvement among their development staff<br />\n-  Developers who aspire to become Software Craftsmen, and seek ideas on how to develop their skills  </p>\n\n<p><strong>Benefits of Participating</strong><br />\n- Learn how to evaluate current developer skill/knowledge level<br />\n- Learn strategies/approaches to improve developer skill/knowledge<br />\n- Learn how to create a culture of continuous improvement and perpetual learning in your development organization<br />\n- Learn strategies to encourage developer participation in continuous-improvement initiatives<br />\n- Learn how to measure developer participation and performance<br />\n- Learn how to measure the success of your continuous-improvement initiatives  </p>\n\n<p><strong>Background</strong><br />\nWhat makes a software developer a “professional”?  For many years, all manner of people with all levels of skills and beliefs have called themselves software professionals.  It is only recently that we as an industry are recognizing that our knowledge of software development has evolved to the point where there are a collection of clearly-defined “professional practices”.  Through the work of our industry leaders, we are recognizing that if we are to call ourselves software professionals, then we must learn and adhere to these professional practices.  Pete McBreen and Bob Martin, among others, liken software development to a craft, and recognize that the process by which we as software professionals develop our skills is a journey in which we evolve from apprentice, to journeyman, to master craftsman.</p>\n\n<p>The problem with this is that the skills and knowledge that allow a developer to work toward becoming a software craftsman are not currently taught in school.  These skills must be learned independently through a willingness to take responsibility, and a committment to perpetual learning.  To improve the skills of our development teams, we clearly need to fill the gap between what they learn in school and the mastery of professional practices exhibited by software craftsmen.  This course focuses on how we can fill that gap, and help developers grow into software craftsmen.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>5 min - Introduction</p>\n\n<p>20 min - Evaluate the current skills/knowledge of your team(s)<br />\n- Communication strategies, surveys<br />\n- Metrics: Key metrics relevant to professional practices, How to automate gathering/reporting through your continuous-integration process<br />\n- The role of upper management (and how to get their support)  </p>\n\n<p>30 min - Educate your team(s)<br />\n- Pair Programming<br />\n- Centralized Resources: Educational material, Knowledge base, Moderated technical forums, Tools/code snippets, Book reports<br />\n- Sessions: Teasers, Lightning talks, Tech talks, Coder’s dojo, Workshops<br />\n- Craftsmanship Day<br />\n- 10% Time<br />\n- On-Team Mentoring  </p>\n\n<p>15 min - Measure Success<br />\n- Continuous evaluation<br />\n- Performance goals that motivate and educate<br />\n- Performance reviews by the people that matter most  </p>\n\n<p>20 min - Summary, Q&amp;A, open discussion</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Talk	2008
20081852	Are We Done Yet?	<div class="content">\n    <p>Are We Done Yet?</p>\n\n<p>We will play a team game that will enforce that a User Story is not done until it meets the acceptance criteria. If the User Story is not done, you do not earn the points. Teams often want “partial credit” or to say the User Story is complete and carry the defects over. We will then have a retrospective of what we learned.</p>\n\n<p>We had lots of fun at Agile 2007 and look forward to Agile 2008</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Practices the game supports\n• Time boxing – each builder has the same amount of time to build</p>\n\n<p>• What is done?  - The builder doesn’t get points for incomplete \nstructures</p>\n\n<p>• Points – each card has a point value assigned by difficulty to build</p>\n\n<p>• Velocity – the variance of each team builder’s expertise can affect \nthe velocity</p>\n\n<p>• Team work – the velocity should increase if the team works together \nversus competing - Discussion about in the real world they may build more than \none card (User Story) at a time in an iteration - so this game \nillustrated “personal” velocity rolled up to “team velocity”</p>\n\n<p>• Business Value – the value isn’t specified on the cards but the value \nis implied in that the business has provided the order in which to work the \nbacklog. The builders have to work in the order in which they draw the cards \nfrom the deck. In round 3, they can choose the order</p>\n\n<p>• Team QA – The team determines if the structure matches the card</p>\n\n<p>It is a fun game and a simple way to reinforce what “done” is</p>\n\n<p>After the game is played, a retrospective is held to facilitate sharing of lessons learned and how they could be applied in real life.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Workshop	2008
20083672	Defining the Role of Agile Manager â€“ Theory and Practice	<div class="content">\n    <p>Although not a clearly defined role, we believe an Agile organization needs managers: ones with new skills, alternate mind sets, and fresh perspectives on managing. In this session we define a framework for Agile managers with eight competency areas, then springboard into a highly interactive discovery session with breakouts by competency. Participants will leave with tools and best practices they can use immediately to help the manager in their life. Competency areas include organizational change management, value stream &amp; internal partner management, agile portfolio management and performance management.</p>\n\n<hr /><p>A definitive role for managers is still nonexistent in the Agile literature. Some would have it that managers are not needed in an Agile organization. We believe this is both unrealistic and ill advised for any but very small organizations. An Agile manager—attuned and skilled in the new disciplines required—has a significant role, though surely not the traditional one. In this session, we will cover the role of Agile manager and explore in detail the eight competency areas within which Agile managers can and should have responsibility and make contributions.</p>\n\n<p>This workshop is designed for people who want good managers in the Agile world, including Agile team members, managers who want to really contribute, and educators and coaches who need to teach managers their role in effectively working with Agile teams and Agile organizations.</p>\n\n<p>Join us as we offer our research and experience regarding this role, then springboard into an highly interactive discovery session with breakouts by competency area, where each participant will leave with tools and best practices they can use immediately to help the manager in their life.   </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This workshop session will combine presentation and discovery session elements. It will help participants to:<br />\n+      understand the eight competency areas within which Agile managers contribute to their teams and organizations (e.g., portfolio management, performance management, organizational change, etc.)<br />\n+      contribute to and receive best practices in each domain for an Agile manager<br />\n+      understand a general curriculum they can use to teach (or learn as) Agile managers  </p>\n\n<p>In the first part, the presenters will outline an Agile Manager competencies model based on their research, experience coaching management, and a class they currently teach for managers. Each competency area will be defined, scoped, and referenced with key principles and a few examples. The style will be fast-paced and highly interactive between the two presenters to keep the energy “up” and fun.  </p>\n\n<p>[The eight areas are:<br />\n*Organizational Change Management<br />\n*Self-organized Team Management<br />\n*Value Stream &amp; Internal Partner Management<br />\n*Metrics &amp; Reporting Management<br />\n*Agile Portfolio Management<br />\n*Supplier Management<br />\n*Resource Management<br />\n*Performance Management]  </p>\n\n<p>At this point, the interactivity will extend to drawing the audience into full participation, as we first facilitate an exercise to help them define their passion (or deficiencies) relative to the competency areas.  The results will be to form affinity teams that will be charged to share (or invent!) best practices for their area.</p>\n\n<p>The affinity teams will be given enough structure to yield the same level of results, but not so much structure that their creativity is constrained.  The entire group will come together to “bottom line” their results and impart their wisdom to the whole. The presenters will collect the “best” best practices (based on participant feedback), collate them and share them on the conference wiki.</p>\n\n<p><strong>Timeline</strong><br />\nSession Opening - 5 min.<br />\nOverview of Eight Agile Manager Competency Areas - 30 min.<br />\nPassion / Hunger Exercise &amp; Group Formation (exercise to activate participant’s interest in specific competency domains) - 10 min.<br />\nBest Practice Discovery Groups (groups share practices in each domain, collate best ones) - 30 min.<br />\nRoundRobin Report Out - 15 min.<br />\nConclusion - 5 min.  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Workshop	2008
20081742	Meta-Agile: Using Agile Methods to Deliver Agile Training	<div class="content">\n    <p>Modelling agile methods in the classroom also allows students to see the depth and power of agile methods as a general approach to working, and simultaneously confirms that the instructor actually walks the talk.  In this workshop, attendees will explore using agile methods to deliver agile training.  The first half will go through the methods used by Mishkin Berteig, an experienced agile trainer.  These methods will be presented as a set of patterns.  In the second half of the workshop participants will collaboratively discover and refine more patterns.</p>\n\n<p>Over the three years that I have been delivering agile training to the public and to in-house corporate audiences, I have developed, with the help of a few key contributors*, a method of training that uses agile processes as the framework for the training itself.  The main advantage of this approach to delivering training rests in the fact that students are immersed in an agile environment at the same time that they are learning the concepts, discussing their particular problems, and experiencing mini-simulations.  Modeling agile methods in the classroom also allows students to see the depth and power of agile methods as a general approach to working, and simultaneously confirms that the instructor actually walks the talk (despite the old adage about “those who can’t do, teach”).  For example, through the use of “Flexible Module Order”, and “Too Much Value”, attendees understand that they need to pace themselves, collaborate and make trade-off decisions about what will actually be covered in the course… much like is needed in a software project with a fixed release date.</p>\n\n<p>This session is ideal for other people who are coaching or delivering training in agile methods.  There will be a substantial time devoted to allowing participants to work together to share techniques for integrating agile processes into the learning environment.  The result of this will be the identification of a small number of patterns for using agile methods in an instructional context, which will then be published in an “open-source” format.</p>\n\n<p>The following are the starting patterns that will be described in terms of how I deliver the courses, these are not all “new”, but the idea is to put them into a coherent package which trainers can use as appropriate and add to these more patterns both large and small:</p>\n\n<ol><li>Feedback forms - improvements across delivery boundaries</li>\n<li>Repair on the spot - zero known defects</li>\n<li>Prioritized module backlog - release planning</li>\n<li>Timebox days, not modules - iteration length</li>\n<li>Flexible module order - customer re-prioritization</li>\n<li>Modular parking lot - deferring issues to appropriate modules</li>\n<li>Module wall - big visual chart/information radiator</li>\n<li>Daily assessment - iteration retrospective</li>\n<li>Too much value - choice making within the release timebox</li>\n</ol><p>Examples will be given from both the Agile Work for Teams and Certified ScrumMaster courses that I deliver on a regular basis.</p>\n\n<ul><li>Key Contributors: Deborah Hartmann, David Chilcott, Garry Berteig, Shabnam Tashakour</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>70 minutes presentation and demonstration of methods I use in my own classes (mix of lecture and interactive discussion)</p>\n\n<p>20 minutes Q&amp;A</p>\n\n<p>5 minute break to allow those not interested in the workshop portion to depart</p>\n\n<p>85 minute facilitated workshop to collaboratively dig into other ideas and examples of using agile methods in the learning environment (Mishkin will collect notes and conclusions for electronic distribution and publication - can this be part of the Agile2008 proceedings? or does it need to be published separately?)</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Other	2008
20082512	Using the Unified Process a Scaling Framework for Scrum	<div class="content">\n    <p>One of the common complaints about the Unified Process is that it is too prescriptive and document focused. An often heard complaint about Scrum is that it does not scale to large projects and you never quite know where you are going until you get there. What if we could leverage the best of both methodologies? What if we could deliver with just enough structure and documentation to scale the project but maintain the collaborative, human centered approach of Scrum?  This talk will show you how it’s done. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>15 minute introduction to key concepts from the Unified Process and Scrum</p>\n\n<p>60 minutes presentation, lively examples from real companies doing this</p>\n\n<p>15 minutes question and answer</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Learning & Education	Tutorial	2008
20086799	Legacy Code Keynote	<div class="content">\n    \n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Legacy Code	Talk	2008
20080915	Agile at Scale: What it Takes on the Right-Hand Side of the Chasm	<div class="content">\n    <p>Now that Agile has crossed Moore’s technology adoption chasm we’re finding that we need to address many of the scaling issues that we’ve mostly ignored until now.  There is more to scaling agile than addressing the need of large or distributed teams.  This presentation overviews the challenges and issues which the agile community must address in order to scale agile techniques and philosophies to meet the needs of modern organizations.  Experiences and potential solutions from within IBM and several  customers will be discussed, including both what works and what doesn’t.</p>\n\n<p>Agile project teams often find themselves working in situations where they must comply to government regulations, where they must work with legacy systems and databases that have existed for decades, where they must conform to the enterprise architecture, where the project gets funded in accordance to the organization’s portfolio management process, where they must work with enterprise teams that aren’t as agile as they could be, where they must work with people from other organizations who may not have the same priorities as they do, where they must conform to the organization’s existing governance strategy, and where they must work with a diverse range of stakeholders that do not speak with a single voice.  Things are clearly very different over here on the right-hand side of the chasm.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Straight talk with Q&amp;A</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Legacy Code	Talk	2008
20081778	Agile Automated Testing Strategies: Flipping the Testing Pyramid Right-Side-Up	<div class="content">\n    <h1>Transition to Agile Testing:</h1>\n\n<h1>Flipping the Automated Testing Pyramid Right-Side Up</h1>\n\n<p>Strategies for adopting healthy automated testing practices, tools, and skills. </p>\n\n<h2>Abstract</h2>\n\n<p>A partly-experiential “survey course” of the three main initiatives that make up an overall attempt to transition to healthy automated testing practices — what I have been recently calling an overall Automated Test Design (ATD). Forgive the acronym, but it has been a useful “orienting generalization” for my work with clients, especially when I am pulling together software professionals with different traditional roles and responsibilities.</p>\n\n<h2>Goal</h2>\n\n<p>To summarize the technical and learning challenges inherent in each of the three kinds of automated tests in a healthy “ATD,” to give a taste of the three kinds of testing in unhealthy and healthy form, to sketch strategies for launching and nurturing all three initiatives, and to inspire and encourage attendees that in fact, Yes, such a sweeping transition is possible. </p>\n\n<h2>The Ideal Automated Testing Pyramid</h2>\n\n<p>Mike Cohn introduced a very useful notion a few years back: a pyramid of three kinds of automated tests that are useful to an agile software development team. </p>\n\n<h3>Tier One</h3>\n\n<p>The lowest tier of Mike’s pyramid is a fat foundation of robust, high speed unit tests, written by programmers. We want these tests to be carrying as much of the load of verifying that we are “building the thing right” as possible. We want them representing the bulk of the automated testing work in general. We would like to have more of this kind of test (xUnit test methods) than other kind of test. Furthermore, we want as many of these test methods as possible to fit Mike Feathers’ definition of unit tests – essentially isolation tests that:</p>\n\n<p>• test and specify a single tiny sliver of behavior, </p>\n\n<p>• run entirely in memory, </p>\n\n<p>• don’t rely on any external resources like files, networks, or persistence systems (which likely involves more than a few test doubles, especially fakes), and</p>\n\n<p>• comply with the healthiest patterns best expressed in Gerard Meszaros’ xUnit patterns book.</p>\n\n<h3>Tier Two</h3>\n\n<p>Next up from that tier is a middle tier of what Cohn labels “Acceptance Tests.” We want these tests veryifying that we are “building the right thing,” but not carrying any of the load of verifying that we are “building the thing right.” We want these to be a requisite mix of end-to-end tests that indeed verify complete round-trips for features through all system resources and touch points. We want these to be visible to lots of stakeholders, using something like FitNesse, ZiBreve, or a similar Fit framework. We might easily end up with significantly fewer Fit test tables than xUnit test methods, but what really matters is that the Fit tests are describing feature-level functionality, not checking for defects.</p>\n\n<h3>Tier Three</h3>\n\n<p>The top, thinnest level of our pyramid is made up of “through the GUI” tests, meaning automated tests that actually operate the GUI of the application. We want to have fewer of this kind of test than any other, because they are inherently brittle and slow. \nIn presentations of the pyramid, Mike has sometimes drawn a little dot above the pyramid, indicating the number of manual tests we would like to rely upon. We want that number to be tiny compared to the number of automated tests of all kinds. \nThis is the pyramid “right-side up,” our desired end-state. </p>\n\n<h2>Wait! We Don’t Get to Start There! We Start with an Inverted Pyramid.</h2>\n\n<p>We want to end up with the right-side-up pyramid, and the good news is that we can. The bad news, for many teams adopting any agile blend, is that we cannot get there today. It’s a path, a journey, with many little steps. </p>\n\n<p>Indeed, our initial pyramid is likely to be more or less inverted, with way too many costly manual and GUI tests at the top, and way too few cheap unit tests at the bottom, and perhaps no automated acceptance tests to speak of. And you know what? That’s OK. The brittle tests are typically easier to learn and write. The healthy unit tests, as wonderful as they are, are not cheap or easy for most pre-agile teams to learn; they have many prerequisites and preconditions. </p>\n\n<h2>Transition Patterns: Flipping the Inverted Pyramid Right-Side-Up</h2>\n\n<p>My tutorial dives into the TCO (Total Cost of Ownership) of the different kinds of tests, the costs of learning the different kinds of tests, and transition patterns between these two kinds of pyramids: the inverted, high-TCO pyramid, and the right-side-up, low-TCO pyramid. \nMy goal is to present summary automated testing strategies in a way that is at once forthright, pragmatic, inspiring, and encouraging. </p>\n\n<p>I’ll also touch on several miscellaneous factors that affect automated testing adoption strategies and patterns, including:</p>\n\n<p>• Continuous Integration as foundation for automated testing,</p>\n\n<p>• control/generation/ownership of canonical test data for end-to-end &amp; Fit tests,</p>\n\n<p>• cultural issues, especially relationships between QA groups and other groups,</p>\n\n<p>• the entire team owns the ATD, even though different traditional roles gravitate toward different test types among our three types,</p>\n\n<p>• database-related development and schema evolution practices, like CI-only db instances for testing, and individual developer db sandboxes.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><h2>Tutorial Format, Flow, Schedule, Logistics</h2>\n\n<ol><li>First I’ll introduce the topics above quickly, in broad terms. </li>\n</ol><p>Duration: less than 20 minutes. </p>\n\n<ol><li>GUI-testing exercise: If time seems to permit, I’ll ask for volunteers to help me create small, smoke-test suites of Selenium regression-tests for an existing web app (or public website navigation path). We’ll project this exercise for everyone to see.</li>\n</ol><p>Alternately, if time is already short, I’ll display some manual test scripts, HTMLUnit tests, and Selenium tests that all accomplish the same work, and ask for comparisons from the crowd. We’ll at least have to time to tweak a Selenium test suite, and demonstrate both brittleness and adaptability.</p>\n\n<p>Duration: 25 minutes for the exercise/demo and questions and answers. </p>\n\n<ol><li>I’ll then summarize theory and practice of Fit-based automated acceptance testing, its TCO patterns and learning patterns, as described by Mugridge, Cunningham, and others. </li>\n</ol><p>Duration: less than 10 minutes. </p>\n\n<ol><li>Fit-testing exercise: if time permits, then as a mob, the entire class and I will create some Fit tests for requirements for an existing toy codebase. We’ll do the work and handle questions and answers as we go. </li>\n</ol><p>Alternately, if time is short, I’ll show samples of an end-to-end test run from JUnit (whose results are really only visible to programmers), then the same test run from FitNesse, then perhaps the same test run from ZiBreve. I’d also like to show examples of unnecessarily thick Fit fixture code and badly-factored FitNesse test suites, compared to well-factored test suites, and nicely-thin Fit fixtures. I’ll solicit comments about FitNesse refactoring headaches, Fit fixture patterns and anti-patterns/headaches, etc. </p>\n\n<p>Duration: 25 minutes. </p>\n\n<ol><li>I’ll then introduce the theories, practices, patterns, and pre-requisites of xUnit testing, covering everyone from Rainsberger, Meszaros, Beck, Uncle Bob, Hunt/Thompson, and Astels, to Feathers. I’ll boil it down to this handful of concepts that challenge unit testers on greenfield projects: keeping methods small, coding to interfaces, dependency injection, using test doubles (mostly fakes), and keeping unit test suites well-factored. </li>\n</ol><p>Duration: 30 minutes. </p>\n\n<ol><li>xUnit isolation-testing exercise:  if we really get lucky and time permits, I’ll ask for pairing volunteer(s) again, and we’ll do a bit of mob Java/jUnit programming on test-driving some functionality for the same toy codebase above. We’ll also take an unhealthy unit test or two, and refactor them into healthy condition.</li>\n</ol><p>Alternately, I’ll show three versions of a jUnit TestCase object tree. Version A will be in poor shape, Version B in slightly better shape, and Version C will be factored the way we would prefer. I’ll ask the crowd to choose which of the three they would prefer to maintain and extend, and why. </p>\n\n<p>Duration: 35 minutes. </p>\n\n<ol><li>Finally, we’ll have closing discussion of pyramid-flipping transition strategy hints, hacks, tips and Q/A. Here I’ll talk about finding and leveraging local natural leaders/change agents and continuous learners for each of these three kinds of automated testing initiative (healthy GUI testing, healthy acceptance testing, and healthy unit testing). I’ll describe these natural leaders as people who model continuous learning, courageous experimentation, encouragement of other team members, mentoring, and overall leadership. </li>\n</ol><p>Duration: 25 minutes. </p>\n\n<p>Total duration: 170 minutes (10 spare minutes!).</p>\n\n<p>I’ll cover how, without natural leaders on your team of developers, it’s very hard to get a continuously improving unit testing practice going. Without natural leaders among BAs, SMEs, or other customer/user proxies, it’s very hard to get a continuously improving automated acceptance testing practice going. Finally, I’ll cover how I would like natural leaders in traditional QA departments to own issues like overall test data control, testing the APIs at integration points between applications, the evaluation of evolving open-source automated testing tools, and focusing on the kinds of testing that tend to fall between the cracks of unit/isolation testing and Fit/example/story testing. </p>\n\n<p>I’ll reiterate how key a healthy Continuous Integration practice is to all three kinds of initiatives.</p>\n\n<p>Then we’ll have a last bit of retrospective. </p>\n\n<p>Logistics:  All of the code and test tools will be installed on my machine, ready to go. </p>\n\n<p>At the end, I shall hand out a list of recommended books and website that provide resources for all three tiers of the “ATD pyramid.” I shall also have links on my website that point to these resources.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Legacy Code	Tutorial	2008
20082835	Agile Architecture IS Possible â€“ You First Have to Believe!	<div class="content">\n    <p>Have you ever been told “Agile works great for UI, but just doesn’t work for large scale systems architecture”? In this experience report, I will review a real world project to redesign a successful large scale ecommerce system that became plagued with growing pains. After the team initially ran to the comfort of a long term waterfall project, cost overruns and escalating problems necessitated a new approach. Enter in Scrum and a focus on iterations and frequent customer feedback, and a once failed project turned into a blazing success. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li>Review of the problems we were hitting</li>\n<li>Overview of the initial “monolithic” redesign ideas</li>\n<li>Discuss business pushback on those ideas</li>\n<li>Discuss push to try agile technics to solve</li>\n<li>Cultural resistance faced by original architects from #2</li>\n<li>Talk about the points made and counter-arguments presented</li>\n<li>Review the revised iterative approach to solving</li>\n<li>Followup with results on how that approach worked.</li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Legacy Code	Experience report	2008
20084037	Technical Debt - How not to ignore it	<div class="content">\n    <p><a href="http://www.martinfowler.com/bliki/TechnicalDebt.html">Technical debt</a> - we all seem to have it. So how bad is it? Is it growing or shrinking? Are we talking about it? Are we doing anything about it? </p>\n\n<p>Technical debt is primarily a process problem. The technical problem is a symptom. The purpose of this session is to provide some practical tools and techniques for dealing with the process problem.</p>\n\n<ul><li>“What’s the first thing to do if you find yourself stuck in a hole?”</li>\n<li>“Stop digging!”</li>\n</ul><p>We’ll cover the following areas:</p>\n\n<ul><li>What is technical debt, why don’t we want it, and why do we still have it.</li>\n<li>Using velocity tracking as a tool for identifying and discussing technical debt issues.</li>\n<li>How to get non-techies to understand the problem and the solution.</li>\n<li>How to slow down in order to speed up.</li>\n<li>Specific techniques such as the <a href="http://www.scrumalliance.org/articles/86-reducing-the-test-automation-deficit">test automation backlog</a>.</li>\n<li>Using “definition of done” to help drive the desired behaviour.</li>\n</ul><p>Don’t expect a silver bullet - just tips and tricks to start taking control of the problem. I’m hoping you will share some ideas of your own!</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I’ll start by talking and presenting some slides that illustrate the problem and some common patterns for dealing with it. I’m hoping this will trigger some discussions. Fairly sure it will, since just about everyone has this problem :o)</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Legacy Code	Talk	2008
20082936	TDD Principles for Database Development   	<div class="content">\n    <p>Success in object-oriented agile development is currently being achieved with a technique known as test driven development (TDD).\nIn database development however, TDD practices are not wide-spread and development teams struggle with applying\n the TDD principles to the SQL language.\nThis is a problem, because it leads to poorly tested code. In turn, not having the appropriate test cases, makes it difficult to\n improve your existing database design.\nNot implementing TDD practices in the database, overtime, leads to a decaying architecture and can hinder the evolution of the overall\n application.</p>\n\n<p>This presentation will discuss ways to enable software developers to use TDD to develop in databases.\nBeginning with a case study of a successful project that employed database TDD, presenters will then provide examples on specific\n TDD techniques that borrow from similar techniques in OO development.\nIn addition to an overview of writing simple database test cases,  you will see demonstrations on the effective use of techniques\n like mock procedures, fake tables and stub records.\nGuidance will also be provided on situations in which these techniques are inappropriate.</p>\n\n<p>After a recent presentation on this topic that we held at the Philly Area .NET Code Camp,  we updated and summarized our techniques\n in the following article: <a href="http://www.sqlity.net/articles.html">www.sqlity.net</a>.\n Our presentation will cover examples similar to those in this article.\n The 90-minute presentation was met with great response in terms of the questions asked and\n the depth of the discussion. It led us to believe that this topic warrants further discussion and exposure in the agile and database\n communities.</p>\n\n<p>We first began exploring database TDD on an Extract, Load, Transform (ETL) project 4 years ago. We faced both technical challenges\n and skepticism. The complex table relations made it difficult to create and maintain test data. A continually evolving schema initially\n made tests fragile.  Very large, tightly coupled stored procedures made isolating and testing functionality difficult. The initial\n technical challenges fueled the skepticism. However, creative adapting of OO unit test concepts to the database proved that DB-TDD\n could be successful even in a highly complex project. </p>\n\n<p>After the team became proficient with the methodologies, their velocity steadily increased. Analysts are now specifying requirements\n for an application that is almost entirely developed in SQL stored procedures. Developers, utilizing the techniques we’ll discuss,\n can isolate individual behaviors for unit testing. As a result, performance enhancements could be safely made without changing the\n functionality; the team discussed requirements using concrete, testable examples; and refactoring and maintaining the code became\n less risky.</p>\n\n<p>Update:\nWe moved this from the “Breaking Acts” to the “Committing to Quality” stage, based on the comments.\n We are looking for further feedback regarding the stage.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The techniques we will discuss include:<br />\nFake Tables - a technique for isolating the data and the structures needed to test a behavior, even when the database contains constraints, relationships, and existing data<br />\nStub Records - a method for reducing the fragility of test cases as the schema evolves<br />\nMock Procedures - the ability to check the parameters passed to a procedure or function and specify the outputs for specific test cases    </p>\n\n<p>For each technique, we will explain how they borrow from OO methodology and lead an open discussion about their implications and when they may be inappropriate. </p>\n\n<p>We will close with some thoughts and questions about the future direction of DB-TDD.</p>\n\n<p>Introduction (2 min)<br />\nCase study (5 min)<br />\nIntroductory example (8 min)<br />\nFake tables<br />\n- What are fake tables? (8 min)<br />\n- Examples (5 min)<br />\n- Pros/Cons, Implications (8 min)<br />\nStub Records<br />\n- What are stub records? (8 min)<br />\n- Examples (5 min)<br />\n- Pros/Cons, Implications (8 min)<br />\nMock Procedures<br />\n- What are mock procedures? (8 min)<br />\n- Examples (5 min)<br />\n- Pros/Cons, Implications (8 min)<br />\nThe future of DB TDD (8 min)    </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Legacy Code	Talk	2008
20082739	Refactoring for Testable C++	<div class="content">\n    <p>We will present many hard-to-test c++ idioms and multiple refactorings for making the code testable. Students who need to test and refactor legacy C++ code as they transition to test-driven development, will learn techniques to help them do this work safely and with minimal changes in the performance. We’ll cover several legacy idioms in which code is initially not accessible by tests. We’ll fix these and other testability problems with refactorings like “Extract Method” or “Extract Class”, and C++-specific techniques involving the preprocessor, “friend”, and changing access Levels. Testing techniques will include stub and mock objects and dependency-injection.</p>\n\n<p>Exercises for the student will be use gcc with or without Ecilipse on Linux or Macintosh, or Eclipse with MinGW and gcc on Windows.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Presentation, demonstration, and student lab work in half-hour cycles.  (more detail tbd)</p>\n\n<p>Topics covered: parameterizing for testability, accessing private functions (and extract-class/move-method refactoring), overcoming testability issues with singletons and static data, what to do with non-virtual functions that you can’t make virtual (adapting foreign classes)</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Legacy Code	Tutorial	2008
20080923	How to be Agile with Fragile Large Legacy Applications?	<div class="content">\n    <p>Can you imagine applying agility to a huge legacy code base over a decade old, supported by 100+ geographically distributed developers, working on thousands of classes and millions of lines of code? </p>\n\n<p>In this talk we share the stories of experience with three clients – the expected, the unexpected and what was learned, and how we enabled them to go from fragile to agile. We will cover our approach and the key practices we discovered to be invaluable for success with large Legacy applications.</p>\n\n<p>Can you even think of applying agility to legacy code that’s over a decade old and supported by team with hundreds of developers working in distributed different geographies on thousands of classes and millions of lines of code?  </p>\n\n<p>In this talk, we share real-world experiences and learnings from how several teams were enabled to go from fragile to agile. These teams were working on large-scale code base varying from 3000 classes to 6000 classes and close to a million lines of code - some of it almost a decade old! In each case, developers were making changes that rippled through the class structure, with no tests in place - a high-wire act with no safety net resulting in regressions and lots of unit level bugs found in production.  </p>\n\n<p>Each of the customers had typical legacy challenges of reduced productivity, maintenance nightmare of legacy application, increased number of production defects, lots of regressions found, increased QA team and cycle, loss of customer satisfaction. The mission of each engagement was to address legacy challenges without a major disruption to the business.</p>\n\n<p>We will describe the hurdles encountered in implementing agility in complex, large-scale legacy projects. Some of the problems encountered were expected, but some caught us completely by surprise! We will cover how we addressed these problems and surprises, the approach we followed, the tools and Key Practices. We will also share how the Key Practices guaranteed the sustainability of changes in the organization/culture without overloading the team or organization. </p>\n\n<p>Some of the metrics that we gathered before and after implementation:\n-   QA cycle time reduced from 7x to 3x, where x is the development time.\n-   Number of unit-level defects found in QA was reduced by 20%\n-   No more integration hells - due to rapid feedback with continuous builds\n-   Increased productivity by at least 30% (by breaking the big monolithic project into 16 smaller projects)\n-   Reduced the application complexity by 10-15%  </p>\n\n<p>We will be covering our Key Practices:\n0. Inspect and adapt \n1. Go slow To Go Fast\n2. Big is Bad - break into smaller manageable projects\n3. Establish safety net\n4. Provide Extreme feedback\n5. Adopt incrementally \n6. Reduce complexity\n7. Sustain the process with “tiger-team”</p>\n\n<p>Each of the above practices is shared in the format of anti-pattern with examples, anecdotal evidence and recommended solutions. References used in developing these practices will be included. (e.g. Michael Feathers, Linda Rising etc..)</p>\n\n<p>Only working software becomes Legacy code. Long lived code is hard to change and is compared to “Antipattern - Lava Flow”. There are practices that can reverse-engineer the software aging and allow even extremely large legacy code bases to become easier to change.\nMore Details on some of the Key Practices:</p>\n\n<p>Big is Bad:\nHuge monolithic projects are bad in many different aspects. They cause productivity loss, and longer time before enough feedback. Even if we establish continuous integration on Large Legacy code base, the time to run the tests and give feedback may not be fast enough. This by definition defeats the purpose of Continuous Integration. We have helped few customers solve this challenging issue of longer feedbacks and also help localize the errors, by dividing one monolithic project with 5000+ classes into 15 smaller projects. Having said it is not always easy to break monolity legacy projects with dependency graphs, since these legacy code may be full of circular dependencies which are hard to break. Our customer situation was no different, they had lots of circular dependencies as well. Previous attempts to break this projects have been failed and have estimated time of 2-3 months to achieve the goal.\nDespite the circular dependency and hard to break the project into smaller projects, we had achieved our goal in approximattely 2 weeks. We used symbolic links technique on the linux machine of CVS (Version control system) to create smaller projects - despite the issue of circular dependencies. </p>\n\n<p>This one step itself, dramatically improved the performance of the Continuous Integration builds and enabled to quick feedbaack many times throughout the day. The team had productivity gain of 15% atleast.</p>\n\n<p>Go Slow To Go Fast:\nThe Legacy Dilema as stated nicely by Michael Feather in his book “Working Effectively with Legacy Code” is “When we change code, we should have tests in place. To put tests in place, we often have to change code.” \nTo meet this Catch-22 issue of Legacy applications, one always feel the need of Safety net around the Legacy code. Safety net could be created with various approaches. Starting with this assumption, we applied the practice of creating Safety net on Large Legacy code base for a customer and setup continuous integration in place. Our results caught us completely by surprise, and were not what we expected. Team who didn’t have any process of Continuous Integration and or responsibility of tests, were overloaded. The team was overloaded with content, process and feedback, which they were not prepared for. As the team suddenly has to own much more tests, Continuous Integration builds taking too long, scripts throwing out of memory errors, etc..etc..\n So our conclusion was this practice which would easily work on small legacy applications, does not scale well with large Legacy applications. and Legacy Applications are different by nature inherently and same guidelines/assumptions cannot work.  Our conclusion was to establish the process first with the team, with only small safety net on large Legacy applications. Once the team have mastered the process, and are mature to handle more, or perhaps after breaking the Big Monolithic project into smaller projects, add more safety net tests on Legacy Code.\ne.g. I like to compare with is - Do we just decide to run a marathon and start running it? No, first we have to start running 1 mile, and train our body towards running full 26.2 miles. Adopting practices to be Agile with Fragile Large Legacy code is like a Marathon and not a Sprint.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We would like this session to be 45 mins.</p>\n\n<p>We will begin by reviewing the issues and challenges with Large Legacy applications, then share actual customer situations before and after implementation. </p>\n\n<p>In next 30 minutes, we will present the Key Practices and answer questions about them. </p>\n\n<p>We will conclude the session by discussing of how these practices have broad application and are not tied to any particular tool, language, type of application or industry, and will answer any remaining questions from the audience.</p>\n\n<p>Compelling Reasons for this talk:\n-   Large Legacy applications are inevitable and reality; the challenges they impose are difficult to overcome. We consistently see the need for additional ways to address these challenges.\n-   The Key Practices have demonstrated effectiveness in real life situations and present a good example of how to effectively leverage existing knowledge.\n- All customers using the key practices continue to inspect and adapt to their advantage.</p>\n\n<p><em>Who We Are</em> -  Vandana Shah is the consultant who led the customer engagement work, collected the data, established the primary themes and initiated this proposal.   Ainsley Nies collaborated in evaluating the resulting data and formulating the learnings.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Legacy Code	Experience report	2008
20086810	Legacy Stage Wrap-Up	<div class="content">\n    <p>Over the course of this conference our stage has covered what it takes to succeed when practicing agile software development with legacy systems.  The last session of our stage brings some of speakers back together as a panel.  You should come prepared to ask questions and help us (as a community) summarize the key insights and ongoing questions concerning agile software development with legacy systems.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Legacy Code	Other	2008
20080928	The Secrets of High-Performance Agile Implementations	<div class="content">\n    <p>To become Agile, your organization will undergo a large, risky and difficult change. Many adopters who report success also tell of struggle and hurdles. Do you know where your risks and pitfalls are? Are you aware of the forces – within people, teams and the entire organization – that could derail your efforts? Come to this tutorial to learn where to look and how to prepare. And beyond managing risks and preparing a transition plan, you’ll discover the critical factors and strategies for reaping the full benefits of Agility.</p>\n\n<p><strong>Audience</strong><br />\nThis tutorial is intended for leaders and managers (at any organizational level) who are contemplating Agility, starting to implement it or have already used it for a few months. They are expected to have a basic understanding of the Agile premises, principles and practices, as well as an appreciation for the current issues their organizations face.</p>\n\n<p><strong>Benefits</strong><br />\nAttendees will come away with a clear picture of the pitfalls and risks that accompany Agile adoption and a sense of how they apply in their situation. They will hear and share strategies and tactics for reducing or avoiding them. They will also discover the factors to turn Agile implementations to streamlined, high-performing operations and share with their fellow attendees, methods and approaches to attaining them.</p>\n\n<p>Gil Broza brings to this tutorial six years of practical experience helping organizations of varied sizes and industries, directly helping over one thousand people assess their situation, make the transition and maintain its outcome. His knowledge and observations are backed by combined decades of Industrial Logic’s experience in Agile coaching and training.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Format</strong><br />\nThe instructor will use an interactive multimedia presentation based on real world examples and counter-examples. Exercises, in a format based on Open Space Technology, will have like-minded folks delve into their situation and share experience and tips to supplement the instructor’s.</p>\n\n<p><strong>Proposed Agenda</strong><br />\n1. <em>Introduction of tutorial, presenter and expectations</em> (5 minutes)<br />\n2. <em>Background of Agile adoption</em> (15 minutes)<br />\nPossible reasons for Agile adoption and their effect on planning and preparation; readiness assessments; transition strategies; transition timeline<br />\n3. <em>Forces</em> (20 minutes)<br />\nOrganizational, team-related and individual-related forces that drive process customization, adoption strategies, particular risks, and implementation tactics<br />\n4. <em>Risks</em> (65 minutes)<br />\nExamination of the risks and pitfalls in adopting and sustaining Agile processes and behaviours; risk mitigation and avoidance techniques (25 minutes); exercise (40 minutes)<br />\n5. <em>Critical Success Factors</em> (60 minutes)<br />\nStrategies, activities and perspectives for streamlining, improving and optimizing the process (20 minutes); exercise (40 minutes)</p>\n\n<p><em>Note</em>: The durations indicated for each step include presentation, practice and group discussion. Some buffer time is intentionally left for topics of special interest or Q&amp;A.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Tutorial	2008
20084377	Dancing with the Agile Goddess	<div class="content">\n    <p>Dancing with the Agile Bitch Goddess</p>\n\n<p>Israel Gat, BMC Software </p>\n\n<p>According to a recent study by the Cutter Consortium and QSM Associates, BMC’s Distributed System Management (DSM) business unit achieved delivery times of four to five months on projects that would normally take one year. Impressive and gratifying that these “production” results are to hundreds of employees in the business unit, implementing Agile is not “just” a business unit process. As the leader of this unit, I present an end-to-end view of BMC’s experience implementing Agile from an end-to-end corporate perspective – the pitfalls we encountered and how we overcame them. Specifically, effects of successful Agile implementation in R&amp;D on Marketing, Sales, Software Consultants, Professional Services and Customer Support are interpreted as inevitable consequences of introducing a disruptive methodology. </p>\n\n<p>At BMC, we developed a set of processes to mitigate methodical disruption and facilitate alignment across corporate functions. In particular, Agile-Based-Market-of-One design is showing promise as the antidote to the innate corporate drive to “harness” disruptions. Furthermore, this design is a most meaningful form of Agile from a customer value standpoint. While tricky to implement, the design is quite promising for organizations that mastered the traditional R&amp;D aspects of Agile.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Talk	2008
20084151	Practices of an Agile Team	<div class="content">\n    <p>I present agile practices—KPT, Estimate Retrospectives, Positive Strokes, Iteration Planning, Darts, Task Kanban, and Overtime Tickets—that I have actually practiced in a project where I worked as a Technical Lead. I also discuss the benefits and careful points we experienced when implementing these practices from the viewpoint such as team building and leader’s mind-set.</p>\n\n<hr /><p>“None of the number of people, technology nor a power of money will complete this construction after all. It is the people’s feelings which we can only rely on.”</p>\n\n<p>This is one paragraph from the documentary novel “Mt. Fuji Top” written by Mr. Jiro Nitta. It’s about a\nproject to build the meteorological observatory on the top of Mt. Fuji.</p>\n\n<p>There are a lot of serious projects called the death march project in IT business. Anyone in this business could have experienced such a serious project several times.</p>\n\n<p>I also have experienced such situation, not only once, but several times. I noticed that, in such\nsituations, little of “the number of people, technology, and a power of money” are the core of the problems nor a bottleneck really. I am feeling strongly that core of the problem is in the project management and the feeling of people involved in a project.</p>\n\n<p>On the other hand, I adopt various techniques and ideas such as XP, SCRUM, and Lean effectively in the project which I work as the Technical Lead. I present the examples of such projects in this report, and describe how our team put effort to handle problems about project management and person.</p>\n\n<p>The concrete practice that I talk about as follows.</p>\n\n<ul><li>Retrospectives\n<ul><li>KPT (keep &amp; Good, Problem, and Try)</li>\n<li>Estimate Retrospectives</li>\n<li>Positive Strokes (Oneself recognize a good point of oneself and do it for vitality to advance next.)</li></ul></li>\n<li>Iteration Planning\n<ul><li>Darts (We decide the person in charge of the task by darts.)</li>\n<li>Task Kanban</li></ul></li>\n<li>Energized Work\n<ul><li>Overtime Tickets (The structure whose salary will decrease if it works overtime)</li></ul></li>\n</ul><p>It is a content that I would like you to hear it from the manager who keeps trying and erring though it worries because it has the awareness of the issues on the site of development, the site leader, and the programmer by all means.</p>\n\n<p>A Japanese version is here.</p>\n\n<p><a href="http://www.slideshare.net/fkino/practices-of-an-agile-team" title="http://www.slideshare.net/fkino/practices-of-an-agile-team">http://www.slideshare.net/fkino/practices-of-an-agile-team</a></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I talk for 25 minutes. It is questions and answers for remaining 5 minutes.</p>\n\n<p>I did a lecture of 45 minutes on this theme in Japan in last summer. I remake it and talk.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Experience report	2008
20084490	Agile Project Experiences â€“ The Story Of Three Little Pigs	<div class="content">\n    <p><strong>Abstract</strong></p>\n\n<p>Over the last few years we have had the good fortune to aggressively apply the agile practices on a number of projects with great success. These successes, however, have not been achieved without challenges and lessons learnt along the way. This experience report specifically highlights examples from three different software development projects of varying sizes within this period and within the same organization. This is the story of three little pigs, where in all cases the pigs were well and truly committed.</p>\n\n<p><strong>The Pitch</strong></p>\n\n<p>Over the last few years, we have aggressively applied agile practices on a number of projects with success including:</p>\n\n<ul><li>a project made of straw – an example of a medium-sized project using Scrum processes in theory but needed strengthening before it blew over</li>\n<li>a project made of sticks – an example of a small agile project that was part of a larger waterfall program of work that delivered major benefits early, despite the people, processes and technology not being as strong as it could have been</li>\n<li>a project made of bricks – an example of a successful project using XP techniques to the extreme with the entire team committed to the process, but with the wider community still maturing to the agile process, the strength of the team and practices meant it could not be blown over</li>\n</ul><p>Some of the key challenges that will be discussed include:</p>\n\n<ul><li>applying agile practices to a large development team and a large project team</li>\n<li>applying agile practices to a team that is new to agile but has a mix of experienced technical people, junior developers and external vendors and partners</li>\n<li>applying agile practices to a very small team</li>\n<li>dealing with a corporate culture that questioned some of the agile practices despite being supportive of the agile methodology. </li>\n<li>handing integration with other parts of the organization that continue to use the waterfall methodology and procedures that are not suited to an agile deployment</li>\n<li>dealing with accommodation issues in an environment that is very cubicle centric and space constrained and dealing with projects in multiple locations</li>\n<li>agreeing of development methodology with project stakeholders upfront and questioning of practices such as pair programming throughout the project</li>\n</ul><p>Some of the lessons learnt that will be discussed are:</p>\n\n<ul><li>approaches to estimation </li>\n<li>pair programming approaches</li>\n<li>use of flexible project management tools </li>\n<li>corporate buy-in to the methodology is important</li>\n<li>test driven development is an important part of the project boosting confidence both within and outside the team. </li>\n<li>refactoring is important, but sometimes need to be pragmatically approached. </li>\n<li>managing communication in a large team</li>\n<li>upfront design is sometimes an necessary evil</li>\n<li>storycards and getting them right is not easy </li>\n<li>stakeholder transparency brings its own challenges</li>\n<li>good development tools improve success </li>\n<li>good project tracking is essential and should never be neglected</li>\n</ul><p>Some of the key successes from the example projects will also be discussed.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The talk will highlight challenges and lessons learned using real project examples. The paper will give additional details and further in-depth examples.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Experience report	2008
20084617	The Myth and Magic of Self-Organizing Teams	<div class="content">\n    <p>Where are those fantastic, self-propelled teams that were promised by agile? Where they were missing, we took action. It was sometimes difficult. Along the way, not all the pegs fit into their corresponding holes. In many respects, we had been our own worst enemy by allowing poor behaviors and poor teams to manifest themselves before and after scrum. In hindsight, Kelley Blue Book applied an informal intervention model which was useful to address our team deficiencies. <strong>Self-organizing teams didn’t just happen - we had to help them along.</strong></p>\n\n<p>Building upon a limited scrum implementation during 2005-2006, Kelley Blue Book fully implemented the scrum methodology for product development in early 2007. Over 20 scrum teams have been formed to date. The most challenging aspect of this journey has been the teams themselves. Some teams were staffed with consistently highly-skilled individuals. Some were not. Others were staffed with individuals who naturally behaved well in scrum. Others were not. Some teams represented much development experience and subject-matter expertise. Some did not. Individual team attention to standards, practices, accountability and process varied widely. The reality is that we took existing engineering and product organizations and fit them into scrum. </p>\n\n<p>This session will review specific team constructions and deficiencies as experienced at Kelley Blue Book. This will lead into a discussion of the levels of intervention which have been applied to support team health. Those intervention levels, in order of escalation, are:</p>\n\n<ol><li>Facilitation – assuring the process of scrum and the tenets of agile</li>\n<li>Coaching – 1-1 and group sessions to reinforce and encourage appropriate behaviors</li>\n<li>Leading – Directional messages, organizational communication, reinforcement of standards, practice and tools</li>\n<li>Managing – Counseling, disciplinary action, team member moves, team reconstruction</li>\n</ol><p>The presentation will conclude with examples of how each level of intervention has been applied and with what results. Q&amp;A will follow.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This experience report will be shared via a PowerPoint deck followed by a Q&amp;A period.</p>\n\n<p><em>High-level session outline</em></p>\n\n<p>• <strong>Overview of Kelley Blue Book scrum implementation approach</strong></p>\n\n<p>• <strong>Examples of team challenges</strong></p>\n\n<p>o       Non-agile members</p>\n\n<p>o       Skills deficiencies</p>\n\n<p>o       Personality conflicts</p>\n\n<p>o       Offshore (see session by Ed Uy &amp; Nikos Ioannou)</p>\n\n<p>o       Contractors vs. FTE team members</p>\n\n<p>o       Testers vs. whole team QA</p>\n\n<p>o       New hires</p>\n\n<p>o       Process gaps</p>\n\n<p>o       Poor quality output</p>\n\n<p>o       [more…]</p>\n\n<p>• <strong>Review of the intervention levels</strong></p>\n\n<p>o       Facilitation</p>\n\n<p>o       Coaching</p>\n\n<p>o       Leading</p>\n\n<p>o       Managing</p>\n\n<p>• <strong>Examples of applied intervention</strong></p>\n\n<p>o       Team-building</p>\n\n<p>o       Team-busting</p>\n\n<p>o       Member moves</p>\n\n<p>o       Coaching sessions</p>\n\n<p>o       Termination</p>\n\n<p>o       [more…]</p>\n\n<p>• <strong>Conclusions</strong></p>\n\n<p>• <strong>Q &amp; A</strong></p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Talk	2008
20083485	product management in an agile world	<div class="content">\n    <p>Agile development methodologies have taken hold in many companies and have caught product management by surprise. What role does product management play in agile? Who on the agile team will be identifying and quantifying the market problems that need solving? This session will explore agile roles, agile artifacts and processes, and applying the Pragmatic Marketing framework to agile teams. </p>\n\n<p>Old description:\nAgile development methodologies have taken hold in many companies and have caught product management by surprise. Developers no longer want lengthy documents; instead they want index cards. Instead of planning a whole release, they are now looking a week or a month ahead. What does agile mean to product managers? And what role does product management play in agile? </p>\n\n<p>Product management is an area of great concern in most agile projects as the product manager seems relegated to prioritizing the developers’ workload rather than identifying and quantifying the market problems that need solving. You can’t do the backlog unless you know the priorities of the market. </p>\n\n<p>This session will explore agile roles, agile artifacts and processes, and applying the Pragmatic Marketing framework to agile teams. Using results from our 2007 product management survey, the session will also discuss current titles and job responsibilities, compensation, and the scope of activities product managers and marketers are performing as part of their role in today’s agile environment.</p>\n\n<p>Topics include:\n* Role of product manager in an agile team\n* delineation between the activities of product management and marketing\n* impact of org charts on effectiveness in the organization\n* exploration of where to begin</p>\n\n<p>Steve Johnson is a frequent presenter for various technology marketing forums throughout the North America, author of many articles on technology product management, an instructor for Pragmatic Marketing, and is the webmaster of <a href="http://productmarketing.com" title="http://productmarketing.com">http://productmarketing.com</a> —a website devoted to technology product management. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I had planned a short talk on the subject but I can expand to include a gap analysis exercise if you’d like. I generally speak to crowds of 50-75 so we should let the room size determine how interactive it can be.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Talk	2008
20084682	"Un-assessments" using Agile Evaluation Framework - actions by the teams, for the teams	<div class="content">\n    <p>Metrics can backfire.  They are useful for both self assessment and retrospectives.  But experience since 2002 with 80 teams at IBM has shown it’s not just a matter of finding the right metrics.  It’s important to use them properly, and avoid common pitfalls, including bloated metrics, the evil scorecard, lessons forgotten, forcing process, and inconsistent sharing. Turning assessments into “un-assessments” returns power back to the team.  Instead of defining more metrics, this paper tells how not to misuse them.</p>\n\n<p>In 2002 we created a survey based retrospective assessment to help teams hasten and tune their adoption af agile.  So imagine my shock we teams failed to capitalize on the technique.  Since then we’ve painfully learned to avoid the five deadly pitfalls common to assessment techniques:  bloated metrics, the evil scorecard, lessons forgotten, forcing process, and inconsistent sharing.</p>\n\n<p>Our current technique, Agile Evaluation Framework v4.2 (Agile:EF) uses three golden rules to learn, improve, and share practices: few but often, small team ownership, and action batches.   These techniques can amplify the success of your reflections using Agile:EF or related approaches.</p>\n\n<p>We’ll highlight data from a selection of more than 100 teams that have used the framework inside and outside IBM.  They will show where teams have stumbled with agile, and their actions to address the problems uncovered.  We love data.  But it’s not about the data.  It’s about self directed teams nailing improvement actions of their choice.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We’ll cover these topics by drawing on material taught to over 500 engineers.  It will feature a short interactive exercise:</p>\n\n<p>30 minutes is divided as follows:</p>\n\n<p><strong>10 minutes:</strong> Describe the technique</p>\n\n<p>1) The five deadly pitfalls - what <strong>Not</strong> to do</p>\n\n<p>2) Details of the Agile Evaluation Framework </p>\n\n<p>3) The three golden rules - how to make reflections more efficient while tapping into the creativity of coaches and team members</p>\n\n<p><strong>15 Minutes:</strong> an exercise to illustrate pace of the technique</p>\n\n<p>** 5 Minutes:** Questions and Discussion</p>\n\n<p>This session can be either 30 minute experience report or a 90 minutes tutorial.  I’ve proposed 30 minutes because these are the simplest metrics that could possibly work.  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Experience report	2008
20083629	XP: My Greatest Misses 2000-2008	<div class="content">\n    <p>Any successful recording artist eventually submits to releasing a “Greatest Hits” album. This is the opposite: a beat-up XP coach putting his biggest and furthest-reaching mistakes in a neat package and releasing them to the public. This talk could also be named “Ten ways to guarantee your Agile transition is a total failure”, or “Apologies of an XP coach”; however I’m sure I’ll mention more than ten mistakes and I make no apology for them.</p>\n\n<p>ORIGINAL SUMMARY:</p>\n\n<p>Any successful recording artist eventually submits to releasing a “Greatest Hits” album. They collect their best-loved, most successful songs and put them into a neat package that not only provides great marketing material, but neatly sums up their career to that point. It therefore seems only fair that a beat-up XP coach who has been through the ringer a few times should collect his biggest and furthest-reaching mistakes, bring them together in a neat package and release them to the public. This is that talk.</p>\n\n<p>This talk could also be named “Ten ways to guarantee your Agile transition is a total failure”, or “Apologies of an XP coach”; however I’m sure I’ll mention more than ten mistakes and I make no apology for them.</p>\n\n<p>You’ll laugh, you’ll cry, and leave with a greater appreciation for the difficult task of helping people learn to become agile software practitioners.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Agenda: Talk 60-75 minutes, followed by Q&amp;A</p>\n\n<p>You can find a handout from this talk here: <a href="http://tinyurl.com/34se73" title="http://tinyurl.com/34se73">http://tinyurl.com/34se73</a>, with edits to come for 2008.</p>\n\n<p>I have given this talk at Agile 2007 and at various user group meetings. In late 2007, the handout circled the web as people commented on how refreshingly frank and honest the article is at chronicling the struggle to practice and teach Extreme Programming.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Talk	2008
20081179	Scaling Up - pushing Scrum out of its comfort zone	<div class="content">\n    <p>Single team implementations are where Scrum is most comfortable. Having successfully adopted Scrum for single teams within the central BBC Future Media and Technology department, we were now faced with the choice of dropping the use of Scrum on a large multi-team project or scaling Scrum up. We chose the latter, despite the fact that neither we nor anyone else seemed to know exactly what was involved. This is the story of how we dragged Scrum kicking and screaming out of its (and our) Comfort Zone.</p>\n\n<p>Using Scrum in single development teams had become second nature to us. We had been working more efficiently and with more transparency than ever. However following a reprioritisation of projects and the initiation of the flagship project, the BBC iPlayer, these teams were having to work together on a shared project for the first time. A change of project management approach was never really an option for us, we needed to stay Agile. However we were faced with the challenge of seeing whether we could scale up the use of Scrum across a large-scale multi-team project. We sought help from the Scrum community, gurus and their literature but somehow no-one was giving us a solution that hung together, so we just went for it. It was uncomfortable for a long while but that’s when we learnt the most. At the end of project we were left to consider whether Scrum as a process will ever be able to grow to provide a clear and complete method for scaling or whether it will always be up to organisations to have to figure it out for themselves.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Presentation (20 - 25 minutes) followed by Q&amp;A (5 - 10 minutes).</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Experience report	2008
20082769	New Car Development in Toyota	<div class="content">\n    <p>Nobuaki Katayama, Chief Engineer of Lexus/SC and IS, talked to software engineers about process, principles, and practices of new car development in Toyota, at Developer’s Summit 2008 in Tokyo on Feb. 13, 2008. In this session, I’ll give his presentation, translated into English in place of him. It starts with CE Katayama’s introduction, explains management principles and practices of a huge car development project, and concludes with people side of the development. I add some episodes about Agile and engineering found during our pannel session of the conference.</p>\n\n<ol><li>Introduction of Mr. Nobuaki Katayama<br />\n18 years of design of manual transmission<br />\n4 years in motor sport<br />\nChief Engineer of Supra, LEXUS/SC, and LEXUS/IS</li>\n<li>Three Phases of New Car Development<br />\n(1)Planning and concept development<br />\n  Concept, Style, Market research, pre-development, Cost and profit target<br />\n(2)Real car development<br />\n  Designing, Prototyping, Evaluation<br />\n(3)Production and sales<br /></li>\n<li>Managing the development project<br />\nDedicated leadership<br />\nClear mile stones<br />\nMechanics to avoid “too late”<br />\nReliable backup<br /></li>\n<li>Resource Management<br />\nPeople … 500,000 - 1,000,000 person hours<br />\nMoney … 200-300 million dollar<br /></li>\n<li>Cost Management<br /></li>\n<li>Bench Marking<br /></li>\n<li>Attitude of Leader<br /></li>\n<li>Message from ex-Chief Engineer<br />\n“Do it until it is done”  vs.  “Do it until the time”<br />\n“Notebook” vs. “Proposal Paper”<br />\n“Go to war” vs. “Watching a war movie”<br />\n“Refresh and health”</li>\n</ol><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I attended Developers Summit 2008 Tokyo, and listened to Mr. Katayama’s talk and panel-discussed car  development, TPS and Agile with him.</p>\n\n<p>In this session, I will talk in place of him using his slides(English-translated).\nI have got his permission to talk about it at Agile2008.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Talk	2008
20083269	7 years of agile management	<div class="content">\n    <p>This experience report describes the experiences in building and growing a professional agile software development group in a research context over the past 7 years. It desribes how the way of working evolved over time, by growing an organisation, changing customers, and CMM certification.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This paper is the basis for a presentation I would like to give to show how our organisation has grown, what challenges we had to deal with, and how we approached these.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Experience report	2008
20081644	Dependency Management in a Large Agile Environment	<div class="content">\n    <p>Salesforce.com’s R&amp;D organization made a comprehensive large scale transition to agile software development in October 2006. Since that time we have delivered five on-time major releases of our Salesforce application suite and Force.com platform using the new agile approach. There are currently over 40 scrum teams contributing to each major release, and all teams work in a single release code branch. When combined with an aggressive, risk-tolerant culture, this results in many team interdependencies. In this session we’ll discuss some of the practices we’ve been using to successfully manage dependencies within a large agile environment.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Presentation outline:</p>\n\n<ol><li>Brief History of Agile at salesforce.com </li>\n<li>Team Structure Overview </li>\n<li>Types of Dependencies \n<ul><li>Scrum teams that need another team to build functionality</li>\n<li>Scrum teams making changes that will impact other teams </li>\n<li>Architectural refactoring that has widespread impact to many teams</li>\n<li>Several scrum teams working closely together to accomplish a common business objective </li></ul></li>\n<li>Why is Dependency Management Difficult?\n<ul><li>System complexity</li>\n<li>Conflicting priorities</li>\n<li>Dynamic scope</li></ul></li>\n<li>Specific Practices\n<ul><li><strong>Release Kickoff</strong> – Provides visibility into team release plans </li>\n<li><strong>Open Format Scrum of Scrums</strong> – A slight variation on the standard scrum-of-scrums </li>\n<li><strong>Dependency Identification Exercise</strong> – An interactive discussion to identify cross-team dependencies early in the release </li>\n<li><strong>Functional Design Reviews</strong>– A cross-team forum for reviewing functional designs</li>\n<li><strong>Virtual Architecture Team</strong>– Senior developers from scrum teams meet weekly to discuss architectural changes </li>\n<li><strong>Continuous Integration</strong> – Significant automated test infrastructure helps identify unexpected impacts quickly</li>\n<li><strong>Cross-team Impact Reviews</strong> – Cross-team meetings later in the release to discuss changes and ensure adequate test coverage across the product </li></ul></li>\n<li>Q&amp;A </li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Experience report	2008
20085093	A Product Managerâ€™s Guide to Surviving the Big Bang Approach to Agile Transitions	<div class="content">\n    <p>Salesforce.com took a big bang approach to implement a SCRUM method, with huge success. This meant big changes to how Product Managers work, how we interact with the team, and manages dependencies between teams.</p>\n\n<p>No more 200 page functional specs, no more waiting 12-18 months before features got into customers hands. No more changes to the release dates – how do we survive? </p>\n\n<p>How did we learn to write smaller specs, break them into user stories, and prioritize them?  While increasing the amount of features released over time and improving quality?  Why would we let our customers and partners help us prioritize what we build?</p>\n\n<p>**Some highlights: **\n1.  Big Bang works<br />\n2.  Shorter product release cycles<br />\n3.  How to write smaller specs and start using proto-typing<br />\n4.  Manage your product backlog<br />\n5.  Let your customers vote on which features you are building<br />\n6.  Why usability testing is so important<br />\n7.  Make sure customers know about your new features – promote our new products<br />\n8.  How do you measure success of a new product or feature?  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Will cover the changes for the Product Managers at salesforce.com, when we implemented SCRUM as a big bang approach. Innovative methods for identifying customer requirements, and how we deliver features from release plan to communicate changes to customers. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Experience report	2008
20080298	Overhauling a Failed Project Using Out of the Box Scrum	<div class="content">\n    <p><em>Abstract</em></p>\n\n<p>A software solutions company out-sourced a ground-up application build to a team of globally distributed independent consultants.  The project eventually exceeded time and cost expectations and failed to deliver production ready tested software according to a planned market release window.  The asserted reasons for this planned versus actual delta varied with time including failure of leadership, failure of project oversight, to design and implementation flaws and so on.  Out of the box Scrum was implemented by a newly contracted consultant and the project delivered 153% of plan by the end of four two-week sprints.  This report discusses the problem, the implemented solution, and the results while challenging what really made the difference.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><em>Learning Objectives</em></p>\n\n<ol><li><p>How to become the new leader of an existing project and team without losing the historical team members and thought leaders</p></li>\n<li><p>How to get the corporation to re-set goals and priorities and thereafter stimulate the company to equip teams for success by managing themselves</p></li>\n<li><p>How to restructure the teams, responsibilities, leadership and reporting/statusing</p></li>\n<li><p>How to deliver usable, tested software in a public forum and retrieve business/end-user validation</p></li>\n<li><p>How to gain executive management respect and trust through transparency</p></li>\n</ol><p><strong>Audience Level:</strong> Beginner to Intermediate<br /><strong>Target Audience:</strong> Developers, Project Managers, Managers, Directors, VP, CTO, CIO, CFO, Executives</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Experience report	2008
20081647	Agile Project Leadership - my top 10 value driven principles	<div class="content">\n    <p>This presentation is exploring the answer to ‘why agile projects need strong agile leadership’ based on my experience leading teams on large-scale projects in agile-skeptic environments. It is a review of a top 10 list of values I’ve evolved based on my ‘school of hard knocks’ for building successful teams. Session will explore my 8 years of agile leadership experience and how I see each value as important to a leadership role for teams.  Session should challenge audience to define their own value based leadership list. </p>\n\n<p>Top 10 Values Outline:</p>\n\n<ol><li><p>Integrity is No. 1 and I look for this in the people I enter into business with.  (Want to enjoy my work!)</p>\n\n<p>a. Experience Story – Large-scale project sponsor with hidden agenda, committed to quality software objective set with business, but behavior was challenging team on level of software quality needed built to reduce development costs. Lack of sponsor integrity manifested as competing objectives for team and was reducing their trust and confidence in work they were producing. (Automated TDD uplifted development cost ~30%)  </p>\n\n<p>b.  Better for projects how? - A leader’s capability to confront the sponsor on integrity issue resulted in escalation and renegotiation with the business owners for resolution. Set the team up to continue to execute what was committed to for the business to be successful.</p>\n\n<p>c.  Impact if not? – Undermines the team’s ability to deliver on committed business outcome as they execute work unaware of all sponsors motives. Leadership role needs to proactively identify and manage these risks, and demand integrity of all project stakeholders.</p></li>\n<li><p>I will not sacrifice/trade away building long-term relationships for short-term profits.  (Want to build repeatable business!)</p>\n\n<p>a.  Experience Story – Bidding project teams focused on legacy system replacement project as just a technology migration/rewrite problem, fixed bid proposals did not include estimates for complex project requirements needed to manage integration and change mgmt work to put product into operations. Work sold to sponsors as plug and play work that could be done relatively quickly. Proposed bids were only really covering 30% of total project effort required to get operational.</p>\n\n<p>b.  Better for projects how? - Experienced Leaders look beyond any scope of work as just a technology challenge to get teams to identify and manage all risks for operations to ensure products can be adopted and supported successfully in operations to ensure satisfied sponsors.</p>\n\n<p>c.  Impact if not? - Sponsors are left holding the bag for implementation costs and don’t trust teams to meet commitments. Scenario usually results in a second project and significant more funding to get new product integrated and adopted – or product sits on shelf and is never used. </p></li>\n<li><p>I will not sacrifice/trade away enjoyment in my work over generating dramatic profit growth.  (Want to not burn out!)</p>\n\n<p>a.  Experience Story – My ‘just say no’ story. Most corporate environments demand early estimates of work to approve large projects. I’ve done high-level effort estimates for charter as result. Once team in place, you go through planning iterations and team learns more details and solution complexity starts to grow (i.e. software security). I’ve seen teams want to absorb increasing estimates of original work without really testing commitment of sponsors for trading off other priority work. </p>\n\n<p>b.  Better for projects how? - The leader role I’ve played is to ‘tell it all and tell it early’, to sponsors, so the right strategic priorities continue to be validated in managing the detailed work. Change is than managed strategically for the right priorities, verses falling into the trap of just increasing workload, schedule, and cost to deliver on original assumptions. </p>\n\n<p>c.  Impact if not?  - Teams assume what was priority when they signed up stay priority with sponsors; this is not true in today’s dynamic corporate environment. Most software projects as a result can over deliver on functionality verses continuing to test what is truly necessary.</p></li>\n<li><p>I want to be intellectually and socially responsible to my customers, family, and community (Want to grow and learn!)</p>\n\n<p>a.  Experience Story – This is the reason most people enjoy Agile teams; Leaders are key in creating the collaborative environment. In Calgary’s hot bed market finding that environment for teams to work closely is not a given. Most office space is maxed out, and leaders have to fight with corporations to get the space and proximity to clients to allow this to happen. </p>\n\n<p>b.  Better for projects how? - Agile teams given the right agile environment grow into stronger teams where individuals can share unique perspectives and grow their discovery skills by working closely together.</p>\n\n<p>c.  Impact if not? - Agile teams without environments created to do agile struggle with a joint commitment to success with team and business. Risk of project falling back into more traditional waterfall tends to result without leader influence on organization.</p></li>\n<li><p>I look to enter into engagements with strong sponsorship and clear authority for me to execute. (Want to be able to do what I promise!)</p>\n\n<p>a.  Experience Story – In large organization where over 300 IT projects are executing, dependency management becomes a large risk. In rewriting a large business critical legacy application, there was a parallel large-scale infrastructure project replacing all our network, server, and database technology. Day one negotiated with sponsors a priority portfolio approach (new to IT process) to manage conflicting work priorities decisions. Top 5 strategic IT projects Identified – both of these in that. Set up weekly dependency meeting with Project leads and architects from these teams to review and resolve work dependencies for resources, change management and release schedules.</p>\n\n<p>b.  Better for projects how? - Schedule managed more effectively, as bottle necks for resources and release windows were planned and manage across projects by priority and risk by leaders. Conflicts were escalated as needed to IT and Business sponsors to manage appropriate impacts.</p>\n\n<p>c.  Impact if not?  - Team would be frustrated at a large number of delays due to unavailable operation and design resources needed by team not being available. Project delays and burn rates would escalate as time is lost on dependent work.</p></li>\n<li><p>I recognize individuals are the ultimate source of value and need environment where they can make a difference (I value people over process/tools)</p>\n\n<p>a.   Experience Story – Like most organization there is a learning process for marrying up PMO traditional planning and execution processes with Agile delivery process. In my organization one risk that I regularly mitigated was the value placed on process (resource management process focused on providing project specific skills to team) verses people (looked to build new skills, but find individuals with the right aptitude). Negotiating resources from operations to join team, as part of skills transfer objective was always a challenge, as many had deep technical knowledge but lacked the aptitude to work in a high performing Agile team. As leader take on a coaching role to ensure opportunity is given to individuals to learn new skills, while recognizing and weeding out those who will not fit in.  </p>\n\n<p>b.  Better for projects how? - New skills and approaches (TDD) are carried over to operations and reduce overall life-cycle costs for organization by providing forum to train individuals in the organization.</p>\n\n<p>c.  Impact if not?  - Teams tend to work around or look to replace individuals not already high performers. Need to be clearly articulated as part of their deliverable for the projects they are brought in for. Leaders ensure the right mixes of talent are managed to ensure all objectives of project are met.</p></li>\n<li><p>I look to attract and mentor talent and partnerships that shares my objectives and values. (Want to work with good people!)</p>\n\n<p>a.  Experience Story – One of my recruitment practices developed over number of years is to look to hire ‘specialized generalists’. It’s a term I use to reflect a desire to attract high performers in a specific skill (i.e. J2EE) who also have solid analysis, database, user acceptance, etc. skills all needed to get the tasks done in each iteration. I see teams with diverse but flexible skills build strong product cross knowledge that can improve quality of a solution. </p>\n\n<p>b.  Better for projects how? - I grew into a leader by being given such opportunities as a developer to grow skills and take on some leadership accountability within a team. We all can name good people who we have ‘paired’ with on projects who taught us a new level of competence or new skill - that we never get from academic training.</p>\n\n<p>c.  Impact if not? - Ego driven or silo-based skill sub-teams limits teams dynamics that can stop Agile teams from achieving higher quality, but also limits each players ability to grow breadth of skills. </p></li>\n<li><p>I look to engage customers through frequent interactions and process transparency – prefer customer collaborations vs. contract negotiations. (Want to earn and keep trust!)</p>\n\n<p>a.   Experience Story – I have rescued a couple of large failing project teams, both times brought in after an external audit had identified a lot of issues. When I’ve reviewed and then re-based both projects using Agile it was clear to me that the both audits main root cause is always a basic breakdown of project communication. Trust is number one, and only happens if a leader parks their ego at the door and works openly with all stakeholders both upward and downward to make things happen. I have been called blunt and direct, but everyone always knows I am an open book with them and tell them the good, bad, and ugly. </p>\n\n<p>b.  Better for projects how? - I’ve found teams respond well as actions reflect an honest effort to ensure that all participants have a voice and they feel supported in their work. Sponsors respond too feeling they have a view into the process and don’t just get the bad news.</p>\n\n<p>c.  Impact if not? – To manage risk I’ve seen some put all the focus on the contract and legalities to the process. Set team up to loose as process takes over the project communication.</p></li>\n<li><p>I look to deliver simple eloquent working solutions over complex and unsustainable solutions (I want to deliver results!)</p></li>\n<li><p>I look to enter engagements that leverage all my talents and grow my business reputation – innovate, solve the unsolved (SWAT), and deliver full-solutions where others won’t.  (Want to build my niche!)</p></li>\n</ol><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Outline of Presentation - 2 to 3 slides for each top 10 items with a) relevant experience story, b) how this is important to projects, and c) Impact if not.<br />\nFollowup Q&amp;A. 30-60 mins</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Experience report	2008
20082656	Cowboys and Indians: Impacts of Cultural Diversity on Agile Teams	<div class="content">\n    <p>Underestimating the impacts of cultural diversity on your team can be disastrous, creating barriers and even team breakdown.  Most leaders aren’t even aware of the influences that different cultures can have on team dynamics.  These impacts can be even more pronounced on agile self organizing teams.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Discuss our journey &amp; lessons learned at a major company in the transportation sector:</p>\n\n<p><strong>Pre-awareness</strong>  - clueless state<br />\no   some “camps” building, suboptimal performance, communication hampered – thought to be attributed to different personalities.  </p>\n\n<p><strong>The awakening</strong> – forced thru Best Shoring<br />\no   Best Shoring announced at company<br />\no   Cultural Diversity expert engaged to help thru the journey – attended initial diversity session<br />\no   the aha occurred (before the infusion of offshore resources) – “I already have a culturally diverse team”<br />\no   Awareness that peoples cultural orientation shape they way they communicate, collaborate, take responsibility, give and accept feedback, respond to authority figures, accept risk, or respond to change.  Impacting foundational principles for Agile teams.<br />\no   During a retrospective with the current team truly understood how deep the resistance was regarding the Offshore model (considered a threat to their livelihood, only prepared to go so far…)  </p>\n\n<p><strong>The discovery process</strong> – what are these cultural biases and how do I manage?  Given the resistance how do I rebuild the team and still meet our business objectives &amp; commitments?<br />\no   Compared Indian cultural values to Agile values<br />\no   Identified potential challenges and areas to leverage<br />\no   Developed extensive on-boarding plan focused on merging a culturally divergent team (near shore &amp; landed offshore)  </p>\n\n<p><strong>Execution of plan</strong> – timing was the pits – resources landed right before go-live!<br />\no   Cultural Expert worked with the current team (Calgary Cowboys) and my new Indian team members – helped to align expectations<br />\no   Developed team norms with newly formed team<br />\no   Watching a Russell Peters comedy video about cultural diversity was a great hit!  </p>\n\n<p><strong>So how are we faring?</strong><br />\no   Team seems to working fairly well together.  Some cultural biases still creep in that I have to be alert for (hierarchical impacts, providing very specific very blunt feedback, watch for signs of miscommunication – not responding in the way anticipated)<br />\no   No major resistance from Calgary team – reframed perspective by discussing how they can add value.<br />\no   Team socials are still not well attended by all – still puzzles me.<br />\no   Working towards my goal of building a high performing culturally diverse team.  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Experience report	2008
20082650	The Value of Collaborative Estimation	<div class="content">\n    <p><strong>Presentation Description</strong></p>\n\n<p>The team, running Scrum by-the-book for three months, was continually failing to meet its delivery dates. As a result, trust between the business managers and the team degraded almost to a point-of-no-return. The team, which held bi-weekly retrospectives, could not pinpoint the problems causing its inability to ship. Mitch Lacey was asked to assist the team in finding the root cause of its problems. He analyzed multiple aspects of the project—from individual work items to planning meetings. While multiple issues were identified, one thing stood out above all others—the estimation process used had caused the team to miss its deadlines. Mitch discusses the estimation problems the team was having, how they were discovered and fixed, and the resulting improvement in financial and customer satisfaction.</p>\n\n<p><strong>Session Learning Objectives</strong></p>\n\n<p>At session completion, attendees will have heard what impacts of poor estimation have on a team and seeds that teams can use to grow to refine their estimation practices, identify information points that people should look for when in a similar situation and how to help sell these changes to people who are not familiar with agile.</p>\n\n<p><strong>Presentation Delivered Before</strong></p>\n\n<p>This presentation was delivered before 80 people at the SQE Agile Development 2007 conference in Orlando, Florida.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li>The impacts of poor estimation - this section covers the problems and techniques the team encountered, the changes that were implemented and the benefit the team received in the end.</li>\n<li>How to fix it - this section outlines various estimation techniques, finalizing on one, planning poker, discussing it in depth.</li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	 A Case Study	Leadership & Teams	2008
20080374	Appraisals and Compensation:  The Elephant in the Room	<div class="content">\n    <p>Appraisals, bonuses, and compensation in general have a dramatic impact on individual and team performance, and yet these subjects tend to be avoided as if they were taboo.  This talk will take a look the underlying conflict between individual rewards, teamwork, and evaluation systems.  It will examine the history and literature of reward systems, particularly those in environments which require collaboration.  Two case studies will be discussed, including one concerning team bonuses.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Talk	2008
20081291	Guerilla Agile: Stop Playing Schedule Games	<div class="content">\n    <p>Chances are good that if you’ve worked on a project, you’ve encountered a schedule game or two (or three or four). As part of a team, you’ve seen Schedule Chicken or 90% Done. If you’re a project manager, you’ve probably pushed back against We Gotta Have it; We’re Toast Without It, the Queen of Denial, We’ll Go Faster Now, or Split Focus. </p>\n\n<p>Using timeboxed iterations and other agile practices can help you avoid and stop playing schedule games. But you can’t do this alone. First help your team and your management understand they are playing schedule games. Then, once they understand the games, enlist their help in solving the underlying problems that lead to the games. Even if you feel stuck—“my management can’t help; they’re part of the cause”—you can still use many of the agile practices to work your way out of the schedule games. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I tried to run this as a discovery session last year but people came looking for answers. It appeals to newcomers, so a talk may be more reasonable for newcomers.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Talk	2008
20083075	When Whole-Team Attacks: How can we ensure true whole-teams survive and thrive?	<div class="content">\n    <p>Whole-teams are a powerful concept, but, we are noticing that some agile teams are perhaps more aptly described as developer-whole-teams.  In this talk we will discuss some of the teams we have observed, and pose some of the following questions: How are true whole-teams created? How can developer-whole-teams be identified and changed?  We invite you to come to our talk and to connect with us afterwards to share your whole-team stories, be they good or bad, so that we can begin to better answer these questions as a community.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Talk	2008
20083571	The social nature of agile teams	<div class="content">\n    <p>Agile is a term often (but not always) associated with ‘project chemistry,’ or the positive team climate that can contribute to high performance. This report presents findings from a qualitative study into personal experiences in development teams. The results draw from socio-psychological literature to explain not only how, but WHY agile methodologies support effective teamwork. Valuable for anyone curious about the socio-psychological aspects of teamwork: managers interested in guiding team activity; practitioners hoping to better understand their team experiences; or newcomers looking for insight into why agile works at all.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Session history: this talk was presented at XPDay 2007. The audience feedback was extremely positive. Several individuals pulled me aside later to tell me how the results presented in the talk strongly resonated with their own experiences, but also pulled the theory together in a non-obvious way.  I would love to have the chance to share this unique piece of research with more people, as well as improve on the slides/presentation from the first talk. </p>\n\n<p>Background: the talk presents the results of a year-long masters study. The study involved semi-structured interviews with 22 participants.  The methodology used to analyze participant experiences was grounded theory. Interview transcripts were scrutinized line-by-line to isolate common occurrances/themes across participants, and these themes were further linked back to teamworking and socio-psychological literature. You can find a copy of the thesis here: <a href="http://www.ewhitworth.com/documents/Thesis_final.pdf" title="http://www.ewhitworth.com/documents/Thesis_final.pdf">http://www.ewhitworth.com/documents/Thesis_final.pdf</a></p>\n\n<ol><li><p>Introduction to research (5 minutes)</p></li>\n<li><p>Introduction to social identity theory &amp; how it comes to play in software development (5 minutes)</p></li>\n<li><p>Overview of social forces in agile teams and how agile practices support them.(15 minutes)\nThis section covers some of the major precursors for team involvement and motivation from a social perspective. In particular, how agile development practices such as daily team meetings not only reduce physical barriers to communication, but also reduce existing social barriers to collaboration and increase the willingness of team members to communicate and resolve conflict with other team members. </p></li>\n</ol><p>Topics will include: in-group/outgroup bias (social identity &amp; culture), social pressure and responsibility, social support and belonging, ownership and effort, and  requirements for ‘whole team’ communication and motivation. </p>\n\n<ol><li>Audience questions (5 mins) </li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Experience report	2008
20084039	Bootstrapping Scrum and XP under crisis - a story from the trenches	<div class="content">\n    <p>A high-volume online poker system deployed prematurely and crashing every day. 50 (fifty!) consultants thrown in near the end to rush the release. The worst code anybody in the project had ever seen. Team members working 80 hour weeks.</p>\n\n<p>This is what I saw when I started as CTO of a Swedish gaming company. 3 days into the job we crashed the national poker tournament and were thrashed in the tabloids. A few days later I was notified that half my team would have to go, just in time for christmas. Oh, and someone promised media that we would re-run the national poker tournament within 5 weeks. </p>\n\n<p>So the already burnt-out team now had to make the system scalable and stable within 5 weeks, while simultaneously being reduced to 50% staff size. The CEO’s words: “you can do whatever you want with the team, you have my full support, we have nothing to lose, this is our last chance”. Great.</p>\n\n<p>Our strategy: “Heck, let’s go all-out Scrum and XP”.</p>\n\n<p>In this session I’ll describe the rather dramatic agile transitioning event that later gave rise to my book <a href="http://www.crisp.se/henrik.kniberg/ScrumAndXpFromTheTrenches.html">Scrum and XP from the Trenches</a>.</p>\n\n<p>This is a popular talk, was given <a href="http://www.bits-chips.nl/nieuws/bekijk/artikel/bitschips-2007-embedded-systemen.html">best speaker award</a> in the Netherlands for it :o)</p>\n\n<p><strong>Target audience</strong></p>\n\n<ul><li>Anybody interested in agile transitioning war stories.</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a talk with slides and examples. I’ll cover (roughly):</p>\n\n<ul><li>How the situation looked when I came in </li>\n<li>How it got what way</li>\n<li>What our solution trategy was</li>\n<li>How we executed it</li>\n<li>Which key decisions were made along the way and why</li>\n<li>What key impediments got in our way and how we dealt with them</li>\n<li>How it all played out</li>\n<li>Key lessons learned</li>\n</ul><p>The focus is on the bootstrapping &amp; transitioning process itself, not the detailed agile practices (those are described in my book, and possibly in a separate session as well). </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Experience report	2008
20081794	What Are They Doing? What A CIO Wants To Know From An Agile Development Team	<div class="content">\n    <p>What are the factors critical to the success of a CIO? Which relationships are the most important in determining the longevity of a CIO? How can a CIO consistently deliver business value? How can development teams in general and agile teams in particular contribute to this success? In this presentation, Niel Nickolaisen shares his experiences and the survey responses from his CIO peers on how the development team and CIO can work hand in hand to improve IT and business performance.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>While this is a fairly standard presentation format, I include at least one actiivity to get the audience involved with the survey results.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Talk	2008
20080415	Searching For and Developing Agile Leaders	<div class="content">\n    <p>Have you ever wondered what to search for and/or use in developing agile leaders? What type of criteria might you use, what types of questions should you ask, and what types of behavioral expectations should you have of someone in this role?  David Spann provides answers to these questions with eight behavioral definitions and a set of interview questions that emerged from comparing the Agile Manifesto, the Declaration of Interdependence and role expectation surveys for agile leaders and professional facilitators.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>20 minutes on background and research findings</p>\n\n<p>30 minutes in small and large group discussion defining what makes up a “Great Team” </p>\n\n<p>20 minutes of large group discussion focusing on the leadership skills required to develop and maintain that Great Team.</p>\n\n<p>20 minutes in interactive Q&amp;A</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Tutorial	2008
20085099	Building High-Performance Agile Teams	<div class="content">\n    <p>Without a doubt, agile processes rely on effective collaborative teams. But we can’t just throw a group of individuals together and expect an agile team to just happen. It takes knowledge of team strategies, skillful team building and ongoing coaching to build and maintain high-performing agile teams.</p>\n\n<p>In this tutorial, we’ll explore the very nature of agile teams and how they are formed. We’ll discuss the nature of leadership within teams of peers, and how to motivate teams to take the initiative and self-organize. We’ll cover how to run effective team meetings, how to reach agreements as a group, how to resolve conflicts and how to form a team that continuously learns how to better work together.</p>\n\n<p>Throughout the tutorial we’ll participate in targeted exercises that illustrate aspects of team skills, and help us to think differently about how to work together as a team.</p>\n\n<p>This tutorial is intended for team members who need to work together as a team and for managers and leaders who need to form effectively agile teams. No prerequisites are required</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session is a combination of light lecture and targeted scenario solving exercises. The lecture introduces concepts and techniques. Some techniques are reinforced with short exercises to practice the techniques. Key concepts are reinforced by providing situations that require the application of collaborative team thinking to best solve, and having the participants develop potential solutions and approaches in small teams.</p>\n\n<p>The anticipated mix of lecture to exercise is about 60-40, based on similar training courses and workshops I’ve conducted before on this topic. If the attendee count is small, the percentage of exercise will likely go up. Larger groups generally need more explanation and discussion during the lecture activities.</p>\n\n<p>The anticipated tutorial agenda outline is:</p>\n\n<p>Essential Characteristics of Teams:</p>\n\n<ol><li>Where are we at now? Conventional approaches for group development.</li>\n<li>Why is a team approach better?</li>\n<li>What exactly is a “team?”</li>\n<li>Degrees of team self-determination.</li>\n<li>Team size and membership.</li>\n<li>Beginning the formation of a true team.</li>\n</ol><p>Developing an Effective Agile Team:</p>\n\n<ol><li>Models of team formation and development.</li>\n<li>Team norms.</li>\n<li>Responsibility and accountability in teams.</li>\n<li>Tools for expressing team culture: charters, expectations, ground rules</li>\n</ol><p>Getting Results from Collaborative Activities:</p>\n\n<ol><li>Collaborations vs. meetings.</li>\n<li>Attendance and substitutions.</li>\n<li>Information management.</li>\n<li>Agenda management.</li>\n<li>Tips for participants.</li>\n<li>Tips for facilitators.</li>\n</ol><p>Making Decisions and Solving Problems:</p>\n\n<ol><li>A team decision-making framework.</li>\n<li>Tools for decision-making: brainstorming, thinking tools, reaching closure.</li>\n<li>Constructive behavior when decision making.</li>\n<li>Obstacles and pitfalls to decision-making.</li>\n<li>Handling conflict.</li>\n</ol><p>Healthy Team Environments:</p>\n\n<ol><li>Place and time.</li>\n<li>Workspaces.</li>\n<li>Handling virtual teams.</li>\n</ol><p>Teams That Learn:</p>\n\n<ol><li>Attributes of learning teams.</li>\n<li>Obstacles to team learning.</li>\n<li>Team building and learning are holistic.</li>\n<li>Renewal and learning.</li>\n<li>Where are we? Measurements and metrics.</li>\n</ol><p>Leadership and Followership in Teams</p>\n\n<ol><li>What is leadership? It’s not control!</li>\n<li>Successful leadership practices.</li>\n<li>Attributes of good leaders.</li>\n<li>Followership - the missing role.</li>\n<li>Effective followership behaviors.</li>\n<li>Increasing your competence as a team member.</li>\n<li>Relationship building.</li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Tutorial	2008
20083364	Functional roles, managers and individual growth in Agile contexts	<div class="content">\n    <p>Join Peter Alfvin, Esther Derby, Christophe Louvion, and Michael Spayd in this moderated panel session as they discuss topics including factors impacting individual and organizational growth after the introduction of Agile practices, how roles and behaviors might need to change, and how compensation models might be affected. Have a topic you would like to suggest for the panel? Email it to the moderator, Rachel Weston, at <a href="mailto:rweston@rallydev.com">rweston@rallydev.com</a>.</p>\n\n<p>Sample questions (final list is still being determined):</p>\n\n<ul><li><p>What factors have most impacted individual growth in your organization or organizations you have worked with since the introduction of Agile practices?</p></li>\n<li><p>How has the adoption of Agile practices affected functional leadership within organizations?</p></li>\n<li><p>How do managers’ behaviors change to support with Agile practices?</p></li>\n<li><p>How do compensation models need to change to support Agile practices?</p></li>\n</ul><p>If you have a question you would like to submit for consideration, please enter it in a review of this submission or email Rachel at <a href="mailto:rweston@rallydev.com">rweston@rallydev.com</a>.</p>\n\n<p>Rachel Weston will moderate the session.</p>\n\n<p>Panelists:</p>\n\n<p>Peter Alfvin: For the last three years, Peter has been leading a rollout of Lean Software Development at Xerox, including a large scale Scrum deployment.  One of the biggest challenges throughout this transition has been agreeing on the role of the manager and the responsibility for ongoing functional leadership.</p>\n\n<p>Esther Derby: detail coming soon. Or go to <a href="http://www.estherderby.com" title="http://www.estherderby.com">http://www.estherderby.com</a>.</p>\n\n<p>Christophe Louvion: After almost killing a fast growing internet startup by formalizing something called waterfall, Christophe had a shower moment as he came across the Agile manifesto and realized his past success in the late 90s / early 00s were built around what is now called the Agile principles. He then fought back the culture he put in place: gates, control and command, blame, status quo, phased development. Step by step, team by team, he won back bottom up the whole organization and created a strong business driven company where efficiency is fueled by empowered teams. While Scrum is a headless process (besides the Scrum Masters), he has come to strongly believe in the idea of strong managers/leaders as defined by the Lean movement (Deming, Scholtes, Poppendieck). After 9 years at the same company, he has just joined a new company where he brings Agile/Lean principles and practices across the organization.</p>\n\n<p>Michael Spayd: Michael has been intensively involved in large-scale Agile adoption efforts since 2001. Almost immediately, a big part of his focus became how to help Agile managers. The issue first arose when his coaching team ran immersions for development teams new to XP. His job as leader was to run education sessions for the middle managers involved to keep them “out of the hair” of the teams so they could develop software. Michael has continued to explore the role of middle manager in Agile adoptions ever since, coaching many teams and their management on Agile effectiveness. From this experience he has developed a set of eight competency areas or domains of the effective Agile manager. Michael believes strongly there is an important role for management in an Agile world, though it is quite different than the traditional role. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session will be moderated by Rachel Weston with questions compiled through a variety of sources:</p>\n\n<ul><li><p>Panelist suggestions</p></li>\n<li><p>Feedback from Agile 2008 reviews</p></li>\n<li><p>Other feedback as appropriate (Rachel’s email is included above).</p></li>\n</ul><p>The session will start with a brief introduction by each panelist.</p>\n\n<p>Timeboxes for panelist answers will be used to keep the session moving.</p>\n\n<p>If there is time at the end, questions will be elicited from the audience as well.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Panel	2008
20083334	Programmers may be from Mars, Customers may be from Venus, but why does everyone think that Project Managers are from Uranus?	(No description)	Leadership & Teams	Workshop	2008
20081430	Metrics for Agility	<div class="content">\n    <p>The software development industry has a poor track record for developing and employing effective metrics. Most of the metrics employed are tangential to the true goal of software development (which is delivering business value) and are thus ill-regarded by developers, especially agile developers. </p>\n\n<p>However, good metrics are important to management, in order to understand status and progress of their teams, and to make projections into the future. Therefore, we must provide meaningful metrics that give useful information to the business — but also enforce agile values. </p>\n\n<p>In this talk, we discuss the following: velocity, burndown graphs, running tested features, EVM metrics (CPI and SPI), earned business value, and story cycle times. This discussion includes method for calculation, presentation to management, why they’re important, and how they enforce (or fight against) agile values.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Talk	2008
20083939	A Framework for Agile Leadership	<div class="content">\n    <p>We start by introducing the purpose alignment model.  By characterizing activities by mission criticality and market differentiation, we show how organizations can discover and align with organizational strategy to focus their activities and improve their effectiveness.  Next we introduce the key attributes and techniques for leading collaboration to create an environment where teams can be creative, innovative and productive.  Lastly we show how to characterize projects by complexity and uncertainty and the implications on project management, governance, and leadership development to minimize risk and deliver on the purpose efficiently.   </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>•Overview of the Leadership Framework and relationship to the Declaration of Interdependence (10 minutes)</p>\n\n<p>•Creating and Aligning to the Strategic Vision (15 minutes)</p>\n\n<p>•Dispersion of the Strategy via Collaboration and Collaborative Leadership (15 minutes)</p>\n\n<p>•Execution of the Strategy via effective Project Governance (15 minutes)</p>\n\n<p>•Interactive breakout sessions utilizing these tools in your organization(30) minutes)</p>\n\n<p>•Wrapup</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Tutorial	2008
20082949	The Software Project Manager's Bridge to Agility	<div class="content">\n    <p>When software development teams move to agile methodologies, they often leave the project managers behind. Traditionally trained project managers are confused about their new roles and responsibilities in an environment that no longer allows them to make stand-alone decisions. In this session, the presenters focus on re-defining the job of the project manager and their new—and often more important—role in the agile development process.  Also included is a mapping of traditional Project Management Institute (PMI) practices to their cousins in agile, so that a shared lexicon can be established. The presenters then elaborate on the shift in a project manager’s role from “boss” to one who serves and supports the team. See how the changed focus on facilitation and collaboration skills can make you a better Agile Project Manager. Leave with a better understanding of the necessary changes to lead and support an agile team and take away clear, practical guidelines to make these changes.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Change Notes: \nChanged to Leadership stage as that seemed to be the general consensus. Also shortened the tutorial to 90 minutes, but can be done at 180 minutes (more time for exercises and discussion that way) if there is any interest. </p>\n\n<p>Format:\nThis 90 minute tutorial will be presented in lecture/exercise format, with time allocated to address questions and engage in discussions with attendees.  Several exercises will be included, and will focus on the differences between directive and collaborative approaches to project management (examples are included in the sample slides). The target attendees (PMPs and other command-and-control project managers) should be at a beginner level of agile understanding.  More specifically, they are traditional waterfall project managers new to agile, who hold responsibility for managing software development teams.</p>\n\n<p>Outline:<br />\n1. Agile introduction and overview<br />\n   a. What is “agile”?<br />\n   b. Why companies are moving to agile approaches<br />\n   c. The Agile Manifesto – agile principles<br />\n2. Breaking out of existing project management paradigms<br />\n   a. Process changes<br />\n   b. New measures of success<br />\n   c. Culture changes<br />\n   d. New ways of working with Design and QA  (up-front and at-end phase changes)<br />\n3. Mapping of traditional PMI knowledge areas to agile practices<br />\n   a. Scope and Time Management<br />\n   b. Quality Management<br />\n   c. Risk Management<br />\n   d. Cost and Procurement Management<br />\n   e. Human Resources<br />\n   f. PMO considerations<br />\n4. Identify new responsibilities for project managers<br />\n   a. Servant leadership<br />\n   b. Facilitation<br />\n   c. Collaboration and consensus<br />\n   d. The decisions you still must make<br />\n5. Resulting career paths now available to project managers  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Tutorial	2008
20084434	Oles 8 steps for Agile Mentors	<div class="content">\n    <p>Having worked as an Agile Mentor for some years, I have discovered a pattern for how I help teams navigate on their journey from from traditional processes towards Agile values and methods. I have discovered, that I can turn most teams into fullblown agile teams, by helping them in 8 different steps - and I have seen, that this takes me 10-15 days during a period of 2-3 months. The early steps are more learning than doing, but that quickly changes - and I stand back, facilitate and support the team and the customers while they are estimating, prioritising, plannning, etc.</p>\n\n<p>For each step I have discovered a number of Do’s and Dont’s. During the whole process you need to focus on your role as a change agent. Like during the planning sessions, where your goal is NOT to create a plan - but to get each individual team member to engage in the planning. A special challenge during planning sessions is the Project Leader, who often is used to do all the planning. Your job as a change agent is to get the Project Leader to stand back and support the team during the planning session. I have a little exercise for this which involves hands and pockets…</p>\n\n<p>One of my favorite steps is when I show up 1-2 weeks before the iteration ends and ask this simple question: “The demo - next Friday…?”. That’s all I have to do at this point. It’s really interesting and funny to see what happens - and the patterns is always the same. The project leader and the other team members come up with all the excuses you can think of - for not being able to demo or deliver anything in this particular iteration. After talking to them about the core values and principles of Agile and Iterative development, we find a way to get ready for the demo - and they always talk about this as a definate KEEP during the reflection workshop after the demo.</p>\n\n<p>My 8 steps are:</p>\n\n<ol><li><p>Agile Training Workshop</p></li>\n<li><p>Facilitate Use Case Camp (this can be skipped if there is 100% alignment about the business needs and requirements on a general level - but there never is…)</p></li>\n<li><p>Facilitate Release Planning Game</p></li>\n<li><p>Facilitate Iteration Planning Game</p></li>\n<li><p>Show up a couple of times per week</p></li>\n<li><p>Ask the question: “The demo - next Friday…?”</p></li>\n<li><p>Facilitate Demo and Reflection Workshop</p></li>\n<li><p>Facilitate Product Evaluation and Updating the Release Plan</p></li>\n</ol><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I will run this as a presentation with a number of interaction sessions with the audience. For each of the 8 steps I will present my experiences and best practices - and I will ask the audience for their ideas on how to perform the step even better. To ensure participant thinking and learning - I will spice the presentation up by a little contest that runs through the whole presentation. This subject is serious and important stuff - but the presentation will be engaging and FUN!</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Tutorial	2008
20083841	Seeking To Perceive More Than To Be Perceived	<div class="content">\n    <p><strong>Summary for the printed Program Guide</strong></p>\n\n<p>This session explores an alternative to “information push:” to seek in others with a curious mind the stories and ideas they might have, and to combine them with what has already be shared.  This benevolent, attentive listening, this non-judgmental investigation helps to embrace ideas that surround us, and to meet more efficiently the whole group’s expectations. We’ll experiment with several tools that help adopting an active listener posture — namely: Marvin Harris’s emic approach and Jim &amp; Michele McCarthy’s Investigate protocol, taken from their Core Protocol.</p>\n\n<p><strong>End of summary for the printed Program Guide</strong></p>\n\n<p>A drama in a developers’ team.  Two experienced programmers violently argue about which design choice will satisfy best the customers’ requirements they have to implement.  Three others, slightly taken aback, wonder about whom they should side for.  One of them thinks, maybe it’s the right time to suggest rewriting the whole thing, in a programming language she likes particularly.  Intervenes the team’s manager.  He brutally settles the case — because “we have to keep moving forward” — along an orientation that suits no one.</p>\n\n<p>Group work is often the stage of negotiations of territory : a compromise with the others, a compromise with one self.  “Am I cut out for it?  Do I have my place here?  How to contribute?  Will I manage to impose my ideas?,” one may think.  If several team members follow this mindset, there is soon a deluge of ideas and information, many mutually contradictory, unexploited due to lack of time, everyone waiting for the moment they’ll be able to offer “their” contribution, oblivious to others.  Here lies a paradox: even when we (think we) know what the group needs, saying it may hinder the group in its finding answers.</p>\n\n<p>As members of various groups — agile teams, family, business companies… — we can do better.</p>\n\n<p>This session explores an alternative to “information push:” to seek in others with a curious mind the stories and ideas they might have, and to combine them with what has already be shared.  This benevolent, attentive listening, this non-judgmental investigation helps to embrace ideas that surround us, and to meet more efficiently the whole group’s expectations.</p>\n\n<p>We’ll experiment with several tools that help adopting an active listener posture — namely: <a href="http://en.wikipedia.org/wiki/Marvin_Harris#Theoretical_contributions">Marvin Harris’s emic approach</a> and Jim &amp; Michele McCarthy’s Investigate protocol, taken from their <a href="http://www.mccarthyshow.com/Portals/11/docs/TheCoreV3.pdf">Core Protocol</a>.  We’ll discuss together the discovers we’ll have made along the session.</p>\n\n<p>During the session, participants will have the opportunity to</p>\n\n<ul><li>learn techniques that allow to get a better grasp at a group’s potential, and to individually use it more efficiently</li>\n<li>practice with communication tools they’ll be able to reuse immediately in other contexts</li>\n<li>think about how to contribute to increase the value of a conference</li>\n<li>have fun and meet other people sharing analog interests</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ul><li><em>Introduction (5 min)</em> — Participants designate between 2 and 4 observers, depending on the size of the group.  Exercise presentation: “as a group, propose an action you’ll implement together that will increase the value of this conference”</li>\n<li><em>Iteration 1 (5 min)</em> — Participants attempt to do the exercise, with no additional help</li>\n<li><em>Debrief (10 min)</em> — Feedback from observers and group discussion</li>\n<li><em>Presentation of emic approach (5 min)</em> — that is, to ask someone to teach us to do something the way they do it, in order to understand how they think.</li>\n<li><em>Iteration 2 (15 min)</em> — Participants break in triads (student, teacher, observer).  They attempt to get new pieces of information that will help them answer the exercise through emic approach.  Participants switch roles in the triad and start over again.</li>\n<li><em>Debrief (10 min)</em> — Feedback from observers and discussion</li>\n<li><em>Presentation of Investigate protocol (5 min)</em> — that is, to get investigated by others to give pieces of information important to them (rather than important to us)</li>\n<li><em>Iteration 3 (15 min)</em> — Participants, as a group, decide whom to investigate.  Depending on the size of the group and time remaining, the group designate another person to investigate and start over again</li>\n<li><em>Convergence and conclusion (10 min)</em> — The group formulate its answer to the exercise</li>\n<li><em>Session debrief (10 min)</em> — What we’ve learned together; pointers at further readings</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Tutorial	2008
20081132	For Agile Leaders Only -- Exploring the "Hard Bits"	<div class="content">\n    <p>This session is for any Agile coach or leader who is facing challenges and looking for creative ways for facing them.</p>\n\n<p>In this practical session we hope to do two things. First, mine some of the hardest, real-world problems that attending Scrum Masters and other Agile Leaders have faced within their teams. We’ll do this by breaking into teams and having each team first brainstorm a list of challenges and then dot-vote on what they think is the toughest problem. </p>\n\n<p>Next, each group will share on their top challenging situation. We’ll allow group membership to change so folks can align with a challenge that most interests them. These new groups will then sort through options for facing that challenge.</p>\n\n<p>We’ll introduce Force Field Analysis as the facilitative tool to help each of the teams drive toward a challenge facing strategy. They will:</p>\n\n<p>• Describe the challenge Context<br />\n• Establish a Goal for facing the challenge or resolving the issue<br />\n• List forces creating the challenge (Forces For); what’s behind it? The root cause?<br />\n• List what forces would support resolution (Forces Against); Who would be interested in a new course? In problem resolution? What would be the team or business value shown?<br />\n• Finally, from the 2 forces, for and against, start developing an Action Strategy to meet the overall stated goal  </p>\n\n<p>We’ll wrap-up the workshop by having each of the teams share on their strategies for attacking unique problems. If there are similar problems, multiple teams will share on them together. Attendees should leave with a set of anti-patterns AND effective strategies for facing them.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>As you can tell this is a 3 part workshop. </p>\n\n<p>Part one, 30 minutes, will be focused on generating challenges and then sharing them around the group<br />\nPart two, another 30 minutes, will be focused on strategy development for meeting those challenges<br />\nPart three, the final 30 minutes, will be focused on sharing / discussing those strategies  </p>\n\n<p>In order to get the group “thinking” in the right direction, we’ve developed a “seed list” of challenge scenarios that might be helpful in (1) using the scenario framework to frame your challenge, and (2) getting a set of “typical” and “hard bit” challenges out there for discussion.</p>\n\n<p>We’ve used this format for internal Scrum Master training at our company. I’ve also used it for Creating Agile Conversations workshops in a couple of conference venues. It works quite well. The idea is to get to those really hard, “it depends on your context”, types of scenarios that we all face each day—then use the power and experience of Agile Leaders to sort out some options.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Workshop	2008
20081053	Leadership Success Recipes for Agile in the 21st Century	<div class="content">\n    <p>Agile was originally based on a simple recipe for success: a small team, co-located, self-organizing applying engineering practices. As a leader of such an adoption, you might think of your role as similar to a restauranteur/owner/head chef of a small restaurant:   small staff, some simple recipes, able to quickly address the problems/challenges that might arise.</p>\n\n<p>But now we are in the 21st Century and moving into more complex and demanding recipes for Agile. We still need success but we have moved the Agile recipe into a much bigger menu and venue. And, despite these complexities in our restaurant and recipes, we still need to be able to address the problems/challenges that might (will?) arise in this much more complex environment. Now, in your role as Executive Chef of this high-end operation, what will your recipe for success be?</p>\n\n<p>Christophe Louvion of Gorilla Nation and Jean Tabaka of Rally Software present you with their cookbook of Agile for the 21st century Executive Chef. In this upbeat real-life experiences presentation, we offer the recipes that succeed; how they succeeded; and, what the amazing results were. Additionally, we intend to arm you with warning signs that your recipes for agile adoption may produce very unsatisfactory results and even flop. Think of it this way: do you want your large, resort-level operation to succeed with greater and greater complexity of Agile recipes and more demanding clientele? And, will you be prepared to face the challenges that could sabotage your efforts even before you get started? Or are you going to stay stuck in your little cafe and small staff as the only way to succeed?</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>A. Welcome — Introductions and format of the presentation</p>\n\n<p>B. What was the original set of recipes and venues for Agile success?—overview and level-setting for Agile of the early 21st Century</p>\n\n<p>C. As leaders in more complex organizations of the 21st Century, what are the challenges we face with applying the orignial recipe?—Q&amp;A about current challenges</p>\n\n<p>D. What were the challenges and audacious results of one 21st Century Agile adoption?—Christophe Louvion presenting his use of Agile to bring about 400% improvement in productivity.</p>\n\n<p>E. What were the challenges and adoption failures of another 21st Century Agile adoption?—Jean Tabaka presenting her 12 Agile Adoption Failure modes.</p>\n\n<p>F. Given these results of success and failure what tools must you be prepared to bring into your organization?—development infrastructure, testing infrastructure, reporting and tracking infrastructure</p>\n\n<p>G. Additionally, what organizational changes must you be prepared to make?—scaling agile throughout your organization, outside of IT and around IT? New roles for scaling, Scrum of Scrums, Meta Scrum, Organizational Implementation Backlog</p>\n\n<p>H. Given these successes and failures, what recipes for success are you prepared to embrace?—Q&amp;A with the group about what they have experienced and how we can make successful recipes going forward.</p>\n\n<p>I. Close—Final Q&amp;A</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Tutorial	2008
20081289	Hiring For An Agile Team: Detecting Candidates Who Will Fit With the Team	<div class="content">\n    <p>Even the people who claim experience on Agile teams are not necessarily working the way your team works. And, because not everyone is using Agile approaches, some people who aren’t using strictly Agile approaches may be perfect for your team. If you’ve tried to hire people recently, you know you can’t reply on people with or without “Agile” experience to be just right for your open position—and it wasn’t a question of technical skill.</p>\n\n<p>Hiring doesn’t have to be so frustrating. Instead, reframe your role as an interviewer to be that of a detective; in particular to define your culture in advance and determine in an interview whether a candidate can fit into that culture. </p>\n\n<p>In this tutorial, we’ll define the essential technical and non-technical skills for <em>your</em> position, identify <em>your</em> cultural issues, and practice interviewing so all your hires can be successful.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>10 minutes: Short intro about deciding what’s essential in a candidate (with an activity) (pairs or triads)\n10 minutes: Use those essentials to develop behavior-description questions (in triads)\n10 minutes debrief (all)\n30-45 minutes: interview practice (triads, one interviewer, one candidate, one observer). I timebox each set of questions so each person has a chance to interview, be interviewed, observe. If people are adept at interviewing, wait to debrief at the end. Otherwise, debrief during. (Last year, this took all the time)\n10 minutes: short intro about auditions\n15 minutes: develop auditions in triads\n10 minutes debrief\nrest of time: practice auditions and debrief</p>\n\n<p>I could run this as a talk or as a 90 minute tutorial. In 90 minutes, I can’t get to auditions.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Tutorial	2008
20081879	PMI and Agile â€“ Oil and Water or Can They Co-exist?	<div class="content">\n    <p>PMBOK is a 400 page book describing 44 management processes within 12 knowledge areas published by PMI as the standard for Project Management. Scrum can be depicted on one page. The Agile Manifesto including principles is documented in less than 3 pages. Seems like oil and water – or is it? In this workshop we will explore the basic principles of PMI/PMBOK and de-mystify the burdensome hype. Through a brief tutorial and small team activities, we will determine if Agile/Scrum principles can be cleanly aligned to the basic principles of PMI/PMBOK. We will identify what works, what doesn’t and what should change. This session is appropriate for all audiences, regardless of PMI knowledge or experience.    The results of this session will be docmented in the conference wiki and shared with PMI.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is geared to a small working group…5-7 tables or teams.  I will begin by assessing the audience to find out who has PM and Agile experience, who is PMP and who is CSM and those that don’t fit either category.  We will quickly brainstorm what ideas come to mind with the words PMI and PMBOK and capture them on a board to be used later.  I will then share myths of PMI/PMBOK through a fact or fiction exercise.  The goal is to jump start the team on thinking about PMI/PMBOK in a different frame of mind (30 minutes)</p>\n\n<p>We will then break up into the groups (by table).  Each group will have one of they key knowledge areas (with requisite processes) labeled on a flipchart.  They will work together to brainstorm what Agile processes/practices may or may not align with the knowledge area and processes.  I will ask them to think about:  What fits? What doesn’t work? Are there Agile practices that don’t map at all? What are your concerns?  (30 minutes)</p>\n\n<p>The final stage is report out and close.  Each team will review the PMBOK knowledge area assigned and how they feel it may or may not map to Agile best practices.  We will close with a review of the original ideas about PMI and PMBOK to see if they still apply.  The results would be captured on the conference WIKI.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Workshop	2008
20082978	The Leadership Imperative: Creating a Culture of Trust	<div class="content">\n    <p>In our personal and business lives, many of us know leaders who successfully foster environments of incredible creativity, innovation, and ideas—while other leaders try but fail. So, how do the top leaders get it right? Going beyond the basics, I explore with you the ways that the best leaders create “safety nets” that allow people to discover and try new possibilities, fail early, and correct faster. Removing fear and engendering trust make the team and organization more creative and productive as they spend less energy protecting themselves and the status quo. </p>\n\n<p>Pollyanna shares the tools you, as a leader, need to develop open environments based on trust—the first step in collaboration across the enterprise. Learn to step forward and do the right thing without breaking trust. Find out when and how to acknowledge and reward trust in your team and organization. At the end of this presentation, attendees breakout in small groups to develop strategies for creating a culture of trust in their organization and in their teams. </p>\n\n<p>The question I get most often from leaders is “How do I build trust?” with our collective experience, let’s find some tools you can use and put to work in your organization.</p>\n\n<p>In this workshop we will learn:<br />\n- How to identify the fear in a team that is keeping people from expressing their ideas.<br />\n- How to remove this fear and keep such fear out of the organization<br />\n- What behaviors leaders should avoid – the actions that stifle creativity and innovation<br />\n- When leaders encourage failing early and failing fast, how teams can create a ‘safety net’ where they can recover from their mistakes ‘safely’.</p>\n\n<p>We will discuss:<br />\n- Can trust be rebuilt after it is broken? If so, when and how?<br />\n- What do you do when there is one person on the team everyone distrusts?<br />\n- How do attendees define integrity, ethics, and the importance of both in their team interactions and team productivity?<br />\n- Is there such a think as ‘situational integrity’? If so, what it is.<br />\n- What is the most disruptive factor to team effectiveness?</p>\n\n<p>All topics that will help you create a culture of trust for teams to foster in the exchange of ideas. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>25 min presentation<br />\n20 mins of defining a culture of trust<br />\n45 mins of developing strategies to create and maintain a culture that encourages and fosters trust focusing on a prioritized list of largest challenges leaders face</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Workshop	2008
20082772	Diana and Estherâ€™s Excellent Retrospective Adventures	<div class="content">\n    <p><strong>Software teams confront what works and what doesn’t throughout every project. Where does their hard-earned experience go? It dissipates as people shift focus and move on. The <em>Adventure</em> lies in capturing, managing, and disseminating team understanding to <em>improve</em> current projects. Join the authors of <em>Agile Retrospectives: Making Good Teams Great!</em> for an interactive journey. Following the trail of a flexible framework for Retrospectives, you’ll gain a map for designing and leading Retrospectives. You’ll learn how to encounter problems and implement solutions effectively throughout the project—not just at the end.</strong></p>\n\n<p>Detail: </p>\n\n<p>Software teams experience what goes right and what goes wrong, what works and what doesn’t, during each and every iteration of each and every project. What happens to that hard-earned experience? In too many organizations, on too many projects, it dissipates as team members shift focus and move on. The <strong><em>Adventure</em></strong> lies in capturing, managing, and disseminating technical knowledge and process wisdom to <em>improve</em> current and future projects. </p>\n\n<p>Retrospectives offer the greatest lever for improving any software development project or process—based on the solid data of a team’s immediate past experience of success and failure. Through Retrospectives, teams systematically evaluate their own performance, explore their lessons learned, expand their capacity and capability, and choose how to improve the way they build and deliver products to your customers. For best results, smart teams and organizations convene Retrospectives iteratively throughout the project and again after delivery.</p>\n\n<p>Join Diana and Esther, the authors of <em>Agile Retrospectives: Making Good Teams Great!</em> (awarded amazon.com’s “Top Ten Editors’ Picks of 2006”), on an interactive journey of <strong><em>Adventure</em></strong>, following the trail of a flexible framework for Retrospectives, as well as gaining a map for designing and leading Retrospectives. Learn how to encounter problems and implement solutions effectively throughout the project—not just at the end, and identify ways to maintain the relevance of continuous improvement to the work of your team.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Participants will join Diana and Esther on the Adventure of experiencing a short project, along with its demo retrospective. They will explore the retrospective territory, then face the challenge of designing a retrospective for a previously unknown team. Along the way, they will acquire new processes and activities for revitalizing their own teams’ retrospectives. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Tutorial	2008
20081293	Building Your Coaching Skills	<div class="content">\n    <p>Many of us have experienced sports coaches, where they helped us stretch for the crawl, turn in dance, or catch a ball. But sports coaching tends to be just one kind of coaching—and not necessarily the kinds of coaching you need to provide or hear at work.</p>\n\n<p>Coaching is one of the most important—and most difficult—responsibilities of technical leaders. And the more management responsibilities you have, or the more Agile a team you work with, the more you need to coach. Too often, people struggle and fail when it comes to coaching others to excellence. Sometimes, managers make the mistake of trying to coach someone into performing work in a way that doesn’t fit for that person. Other times, the coaching isn’t explicit about how to perform work in a new and different way. </p>\n\n<p>We will explore practical steps to help you assess your team members’ skills and recognize when coaching is appropriate. We’ll review several coaching approaches and provide an opportunity try out these techniques. Bring your most challenging coaching situation and come prepared to practice!</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>10 minutes: short intro. Depending on how many people, ask people what they want out of the session\n20 minutes: do a simulation of coaching/debrief.\n10 minutes: debrief: elicit what worked/what didn’t\n10 minutes: add more approaches (whatever people missed in the debrief)\n20 minutes: try more coaching and debrief\n20 minutes: more coaching. Depending on how many people want to coach “up,” we’ll try things specifically for coaching others at a “higher” level in the organization. \nFinal debrief</p>\n\n<p>Note: the time is flexible here. I try to do this timing, but typically end up doing more teaching at the beginning because people only know about sports coaches or think they have to teach.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Tutorial	2008
20082321	Leading Volunteers with Agility	<div class="content">\n    <p>Volunteer organizations are unique because people are not paid for their contribution and your organization is in competition for space in an already over-booked schedule. By necessity, volunteer organizations require a more human-centric approach to leadership. This workshop will explore the 10 things you better be doing if you want to harness the passion and enthusiasm of your team of volunteers.  Topics such as empowerment, self-organization, and short-cycle delivery will be addressed using real world scenarios.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>45 minute presentation, loads of examples.  Speaker will entertain ad-hoc questions.\n30 minutes for collaboration in small teams to discuss what could be added and what could be removed.\n15 minutes to present findings to the team and further ad-hoc questions</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Workshop	2008
20081355	How to Overcome Pertinent Conflicts	<div class="content">\n    <p>Have you ever seen a pertinent conflict that defied every attempt to be solved? You may think that you have solved the conflict but it reappears after some time.</p>\n\n<p>For some of these tough conflicts, it is necessary for people to change their behaviour. That is exactly the niche where invisible barriers hinder improvement – the niche that we want to attack with this tutorial.   </p>\n\n<p>A small technique from the Theory of Constraints (TOC) - the Conflict Resolution Diagram (also called “Evaporating Cloud”) - can give you better insights into the conflict that allow you to craft solutions that work.   </p>\n\n<p>We bring more than a dozen conflicts - from which you can choose one to solve in the session during the exercise (see attachment <a href="http://submissions.agile2008.org/files/Evaporating%20Clouds%20-%20Prerequisites%20only.pdf">Evaporating Clouds - Prerequisites only.pdf</a>). You can also bring your own conflict(s) - and you will most probably have a recipe for solving the conflict after the tutorial.</p>\n\n<p>From the statement of the opposing conflict parties we will derive what each conflict party is trying to achieve. And from that we will identify the common goal that the conflict parties try to achieve.</p>\n\n<p>The key to creating breakthrough solutions is just that: the conflict parties typically are part of the same system (family, company, project team, etc.), hence they have some common goal. However, they have different points of view and want to act differently. Behind the reasoning of each conflict party are hidden assumptions which - when uncovered - give us some freedom to identify weak spots in the reasoning, which again allows us to identify breakthrough solutions for the conflict.</p>\n\n<p>To give you an example, consider the following: When we took TOC-classes with Bill Dettmer a couple of years ago (in Port Angeles, Washington), the Homeland Security Act was about to require Canadian citizens to have unforgeable documents when entering America. The tourist industry in Washington feared that fewer Canadian citizens would come to Washington. In a matter of minutes, we came up with some hints why it might not be as helpful to require unforgeable documents; and we came up with an idea how to overcome the obstacle of 97 USD for getting unforgeable documents (see the attachment <a href="http://submissions.agile2008.org/files/Evaporating%20Cloud%20-%20Homeland%20Security.pdf">Evaporating Cloud - Homeland Security.pdf</a>)</p>\n\n<p>By applying this technique - the Conflict Resolution Diagram - as a team, you create a high level of motivation and support for the solution in the team. We have seen<br />\n• dysfunctional team members join in into a repeated, lively discussion,<br />\n• frustrated team members turn into ambassadors of the proposed solution, and<br />\n• managers wholeheartedly support the proposed solution because they clearly understand how it developed.   </p>\n\n<p>Key Benefits for Participants:<br />\n• Create a CRD in a methodical way in a matter of minutes - analyze conflicts (with the people involved in the conflict) using the CRD technique<br />\n• Come to a common understanding of a problem in a group - uncover a lot of hidden assumptions uncovered<br />\n• Involve people in finding breakthrough ideas for solving a conflict - new ways that allow for a win-win situation<br />\n• Review and scrutinize a CRD - give constructive feedback on someone else’s CRD<br />\n• Have a big team of supporters for the proposed solution to be implemented<br />\n• With a finished CRD, have the basis for discussing the conflict with interested or affected parties<br />\n• Have access to a tool that helps you with creating a CRD<br />\n• Know what the other Thinking Tools there are in the Theory of Constraints are and what they are used for<br />\n• Know where to look for more detailed information on the Theory of Constraints and the Thinking Tools</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>0:05    Introduction (who we are)<br />\n0:15    Conflict Resolution Diagram<br />\n0:30    Exercise: Creating the Conflict Resolution Diagram (in groups)<br />\n0:10    Reports from the groups<br />\n0:10    Exercise: Reviewing the Conflict Resolution Diagram (in groups)<br />\n0:10    Reports from the groups<br />\n0:05    Tool-Demo: How to Create the Conflict Resolution Diagram with a tool<br />\n0:05    Q &amp; A</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Tutorial	2008
20080604	What Makes Pairing Work?	<div class="content">\n    <p>What makes pairing work?  How do you learn to pair effectively? When problems arise during a pairing session, how do you deal with them?</p>\n\n<p>Of all the practices generally associated with Agile software development, pair programming is likely the least-used.  Sometimes pairing just happens, but most times people need to approach it more mindfully.</p>\n\n<p>We will explore and experience ways to pair effectively to give those unfamiliar with pairing some safe and thoughtful exposure, and to give those with difficulties some insights into how their pairing can be more effective.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Participants will be provided with pipe cleaners, and asked to build animals with them.  The first iteration will be solo construction to provide a baseline for comparison.  This iteration will be followed by a debriefing focused on the techniques of creating pipe cleaner animals.</p>\n\n<p>The second iteration will require that the participants work in pairs.  The debrief for this session will explore the differences from working solo—both advantages and problems that arose.  Was the result better than the solo session?  In what ways did working with a pair make the job easier or better?  In what ways was it harder when working with a pair?  Potential solutions to those problems will be discussed.</p>\n\n<p>The third iteration will also be with pairs, and will give the participants to try some of the techniques discussed in the debriefing of the second iteration.  The debriefing will explore the differences from the second iteration—principally the effects of pairing more mindfully and after discussion of pairing techniques.  Were difficulties from the second iteration handled more easily?  Were new difficulties uncovered?</p>\n\n<p>These three iterations will fit into a 90-minute slot with a little attention to time management.  The concept could be expanded to fill a 180-minute slot, if desired.  This workshop was presented as a session at the Simple Design and Testing Conference, York PA, December 1, 2007.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Workshop	2008
20080249	The Road from Project Manager to Agile Coach	<div class="content">\n    <p>So many things that contributed to my success as a Project Manager are exactly the same things that spell doom for an Agile team.  Driving the team to outcomes.  Coordinating the work of the team members.  Using consensus as a hammer.  If these sound remotely familiar to you, come explore what it means to <em>be</em> an Agile Coach.  The session starts with a high-energy presentation and moves quickly to practice and activities.  You’ll walk away with specific things you can use as well as deep thoughts to chew on. </p>\n\n<p>We will reveal and discuss the essential mindset shifts a Project Manager must undertake to become an effective Agile coach.  We will talk about how that leads to changes in actions and changes in conversations and decision-making — both within your team and with the external world.  We will look at the latest thinking on highly-collaborative and high-performing teams and consider our own actions relative to fostering such teams.  Then, we’ll talk about the world outside your team - the world of managers, stakeholders, customers.  They have their own journey of mindset and leadership style changes to take. We’ll explore what those changes should be and how you can help guide the journey.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The format of this session will be part tutorial, part workshop.  The latest ideas in collaboration, trust on teams, servant leadership, etc. will be presented.  Small group discussion and simulations will be used to drive the concepts home and make them personal to the attendees.<br />\n~~~~~~~~~~~~~</p>\n\n<p>Opening: A “shake up” to get people thinking in a different way about the role of Agile Coach.  See an early version of some of these “radical” thoughts in my video on You Tube (only 4 minutes long):\n<a href="http://www.youtube.com/watch?v=0lDZUHhAqsU" title="http://www.youtube.com/watch?v=0lDZUHhAqsU">http://www.youtube.com/watch?v=0lDZUHhAqsU</a></p>\n\n<p>Check-in: What mindset the attendees come from and whether the radical thoughts seem radical to them or not.  </p>\n\n<p>Tutorial and Small Group Discussion: Common mindset changes and how those lead to changes in actions and discussions.  How those changes foster healthier teams.  Material from Kent McDonald, “Agile PM Leadership”, coupled with my own, will be used.  </p>\n\n<p>Tutorial and Discussion: Topics are characteristics of highly-collaborative and high-performing teams; Servant leadership - what is it, really? and Trust on teams.  Material from Jean Tabaka, Robert Greenleaf and Diana Larsen will be used as the foundation of this brief tutorial.  It sets up the ability to discuss what the Agile Coach should and should not “be” for the team.  Examples: hub of communication, subject matter expert, professional facilitator, guardian of quality.  </p>\n\n<p>Tutorial: The journey leaders, managers, stakeholders are on to undergo their own mindset shift and leadership style changes (along with the resulting shifts in actions).  </p>\n\n<p>Simulation: A set of team scenarios and the question, “What should a great Agile Coach do?”  These will be thorny situations (much like real life).</p>\n\n<p>Brief Experience Report:  What critical skills or competencies I had to tune-up or acquire to achieve my own mindset shift and become a “recovering PM-command-and-control-aholic.”</p>\n\n<p>Reflection:  Guided reflection that allows the participant to consider the ideas expressed and make a plan for applying them to their own situation.   Allows the participants to consider how  this will affect them - both at a conceptual level and at a “what will I do differently at work?” level.</p>\n\n<p>ps.  Thanks to all of you who made comments and suggestions.  Keep them coming!</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Workshop	2008
20081354	Agile Leadership: What Is It and How Do You Do It?	<div class="content">\n    <p>How <strong>do</strong> leaders lead when agile is implemented in the IT department? Are there principles of agile that can be used to create great leaders corporate-wide? How can leaders support agile teams?  </p>\n\n<p>Essentially, what is agile leadership? And how do it? What does it mean to lead in an ‘agile manner’?</p>\n\n<p>In this tutorial we will collaborate on defining agile leadership starting with the principles of agile (i.e., customer involvement, iterations, test first, collaboration), and the values in the APLN Declaration of Interdependence (increase return on investment, deliver reliable results, expect uncertainty, unleash creativity and innovation, boost performance, improve effectiveness and reliability). After prioritizing these definitions, we will look at any exiting tools to assist leaders in being agile and create new tools based on the attendees’ experiences and thoughts. Solutions, tools, and experiences will be posted on the conference wiki and APLN Leadership Wiki of Knowledge (LWOK). </p>\n\n<p>We will address topics such as motivating by creating a collaborative environment, providing interesting work and letting people choose what they want to do in your company, trust, transparency of information, and when to step up and when to step back. \nThis half-day tutorial may be held twice – once for project leaders and team leaders and once for senior leaders and product managers if the review committee feels it would be useful in reaching different audiences. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Brief overview of topic (10 mins); brainstorm definition of agile leadership, group and prioritize (30 mins); starting with highest priorities, break into small groups (10 mins); discuss existing tools for the leadership concept, find other tools and processes based on attendees experiences (30 mins); report out (20 mins); work through the next set of prioritized list and report out (60 mins); discussion of ideas and takeaways and wrap up (30 mins).</p>\n\n<p>We thought about doing this is 90 minutes but we think the ‘What Is Agile Leadership?’ might be a lively topic and take some time and the tools will be the real outcome. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Leadership & Teams	Tutorial	2008
20081791	Iteration Zero: Starting a new Agile project	(No description)	Leadership & Teams	Workshop	2008
20080890	Implementation Agile Internationale chez Yahoo	<div class="content">\n    <p>******** Session Description for Program Guide ******** </p>\n\n<p>L’objectif de cette session est de partager et commenter l’approche de Yahoo pour mettre en place la méthode SCRUM au niveau international. Expérience relativement récente puisque le démarrage à eu lieu début 2007 sur la base du volontariat des équipes locales à implémenter la méthodologie Scrum après avoir été formées. </p>\n\n<p>Chez Yahoo, l’international se définit comme tout ce qui n’est pas les US ou join venture et se décline en 3 régions :</p>\n\n<ul><li>Europe (FR, UK, GE)</li>\n<li>Asie (TW, HK, KR, AU, SG) </li>\n<li>Emerging Market (IN, LATAM)</li>\n</ul><p>La présentation décrira les étapes de la mise en place du “process” dans les équipes de Yahoo! International, les problèmes rencontrés, les solutions préconisées, ainsi que les problèmes résiduels et les résultats concrets obtenus à chaque étape. </p>\n\n<p>******** End of Session Description for Program Guide ******** </p>\n\n<p>Trois grands thèmes seront abordés :</p>\n\n<ul><li>Implémentation: Choix d’implémenter en premier, dans tous les pays, un framework commun indépendant des méthodes agiles</li>\n<li>Déploiement: Choix de Scrum comme la méthodologie de référence sur la base du volontariat (certains projets sont toujours gérés en Waterfall)</li>\n<li>Support Opérationnel: Choix de mettre en place des équipes locales de coachs, fédérés au niveau international</li>\n</ul><p>Yahoo a décidé de mettre en place une solution adaptée à son contexte mais qui n’est pas supposée pouvoir fonctionner ailleurs sous le même format. L’expérience de Yahoo servira de support pour des échanges avec les participants, sur les 3 thèmes proposés, afin d’identifier les difficultés et bénéfices réels constatés dans d’autres entreprises. </p>\n\n<p>Cette session vous permettra :</p>\n\n<ul><li>De connaître l’approche retenue par Yahoo et d’en discuter la pertinence</li>\n<li>De donner votre propre retour d’expérience sur ces thèmes dans un contexte de forte distribution géographique des équipes et de grande diversité culturelle </li>\n</ul><p>Une version réduite de cette présentation, centrée sur l’expérience Européenne uniquement, a été présentée à la dernière conférence ScrumAlliance en Novembre 2007 sur Londres.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Chansons FranÃ§aises	Talk	2008
20086922	Chansons franÃ§aises - Introduction	<div class="content">\n    <p>Introduction de la scène des Chansons Françaises.</p>\n\n<p>This is the introduction to the Chansons françaises stage.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Chansons FranÃ§aises	Other	2008
20084016	"Agile ?! Ã§a ne marchera jamais chez nous !"	<div class="content">\n    <p><strong>Le choc…</strong></p>\n\n<p>Le passage à une approche agile constitue un choc majeur pour toute entreprise. Le changement perpétuel, la transparence, la responsabilité partagée: ces ex-buzzwords du management font maintenant partie du vécu journalier de chaque collaborateur.<br />\nCe bouleversement transformera les équipes, les processus et même la culture d’entreprise, ce qui génère souvent des peurs et des questions légitimes.  </p>\n\n<p><strong>…salutaire!</strong></p>\n\n<p>Voir l’entreprise comme un système complexe adaptatif permet de comprendre les conséquences potentielles d’un tel changement d’approche, afin de mieux l’accompagner, surmonter le traumatisme initial et ainsi réussir la transition.  </p>\n\n<p>Cela nous permet également d’observer quels sont les problèmes courants décelés et les difficultés typiques rencontrées lors d’un tel changement, en mettant en lumière les différences avec les méthodes traditionnelles.</p>\n\n<p><strong>Application interactive</strong></p>\n\n<p>La partie pratique permettra aux participants d’appliquer les concepts présentés, lors de jeux de rôle basés sur des cas concrets vécus par le présentateur. Les situations choisies seront jouées par des participants, avec leur propres réactions, et commentées voire rejouées par les participants “spectateurs” afin de trouver d’autres solutions (théâtre-forum basé sur le travail d’Augusto Boal).</p>\n\n<p>Le tutoriel se termine sur des conseils pour la communication de ce changement profond à la direction, ce qui permettra aux participants d’augmenter leurs chances des succès lors de la transition de leur organisation à une approche agile. </p>\n\n<p>Le temps de réponse aux questions permettra d’enrichir la discussion avec le vécu des auditeurs.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Introduction: Agile est plus qu’une méthode ! (10’)</p>\n\n<p>Présentation des éléments touchés par les approches agiles en considérant l’entreprise comme un système complexe adaptif (45’):<br />\n* la culture d’entreprise (prise de décision, organisation apprenante)<br />\n* les processus (approche du risque, gestion du changement)<br />\n* l’équipe (facettes de la communication, gestion de la transparence)</p>\n\n<p>Réponse aux questions concernant l’approche “système complexe adaptatif” (10’) </p>\n\n<p>Théâtre-forum basé sur des cas vécus (90’):<br />\n* proposition d’une approche Agile à un directeur<br />\n* introduction d’une approche Agile dans une équipe existante<br />\n* présentation d’une approche Agile à un client  </p>\n\n<p>Conseils pour la communication en interne (10’)</p>\n\n<p>Réponse aux questions (10’)</p>\n\n<p>Total: 175’</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Chansons FranÃ§aises	Workshop	2008
20080788	Jeu de Direction	<div class="content">\n    <p>Abstract\nQu’attendez-vous d’un chef? </p>\n\n<p>• Qu’il s’en aille? </p>\n\n<p>• Qu’elle vous prenne fermement par la main? </p>\n\n<p>• Qu’il renforce l’esprit d’équipe? </p>\n\n<p>Dans ce jeu de trois heures, nous essayons, ensemble avec vous, de trouver une réponse à ces questions. Par l’expérience de jeu, nous espérons vous donner une meilleure vue sur: </p>\n\n<p>• Les différences de résultats. </p>\n\n<p>• Les différents goûts </p>\n\n<p>• Les effets de dynamique de groupe </p>\n\n<p>Nous faisons spécialement attention au lien entre ces trois thèmes et la pratique journalière des équipes de projet. Pour y arriver, après le jeu, nous allons vous expliquer trois modèles de direction. Un texte plus approfondi et la référence à quelques livres permettra d’aller plus loin pour ceux qui le désirent. </p>\n\n<p>Audience: Cet atelier concerne chaque personne ayant envie d’apprendre comment les paramètres de direction influencent ses projets et sa vie. Dans le jeu, aussi bien les animateurs que les autres participants apprendront comment ils vivent différentes sortes de direction. Par rapport à la gestion de projet, le jeu est intéressant pour tous ceux qui participent au projet: les utilisateurs, les développeurs, les gestionnaires de projet, les essayeurs, etc. </p>\n\n<p>Bénéfices estimés pour les participants</p>\n\n<p>Cette session vous montre l’influence du style de direction sur votre équipe. Elle vous fait réfléchir sur le style de direction que vous aimez utiliser et / ou aimez recevoir. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>See Leadership game for practical info\n<a href="http://submissions.agile2008.org/node/782" title="http://submissions.agile2008.org/node/782">http://submissions.agile2008.org/node/782</a></p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Chansons FranÃ§aises	Workshop	2008
20082980	Crossing Cultures	<div class="content">\n    <p>Cultural diversity has become the norm in the software industry. It’s not unusual to work with people from across the country or across the world.  </p>\n\n<p>Working with people from different cultures can be a great opportunity; it can also be challenging and puzzling.  </p>\n\n<p>In this session, we’ll use a simulation to explore what it’s like to work with people from a different culture.  </p>\n\n<p>We’ll look at the ways that culture determines how people decide, listen, and act. And we’ll learn several tools to reframe differences in order to reduce misunderstandings and improve productivity.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We’ll start with a brief explaination and discussion of culture.</p>\n\n<p>Participants will from small groups to create several “cultures” based on simple rules related to observable behavior (e.g., speach patterns, proximity, listening).  (10 minutes)</p>\n\n<p>Each group will work on a short project with people of their own “culture,” acting out the cultural norms they developed. (20 minutes)</p>\n\n<p>Then, the groups will mix and participants will work on a multi-cultural project.  (20 minutes)  </p>\n\n<p>After the project, we’ll explore what happened and how people responded to people from another “culture.”  </p>\n\n<ol><li>Mono-cultural project debrief: what was it like working with people like you?</li>\n<li>Multi-cultural project debrief: what was it like working with people different from you?</li>\n<li>Analyze interpersonal interactions</li>\n</ol><p>Discussion of tools for reframing differences.</p>\n\n<p>Work in multi-cultural groups to apply the tools to the multi-cultural project experience.</p>\n\n<p>Wrap up.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Chansons FranÃ§aises	Tutorial	2008
20082875	Vision Pluridisciplinaire: GÃ©nÃ©rer une charte de projet en un jour, en enfermant des gens de point de vue divers dans une salle	<div class="content">\n    <p>Je viens de recevoir la note d’acceptation du comité de programme. J’accepte de faire cette présentation le jeudi 7 août, de 8h30 à 12h00. Je suis également prêt à refaire cette présentation le vendredi, le cas échéant.</p>\n\n<p>Alain Désilets</p>\n\n<hr /><p><em>“The hardest single part of building a software system is deciding precisely what to build.” — Fred Brooks</em></p>\n\n<h1>Résumé</h1>\n\n<p>Dans un projet agile, le rôle du client est souvent le plus exigeant et le plus stressant. En effet, celui-ci est amené à prendre plusieurs décisions déterminantes pour le succès de projet, et ce, dans un nombre varié de domaines comme le modèle d’affaire, les utilisateurs cibles, date de lancement, etc.</p>\n\n<p>Dans ce tutoriel hautement interactif, les participants apprendront comment animer un atelier pluridisciplinaire (programmeurs, marketing, gestion, utilisateurs) d’une journée, afin de rapidement définir une charte de projet qui servira de guide à la prise de décision durant le reste du projet. Le tutoriel sera très pratique et les partcipants seront amenés à utiliser les techniques enseignées dans le cadre d’une simulation de projet fictif mais réaliste.</p>\n\n<p>La charte de projet couvrira des questions telles que:</p>\n\n<ul><li><p><strong>Objectifs d’affaire</strong> : Quels sont les objectifs de l’organisme ou groupe qui paie pour le développement de ce système?</p></li>\n<li><p><strong>Utilisateurs types</strong> : Qui sont-ils, quels buts finaux ont-ils quand ils utilisent le sytème, dans quel contexte (organisation, environnement) utilisent-ils le système?</p></li>\n<li><p><strong>Tâche Types des Utilisateurs</strong> : Quand les utilisateurs emploient le système, qu’est-ce qu’ils font concrètement avec le système afin d’atteindre leurs buts finaux?</p></li>\n<li><p><strong>Elevator statement</strong> : Si vous aviez à décrire ce produit à quelqu’un en 2 minutes (la durée d’un séjour dans un ascenseur), que diriez vous. Q.q.chos du genre : “Pour les UTILISATEUR PRINCIPAL qui doivent BUT PRINCIPAL, le NOM DU PRODUIT fera FONCTIONALITE PRINCIPALE. Comparé à des produits comme LISTE DE CONCURRENTS, ce produit permettra de AVANTAGE CONCURRENTIEL.</p></li>\n<li><p><strong>Span Plan</strong> : Dans quel ordre devrions nous implanter un support pour les différentes Tâches Types, afin d’arriver très tôt à un système minimal qui peut néamoins permettre des transaction complète et de haute valeur.</p></li>\n</ul><p>Les participants pratiqueront différentes techniques simples permettant aux différents intervenant de répondre à ces questions de façon collaborative et pluri-disciplinaire. </p>\n\n<p>Par exemple:</p>\n\n<p><strong>Le Card Storming:</strong>\n   <a href="http://wwww.outside-in-development.com/foundation/cardstorming.html" title="http://wwww.outside-in-development.com/foundation/cardstorming.html">http://wwww.outside-in-development.com/foundation/cardstorming.html</a></p>\n\n<p><strong>Les diagrammes d’affinité:</strong>\n   <a href="http://wwww.outside-in-development.com/foundation/affinity_diagram.html" title="http://wwww.outside-in-development.com/foundation/affinity_diagram.html">http://wwww.outside-in-development.com/foundation/affinity_diagram.html</a></p>\n\n<p>Pour plus de détails sur le type de concepts couverts dans ce tutoriel, consultez le site de Jeff Patton:</p>\n\n<p><a href="http://wwww.outside-in-development.com/contents.html" title="http://wwww.outside-in-development.com/contents.html">http://wwww.outside-in-development.com/contents.html</a></p>\n\n<h1>Déroulement</h1>\n\n<ul><li><p>Accueil (~ 10 mins)</p></li>\n<li><p>Présentation sur la difficulté du rôle du client (~ 15 mins)</p></li>\n<li><p>Mise en situation (~15 mins)</p>\n\n<ul><li>On distribue une feuille décrivant une situation fictive, mais réaliste.</li>\n<li>La situation décrit différents intervenants (marketing, développeurs, gestion, etc), et on demande des volontaires pour remplir chacun de ces rôles.</li></ul></li>\n<li><p>Briser la glace (~15 mins)</p>\n\n<ul><li>Créer un cluster de noms de films.</li></ul></li>\n<li><p>Pause (~ 10 mins)</p></li>\n<li><p>Travail collaboratif (~ 45 mins)</p>\n\n<ul><li>Établir les objectifs d’affaire (~ 15 mins)</li>\n<li>Établir une liste d’utilisateurs types (~ 15 mins)</li>\n<li>Établir une liste de tâches types (~ 30 mins)</li>\n<li>Rédiger un elevator statement (~ 15 mins)</li>\n<li>Établir un Span Plan (~ 20 mins)</li></ul></li>\n<li><p>Retour sur l’expérience (~ 30 mins)</p></li>\n</ul><p><strong>Total:</strong> 140 mins</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Voir ci-dessus.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Chansons FranÃ§aises	Tutorial	2008
20082816	Contractualisation des projets Agiles	<div class="content">\n    <p>Les méthodes agiles sont de plus en plus utilisées au sein de tous types d’organisations pour les équipes de développement internes. Cela est beaucoup moins vrai pour les développements sous-traités. Le premier obstacle, et peut-être le principal, est la difficulté par nature de contractualiser un projet en méthodes agiles pour un coût fixe.</p>\n\n<p>Quelles alternatives à la pure régie peut-on proposer à nos acheteurs ?\nComment rendre compatible un projet agile avec un appel d’offre public ?\nDoit-on choisir un sous-traitant uniquement sur des critères de prix ?</p>\n\n<p>Voici autant de questions auxquelles nous tenterons de trouver une réponse.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Voici une nouvelle proposition d’organisation de la session :\n+ 15 minutes : Un rappel de la problématique de contractualisation des projets et une vision personnelle du problème et des dérives posés par les contrats au forfait coût/périmètre/délais fixes</p>\n\n<ul><li>15 minutes : Je présente plusieurs sous-thèmes que lesquels je peux apporter des retours d’expérience. Chaque thème sera présenté en 1 ou 2 phrases et l’assistance pourra voter pour prioriser les thèmes à aborder en fonction de leur volonté d’entendre des idées sur ces points ou de leur capacité à apporter leurs propres retours d’expérience.</li>\n</ul><p>Thèmes en vrac :</p>\n\n<ul><li><p>Il faut faire les estimations en commun</p></li>\n<li><p>Comment choisir un fournisseur sur d’autres critères que le prix journalier</p></li>\n<li><p>Peut-on s’engager sur la qualité ?</p></li>\n<li><p>Peut-on juger d’un rapport qualité prix d’un fournisseur Agile ?</p></li>\n<li><p>Peut-on forfaitiser certaines parties d’un projet agile ?</p></li>\n<li><p>Comment font ceux qui forfaitisent tout le projet ?</p></li>\n<li><p>Quels modes de contractualisation mon entreprise a pu tester ?</p></li>\n<li><p>Peut-on juger à postériori qu’un sous-traitant a apporté un bon rapport qualité-prix ?</p></li>\n<li><p>Quels sont les problèmes spécifiques des appels d’offre publics ?</p></li>\n<li><p>Est-ce que ce thème intéresse les acheteurs de grande entreprises ?</p></li>\n<li><p>Tout autre thème apporté par l’audience…</p></li>\n<li><p>Différents types de contrats : coût fixe, délais fixes, forfaitisé par itération, qualité fixe, engagement de moyen pur, co-sourcing, forfaitisé par objectif, …</p></li>\n<li><p>59 minutes : Nos thèmes sont maintenant priorisés. Nous pouvons enclencher des échanges entre les participants sur chaque thème, l’un après l’autre. On doit pouvoir faire environ 5 thèmes mais l’idée est d’en faire autant que l’on peut dans le temps imparti, avec peut être une timebox max par thème. Pour chaque thème que j’aurais proposé, j’aurais un support de slides pour être contributeur actif dans la discussion. Pour les autres thèmes, je serais juste facilitateur. Les échanges seront synthétisés le plus possible sur tableau blanc qui seront pris en photo pour être publiés  (Y a t il un wiki Agile 2008 ? J’imagine)</p></li>\n<li><p>1 minute Celebrate !</p></li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Chansons FranÃ§aises	Workshop	2008
20080550	La technique d'interview des "Neuf Cases" pour mieux comprendre votre client	<div class="content">\n    <p>Extreme Programme exige du “Client XP” d’écrire des User Stories. Un format commun est “Comme &lt;role&gt; je veux &lt;quelque chose&gt; pour atteindre &lt;un but&gt;.” Est-ce que vous avez des difficultés pour trouver les roles, quelques choses et buts?</p>\n\n<p>Est-ce qu’un client vous a déjà demandé d’implementer une solution, pour conclure “c’est bien ce que j’ai demandé, mais ce n’est pas ce dont j’ai besoin”? Est-ce que vous avez déjà eu de difficultés pour impliquer des intervenants importants dans vos projets? Est-ce que vous avez déjà eu de la peine pour vous mettre d’accord sur les critères de recette? Est-ce que vous avez travaillé sur un projet sans vision commune, où tout le monde allait dans une direction différente?</p>\n\n<p>Si oui, la technique d’interview des “9 cases” peut vous aider à partir du bon pied.</p>\n\n<p>Les neuf cases representent la combination de trois sujets avec trois types de questions. On parcourt les cases en sequence pendant une interview.</p>\n\n<table><tr><td> </td><td><strong>Problème</strong></td><td><strong>Impacté</strong></td><td><strong>Vision</strong></td></tr><tr><td><strong>Ouvert</strong></td><td>1</td><td>4</td><td>7</td></tr><tr><td><strong>Contrôle</strong></td><td>2</td><td>5</td><td>8</td></tr><tr><td><strong>Confirmation</strong></td><td>3</td><td>6</td><td>9</td></tr></table><p>Les trois sujets (les colonnes) sont:</p>\n\n<ul><li><p>Quel est le <em>problème</em> que le client ressent? Quelle est la cause de ce problème?</p></li>\n<li><p>Qui est <em>impacté</em> par le problème? Et comment?</p></li>\n<li><p>Comment est-ce que le monde change quand le problème est résolu? Quelle est notre <em>vision</em> du futur?</p></li>\n</ul><p>Les trois types de questions (les rangées) sont:</p>\n\n<ul><li><p><strong>Question Ouverte</strong>. Demandez le client de raconter, d’expliquer.</p></li>\n<li><p><strong>Question Contrôle</strong>. Demandez les faits derrière l’histoire</p></li>\n<li><p><strong>Question Confirmation</strong>. Expliquez au client ce que vous avez compris et verifiez que c’est bien correct avant de procéder. Si le client répond OUI, vous pouvez aller vers le sujet suivant. S’il répond NON, revenez en haut de la colonne pour demander des questions ouvertes.</p></li>\n</ul><p>La technique de vente “<a href="http://www.solutionselling.com">Solution Selling</a>” utilise ce simple format de dialogue, qui vous permet de découvrir ces trois éléments et de se mettre d’accord sur les critères de recette. A la fin de l’interview, vous comprenez le(s) problème(s) de votre client, qui bénéficiera de la solution et vous avez une vision commune du monde, comme il sera quand le problème sera résolu.</p>\n\n<p>Nous pouvons utiliser les résultats de l’interview directement pour écrire nos User Stories:</p>\n\n<ul><li><p>La colonne “impacté” nous donne les rôles</p></li>\n<li><p>La colonne “vision” nous dit ce dont le client a vraiment besoin.</p></li>\n<li><p>La colonne “problème” nous dit pourquoi il en a besoin.</p></li>\n<li><p>La “confirmation” de la “vision” nous donne des critères de recette.</p></li>\n<li><p>Les questions et répones dans la rangée “Contrôle” nous donne les besoins non-fonctionnels.</p></li>\n</ul><p>Dans cette session interactive, vous jouez un jeu pour apprendre à appliquer ces techniques d’interview. En jouant le jeu, vous rencontrez deux autres participants à la conference. A la fin de la session, vous avez de nouveaux outils que vous pourrez utiliser dans des interview, pour écrire des user stories ou pour rencontrer d’autres participants du congrès.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Structure de la session</strong></p>\n\n<ol><li><p>10 min: On explique la technique, les règles du jeu.</p></li>\n<li><p>3x7 min: Les participants jouent en groupes de trois. Chacun joue à son tour les trois rôle: client, interviewer, observateur/arbitre. Le but du jeu est d’arriver dans la 9ième case (la vue commune avec le client), en suivant les règles des “9 cases”. L’observateur/arbitre vérifie que les joueurs suivent les règles.</p></li>\n<li><p>15 min: Après un tour, il y a une discussion plénaire sur les experiences, difficultés et résultats. Nous rassemblons les astuces des participants.</p></li>\n<li><p>3x7 min: Dans le deuxième tour, les interviews continuent. Chaque participant rejoue les trois rôles, en utilisant les astuces de la discussion.</p></li>\n<li><p>20 min: Discussion finale. Les presentateurs lient la technique à l’écriture des user stories et expliquent encore quelques astuces.</p></li>\n</ol><p><strong>Remarks</strong></p>\n\n<p>Cette session a déjà été presentée aux XP Days Benelux. Voir le <a href="http://dnicolet1.tripod.com/agile/index.blog/1765142/nine-boxes/">billet par Dave Nicolette</a></p>\n\n<p>Cette session est utile en début de conference: les participants recontrent et apprennent beaucoup sur les deux autres participants dans le jeu. Nous demanderons les participants d’utiliser cette technique pendant la conference, pour rencontrer d’autres participants. Ceux qui le veulent, peuvent échanger leurs experiences et astuces avec les autres participants et les organisateurs de la session.</p>\n\n<p>Cette session a été déposée aussi pour “<a href="http://submissions.agile2008.org/node/549">Customer and Business Value</a>”: il est plus facile de participer dans une telle session dans sa propre langue. Les organisateurs sont bilingues Anglais/Francais, donc ils peuvent aider des participants des deux session à se rencontrer avec la technique de dialogue en commun.</p>\n\n<p>Un simulateur du jeu est disponible au <a href="http://askforhelp.nayima.be/NineBoxes.html" title="http://askforhelp.nayima.be/NineBoxes.html">http://askforhelp.nayima.be/NineBoxes.html</a> Vous pouvez y télécharger le résumé du jeu qui sert comme aire de jeu. Pourquoi la sucrerie dans la simulation? Les participants recoivent des sucreries pour indiquer le type de question qu’il vont poser. S’ils arrivent à la case 9 il peuvent manger la sucrerie.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Chansons FranÃ§aises	Tutorial	2008
20083471	Mon langage est plus gros que le tien	<div class="content">\n    <p>Depuis longtemps fascinés par l’expressivité  et l’élégance de ces langages, nous cherchons à comprendre comment articuler les pratiques XP -\nTDD, Binômage, remaniement du code, itérations - et le paradigme fonctionnel; à identifier les points faibles et forts de ces langages\npar rapport au paradigme dominant - l’objet - dans le cadre de processus de développement agiles; à convaincre le plus grand nombre, enfin, de la pertinence de modifier nos modes de pensée dans le sens où ces langages nous y invitent. </p>\n\n<p>Le paradigme de la programmation fonctionnel - tout est <em>fonction</em> - est historiquement le plus ancien modèle de programmation. Il a connu son heure de gloire dans les années 60-70 avec la famille de langages Lisp et Scheme et les promesses de l’intelligence artificielle, au point que certains ont envisagé de construire des machines Lisp. Après une longue éclipse, pendant laquelle ces langages, devenus les jouets favoris des universitaires et théoriciens, ont éclos en une multitude de dialectes, une nouvelle génération connaît un renouveau - limité certes, mais perceptible - de popularité. Haskell, OCaml, Scala, Erlang: ces noms sont désormais connus au-delà des symposiums académiques. </p>\n\n<p>Cet atelier a pour objectif de comparer la mise en oeuvre des principes de codage d’XP, sur un problème métier relativement complexe, entre le paradigme fonctionnel et le paradigme objet. Plus particulièrement, évaluer la pertinence du paradigme fonctionnel par rapport:\n - au développement dirigé par les tests;\n - au remaniement de code;\n - à l’évolution fonctionnelle.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Cette session pourrait se dérouler comme suit:</p>\n\n<ol><li>Introduction et motivation du problème que l’on souhaite résoudre.  (15’) \n<ul><li>le problème de l’eexpression de la validation de formulaires</li>\n<li>présentation et critique d’une solution en Javascript</li>\n<li>pourquoi vouloir utiliser Haskell ?</li></ul></li>\n<li>Introduction à la programmation fonctionnelle avec Haskell (15’)\n<ul><li>résumé du langage (une feuille de synthèse est mise à disposition)</li>\n<li>présentation d’un problème jouet en TDD </li></ul></li>\n<li>Dojo TDD en Haskell (60’): Développement d’un langage de validation de formulaires. Selon le nombre de participants: \n<ul><li>sous forme de randori (rotation par paire des programmeurs)</li>\n<li>sous forme de kata interactif</li></ul></li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Chansons FranÃ§aises	Workshop	2008
20083478	Test-Driven Requirements: beyond tools	<div class="content">\n    <p>Executable requirements looks like a great technique, just as using tests as specification sounds like a great idea. These techniques and concepts are radically changing the way software can be specified and produced in agile teams. On the other hand, FIT has been out for a while and no big revolution in software development happened (yet?). Was FIT only “another nice tool” to support agile development ? Are we expecting better tools to start the revolution ? Or did we just miss the point of using tests for defining requirements ?</p>\n\n<p>The objective of this session is to put collaboration on top of any test-driven requirements initiative. Many organisations focus on implementing tools like FIT/FitNesse from a testing point of view, trying to make use of the many different table formats provided in order to specify as many tests as possible, thinking that, tables being more readable than code, subject matter experts with no technical background will adopt the tool. This session will put an emphasis on building specifications using tests that really capture examples provided by the user or product owner. No tool will be used so as to avoid limitations and constraints related to specific tools.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session is divided into 2 parts.</p>\n\n<p><strong>First Part: “Highlight the problem” exercise (30 mins)</strong>\nIn this exercise, 4 persons (or 4 small teams) will participate to a communication game that will bring the communication problems at the front of the scene: one is the user, one is the product owner, one is the development team, and one is the so-called independant validation team. The exercise is divided into 4 steps:</p>\n\n<p>1st step: the user makes some construction using blocks that the 3 other teams are not allowed to see (e.g. they will be out of the room)</p>\n\n<p>2nd step: product owner enters the room and is allowed to see the finished user’s construction</p>\n\n<p>3rd step: development team and validation team enter the room but are still not allowed to see the user’s construction (it will be hidden by some device), and they will not see the product owner either (they will be back to back for instance). The product owner then describes the construction to the development team who has to reproduce it the same way (NB: the product owner cannot see what the development team is doing). The dev team is given the same set of blocks as the client used (we can make the game harder by giving more blocks). The validation team on its side cannot see either of the constructions (user’s one and dev’s one). It should writes acceptance tests for the construction based on the description of the product owner.</p>\n\n<p>Last step: the validation team looks at the development team’s construction and tells whether it meets user’s construction (they’ve still not seen the user’s construction).</p>\n\n<p>This exercise is not meant to just highlight the communication problems, the audience will try to identify patterns of communication regarding how examples are used to support descriptions in a natural and spontaneous communication.</p>\n\n<p><strong>Second part: “best practices” workshop (60 mins)</strong></p>\n\n<p>The audience will be divided into small teams to work on a case study. Each team will encompass different roles of a software development projects. One mandatory role is the user, who will be diffusing the business needs based on interactions with the other roles. Each team will try to write specifications, using tests for capturing real user’s examples or business requirements. This will last approximately 30 mins. The other 30 mins will be a retrospective in which:</p>\n\n<ul><li><p>every team will show its result and explain the choices they made,</p></li>\n<li><p>every participant will give his feedback about the exercise and will try to identify best practices for doing test-driven requirements.</p></li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Examples	Workshop	2008
20085042	Styles of TDD: First Tests	<div class="content">\n    <p>It’s easy to speak of test-driven development as if it were a single method, but there are several ways to approach it. In our experience, different approaches lead to quite different solutions.</p>\n\n<p>In this workshop, we’re not trying to decide which approach is best. Rather, we’ll use concrete examples to explore   </p>\n\n<ul><li>What goes into the moment of decision when a test is written?</li>\n<li>How do you think about the problem you’re trying to solve?</li>\n<li>What strategies or techniques help you write the first few tests?</li>\n</ul><p>This workshop is targeted at TDD/BDD Practitioners. Participants should be experienced with test-driven development in some form.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>20 minutes - Introduction</p>\n\n<p>120 minutes total: Create examples of first tests. (For 3 systems at\napproximately 40 minutes each)</p>\n\n<p>Given a brief specification of a system:</p>\n\n<ul><li><p>Write tests for 5-10 minutes - the first few tests you would write in\nreal life (but without actually implementing anything).</p></li>\n<li><p>Sketch out how you’d evolve the system from there - for 5-10 more minutes.</p></li>\n<li><p>Reflect for 20 minutes on how you decided what test to write.</p></li>\n</ul><p>To analyze the results, we’ll first characterize the styles used (e.g.,\nOutside-In, Interaction-Based, Presenter-First).</p>\n\n<p>Then we’ll share our reflections on writing first tests, and try to identify:</p>\n\n<ul><li><p>Strategies/techniques for dividing the problem</p></li>\n<li><p>Strategies/techniques for transforming the problem</p></li>\n<li><p>Strategies/techniques for identifying the next move</p></li>\n<li><p>Characteristics of the problem that made it mesh well with our approach</p></li>\n</ul><p>40 minutes, Closing Analysis - We’ll review all the examples together and see if any trends have emerged.</p>\n\n<p>The output of the workshop would be a list of avatars of TDD we see\nemerging, and ideas and techniques for how to write tests.</p>\n\n<p>Background material: “Avatars of TDD” by Naresh Jain, <a href="http://blogs.agilefaqs.com/2007/12/14/avatars-of-tdd/" title="http://blogs.agilefaqs.com/2007/12/14/avatars-of-tdd/">http://blogs.agilefaqs.com/2007/12/14/avatars-of-tdd/</a></p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Examples	Workshop	2008
20082781	Fashion Cycle	<div class="content">\n    <p>Drawing on the combined wisdom and energy of Project Runway, Scrum/XP and Artful Making this session will see small teams create an outfit, or outfits using a combination of conference clothing (especially Agile 2008 shirts) and a rag bag of fabric and accessories provided by the facilitator.   This will be a 3-hour Scrum/XP immersion. Teams will work with their customers to establish a vision for the outfit/s, and will then plan and execute three iterations, with appropriate reviews and retrospectives, to shape the direction of the product. </p>\n\n<p>= = = = = = = = = = = = = = = = = ======================</p>\n\n<p>So at every conference I have been to I am handed a bag that contains stuff: brochures, key rings, pens, executive toys… and some horrendously ugly tee shirt or sweat shirt thing that would cause the fashion police to make an immediate arrest if I were ever foolish enough to wear said article on the public streets.  Enough!  It is time to take our ugly conference clothing and create items of fashion and originality, clothing we can be proud to wear in public.</p>\n\n<p>This is a pure experiential session; it is playtime.  Drawing on the combined wisdom and energy of <a href="http://en.wikipedia.org/wiki/Project_Runway&#10;">Project Runway</a>, <a href="http://www.controlchaos.com/about/">Scrum</a>/<a href="http://www.xprogramming.com/what_is_xp.htm">XP</a> and <a href="http://www.creativityatwork.com/Newsletters/Dec03-Austin-innovation.html">Artful Making</a> this session will see small teams create an outfit, or outfits using a combination of conference clothing (especially Agile 2008 shirts) and a rag bag of fabric and accessories provided by the facilitator.  On hand to assist will be some savvy, fashion conscious colleagues, who will act as customers in the process.   </p>\n\n<p>Simply speaking, this will be a 3-hour Scrum/XP immersion.  Teams will work with their customers to establish a vision for the outfit/s, and will then plan and execute three iterations, with appropriate reviews and retrospectives at the end of each iteration, to shape the direction of the product.  The intent will be to both design and make the clothing, getting it “to market” by the end of the session.  </p>\n\n<p>Appropriate tools for measuring, cutting, stitching, etc. will be on hand.  At least one sewing machine will be provided (a shared resource) and just-in-time training will be offered on its use.  It is possible that detailed sewing tasks can be outsourced to a machine expert.  Attendees will be encouraged to bring their own conference clothing to be transformed.</p>\n\n<p>The session is aimed at those already familiar with Scrum and/or XP and possibly using an Agile approach in their organizations.  The purpose of the session is less about learning and more about practicing; its intention is to immerse the participants in a highly chaotic and creative activity in order to experience the <a href="http://www.creativityatwork.com/Newsletters/Dec03-Austin-innovation.html">Artful Making</a> qualities of release, collaboration, ensemble and play.  And more than that, the participants get to create something they actually want… well, possibly ;-) </p>\n\n<p>The outfits created in the workshop will be modeled, runway-style during the lunch break (which means this would be best run as a morning session).</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I’ll need a room with tables and chairs. Ideally, space to move freely will be appreciated too.</p>\n\n<p>I think four groups of 4-6 participants in each would be the maximum number of participants for this to work.</p>\n\n<p>Three hours is the minimum.  It is also the maximum.  It is just enough time to create a product and experience the collaborative process first hand.  It is not so long as to be laboring a point.</p>\n\n<p>The introduction and the initial customer discussion and planning will probably take 30-45 minutes.  I imagine the actual development sprints will be 30 minutes each.  Agile and Artful Making principles will be discussed between each sprint, as appropriate</p>\n\n<p>There will be no PowerPoint presentation and probably no hand outs.  The whole workshop is immersive and interactive.  It will be happily chaotic, with the potential for catastrophic and magnificent failure.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Examples	Other	2008
20083676	How Am I Supposed To Act?	<div class="content">\n    <p>Improv theatre is acting without preparation and without a net; given a situation, improv challenges you to participate in a new reality on the spot. As such, it’s a powerful means of learning, and exploring, stimulating creativity, engaging in rapid decision-making, and building empathy-all skills that come into play in agile development projects.  In this session, we’ll scratch the surface of improvisational theatre through a series of simple exercises and games. Session attendees are strongly encouraged to participate or simply to observe as their comfort level permits</p>\n\n<p>= = = = =  = = = = = = = = = = = = = = = = = = = = = = = </p>\n\n<p>“Act” is a word with a number of meanings and associations.  There’s the sense of performing a task (“let’s act on that now”); of presenting a show (“I acted in a local theatre group); of putting on a facade (“he’s trying to be brave, but it’s just an act”); of a role in an organization (“she’s acting CEO”); of behaving appropriately (“just act naturally”) or inappropriately (“she’s acting up”).  Acting gives us a chance to see things from another perspective, to put on a new identity, and to take it off at will, and to explore relationships and motivations of other people—and ourselves.</p>\n\n<p>Improv theatre is acting without preparation, without a script, and without a net; given a situation or an idea, improv challenges you and your colleagues to create, develop, and participate in a new reality on the spot.  As such, it’s a powerful means of learning, exploring, stimulating creativity, engaging in rapid decision-making, and building empathy—all skills that come into play in agile development projects.</p>\n\n<p>In this session, we’ll scratch the surface of improvisational theatre through a series of simple exercises and games.  We’ll try to establish safety, such that people need not feel awkward or silly—unless it’s part of the act.  Session attendees are strongly encouraged to participate or simply to observe as their comfort level permits.  Be prepared to drop your usual pretenses, to put some new ones on, and to have a few belly laughs along the way.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The first 20 minutes or so will include an introduction to the concepts of improvisational theatre (that’s the way we spell it here), how it evolved, why it evolved, and so forth.  The remainder of the first half of the session will be a set of basic improv activities, starting with warmup and communication exercises, and moving on to more complex games and scenarios in the second half.  We’ll be able to accommodate something on the order of 20 people who want to participate directly (up to 30 if I can recruit a partner that I have in mind, but he’s not registered on the site yet).</p>\n\n<p>I’ve given a session like this one at the AYE Conference in 2006, where it was warmly received by those who attended—it was a good mix of development consultants, some developers, some project management people, if I remember correctly.</p>\n\n<p>Games could include switching of games and roles; simulations of team dynamics; customer vs. programmer conflict; placating vs. blaming vs. super-reasonableness vs. loving vs. hating vs. acting irrelevantly; Bring Me A Rock (but with justification for the request); telephone games; people with secret agendas; games in which plans are made with insufficient information, where variation takes the plot away from the plan, etc., etc. </p>\n\n<p>One more thing, if it matters:  I can’t be present the first day of the conference.</p>\n\n<p>New:  Adam White has agreed to join me as co-presenter.  Adam is a small-a agile tester, and has been studying improv for the last couple of years.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Examples	Workshop	2008
20081753	Style and Taste in Writing FIT Documents	<div class="content">\n    <p>FIT is a framework that comes in various guises (Fit, Fitnesse, Fitlibrary), and can be used in different ways. The core principle behind writing FIT documents is to promote better communication between the stakeholders of a system. In principle, using FIT is a good thing, but in practice we find that some teams struggle to use FIT documents effectively. In this tutorial we will introduce some concrete examples of poor FIT style, and get the participants to refactor these examples to improve them.</p>\n\n<!-- break -->\n\n<p>By attending this session, you will:</p>\n\n<ul><li>gain an understanding into how to write FIT documents that communicate well</li>\n<li>learn some pitfalls to avoid when applying FIT in practice</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><h6>Proposed Timetable:</h6>\n\n<ol><li><p>(10-15 mins) - Introduction, including a brief introduction to FIT, and example driven development in general.</p></li>\n<li><p>(approx 1 hour): Laptops required. Work through a series of exercises. For each exercise, we will give the participants one or two FIT documents, and ask the participants to work in pairs to refactor the tables into something clearer. Each exercise is focused on a specific aspect of FIT document style. After each exercise we will present our proposed refactored document(s) and discuss.</p></li>\n<li><p>(15 - 20 mins): FIT in practice. We will wrap up the session with a short presentation covering some of the practical pitfalls to avoid when applying FIT in practice. This is based on our real experience of using FIT on several projects, some successful, some not so successful.</p></li>\n</ol><h6>Session History:</h6>\n\n<p>This session is being run at SPA 2008 -&gt; <a href="http://www.spaconference.org/spa2008/sessions/session164.html" title="http://www.spaconference.org/spa2008/sessions/session164.html">http://www.spaconference.org/spa2008/sessions/session164.html</a>. A non-interactive version of the material was presented at JavaZone 2007.</p>\n\n<h6>The Exercises:</h6>\n\n<p>We give the attendees an HTML file containing one or more FIT tables. The delegates work in small groups (2-3 people) to refactor the HTML into clearer FIT tables. For this they can use whatever text editor or HTML editor they choose. Each exercise is designed to illustrate different issues with FIT style.</p>\n\n<ol><li>“Copy and Paste Workflow”. This is 2 ActionFixture tables that have some common workflow. They can be combined into a single ColumnFixture table. </li>\n<li>“Tangled Table”. This is a complex ColumnFixture table that has lots of permutations but differing concerns. It can be made clearer by separating the concerns into separate tables.</li>\n<li>“Unnecessary &amp; Hidden Detail”. This is a table that contains unnecessary detail not relevant to the feature being described, and has detail that is hiding an implicit rule. We can make this example clearer by exposing the rule and removing the unnecessary detail.</li>\n<li>“Poor Naming”. This is a table that contains a detailed step by step ActionFixture to illustrate using a web search feature. We can make this example clearer by using language from the business domain instead of the implementation detail.</li>\n</ol><h6>FIT in Practice</h6>\n\n<p>In this part of the session we will run through some prepared slides talking about some of the common problems we have encountered with teams that use FIT. Most of this advice can be applied to any sort of agile testing.</p>\n\n<ol><li>Grow Your Language - teams should invent their own language for their own project</li>\n<li>Avoid Difficult Puzzles - make your examples specific, easy to diagnose</li>\n<li>Needs Maintenance - treat your tests as you would your code - refactor mercilessly</li>\n<li>Collaborative and Shared - collective “example” ownership, will require difficult conversations</li>\n<li>Avoid mini-Waterfall - a FIT document is no substitute for a conversation</li>\n<li>Give life to your Specifications - integrate them into your continuous integration and publish the results</li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Examples	Tutorial	2008
20080936	Behaviour Driven Development using Plain Old JUnit	<div class="content">\n    <p>It’s easy to write software. It’s harder to write software that’s simple, elegant, working and important. Examples help to drive conversation, avoid ambiguity, eliminate waste, make estimates more accurate, clarify design and produce software that matters. Participants will develop a small game in a Renga (taking it in turns), adding examples of desired application behaviour at both a system and unit level, while learning BDD concepts. Find out how BDD’s outside-in approach can reduce redundancy, allow good designs to emerge, and maintain English-readable code down to the lowest level.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><h2>The Story so far</h2>\n\n<p>I’ve been using the Game of Life to teach BDD for the last couple of years. It’s short, simple and very visual. The code for everything apart from the engine already exists (<a href="http://lunivore.com/code" title="http://lunivore.com/code">http://lunivore.com/code</a>). Following the feedback in comments, we’re going to show how JBehave 1.0 does BDD first (thanks again for feedback), then follow it up with ways of doing the same thing using JUnit 4.4. There are some established techniques which are already used to do this on commercial projects. We’ll introduce a couple of simple new tricks, brought to you from the sandbox of JBehave 2.0.</p>\n\n<p>Brian suggests we’ll have to deftly tease participants into using BDD’s terminology. Fortunately both Dan and I have huge amounts of experience at doing this!</p>\n\n<p>(JUnit 4.4 wasn’t out when JBehave was written. While it was impractical to use JUnit 3.8 for BDD, JUnit 4.X allows greater freedom… so much so that we’re taking a new look at what we can do with JBehave in combination with JUnit, for JBehave 2.0. Think of this as a sneak preview.)</p>\n\n<h2>Timetable</h2>\n\n<ul><li>00 mins - Introduction to JBehave and BDD</li>\n<li>10 mins - Intro to the Game of Life</li>\n<li>20 mins - The code base so far</li>\n<li>25 mins - Start the Renga!</li>\n<li>80 mins - How far did we get? Reflections</li>\n<li>90 mins - Close</li>\n</ul><h2>Introduction to JBehave and BDD</h2>\n\n<p>We give a brief overview of BDD, using the examples in JBehave to show how the principles of BDD can be carried into the code. JBehave’s examples include a fully BDD’d Tetris game. We explain how the code evolved from the scenarios, and demo both automated scenarios and unit-level code. We also show how the language of examples makes it easy to discuss the code in domain terms.</p>\n\n<p>We will also explain why we’ve chosen to use JUnit for the exercise, instead of JBehave.</p>\n\n<h2>The Game of Life - a Renga</h2>\n\n<p>We provide an existing code base, consisting of:</p>\n\n<ul><li>a gui front-end for the Game of Life</li>\n<li>a tiny Swing harness that can represent the grid in string format and allow interaction</li>\n<li>an Ant build to allow scenarios and examples to be run.</li>\n</ul><p>Participants are invited to bring their examples from the Examples Workshop, or to make them up as we go along (for reasons of time we’ll help them avoid some of the changes that need to be made to naive examples as each rule is introduced).</p>\n\n<p>Participants take it in turns to either add a new example or scenario, or make an example work (a Renga is like ping-pong pairing with multiple people). Dan and I will make the occasional suggestion, give help if needed, and explain BDD techniques as we go.</p>\n\n<p>We will encourage participants to:</p>\n\n<ul><li>use BDD vocabulary (given, when, then, should)</li>\n<li>refactor scenarios to allow contexts, events and outcomes to be reused</li>\n<li>consider how each element of behaviour adds to, and provides benefit to, the whole</li>\n<li>discover how ‘should’ makes it easy to think about appropriate responsibility at a unit level, leading to cleaner designs</li>\n<li>listen to the natural conversation that occurs when the language of examples is used instead of the language of TDD</li>\n<li>carry domain language further into their code and model reality more closely.</li>\n</ul><p>Throughout the session, we’ll address any points at which participants deviate from BDD’s practices. We’ll discuss what benefits might result from using eg: given / when / then / should, and help participants to talk about the code in the language of the domain. We’ll also introduce new concepts and ways of thinking about BDD (such as “outside-in” or “bug-driven development”) as we progress. Previous workshops using the game of life have involved a great deal of discussion. The renga is deliberately intended to give everyone who wants a turn at coding, while ensuring plenty of time for further discussion and Q&amp;A.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Examples	Workshop	2008
20083059	ET by Example: An exploratory testing experience	<div class="content">\n    <p>See ET in action, using interesting interactive shockwave applications found on the Net. With audience particpiation, we’ll explore for both quality and bugs. We’ll introduce software attacks, quicktests, session based testing and other techniques. See bug types that ET is best at finding, even with great TDD. Developers will see how to think like a tester, ready to write better tests, or prepped for explorations on your own projects. Testers will hear some of the latest ideas, and probably pick up testing tricks as well. We’ll also have fun!</p>\n\n<p>Original summary:\nErik Petersen will give you an experience of exploratory testing (ET), using examples of interesting interactive shockwave applications found on the Net.  With audience particpiation, we’ll explore applications for both quality and bugs.  We’ll introduce software attacks, quicktests, session based testing and other techniques.    We’ll also be looking at the types of bugs that ET is best at finding, even with a great TDD suite of tests. If you are a developer, we’ll get you thinking like a tester, ready to write better tests, or prepped for explorations on your own projects.  If you are a tester, you’ll get to hear some of the latest ideas, and probably pick up some new testing tricks as well.\nErik’s been heavily involved in the ET community since before he even knew what it was called, proposing the idea of paired ET independently of Kaner and Bach in 2001.  He has also proposed an exploratory testing framework, in an article in Nov 2007 Better Software magazine. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The whole session will be based around testing example applications.  SImilar sessions in the US, Australia, and New Zealand have been enthusiastically received.  Starting with simpler examples, we will move to larger programs, introducing ideas and techniques.  Many test ideas will be taken from the audience, who will be helping to drive the testing and bug discovery themselves as the session goes on.  Both developers and testers have said the session taught them a lot but was also fun at the same time.\nThere is a lot of background material and discussion in the comments as well now…..</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Examples	Tutorial	2008
20084942	Sleight-of-Quality : A Magical Approach to Testing	<div class="content">\n    <p>First 90 Words:</p>\n\n<p>Software testing requires a diverse set of skills, demonstrated in complex testing environments. The study of traditional magic principles can help software testers raise their awareness of discrepancies that can be found in these environments, leading to improved quality assurance. Software likened to a magical “trick” offers an interdisciplinary approach to the study of method and effect, enabling us as professionals to approach testing from new angles. Magic in this context will not only educate but will also entertain!</p>\n\n<hr /><p>Quality assurance is a field that requires a diverse set of skills, demonstrated in a myriad of complex testing environments. The study of traditional magic principles can help software testers raise their awareness of the discrepancies that can be found in these environments, leading to improved quality assurance. Software likened to a magical “trick” offers an interdisciplinary approach to the study of method and effect. Through the study of effect we can gain awareness of method which will enable us as professionals to provide quality assurance. Parallels can be drawn between the complementary roles of the developer and the tester, and the magi and his audience. Both can benefit from understanding one another’s perspectives and from seeing things from a different point of view.  Psychological principles and heuristics are key players in both fields, causing both the software tester and the audience to be deceived.  These factors, combined with misdirection of attention, provide a breeding ground for distorted perceptions that can allow bugs to go unnoticed.  Without awareness of the realities in which we, the observers, conduct our observations, we as testers are no better than laymen observing magic for the first time. This talk will discuss and exploit the principles of magic in order to better educate the software tester. This new approach will enable a heightened sense of awareness of the testing environment, and strengthen deductive and reasoning skills. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>On stage demonstrations of sleight of hand (magic) will be used to expose the audience to misdirection. The concept of ‘sleight-of-quality’ will be introduced through a discussion of the five pillars of magic.  A series of tricks will by preformed for the audience throughout the presentation.  With each trick, the audience will analyze their observations and will be exposed to each other’s perspectives.  As the presentation progresses, the audience will be given further tools to aid in their observation / software testing endeavors.  </p>\n\n<p>Taking the concept of method/effect and requirement/test result we will explore the parallel relationships and complimentary roles of the Software Developer/Tester and the Magician and their audience. After discussing what can be learned from each other’s perspectives, we’ll discuss heuristics and principles that can be used to used to raise both understanding of a magical effect and quality assurance in software.</p>\n\n<p>Next, we’ll talk about the psychological factors such as attention blindness and anchor bias that affect both disciplines.  A discussion of how these adverse psychological phenomenon can be combated will also take place. Towards the end of the presentation we’ll allow the audience to revisit the magic demonstration and software tested at the beginning of the talk with their new found tools, heuristics and perspective.</p>\n\n<p>We aim to leave the audience with a heightened sense of awareness of their testing environment and to strengthen their deductive and reasoning skills.  The discussion of magic in relation to QA will take most audience members out of their QA comfort zones and require them to unfocus and then refocus their attention in order to observe — a valuable still in and QA role.</p>\n\n<p>Exercises/Activities: Magic effects (can’t be disclosed) , Discussion of methods used to achieve effect, discussion of heuristics used to test software, observation tests throughout presentation, videos demonstrating the aforementioned psychological phenomenon.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Examples	Talk	2008
20080240	Backing the Truth into a Corner	<div class="content">\n    <p>Projects that fail do so mostly because they build the wrong thing, not because they do a bad job building whatever they do build. A big part of the difficulty is getting the users to tell us what they want. Traditional requirements engineering approaches have had mixed results, but requirements capture through “checked examples” (eg Fit -style tests) seems to work very well. Why should that be? Are there clues to be had from post-Aristotelian notions of “category” in the cognitive sciences? If so, how can that help find better examples?</p>\n\n<p>This is a follow-on from <a href="http://peripateticaxiom.blogspot.com/2007/10/exemplary-thoughts.html">a reasonably well-received talk</a> given at Agile 07.</p>\n\n<p>The session will be a work-torial. Or possibly tut-shop. </p>\n\n<p>Definitions are nice: the individually necessary and jointly sufficient properties of the members of the set that’s represented by a concept map very nicely onto table signatures, or class definitions, or what have you. It’s damn hard to get trained engineers to do that right, though, and near impossible to get paying customers (aka “ordinary people”) to do it at all. Why?</p>\n\n<p>The activity of “testing” (or, something that looks a lot like it) has become a primary one for developers in the Agile community. And it has spread away from the intimate action of coding test-first to become a requirements technique and project management tool. What has been discovered is the remarkable power of “checked examples” in programming, in requirements elicitation and gathering, in communication between project stakeholders, in measuring value. </p>\n\n<p>All these benefits come a ridiculously low cost compared with other techniques that have similar effects. Why are collections of examples so fecund, so seminal, so protean?</p>\n\n<p>If we (as system builders) could understand how and why example seem to be so much more comfortable a tool for ordinary people (as system users) than examples, maybe our example-enabled practices could be improved.</p>\n\n<p>It turns out that there are some interesting parallels between what we have discovered in the realm of specifying systems using examples and what has been discovered by <a href="http://psychology.berkeley.edu/faculty/profiles/erosch.html">those</a> who have chosen to explore by experiment <a href="http://bookshelved.org/cgi-bin/wiki.pl?TheBigBookOfConcepts">how humans understand the world</a> (rather than relying on <a href="http://faculty.washington.edu/smcohen/320/cats320.htm">the authority of long-dead Greeks</a>). And with the work of <a href="http://linguistics.berkeley.edu/people/fac/lakoff.html">those</a> who try to explore how the mechanics of being in and understanding the world works. What could that possibly mean? How can we use these parallels to enhance our practice?</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><h2>Talk</h2>\n\n<p>What definitions are. The classical view of category. Aristotle to Quine. Russell, his paradox. Diogenes and the chicken. It’s not news to anyone who’s been paying attention the last few millennia that there are issues around the use of definitions. And yet we still hear programmers banging on about “defining terms”. Why?</p>\n\n<p>An motivating example from my practice whereby folks have struggled mightily to give a rule for some thing or other  but proceeded very nicely with…examples. My current exemplar for this is do with the horrific difficulty of capturing how to avoid automatically generated FX trades trying to settle on a banking holiday when the currencies involved belong to cultures with different calendars. This example will be demonstrated: both the torturous (and unclear) rules and the limpid examples/tests will be shown. Aside: the release of the product that had these rules as its main feature was the first ever defect-free release made by that team, which they themselves attribute to having the “tests”. </p>\n\n<p>Examples. As a whole, pick a domain and give lots of examples.</p>\n\n<p>Examples are not created equal: If you wanted to explain to a Martian what a “bird” was, would you show them a penguin? Why not? An eagle? Why?</p>\n\n<p>From the earlier examples, which seem more compelling, more central? Why? How could we make use of that when gathering checked examples?</p>\n\n<p>Do techniques from the traditional, post-hoc testing world offer any help with finding exemplars? eg, partition into equivalence sets</p>\n\n<h2>Do</h2>\n\n<p>In groups, come up with examples, prototypes and exemplars for stuff. Explore how these might or might not help with systems work. Ways to do this that will (hopefully) break people out of their existing lines of thought on this:</p>\n\n<p><em>The “game” game Game</em> </p>\n\n<p>Inspired by <a href="http://www.galilean-library.org/pi7.html">Aphorism 66</a>.</p>\n\n<ol><li>the discussion is seeded with a simple definition of the category of “games” </li>\n<li>each player in turn must name a game that clearly is a game but is not covered by the definition, and extend the definition to cover it</li>\n<li>once no-one can think of any more games, the resulting dog’s breakfast of a definition will be recorded for posterity</li>\n<li>now, the example games will be sorted in an affinity exercise, and the resulting graph mined for prototypical or exemplar games. (watch out for cultural differences here, should be interesting)</li>\n</ol><p><em>Example Examples</em></p>\n\n<p>In groups, choose who has the most interesting (ie, obscure) domain.</p>\n\n<ol><li>the non-experts in the groups question the expert on the interesting domain, in two modes:\n<ul><li>try to capture an aspect of the domain using examples and rules, but <em>without</em> giving any concrete examples</li>\n<li>try to capture a different aspect, using <em>only</em> examples</li></ul></li>\n<li>which worked best? Which was easiest? Which gave the non-experts the greatest sense of confidence that they understood the domain?</li>\n</ol><p><em>My Exemplar Could Beat Up Your Example</em></p>\n\n<p>In groups, pick a domain reasonably familiar to all. Each person in turn must give an example form the domain that seems more central the the previous one. (Watch out for people doing abstraction here, I suspect)</p>\n\n<p><em>and more!</em></p>\n\n<h2>Ponder</h2>\n\n<p>Bringing it all back home: what does any of this suggest for the discover of really great examples to put into Fit (or whatever)?</p>\n\n<h2>Get</h2>\n\n<p>A handout containing an annotated bibliography and a summary of <a href="http://psychology.berkeley.edu/faculty/profiles/erosch.html">Rosch’s</a> ideas</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Examples	Workshop	2008
20084338	Patterns Poster Children	<div class="content">\n    <p>One of the premises of the Examples Stage, and indeed, of all of Agile, is that good code is the result not of any up-front design process, but is instead the fruit on an inductive, iterative, incremental stepwise process that exploits experience and hindsight. Software fitted to its requirements is one result of such a process. Mature abstractions, and yes, even patterns, are another. Patterns, are after all, distillations of commonalities drawn from the designs of real code.</p>\n\n<p>But, do we really think in terms of abstractions when we think about patterns either? Or do we think in terms of stereotypical examples, and look for design problems that resemble these?</p>\n\n<p>We beleive that, instead, when we think of a particular Design Pattern, we often think of a particular, poster child example of that pattern, and generalize from that. I do, anyway. This tutorial will explore a number of familiar, and a few not so familiar, design patterns through the lens of these Poster Child Examples. Familiarity with concrete settings where a particular pattern excels sets the stage for the recognition of opportinites to apply that pattern in our own code, no matter when in the lifecycle that opportunity arises.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We’ve been cultivating a substantial stable of these examples as part of our “Greatest Hits” development effort, and will cherry pick some of our favorites for this tutorial.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Examples	Tutorial	2008
20081167	Agile Distributed Teams	<div class="content">\n    <p>Attendees will learn techniques for joining and setting up “well formed teams” across distances, and how they can be applied. These ideas are built on proven principles of systems thinking, team process concepts, agile product development, human interaction and creativity. </p>\n\n<p>Why?<br />\nAgile methodologies warn how critical it is to co-locate teams in the same room, but this is not always practical.  Distributed, distant, or “virtual” teams are a reality of business today.  Offshoring, flex-work schedules, multiple corporate offices, and other forces create pressures to achieve results even when team members are scattered across the globe.”” </p>\n\n<p>Participants will learn strategies based our re-world <a href="http://agiledistributedteams.org">applied distributed agile</a> experiecnce made tangible for helping teams overcome old habits of waterfall(rigid thought or process focused) behavior. There are many classic example of waterfall behavior. For example, we have seen long cycle times and endless revision of requirements churn are the norm, status reporting takes up far too much time, and individual leaders dominate the team.  Management direction gets lost in a sea of process and tools instead of manifesting as tangible, quality product.  </p>\n\n<p>How can we realize the benefits of Agile product development - hyperproductivity, high-quality products, self-organization, elimination of waste, and rapid releases - when team members are not sitting next to each other?  </p>\n\n<p>This is the challenge of business in the 21st century: how to work effectively at a distance.  This seminar is where you can start to meet that challenge:  how to create and sustain tightly-knit, effective Agile distributed teams.</p>\n\n<p>Learning Objectives<br />\n- Enabling the power of self-organization - working with the component forces of distributed development to “pull” the team rather than “push” them<br />\n- Agile attractors and Dimensions of Distribution- universal forces of effective product development, values for basic human interaction, and how to negotiate the complexities of team interaction face-to-face or miles apart <br />\n- Setting up and improving your team’s protocols - examples of protocols that work for collocated teams vs. those that work for distributed teams, and criteria for evaluating your own team protocols <br />\n- Improving collaborative behavior - leveraging multiple feedback loops both within the team and with those outside the team<br /></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>If this is delivered presented to a large audience (50+) then it would be classic presentation with light Q&amp;A encouraged throughout. </p>\n\n<p>I would like to break this up into small group discussions (5-7 at a table) and then shift back to larger group summary. This format allows participants to personalize the information presented with a stronger feeling of value. I can orchestrate this well only for groups less than 45.  </p>\n\n<p>Co-Presenter: <a href="http://submissions.agile2008.org/user/1090">Derek Wade</a> Then we will demonstrate agile thinking through an interactive dialog and we can handle a larger format for small group discussion break out with large group summary (60-70 folks with small group discussions). </p>\n\n<p>We typically deliver <a href="http://www.3back.com/seminars/seminars-details">our seminars</a> using the above format.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Talk	2008
20084718	Ambassador Model for Effectively Distributed Agile Teams	<div class="content">\n    <p>Off-shoring and distributing project teams are a business driver in most organizations.  As the world becomes increasingly “flat”, organizations are seeking out operational and cost efficiencies by leveraging distributed teams.  These distributed teams are a common constraint on most technology projects today.  A tremendous challenge exists in scaling large programs to include geographically dispersed teams and team members.  To continue wide-spread adoption, Agile projects must find ways to thrive in distributed environments.  The Ambassador Model is a proven, effective approach to building highly productive distributed and off-shore agile teams.</p>\n\n<p>In this session, participants will learn the following:  </p>\n\n<p>1) The key components necessary in establishing en effective distributed model.<br />\n2) A success-proven model for distributing Agile programs.<br />\n3) How to facilitate resource-sharing across geographical borders.<br />\n4) Leveraging Ambassadors in helping overcome distributed program challenges.<br />\n5) How effectively established distributed Agile projects are as or more effective than traditional distributed teams.    </p>\n\n<p>There will also be an in-depth discussion and idea exchange regarding key challenges facing distributed teams:<br />\n1) Communication challenges<br />\n2) Cultural differences<br />\n3) Time differences<br />\n4) Cross-team dependencies<br />\n5) Shared resources  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Program:\n[30 min]: Introduce the Ambassador Model</p>\n\n<p>[15 min]: Discussion of key success drivers for geographically distributed teams</p>\n\n<p>[15 min]: Discussion of key challenges that need to be overcome</p>\n\n<p>[10 min]: Survey results of Ambassador Model Project Participants</p>\n\n<p>[20 min]: Q &amp; A </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Talk	2008
20080934	How Did We Adapt Agile Processes to Our Distributed Development?	<div class="content">\n    <p>We had development teams across three organizations. This was a collaborative project where each partner had a different customer and different objectives. Each partner had mutual dependencies on each other. The project had logistical challenges as well as technical.  We had encountered many issues involving communication. We were doing virtual pair programming. We had variable length iterations. We relied upon many different forms of synchronous and asynchronous communication. I propose to share our experiences in an informative and interactive session that will highlight our successes and failures.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I will explain our challenges using real examples and how we dealt with them using agile principles.  I will give details on how we used tools such as wikis, instant messaging, audio and video conferencing, etc. to facilitate our communication requirements.  I will provide real experience reflections on virtual pairing.  I will discuss software architectural strategies to meet the demands of multiple distributed projects.  Lastly, there will be a brief question and answer period.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Experience report	2008
20081224	Yahoo! Distributed Agile: Notes from the World Over	<div class="content">\n    <p>In an ideal world, everyone on an Agile team is collocated in one place, fostering cooperation and collaboration throughout the team’s growth.  Unfortunately, the real world isn’t that simple.  The current trend to fund teams split over multiple locations is inherently anti-Agile.  Does this mean that we cannot do Agile with distributed teams?  Distributed teams are a reality at Yahoo!  In the past three years of coaching, we have seen creative solutions that that have allowed distributed teams to uphold the Agile Manifesto principle of people over process.</p>\n\n<h2>(above is for program)</h2>\n\n<p>The Agile Manifesto values people and interactions over processes and tools.  However, the complexities of today’s business environments have led to the rise of development teams that span multiple continents and time zones.  Under these conditions, it is easy to fall into the trap of establishing more controls and more process to handle the resulting loss of fidelity in communication brought about by the increased distance between team members.  How can we uphold these values in such an environment? </p>\n\n<p>Distributed teams are a reality at Yahoo! In the past two and a half years coaching various Agile teams at Yahoo!, we’ve seen some creative solutions that teams have come up with that allow them to still live up to the Agile Manifesto principles, in spite of the geographic and chronological distances.</p>\n\n<p>The key principles that underscore the successful distributed Agile teams include:\n• Keep an even stronger focus on the people aspect of the teams. \n• Help the human dynamics succeed and use technology as an aid rather than a replacement \n• Minimize the pain, and if it’s not possible, distribute the pain evenly.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>In this experience report, we will compare and contrast three very different distributed projects, outlining both the tactical practices used as well as their strategies for humanizing work.</p>\n\n<p>Case #1: Podcast\nDistributed between Sunnyvale, CA and Bangalore, India\n12.5 hour difference\nEach quarter, fly one team to another team’s location\n- one quarter, Bangalore folks flew to Sunnyvale\n- Next quarter, Sunnyvale folks flew to Banglore\nReview (of previous sprint and/or release)\n- Release planning\n- Two week sprint at location\nLocal stands ups and planning rest of the time\n- Don’t force people to meet just for the sake of the stand up\nKey touch points between senior members of the team on a regular basis (e.g., Program Manager in India and Product Manager in Sunnyvale)\n- 3x a week during regular sprint cycles\n- Daily when closer to customer release\nAlternating pain:\n- Sunnyvale AM, India PM one day\n- Sunnyvale PM, India AM another day\nHuman Dynamics:\n- Full team each quarter at locale to build relationships\n- Share in pain of flying, time difference for phone call meetings</p>\n\n<p>Case #2: News Search\nDistributed between Santa Monica, CA and Trondheim, Norway\n9 hour time difference, with Norway’s work day ending at 5:00 p.m., 6 at the latest \nSprint planning meeting every two weeks:\n- 4:00 to 6:00 pm Norway, 7:00 to 9:00 for Santa Monica\n- 1 hour for review of previous sprint\n- 1 hour for Norway team and Santa Monica Product Owner to chat about upcoming Sprint backlog\n-  get details of user stories, acceptance criteria.   \nDiscussion limited to getting as much info from Product Owner\n Next day: Norway team breaks down tasks for Sprint, comes up with sprint plan\n- One hour sync-up meeting (4-5 Norway, 7-8 Santa Monica) to convey Sprint commitment and have any lingering questions answered.\n- Scrum Master in Norway and Product Owner in Santa Monica have sync-ups at least 3 times a week\n- Pre-sprint backlog grooming\n- State of the sprint feedback (risks, trends)\n- Scrum Master asks as local representative of Product Owner\nHuman Dynamics:\n- Minimize pain as much as possible by limiting time exposure\n- Increase communication based on the guiding principles behind the practice (e.g., collaboration on planning)</p>\n\n<p>Case #3: Answers\nTeam distributed between Santa Clara CA and London UK. 8 hour time difference\n-  Each location has cross functional teams, which include Scrum Masters, Product Owners, Development and QA\n- Use of Scrum of Scrums twice weekly to cross communicate issues between locations\n- Use of wiki with digital photos uploaded daily of each teams’ information radiators (story board, burndown charts)\n- Shared demos using collaborative tools to display work\n- Use of video conferencing for key meetings like process retrospectives\nHuman Dynamics\n- Make sure everyone has access to the same information, post everything to a shared collaborative workspace.\n- Use common times for meetings, even if it may be slightly uncomfortable for all involved\n- Reinforce the building of relationships by simplifying means of communication (instant messenger, telephone, video) and increasing frequency. </p>\n\n<p>About the authors: JF and I are both coaches at Yahoo! and have worked with the teams directly to aid them in making their initial choices and in their processes to inspect and adapt. We selected these three projects because despite some obvious differences with locations, products and team sizes, we wanted to show some of the “universals” which occurred as a result of distributed agile. Going deep into one or even two may not fully reveal how practices needed to be adapted in keeping with agile values. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Experience report	2008
20082884	Distributed Agile Outsourcing:  Growing a Practice Together	<div class="content">\n    <p>Elastic Path and Luxoft present in this case study a successful distributed agile project using outsourcing (both near and offshore). Elastic Path and Luxoft are both experienced agile practitioners, which helped immensely insofar as neither had to learn how to do agile while trying to overcome the difficulties in implementing agile in a distributed manner. The case study describes how Elastic Path and Luxoft overcame the challenges of daily meetings, the lack of face-to-face interactions, rapidly changing requirements, and rapid team size scaling all across a fourteen hour time difference.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The co-presenters will be representing both Elastic Path and Luxoft, presenting the material and conclusions as seen through the eyes of both an outsourcing vendor and an independent software vendor.  Questions will be encouraged and answered at any point and attendees will be encouraged to share their own distributed agile experiences.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Experience report	2008
20084483	Distributed Retrospectives	<div class="content">\n    <p>It seems to be a common understanding that retrospectives are the major practice that enable agility. However, conducting virtual retrospectives is often not straight forward.\nOne possibility is to conduct a retrospective at each site and then to swap the different findings afterwards. Another one is to facilitate a joint virtual retrospective using different virtual communication channels.\nIn this workshop we will explore practices and facilitation techniques that have helped in different global projects. Moreover we’ll indicate supporting tools and how to prepare such a workshop.</p>\n\n<p>It seems to be a common understanding that retrospectives are the major practice that make a process agile. Moreover, even in a non-agile environment, teams will benefit from continuous improvements generated by retrospectives. Therefore, members of distributed projects should get this opportunity of continuous learning as well. However, conducting virtual retrospectives is often not so straight forward.\nOne possibility is to conduct a retrospective at each site and either having an exchange via video conferencing during the workshop (if the time difference permits) or swapping the different findings after the retrospective. In this session I will show some options how the exchange of the learnings can possibly work.\nAnother possibility is to facilitate a joint virtual retrospective using different virtual communication channels. I want to indicate which tools support virtual retrospectives, how such a workshop can be prepared best, and how you can overcome the boredom – which is typically a bigger challenge for virtual retrospectives than for direct ones. </p>\n\n<p>In this session I want to point out some practices and facilitation techniques that have helped in the different global projects I have been working on. In addition I want to reveal what needs to be watched out for. My experiences are mainly based on large global agile projects in embedded and commercial software development.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Lecture style including active participation through intense discussions, taking the individual experiences of the audience into account. </p>\n\n<p>I could offer this session as well as a workshop. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Workshop	2008
20083765	Remote mentoring a distributed agile team	(No description)	Distributed Agile	Experience report	2008
20083875	Practical Considerations for Distributed Agile Projects	<div class="content">\n    <p>This presentation explores the special considerations an agile project leader must account for when planning, initiating, and running a distributed agile project.  Techniques, tools, and learnings from three project experiences are discussed.</p>\n\n<p>Discussion will also include anecdotes, failures, and successes based on the presenter’s past experiences as both an onshore and offshore member of outsourced and co-sourced distributed teams in the US, India, and China.</p>\n\n<p>This session is particularly useful for individuals new to or considering distributed agile projects.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session will be run as a presentation including examples of project artifacts and photos.  Questions will be encouraged, as will additional suggestions and experiences from the audience.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Experience report	2008
20084455	Insights into an Agile Adventure with Offshore Partners	<div class="content">\n    <p>This session is an experience report from CampusSoft in the UK. The focus is on their experiences using Agile in a multi-site software development environment, in the UK, Romania and India. We will look at the motivations behind outsourcing their work to India and why the relationship with their partners in India led them to try using an Agile approach. We will then look at some of the approaches which were important for them to be Agile and the challenges that they faced, such as communication, working practices and culture.</p>\n\n<p>I will summarize the key learning’s from this project and contrast it with some other agile engagements we at Conchango have been involved with, when using distributed Agile teams.  A collection of some of the key challenges will be presented along with guidance on the basic concepts you absolutely have to get right to ensure success, this will include:</p>\n\n<ul><li>Challenges facing distributed teams</li>\n<li>Key patterns for delivering with distributed teams</li>\n<li>How to facilitate successful iteration planning, reviews and retrospectives</li>\n<li>How to create an environment where distributed teams can collaborate effectively</li>\n<li>Tools and development environments</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ul><li>5 minutes - Background</li>\n<li>10 minutes - Going Agile</li>\n<li>10 minutes - What we learnt</li>\n<li>5 minutes - Summary and Q&amp;A</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Experience report	2008
20082233	Agile development within a distributed team	<div class="content">\n    <p>With more teams becoming globally distributed it is increasingly important to understand how to develop effectively in such an environment. Such globally dispersed teams face many challenges. Agile methodologies can help overcome those challenges and improve productivity in dispersed teams. This presentation, based on real experience, offers insights on how it can do that. The core elements that an agile methodology should have in order to function well within a dispersed team will be outlined, interspersed with real examples and warnings as appropriate.</p>\n\n<p><strong>Background</strong></p>\n\n<p>Increasingly it is more common for teams to be globally distributed. That is, having each team member in a different location and, usually across multiple time-zones. Working in a distributed team offers many challenges to effective development; challenges that are often compounded in traditional waterfall or loosely iterative methodologies. The communication burden is almost overbearing as the team struggles to maintain tacit knowledge and a shared project vision while keeping in daily step with each other. Understanding progress and providing useful and timely visibility to stakeholders can be haphazard at best. Anyone who has worked in such a team will be acutely aware of many of the issues. </p>\n\n<p><strong>Lessons learned from real experience</strong></p>\n\n<p>I don’t intend to dwell too much on the challenges. What I will do is offer suggestions based on lessons hard learned in a 3 year project in such an environment. Faced with the need to develop a new business critical product, in as timely a manner as possible, the organisation allowed our team flexibility to move away from the company mandated waterfall approach. As a team we identified an agile methodology that we thought would help address our key problems and began our journey.</p>\n\n<p>The warnings and advice offered in this presentation are based on that 3 year journey which departed from waterfall and moved to agile. We didn’t get it right the first time, in fact we continually evolved the methodology through our retrospectives to address our biggest pain points until after a year or so we had coalesced on what I would consider to be the needed core elements of an agile methodology that will work with a distributed team. There is still room for improvement of course, but the foundation is pretty stable. In addition to showing what worked, I’ll also comment on what didn’t work so well and why. I hope that these observations help provide that extra insight into why our methodology evolved as it did and why I recommend the approach I outline. </p>\n\n<p>Throughout the presentation I’ll show real world examples of artifacts and tools that we used to help us implement our methodology and comment on their effectiveness. I’ll talk about how we tried to overcome the communication bottleneck that you experience in a distributed team and how it is important to adhere strictly to certain protocols in communication to ensure a level playing field. Again we could have done better in some areas and I’ll highlight those as warnings to look out for.</p>\n\n<p><strong>In Summary</strong></p>\n\n<p>In summary then the presentation will detail the core elements that we found an agile methodology should have in order to function well with a distributed team. This will be interspersed with real examples and warnings as appropriate.</p>\n\n<p>The hope is that anyone involved in a distributed team, or hoping to do agile development in a distributed team, could take this information and use it to help define for themselves a good starting point for an agile methodology tailored for their situation. By heeding some of the lessons we learned I’d hope it would be possible to avoid making some of the mistakes that we made. Finally, and most importantly, I’d also hope that attendees would have confidence that agile development can not only work in a distributed team, but it can work very well, benefiting both team and organisation.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Essentially this will be a talk with some discussion. Hopefully there will be attendees with similar (or not) real experiences and I’m hoping to have some discussion time to capture either reinforcing or opposing experiences. This would probably happen at the end of the talk, however if it can be interspersed throughout the talk to make it more interactive I’ll do that.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Talk	2008
20081442	Fully Distributed Scrum:  The Secret Sauce for Hyperproductive Outsourced Development Teams	<div class="content">\n    <p>Authors:\nJeff Sutherland, Ph.D.                  Guido Schoonheim              Eelco Rustenburg            Maurits Rijk\n         Scrum, Inc.                             Xebia b.v.                             Xebia b.v.                  Xebia b.v.\n    Somerville, MA, US                   Hilversum, Netherlands    Hilversum, Netherlands Hilversum, Netherlands\n <a href="mailto:jeff.sutherland@computer.org">jeff.sutherland@computer.org</a>    <a href="mailto:gschoonheim@xebia.com">gschoonheim@xebia.com</a>   <a href="mailto:erustenburg@xebia.com">erustenburg@xebia.com</a>  <a href="mailto:mrijk@xebia.com">mrijk@xebia.com</a></p>\n\n<p>Scrum was designed to achieve a hyperproductive state where productivity increases by 5-10 times over industry averages and many collocated teams have achieved this effect. The question for this paper is whether distributed, outsourced teams can consistently achieve the hyperproductive state. In particular, can a team establish a localized velocity and then maintain or increase that velocity when distributing teams across continents. In 2006, Xebia (Netherlands) started localized projects with half Dutch and half Indian team members. After establishing a localized velocity of 5 times their waterfall competitors on the same project, they moved the Indian members of the team to India and showed increasing velocity with fully distributed teams. Running XP engineering practices inside many distributed Scrum projects, Xebia has systematically productized a model very similar to the SirsiDynix model for high performance, distributed, outsourced teams with outstanding high quality. The fully distributed model is now the recommended standard for high performance distributed Scrum when organizations can pass the Nokia test [1] for Scrum implementation and fully implement XP engineering practices [2] in their Scrum teams.</p>\n\n<ol><li>J. Sutherland, “Real World Experience Creating Agile Companies,” in Agile 2007, Washington, D.C., 2007</li>\n<li><p>J. Sutherland, A. Viktorov, J. Blount, and N. Puntikov, “Distributed Scrum: Agile Project Management with Outsourced Development Teams,” in HICSS’40, Hawaii International Conference on Software Systems, Big Island, Hawaii, 2007</p>\n\n<p>There is a full length paper that will be avalable at the session and presentation and discussion will address the following key points:</p></li>\n</ol><p>Outsourcing Models</p>\n\n<p>Outsourcing strategies and failure modes will be described with examples from specific companies. For example, PatientKeeper outsourced to an excellent waterfall team in India. For two years they monitored return on investment. When it was discovered that the break even point occured when an Indian programmer cost 10% of a Boston Scrum programmer the Board of Directors terminated all outsourcing. Since Indian resources cost 30% of Boston resources, if we outsourced $2M of development it cost us $6M to get it done in India. Venture capitalists on the Board were unhappy because they had demanded the company do outsourcing and they would wast $4M of venture capital for every $2M of development outsourced.</p>\n\n<p>The fully distributed Scrum model as implemented in this paper achieves the same velocity onshore as well as offshore. PatientKeeper could outsource $2M and get it done for $666K with the model described in this session. Xebia found that this outsourcing style actually made the onshore team function at a higher level because they had to explain requirments issues daily to the Indian part of the team. This kept local team focused on the customer and they implemented the requirements better than when they worked totally onshore.</p>\n\n<p>Many of the findings in this paper are counterintuitive to conventional Agile distributed team strategies. Extensive data will be provided to document every piece of this project.</p>\n\n<p>Strengthening the distributed team model</p>\n\n<p>SirsiDynix solved this problem with fully distributed teams on a singe large project. Each team was half in the U.S. and half in Russia. It is possible to replicate and strengthen this model. Xebia executed multiple projects with fully distributed teams. They kept much better data on velocity onshore and offshore and had better testing and refactoring. Both onshore and offshore team components fully implemented Scrum with XP inside. The distributed model in this paper is a replicated repeatable model that is now used on all Xebia projects.</p>\n\n<p>Development team scaling offshore with this model allows expanding and shrinking offshore team without losing knowledge. For some organizations this is more important than the cost savings from outsourcing.</p>\n\n<p>Process over culture</p>\n\n<p>Critics may claim it because Xebia has better people which is why they were successful. However, quality of people onshore and offshore was the same. Distributed velocity equaled local velocity with the same quality of people throughout. There were some Indian cultural differences and we will discuss how they were resolved with this distributed team model.</p>\n\n<p>Soft factors</p>\n\n<p>There were many soft factors improved by the fully distributed model over conventional distributed teams:</p>\n\n<p>• Focus on customer\n• No cultural barrier\n• Shared ownership\n• High satisfaction – no attrition\n• Shared knowledge\n• Feeling for context\n• Same standards</p>\n\n<p>Typical Indian developer comment “It doesn’t matter to me if I am working in Delhi or Hilversum on this team because we all do exactly the same things.”</p>\n\n<p>• Shared ownership of code across geographies\n• Shared responsibility for result\n• High level of initiative from Indian developers with new ideas for improvement\n• Teams like the room to create a better workplace for themselves.\n• Very light touch management. Giving trust first and earning trust second.</p>\n\n<p>Detailed graphical data will be presented </p>\n\n<p>A highly experience project manager (co-author Maurits Rijk) developed extensive graphics and tabular data for the projects presented in this paper. Projects are much better documented than previous published papers on distributed teams.</p>\n\n<ul><li>Velocity and hours per story point</li>\n<li>Quality – total defect and architecture debt</li>\n<li>Quality and scaling strategy done better than SirsiDynix, for example. This will be discussed in depth.</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Presentation and discussion. Workshop format if group is small enough.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Experience report	2008
20083794	Growing and Sustaining an Offshore Scrum Engagement	<div class="content">\n    <p>By taking a straightforward, sensible approach to implementing Scrum along with applying a well-known team building model, Kelley Blue Book successfully created offshoring teams in China and India. We will illustrate how and why we applied The Five Dysfunctions of a Team model by Patrick Lencioni to provide a foundation for growing and sustaining offshore teams several time zones away. We’ll cover examples of how employing this model has improved our offshore engagements and overcome a number of challenges to improve the delivery of the Scrum teams.</p>\n\n<p>Additional information on this experience report:</p>\n\n<p>Areas where applying the <em>Five Dysfunctions</em> model were most effective:<br />\n Making Review and Retrospective meetings more effective<br />\n Maximizing learnings during cross-team site visits<br />\n Determining the “best types of projects” to offshore in the early stages of offshore development<br />\n Overcoming productivity plateaus after several successful sprints  </p>\n\n<p>This presentation also describes the important roll Executive management plays in driving the Scrum adoption for KBB and setting up these offshore offices. And we’ll review the communication channels we have found most useful and the how these they have changed over time.</p>\n\n<p>Audience: This presentation will be most useful for those who are starting an offshore development office in China and/or India as an R&amp;D facility, not just a “body shop” for lower cost software development.  This presentation can also be an introduction to the <em>Five Dysfunctions of a Team</em> model for any team.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This experience report will be shared via a PowerPoint deck followed by a Q&amp;A period.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Experience report	2008
20084954	How to apply Agile/Scrum in delivering IT projects remotely for Small-Businesses and overcome cultural barriers. 	<div class="content">\n    <p>Code71, Inc. is a Web 2.0 solution and service company. Our target market is start-ups, small-businesses and non-profit organizations. We use on-shore + off-shore model using Scrum to deliver our projects. Our off-shore office is in Dhaka, Bangladesh. \nMost Small-business owners are not used to structured project management, let alone the concept of Agile/Scrum. They are wary about using the off-shore teams on projects primarily because of losing control over of projects. On the other side of the world, we have cultural barriers to deal with. Traditionally, Bangladesh has the command/control work culture – everyone needs to have a boss, accountability is loosely used there.  So, it took us a while to instill the “self managed team” concept. \nSo our challenges are:\n1)  Convincing clients to use Agile/Scrum\n2)  Training clients on Agile/Scrum\n3)  Managing micro agile team while keeping the overhead down\n4)  Using appropriate tools to create virtual collocation\n5)  Managing cultural differences in implementing Agile\nIn this presentation, we would like to share our experiences on how we have overcome the above challenges associated with using Agile on projects involving remote delivery, multiple cultures, and small-businesses. We have been able implement Agile with success and we hope the audience could too.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We would like to conduct the sesison in an interactive manner. We will entertain questions as we go through our presentation. We plan to use real life examples from our client projects to explore the challenges and lessons learned.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Experience report	2008
20080388	How to support a collaborative atmosphere in distributed projects?	<div class="content">\n    <p>After running a similar workshop with about 20 participants on XP2007 it became clear that getting distributed agile projects right is still a challenge. We got the impression that the community has definitely started to test and execute distributed agile projects. This is obviously driven by the offshoring trend. The interesting phenomenon we are observing is that it is the quality and collaboration aspects of agile practices that leads to an interest in agile practices despite the initial belief that distributed projects would need a more structured waterfallish approach.</p>\n\n<p>Both organizers joined large organizations a coupe of years ago where there still was a strong faith in waterfallish approaches; in particular with distributed projects. However, due to huge challenges in managing distributed offshore projects and poor quality, these organizations now insist on agile practices to get better control of quality and progress of these projects.</p>\n\n<p>The improvement on quality and management have already started to surface. Still we are seeing that it is still challenging to establish a truly collaborative atmosphere due to the nature of distributed work. As would be expected as distributed work is in theory a violation of an important principle of most agile methodologies; co-located teams. We believe this area still to be in its infacy, and it would be of great importance to share experiences, challenges and ideas on how to overcome these challenges. The litterature that exists at this time seems to focus more on additional management disciplines; and less on how to achieve the collaborative atmosphere that the agile practices depend so much on, so it would be of great interest to dive into that area.</p>\n\n<p>What do those who succeed in doing this do differently from those who don’t? The neccessary compromises may have a significant influence of the outcome. Experience on this has been made for a couple of years now, and we want to explore what challenges exists and share experiences on what works and what doesn’t, and why that is. We call this a real-life retrospective as we believe we need more than one project to be able to learn enough from these experiences. </p>\n\n<p><strong>Expected participants</strong><br />\nBased on our experiences from XP2007 we would expect practitioners with a range of experience from a couple of years of distributed agile to just started and seeing what kind of challenges that needs to be dealt with. This range is very welcome, and we would also require a strong interest and commitment to engage in discussions on how to move forward.  We believe the time should be right to expect such commitment. This will be an intense session, but highly rewarding in terms of coming up with specific guidance and experience on this important challenge. A group of 20-30 participants will work great with this format.</p>\n\n<p>Popular mistakes, ideas that could be among the ones we want to explore:<br />\n- Clear distinction between the offshored team and the onshore team OR the complete opposite; tight integration and tight collaboration despite the distance<br />\n- The state of collaborative tools, and how can they be taken advantage of (e.g. do Jazz adress the right challenges, why are chatting, webcams and other collaborative tools not sufficient etc.)<br />\n- Does continuous build/integration scale across geographies OR do we need extra management/procedures for this<br />\n- Scrum of Scrums - what are the practical experiences; we have done this for a couple of years now; what other practices exists</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li>A quick round among each participant where everybody states one good and one bad experience  </li>\n<li>Divide into 2 groups; one discussing and exploring the positive experience, the other discussing and exploring how the bad experiences could improve. The participants choose which group to join based on their own preference.  </li>\n<li>Each group sums up the discussion and present to the other group.  </li>\n<li>Divide into two new groups to continue the discussion based on these findings; the participants may change group at this time.  </li>\n<li>Each group sums up again to finalize the outcome of this workshop  </li>\n</ol><p>This session is deliberately short to keep the energy and intensity high at all times, and we really want to focus on having a positive retrospective session and avoid any whining session. The organizers will play an active role throughout this workshop to share our own experiences, opinions and to keep the pace.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Workshop	2008
20084681	Distributed Agile Game	<div class="content">\n    <p><strong>Intent</strong><br />\nThe intent of this session is to expose participants to the challenges faced by distributed agile teams, to allow them to discover ways to mitigate those challenges, and to have fun.</p>\n\n<p><strong>Summary</strong><br />\nThe Distributed Agile Game is meant to be played by people who are interested in challenges experienced by members of distributed agile teams. The participants may have prior experience in distributed development, but this is not required. In fact, no software development experience is required.  </p>\n\n<p>The game will be played by several small teams. Each team consists of analysts, developers, a customer, and a project manager. The team is subdivided into two parts; an on-site team, with developers, a customer, and analysts, and a remote team with only analysts and developers.  The remote team must communicate with the customer and on-site team via emails, phone calls, and other various forms of communication. The teams will be using a physical medium to construct the “application” according to the customer specifications.</p>\n\n<p>The game will start out with the most basic of communication and no tool-sets progressing through several iterations. At the end of the last iteration the teams should have figured out more effective means of communications than what they were originally given emphasizing the most important factor to the success of distributed agile  teams: communication.</p>\n\n<p><strong>Intended Audience</strong><br />\nThis session is suited for anyone who has experience in agile and/or non-agile projects, as well as, anyone who may be involved in distributed projects in the future. This is not suited for someone looking for the golden answer to “How to make a distributed agile project work” but more for the people who would like a concrete way to experience this type of environment without having actually been in it and for those who would like a way to express what distributed agile means to others who may not fully understand the challenges such team setups may bring.</p>\n\n<p><strong>Benefits</strong><br />\nAttendees will have fun learning from their peers while being exposed to challenges faced on all distributed teams and practices that will assist them in running agile and distributed agile projects more smoothly.   </p>\n\n<p><strong>History of Tutorial</strong><br />\nThis exercise was presented at Agile 2006 Conference. </p>\n\n<p><strong>P.S: We’ll need a lot of people to help us. If you are planning to attend the conference and interested in helping us, please ping me</strong></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Content Outline</strong>   </p>\n\n<p><strong>Introduction: 35 mins</strong>   </p>\n\n<ul><li>05 Minutes - Introduce the presenters and their backgrounds</li>\n<li>10 Minutes - Description of the activity, it’s rules and participant’s roles</li>\n<li>05 Minutes – The coach will give a blank description of the system that is to be built so that all participates have the same base knowledge to go from.</li>\n<li>05 Minutes - Team formation – self organize into roles</li>\n<li><p>10 Minutes - Release Planning and acceptance criteria - cards can be passed off to dev in this 10 Minutes</p>\n\n<ul><li>Customer and analyst create backlog – both on-site and remote analysts participate   </li></ul></li>\n</ul><p><strong>First Iteration: 35 mins</strong>   </p>\n\n<ul><li>15 Minutes - Iteration 1</li>\n<li>Developers start work on story cards as soon as analysts pass them off</li>\n<li>5 Minutes - Showcase Preparation</li>\n<li>5 Minutes - Showcase/Review</li>\n<li><p>10 Minutes - Retrospective</p></li>\n<li><p>Team suggests possible changes. The facilitators expect the teams to generically express pain points and problems which can be used to segue the session into introducing new practices. </p></li>\n</ul><p><strong>Second Iteration: 40 mins</strong>   </p>\n\n<ul><li>20 Minutes - Iteration 3</li>\n<li>Facilitators put changes discussed in retrospective for iteration 1 into place.</li>\n<li>Analysts continue on additional story creation and answer any questions developers have regarding stories they are currently working on.</li>\n<li>Developers work on stories.</li>\n</ul><p><strong>30 Minutes - Break</strong>   </p>\n\n<p><strong>Continuation of the Second Iteration: 20 mins</strong>   </p>\n\n<ul><li>5 Minutes - Showcase Preparation</li>\n<li>5 Minutes - Showcase/Review</li>\n<li>10 Minutes - Retrospective</li>\n<li>Team suggests possible changes. The facilitators expect the teams to generically express pain points and problems which can be used to segue the session into introducing new practices. </li>\n</ul><p><strong>Third and Last Iteration: 40 mins</strong>   </p>\n\n<ul><li>20 Minutes - Iteration 3</li>\n<li>Facilitators put changes discussed in retrospective for iteration 1 into place.</li>\n<li>Analysts continue on additional story creation and answer any questions developers have regarding stories they are currently working on.</li>\n<li>Developers work on stories.</li>\n<li>5 Minutes - Showcase Preparation</li>\n<li>5 Minutes - Showcase</li>\n<li>10 Minutes - Retrospective</li>\n</ul><p><strong>Conclusion: 30 mins</strong>   </p>\n\n<ul><li>Facilitators will ask the audience to indicate what they learned.</li>\n<li>Facilitators will convey any learning objectives that may not have been stated.</li>\n<li>Audience Questions</li>\n<li>Feedback on session</li>\n<li>Suggestions from audience on how to improve the session.</li>\n</ul><p><strong>Infrastructure Required</strong><br />\nThe presenters will provide all equipment with the exception of a projector. For the session to be effective, the presenters will need a room with an adjustable partition in-between.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Workshop	2008
20084456	Creating Proximity over a Distance	<div class="content">\n    <p>Agility asks for face-to-face communication, trust and collaboration. Proximity can be created by travelling – at least sometimes. Virtual communication channels provide another possibility overcoming the distance. But we should take the trust threshold into account which, once hit, will break an existing relationship.\nIn this session I’ll reveal, avoiding this threshold, how to know if you’re approaching it and explain the options once reaching it. Moreover I’ll cover the advantages and disadvantages of synchronous and asynchronous tools. And finally I’ll clarify who is travelling, where to, and for how long.</p>\n\n<p>The agile manifesto asks for face-to-face communication, trust and close collaboration within teams among other things. But widely accepted wisdom is that trust needs touch. So how can you create this proximity over a distance?\nOne answer is definitely to overcome the distance by travelling – at least from time to time. Yet, even with this answer at hand it is important to make the travel beneficial and find good arguments for the costs. Thus in this session I want to point out who is travelling, where to, for how long, and how to convince management about the need of it.\nAnother answer is to overcome the distance using virtual communication channels (tools). Here I want to cover which tools are helpful for what kinds of situation. For example, both  synchronous and asynchronous tools have their advantages and disadvantages in some settings. Therefore I want not only to indicate what to use when, but as well what to watch out for in order to recognize if a communication channel works or not.\nAnd finally, more and more people have recognized (as well in their private life) that there is a communication and trust threshold which when hit, will break an existing good relationship. In this session I want to reveal, how you can avoid obtaining this threshold, how you will know if you’re coming close to it and what your options are once you reached it. </p>\n\n<p>In this session, I want to report from my own experiences in overcoming the distance in distributed projects. My experiences are mainly based on large global agile projects in embedded and commercial software development.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Lecture style including active participation through intense discussions, taking the individual experiences of the audience into account.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Talk	2008
20084690	What Makes Distributed Agile Projects Succeed (or Fail)?	<div class="content">\n    <p>The reality is that our teams are not always colocated and many of us have to adapt.  The empirical, inspect-and-adapt, approach will help us evolve toward processes that work.  This session will help you accelerate this process by learning what has, and hasn’t, worked for others.  Come share your distributed agile experience and tap into the collective wisdom that will be present. We are going to compile a list of the most important ingredients for success. </p>\n\n<p>We will use the Nominal Group Technique (NGT) to gather up the group’s experiences and ideas. NGT works faster than traditional brainstorming, yet generates more complete and higher quality results. Next we will identify the factors that have had the biggest impact using DOTS, a technique that efficiently harnesses the collective wisdom of the group, while avoiding groupthink. </p>\n\n<p>This is really two workshops for the price of one.  You will walk out with a better understanding of what makes distributed agile projects succeed, as well as how to use NGT and DOTS to tap into the wisdom and knowledge of a group.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Participants are briefed on the topic under consideration.  There may be a short discussion period, if needed, to help everyone understand the topic.</p>\n\n<p>Participants are provided with pen and paper, and then given several minutes to quietly generate their own list of ideas.</p>\n\n<p>The ground rules for idea sharing are reviewed:<br />\n * Questions for clarification are allowed and encouraged<br />\n * Criticism is not allowed; all contributions are welcome<br />\n * One idea per turn  </p>\n\n<p>A participant is selected to share the first idea.  The idea is explained and any clarification questions are answered.  A one or two word summary of the idea is posted for all to see.</p>\n\n<p>The process repeats, around and around the room, with each person sharing one idea at a time.  Duplicate ideas need not be shared.  If a participant has no ideas left to share when it is their turn, they may pass.  If they subsequently have a new idea, they may share it next time their turn comes around.</p>\n\n<p>One the idea generating phase is over, any potential duplicates will be discussed and consolidated.  If there is significant disagreement or if the originator of an idea objects to the consolidation, then the ideas will remain separate.</p>\n\n<p>Each participant is given a number of sticky dots to vote with.  Everyone gets up and places dots on the best ideas.  The group does this, all at once, without any discussion.</p>\n\n<p>The ideas are then rearranged into groups based on how many dots were placed on them.  For instance, a group of five people may vote in such a way that some ideas have five dots, some four, three, two, one, and none.</p>\n\n<p>The results of the exercise reflect the collective wisdom and experience of the group.</p>\n\n<p>Some History:<br />\nI’ve facilitated this type of workshop at Agile Open CA and Silicon Valley Code Camp 2007.  Both times were standing room only.  The participants at Code Camp rated it 3.8 on a 0 - 4 scale.  Comments included:  </p>\n\n<p>“Chris, you did a great job at facilitating the session. I liked your style and how you kept people who were going down rat holes from digging too deep.”</p>\n\n<p>“Yours was one of my top three sessions.”</p>\n\n<p>“Great at getting everyone involved!”</p>\n\n<p>“Interesting technique used for gathering Agile knowledge from attendees, itself useful for Agile development! Very interesting to compare notes and benefit from the experiences of others.”</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Workshop	2008
20081597	Working With Global and Distributed Agile Teams 	<div class="content">\n    <p>Miscommunications, misunderstandings, and interpersonal conflict thrive in the typical environment of the distributed team. Distributed agile teams, and especially global agile teams, are more likely to face these issues because of time-zone offsets and differences in organizational culture. Global agile teams are not only more geographically dispersed than domestic distributed teams, but they’re separated by language, culture and a large number of time zones. In this session, we’ll inventory the challenges faced by distributed and global agile teams.  We’ll provide ways of anticipating and addressing the challenges that occur.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a lecture with examples.  </p>\n\n<h1>Introduction</h1>\n\n<p>Dispersed and Global Teams<br />\nManaging Teams<br />\nSuccessful Teams<br />\nDimensions<br />\nCultures   </p>\n\n<h1>Communication and Tokens</h1>\n\n<p>Meaning of Tokens<br />\nTokens More Than Words<br />\nIdeas for Communication Tokens   </p>\n\n<h1>Trust and Us-ness</h1>\n\n<p>Trust Building<br />\nSelf Organization<br />\nUs-ness   </p>\n\n<h1>Communication Media</h1>\n\n<p>Communication Styles<br />\nCommunication Plan<br />\nIdeas for Specific Technologies  </p>\n\n<h1>Face-to-face Meetings</h1>\n\n<p>Importance of Face-to-face<br />\nFace-to-face Variations   </p>\n\n<h1>Organization</h1>\n\n<p>Organizational Issues<br />\nProject Organization<br />\nSuccessful Practices of Distributed Teams    </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Talk	2008
20084322	Panel discussion on troubleshooting distributed agile team projects	<div class="content">\n    <p>This session is presented by a group of panelists – Esther Derby, Hubert Smits, Tamara Sulaiman, Samir Shah and Monica Yap.  All of the panelists have experience working with successful distributed Agile teams, from offshore and onshore.  They will share their experience and insights on how to face the common challenges arise from this environment.  Topics such as how to start well, how to deal with time zones, will be discussed.  During the session, the panelists will also answer specific questions from attendees.</p>\n\n<p>Each of the panelists has worked with or trained teams in geographically (sometimes international) distributed environments.  Esther brought up the first distributed team at American Express. Monica worked with distributed teams (US, UK, Singapore) through many projects. Hubert and Tamara trained distributed teams in AOL across Dulles and Bangalore. Contradictory to the common belief that an agile team should be co-located physically, these teams worked in extremely distributed environments, and they have good successes using agile methods, with frequently delivered working software. </p>\n\n<p>However, there are many challenges making distributed teams and their projects successful.  Each of the panelists have discovered some common challenges, such as cultural differences, technical infrastructure required to support the remote teams, lag in communication due to time zone differences, unable to have face to face communication, trust issues.  The panelists will share their experience and insights as to how they’ve solve or mitigate these issues, for example jump start the project team together in a boot camp, use of video communication tool to provide high bandwidth communication.</p>\n\n<p>In this panel discussion, topics such as the following will be discussed:</p>\n\n<ul><li>How to start well with distributed teams?  </li>\n<li>Recognizing and dealing with the impact of culture on distributed teams?</li>\n<li>What are the technical infrastructure and tooling required?</li>\n<li>How to deal with time zone issues?</li>\n<li>How to build team trust or trust with the customer?</li>\n<li>Techniques for building and strengthening distributed teams </li>\n<li>How to fix collaboration issues between team members in a distributed agile project</li>\n<li>How to detect when there is a problem in a distributed team project?  Is a burn down chart effective enough?</li>\n<li>What is the cost difference between co-located and distributed teams?  Is the cost worth the value earned?</li>\n<li>What are the challenges with product backlog and what are the remedies</li>\n</ul><p>Attendees are also welcome to bring their specific questions related to their context.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>A moderator will facilitate this panel discussion.  </p>\n\n<p>Part I (60 min) – panelists share their answers and experience for questions listed in the summary (~6 min each).  Audience can ask follow on questions if time allowed.</p>\n\n<p>Part II (30 min) – audience brings their own specific questions.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Panel	2008
20083888	Distributed agile teams and alternative contractual forms: what works best?	<div class="content">\n    <p>This session is designed for agile practioners who are seeking to improve practices in large agile programs.  It is targeted for experienced and inexperienced sponsors, product owners, scrum masters, project managers and people involved in business development and contract negociation.  </p>\n\n<p>I will share my experience in proposing, negotiating, managing and living with agile contracts used in large, distributed, multi-cultural agile teams.   The session will focus on practical experience and will be illustrated with examples and an analysis of agile contracts types and how they impact quality, productivity, team motivation and success.   </p>\n\n<p>I will cover:</p>\n\n<ul><li>selecting and refining the methodology: getting vendor and client in sync</li>\n<li>the types and structures of typical agile contracts</li>\n<li>can fixed bid contracts be compatible with agile methods?</li>\n<li>estimating functional and non-functional scope - levels of planning</li>\n<li>alternative units for measuring software production</li>\n<li>organising and timing requirements, design and estimation workshops</li>\n<li>team organisation, roles and ramp up</li>\n<li>client versus vendor responsabilities</li>\n<li>planning releases and iterations</li>\n<li>acceptance testing</li>\n<li>warranties</li>\n<li>reversability</li>\n</ul><p>I will provide an in-depth analysis and comparison of several agile programs and their associated contracts, and the impact of these contracts on agile process and teams.  Consideration and the impact of three primary contractual forms will be discussed: fixed bid/fixed scope, time and materials, and payment for production.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I plan to present during the first 80 minutes with 10 minutes for discussion, and will encourage questions and interactivity during the presentation.  The planned timings are:</p>\n\n<ul><li>building and supporting contracts to engage large distributed agile teams (20 min)</li>\n<li>in-depth case studies (30 min)</li>\n<li>fixed bid, T&amp;M and pay-for production contract alternatives (30 min)</li>\n<li>discussion (10 min)</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Talk	2008
20080252	Updating "Patterns for Distributed Agile"	<div class="content">\n    <p>In 2005 Tim Joyce and I published <a href="http://www.keithbraithwaite.demon.co.uk/professional/papers/index.html">collections of patterns and proto-patterns</a> capturing the common features of every then-current description of successful distributed Agile development we could find, including our own. </p>\n\n<p>In the years since then, many more teams have found their way to a successful accommodation between their desire to be Agile and their business’s need or desire not to co-locate. So, it’s time to update the patterns. </p>\n\n<p>A workshop where experience is reported.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><h2>Number and Kind of Attendees</h2>\n\n<p>I guess that this will work well with between six and twenty-four attendees, but maybe more.</p>\n\n<p>Preferred would be attendees with practical experience of distributed Agile development (and some will be explicitly invited) , but anyone with an interest (or even who’s just <em>interested</em>) will be most welcome and will be able to contribute.</p>\n\n<h2>Elicit</h2>\n\n<ol><li>Practitioners who have reported successful distributed Agile work since 2005 will be canvassed and explicitly invited to the session, and/or to provide input before hand  </li>\n<li>those with experience of successful distributed Agile development capture as many stories as they can about what they did<br />\nHard-copy of the current literature (ie, all the papers, presentations, articles that I can find) will be provided to attendees</li>\n<li>all attendees take part in an affinity exercise to find repeating solutions</li>\n</ol><h2>Record</h2>\n\n<ol><li>split into groups by interest in solutions</li>\n<li>begin a writeup into pattern form</li>\n<li>if we’re very, very lucky, get to the point where one or more candidate patterns can be workshopped in the PLoP style.</li>\n</ol><p>If this works at all well, then the outputs will be worked up off-line into a form that can go to a PLoP for workshopping and publication</p>\n\n<h2>Take-home Learning for Attendees</h2>\n\n<p>It’s a workshop, so the main benefit is <em>having taken part in the workshop</em> and having gone through the process of interacting and exchanging experiences with the others in the workshop. If there has to a declared take-home of some sort, then it would be one or more (depending on the attendee) of:</p>\n\n<ul><li>learning new techniques for distributed agile</li>\n<li>learning new approaches to implementing techniques already in use</li>\n<li>learning what worked, and what didn’t for others, and so what might or might not work for you, um</li>\n<li><em>now struggling to capture an opportunity for experiential growth as a practitioner in the form of bullet points…</em></li>\n<li>let’s see now, networking opportunities with other people doing distributed projects?</li>\n<li>er…</li>\n<li>that’s it.</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Workshop	2008
20083216	Managing Database Development on Distributed Teams	<div class="content">\n    <p>When a co-located team moves into multiple locations, sometimes across continents, it reduces team productivity and introduces lots of challenges with teams trying to deal with database and database design. Like any other aspect of Agile projects why not make the database design and development a shared task to be done by every one on the team. Why not link the database design to the feature being developed and make the database part of the Continuous Integration, such that build status is visible to everyone and database artifacts can be version controlled just like code.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This will be a Demo driven presentation.</p>\n\n<ul><li>Automating Database Task 10 min</li>\n<li>Making database part of the same Source Tree 5 min</li>\n<li>Making database development easy for every pair/developer 10 min</li>\n<li>Delinking the database and the code, how to not depend on the database, rather depend on the source tree 20 min</li>\n<li>Making a common build across all of you locations and including the database in the CI build 10 min</li>\n<li>How to make the deployment of database easier at any location 15 min</li>\n</ul><p>Questions will be taken during the presentation.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Demonstration	2008
20081669	Colossal, Scattered, and Chaotic (Planning with a Large Distributed Team)	<div class="content">\n    <p>If planning for a large co-located 30+ development team is not enough to make you want to pull your hair out then try a 30+ development team located across several time zones, in places with different cultures and languages. Now, you’ve reached a level in the Agile planning game that would send most product owners running home to their mommies.  </p>\n\n<p>Planning in Agile Projects requires enabling the team to have a continuous conversation with the customer. How can you have meaningful, continuous conversation and feedback when your team is scattered across several time zones, cultures and languages?  This paper describes our experience of how one of our largest teams in Sabre Airline Solutions was able to make changes that allowed the continuous conversations to take place.  The paper is written from the perspective of both development locations, the main office in Dallas, Texas and the “remote” office in Krakow, Poland.  </p>\n\n<p>The team successfully overcame many obstacles while rapidly growing a small co-located development team into a large globally distributed team that was able to efficiently deliver customer valued, quality code and customer satisfaction with each one week iteration.  They attributed this success to three main Agile areas: evolving the Agile Customer Role, making our meetings valuable and efficient for everyone involved, and good coordination across the sub-teams.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This will be a power point presentation of items learned in the planning process from inception through delivery with a time for questions at the end.</p>\n\n<p>I have changed this to 30 minutes and am still considering the workshop idea.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Experience report	2008
20082337	The Good and Bad of Offshore Agile Development	<div class="content">\n    <p>Companies today are attempting to lower costs and increase their staffing flexibility by taking some [or even all] of their development activities overseas.  Simultaneously, many of these same organizations are exploring agile development practices in an effort to increase quality and to improve project performance.  This report explores the intersection of these two significant trends common in today’s software development organizations. We will show how our team built an effective agile offshore development capability, what we learned along the way, and what we would do differently next time around.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This will be a 25 minute presentation followed by a few questions</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Experience report	2008
20082780	Overcoming the Challenges of a Distributed Organization	<div class="content">\n    <p>Revised Proposal    </p>\n\n<p>Agile principles value people and communication over processes and tools. But, how do you manage the complexity of today’s development environment where teams span multiple time zones, continents and languages and successfully adapt Agile processes in such a way that teams reach optimal velocity? How do you facilitate communication and foster team-building? How can you empower each team member when the Scrum Master and Product Owner are located with one half of the team?</p>\n\n<p>Learn how you can adapt standard Agile processes in the offshore development environment to achieve predictable results – Quality Software, On Schedule! Join Elaine Therrien, Director of Product Management at First American CoreLogic and Michele Sliger, Founder of Sliger Consulting Inc. in an interactive session where they will present an experience report that will showcase how a distributed development team effectively adapted Agile processes to build and maintain commercial software solutions that serve thousands of end users.</p>\n\n<p>In this session you will learn:   </p>\n\n<ul><li>The key challenges that a distributed team faced when they tried to adopt the Agile/Scrum process.</li>\n<li>How did the team overcome the time zone, and cultural challenges to foster good communication among all team members?</li>\n<li>How did the team build trust among team members that have never met?</li>\n<li>How did the distributed environment impact the role of Product Owner and Scrum Master? </li>\n<li>How the team adapted the standard Agile/Scrum process for the distributed development environment.</li>\n<li>Examples and recommendations on how to best conduct your standard Agile/Scrum daily meetings, backlog scrubbing meetings, release and sprint planning meetings, and release and sprint reviews with co-located teams. </li>\n<li>How to overcome the time zone and the challenges of daily meetings. </li>\n<li>How to facilitate communication with the time zone gap so that team velocity is not impaired. </li>\n<li>How the team built trust and empowered each team member. </li>\n<li>Recommendations on how to adapt the role of Scrum Master slightly to improve team effectiveness in both locations. </li>\n<li>Examples of technologies and tools have proven to be most effective in supporting team building in the virtual environment.  </li>\n</ul><p>— Old Proposal—-<br />\nAgile principles value people and communication over processes and tools.  But, how do you manage the complexity of today’s development environment where teams span multiple time zones, continents and languages and successfully adapt Agile processes in such a way that teams reach optimal velocity?  </p>\n\n<p>Learn how you can adapt standard Agile processes in the offshore development environment to achieve predictable results – Quality Software, On Schedule!  Join Elaine Therrien, Director of Product Management at First American CoreLogic and Michele Sliger, Founder of Sliger Consulting Inc. in an interactive session where they will present two real-life case studies that showcase how two virtual development teams effectively adapted Agile processes to build and maintain commercial software solutions that serve thousands of end users.  </p>\n\n<p>In this session you will learn:\n• How to effectively adapt standard Agile/Scrum processes for the distributed development environment.\n• Proven examples on how to best conduct your standard Agile/Scrum daily meetings, backlog scrubbing meetings, release and sprint planning meetings, and release and sprint reviews with virtual teams.\n• How to overcome the time zone and meeting challenges.\n• How to facilitate communication so that team velocity is not impaired.\n• How the virtual environment impacts the role of Product Owner and Scrum Master.\n• How do you build trust within a virtual team?\n• Which tools have proven to be most effective in supporting the virtual environment?</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This will be an interactive session where we will present an experience report that provides an overview of the team and their situation, their key challenges and issues, our lessons learned and recommendations and then engages the audience by posing several of these issues for applying Agile processes in a distributed environment and then enlist them for alternative solutions.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Distributed Agile	Experience report	2008
20083958	Refactoring Strategies & Tactics	<div class="content">\n    <p>What do masters of refactoring know that novices don’t?</p>\n\n<p>In 2006 I stumbled upon an answer to that question. I was preparing numerous refactoring labs for use in Industrial Logic’s eLearning. Each lab features problem code and solution code. To produce the solution code, I’d refactor the problem code by applying sequences of low-level design transformations, like Extract Method, Move Method, Extract Class and Inline Method.</p>\n\n<p>As I did this work, I noticed myself performing common sequences of refactorings. Three different labs all used a common sequence to produce an important design improvement. Another four labs used another common sequence. These common sequences had no names yet they revealed valuable refactoring strategies!</p>\n\n<p>Since then I’ve named these strategies, discovered new ones and experienced how helpful they are on real-world projects.</p>\n\n<p>In this tutorial, I will discuss and demonstrate the following refactoring strategies and lower-level tactics:</p>\n\n<h2>Strategies</h2>\n\n<ul><li>Divide &amp; Conquer</li>\n<li>Gradual Cutover</li>\n<li>Graceful Retreat</li>\n<li>Parallel Change</li>\n<li>Narrowed Change</li>\n<li>Evolved Target</li>\n</ul><h2>Tactics</h2>\n\n<ul><li>Unified Methods</li>\n<li>Rejected Parameter</li>\n<li>Caller Creates</li>\n<li>Inline Then Extract</li>\n<li>Encapsulated Dependency</li>\n<li>Caller Swap</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session is an interactive lecture.  I present information about each strategy/tactic, show a demonstration of it in an IDE and then discuss it with the audience.   </p>\n\n<p>I have given this talk at SD West 2007 and will be giving it again at SD West 2008.   (It has gone under the title, Patterns of Refactoring at those conferences).  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Tutorial	2008
20081632	Coding Contest	<div class="content">\n    <p>We’ve organized a coding contest last year (July 2007) in Linz, Austria (see <a href="http://www.catalysts.cc/index.php?id=contest" title="http://www.catalysts.cc/index.php?id=contest">http://www.catalysts.cc/index.php?id=contest</a>) which targeted the following questions:<br />\n* Who is faster? Who is more efficient? Who is more effective? Who is more productive?<br />\n* Does “Pair Programming” really make you faster?<br />\n* Does “Test-Driven Development” really lead to fewer bugs?<br />\n* How many ways are there to solve a problem?<br />\n* Is it right that good developers only write 30 lines of code for which mediocre developers need to write 300 lines?</p>\n\n<p>We had more than 50 participants (students and practitioners).<br />\nWe used a special-purpose test server for distributing the problem statement / the assignment to the participants, for tracking their progress, and for collecting their solutions.<br />\nThe results are currently being elaborated in a masters thesis.</p>\n\n<p>In the mean-time we have organized several such contests in Nepal and we will organize one at the XP conference in Limerick this year.</p>\n\n<p>What we like about these coding contests is:<br />\n* The participants can view it as a game - trying to solve a puzzle as fast as possible, playing through the various levels of the problem statement (just as playing some online game), getting some visibility or even money prizes.<br />\n* The participants can compare their progress with that of other particpants - tagging themselves with groups (Java / C# / Ruby, student / practitioner / expert, … all freely chosen by the participants).<br />\n* We can set it up as an experiment, dividing the participants into several groups (control group and test group), we can collect the source code snapshots at regular intervals, the progress information about the participants (which level they have mastered already, how many acceptance test errors they have), visualize the evolution of the good and bad solutions.<br />\n* We can evaluate the results and draw conclusions.</p>\n\n<p>So it can be seen as <strong>“just a contest”</strong> but also as an <strong>experiment</strong> that can help us to underline our hypotheses with some numbers.</p>\n\n<p>Of course, it is possible to remain completely anonymous as a participant.</p>\n\n<p>Responding to the comments below, I’ve taken some <strong>screen shots</strong> (but remember, the proposal is not about the tool, we never got any feedback “on the tool” from the participants, but a lot of feedback on the contest / experiment):</p>\n\n<p><a href="http://www.catalysts.cc/fileadmin/public/contest/CatCoder_-_entry_screen.png">Entry Screen</a>\nOn the entry screen you see which training games are available and which contests are scheduled. A mindmap explains what you can do.</p>\n\n<p><a href="http://www.catalysts.cc/fileadmin/public/contest/CatCoder_-_contest_details.png">Contest Details</a>\nYou can have a look at the summary information of the contest, who has registered, and you can have a look at the source code of those who completed the contest.</p>\n\n<p><a href="http://www.catalysts.cc/fileadmin/public/contest/CatCoder_-_playing_a_game.png">Playing a Game</a>\nOnce you’ve selected a game / a contest, you are can play through the levels of the game, look at the description, develop the solution, request test cases, submit your results and … kill your bugs or move ahead to the next level.</p>\n\n<p>You can define groups yourself or simply join a group that someone else has defined (like we will predefine groups for “Pairs” and “Individuals”.</p>\n\n<p>You can look at the overall progress or select one of your groups to compare with the other group members (beware, this may create some pressure on your shoulders, since you see - in real-time - how you do compared to the others).</p>\n\n<p><strong>Drawing Conclusions</strong></p>\n\n<p>We’ve had 56 participants last year at our first coding contest in Linz, Austria (18 people under 20 years, 20 students, 18 practitioners). That’s not yet representative, but it’s already a good mix and more than most academical studies can ever get.</p>\n\n<p>We will have 50-100 students participating at our coding contests in February/March in Nepal.</p>\n\n<p>We hope to get a lot participants at our coding contest at the <a href="http://www.lero.ie/xp2008">XP conference in Limerick, Ireland</a>.</p>\n\n<p>We will repeat the coding contest in Linz in July.</p>\n\n<p>Last year, we also thought about running the coding contest virtually around the world via SecondLife. We had too few registrants for that, but we will give it another try this year.</p>\n\n<p>In total, that may not be representative for the whole world, but it may help us a little to understand ourselves better.</p>\n\n<p><strong>Running the contest throughout the conference</strong></p>\n\n<p>Gil Broza raised the question why not run the contest throughout the conference.\nNo problem from our side.</p>\n\n<p>Except that it makes a psychological difference when you sit in a room with others working on the problem concurrently, when the first has played through the entire game, etc.</p>\n\n<p>And we will allow the users to upload their source code, so it would be easy to cheat (by using someone elses solution as the basis) - but we’re part of a trustworthy community, aren’t we ;-)</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li>We quickly present the assignment.</li>\n<li>The participants solve the assignment - either in one go or playing their way through the various levels of increasing difficulty (the test-driven way).</li>\n<li>The participants select an entry level (the hardest one for those that want to work through the assignment in one go; the first one for those who want to work in a test-driven way; etc.).</li>\n<li>The participants get the detailed requirements from the test server and a typical test case for that level.</li>\n<li>Ther participants develop their solutions.</li>\n<li>As soon as a participant is ready, she sends her solution to the test server.</li>\n<li>If the solution is correct, she gets additional test cases for her current level.</li>\n<li>If she mastered all test cases of a level, she can advance to the next level (goto step 4).</li>\n</ol><p>The winner is who masters the last level as the first one.</p>\n\n<p>A detailed explanation of the procedure can be found <a href="http://www.catalysts.cc/index.php?id=526">here</a>.</p>\n\n<p>The participants develop on their own notebook (connected with the test server via a WiFi network or a cable network), in the programming language of their choice, with their IDE, etc.\nThe participants can work alone or in pairs. We don’t encourage bigger groups.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Other	2008
20080449	TDD Clinic: BDD, Ruby, & Rails	<div class="content">\n    <p>This session of the TDD clinic gives participants the chance to practice Behavior Driven Development (BDD). We will briefly present the core principles of BDD and then jump right into coding using RSpec.</p>\n\n<p>In BDD, testing becomes less about testing the structure of your code, and more about writing specifications and defining the behavior of your application.  It also relies on the use of a small readable vocabulary, so that everyone - business, technology, managers, testers - is using the same words to define the behavior of the system.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I love showing live code examples, and with Rails, all the code is readable and understandable to anyone with basic programming experience.</p>\n\n<p>I did a more basic presentation on testing in general that covers TDD &amp; BDD for a local users group here in Orlando, FL.  The video can be viewed <a href="http://www.railsenvy.com/2007/10/4/how-i-learned-to-love-testing-presentation">here</a>.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20082039	TDD Clinic: Ron & Chet	<div class="content">\n    <p>In this session of the TDD clinic, Ron and Chet will walk you through test-driven-development in Java.  Participants will write a small program using a very short development cycle of design-test-code-release repeat.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The focus of this session will not be tools, but human interaction.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20082799	TDD Clinic: C++	<div class="content">\n    <p>Test Driven Development is a key Agile Practice. With TDD, programmers get instant feedback that their code does what they intend.  This class shows the motivations behind TDD, but does not stop there. Attendees get first hand experience at TDD, writing well tested code.  You will see how tests can prevent many bugs and memory leaks. We’ll use CppUTest, an open source test harness, to collect, organize and automate C++  unit tests.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Students should bring laptops.  We will pair program in the class, so solo’s can team up.  CDs are provided with test harness and exercise.  Laptops need to be able to compile with gcc or Microsoft Visual  C++ V6 or later.</p>\n\n<p>Outline\nLecture and Questions\n• What is Test Driven Development?<br />\n• Why is TDD Important?<br />\n• Design for Testability<br />\n• TDD Cycle<br />\n• Starting Point for Every C++ class<br />\n• Testing with Fake Objects<br />\n• CppUTest Overview<br /></p>\n\n<p>Demo TDD</p>\n\n<p>TDD Exercise (students are given a series of tests to implement one at a time, these tests give them the feeling for the right size test in TDD.)</p>\n\n<p>TDD Exercise Part 2 (Delete everything and do the exercise writing your own tests and code)</p>\n\n<p>Review and Questions</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20080243	TDD Clinic: .Net and C#	<div class="content">\n    <p>This interactive workshop uses Visual Studio 2008, C#, Rhino Mocks, and Uncle Bob’s famous bowling kata. We will explore beyond the kata to look at data driven unit tests and mock objects.  Participants should bring their laptops and be prepared to implement code in fun, hands-on, practical workshop. </p>\n\n<p><strong>Specific items covered:</strong><br />\n• Unit testing vs. TDD and uses for both.<br />\n• Testing the sad path for better software<br />\n• Data Driven Unit Testing for regression<br />\n• Using mock objects to test Presenters in an MVP implementation of ASP.Net, or using the ASP.Net MVC framework for .Net  </p>\n\n<p><strong>Upon completion, student skills will include:</strong>  </p>\n\n<p>• Understanding fundamental principles and practices of TDD<br />\n• Ability to perform TDD using Visual Studio<br />\n• Apply TDD as a design tool<br />\n• Appropriately identify and apply advanced TDD technologies such as mock objects<br />\n• Understand and apply code coverage as part of an overall test strategy  </p>\n\n<p><strong>Attendees to this session should have the following:</strong><br />\n• Experience creating, maintaining, or debugging software with Visual Studio<br />\n• Experience with C# .Net or a similar Object Oriented language in .Net<br />\n• Experience with basic principles of Object Oriented Programming<br />\n• Understand Microsoft Windows operating system basics  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Lecture and demonstration of each principle to be followed by an implementation excercise with participants implementing solutions with instructor feedback.</p>\n\n<p>I will provide base Visual Studio projects in which attendees will implement ther labs, along with printed lab instructions.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20080285	TDD Clinic: C and Legacy Code	<div class="content">\n    <p>Today, you can find a large amount of material about TDD in Java and C#.  You can also find material about TDD in Ruby and Python.  But, what about C? </p>\n\n<p>C is the <em>lingua franca</em> of systems development.  It sits at the bottom of nearly every system, and yes, you can do TDD in C.</p>\n\n<p>In this hands-on session, we will explore the ramifications of C’s language features in the context of  TDD, and work through exercises which convey several approaches test driven approaches to design and mocking and that are being used by teams today. </p>\n\n<p>Attendees should bring a laptop with a C compiler and a suitable editing environment.  A testing framework with be supplied.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ul><li>The TDD Cycle</li>\n<li>TDD Demo</li>\n<li>Seams in C</li>\n<li>Compilation Unit as Object</li>\n<li>Three Approaches to Seam Injection in C\n<ul><li>Link mocking</li>\n<li>Function Pointer Injection</li>\n<li>Struct-based module interfaces</li></ul></li>\n<li>Scaling the C TDD project</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20082205	TDD Clinic: NUnit	<div class="content">\n    <p>It has been over six years since the first release of NUnit 2.0. In that time there have been literally millions of tests that have been authored. Many of these tests have become invaluable resources for their teams. Unfortunately there have been others that have not been maintained and were viewed as a waste of effort. What separates tests that are maintained from tests that are discarded?  This session describes 7 key lessons that have been proven to increase the readability of the tests as well as their maintainability. Taking these lessons into account can make the difference between tests which become a team burden and tests which become an invaluable team resource.</p>\n\n<p>Lesson highlights include:</p>\n\n<p>• A discussion on the impact of test and test fixture size<br />\n• The use of attributes like [ExpectedException], [Setup], and [TearDown]<br />\n• The impact of dependency injection on unit testing    </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session will be lecture style but will use many code examples to demonstrate the important aspects of the lesson. </p>\n\n<p><strong>Update:</strong>  I have attached an outline of the 7 lessons as a file attachment. </p>\n\n<p>** Update #2: ** I was just looking through the PDF and realized the pages with code on them did not render correctly. I will update it again on Monday.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20084854	Clean Code Clinic: TDD Ping Pong Match!	<div class="content">\n    <p>In this clinic session, attendees will pair-program on implementing small software application features following the TDD Ping Pong game rules. Each game will last for a few minutes, and the programmer with the least time driving (i.e. doing the simplest thing that works and coming up with the most tests) will be declared winner. This game is a great opportunity to sharpen your TDD, refactoring, and pair programming skills  Winners will <em>receive prizes</em>, so get ready for <em>Andy and Dave’s challenge!</em></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The TDD Ping Pong game is played with developers who practice pair-programming and test-driven development while building software application features. The game works as follows:</p>\n\n<ul><li>First developer writes a unit-test</li>\n<li>Second developer writes just enough implementation code to pass the test. The developer is timed while doing so.</li>\n<li>Once the test passes, Second developer writes a new unit-test</li>\n<li>First developer writes just enough implementation code to pass the test. The developer is timed while doing so.</li>\n</ul><p>At the end of developing the required feature, implementation times are compared between both developers and the one with the least time wins. Therefore, to win, one has to write no more than enough code to pass the test, and one has to come up with as many tests as possible to make the other developer write more implementation. </p>\n\n<p>Here are the details of how the competition will be run:</p>\n\n<ul><li>There will be two machines, allowing us to host two TDD Ping Pong matches at a time</li>\n<li>Each match will be played by two of the attendees as they pair-program on the same machine</li>\n<li>Each match will be monitored by one of the presenters</li>\n<li>One of the game machines will be connected to the projector to let other attendees watch the games (and cheer if need be)</li>\n<li>A single match will take 5-10 minutes, resulting in about 16-32 game matches overall (involving 32-64 attendees.)</li>\n</ul><p>Andy and Dave will actively comment during the games to coach people on pair-programming and test-driven development best practices.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20082989	Clean Code Clinic: Ugly Tic Tac Toe	<div class="content">\n    <p>The instructors wish, when they were first learning test-driving, refactoring, and deep OO, that they had had a genuine side-by-side comparison between code Heaven and code Hell. Such an object lesson would have made the value and benefits of agile programming practices so much more plain, so much sooner. Alas for us, but hurray for you!   In this clinic session you will be able to compare and work with two very different implementations of the same problem domain: one of them fabulously ugly, and the other of them — well — much closer to gorgeous. </p>\n\n<h2>Tale of Two Codebases</h2>\n\n<p>We’ll provide attendees with a unique opportunity to experience a worst-case and best-case implementation of a 10 x 10 Tic Tac Toe game. </p>\n\n<p>In this very hands-on tutorial, programmers, working in pairs, will be asked to make an innocent-looking requirements tweak in Code Base A, the downright ornery one that is a single 1000-line “class” with a non-trivial cyclomatic complexity, no-unit tests, rampant duplication, muddled flow of control, a great wash of globals, and no real hope. It’s chock full of methods that look like this:</p>\n\n<pre><code>public int someWierdMethodName(int playerMark, int x, int type) \n{\n    int j, k, l;\n    int position = 0, position2 = 0;\n\n    for (l = 0; l &lt; 6; l++) {\n        for (j = 0; j &lt; SQUARES_PER_SIDE; j++) /* horiz &amp; vert */\n        {\n            resetAllMarksAlongAxesForFirstHalfOfBoard();\n\n            position = checkFor5AlongHorizAxis(playerMark, x, j, l, position);\n\n            if (marksByAxisByPlayerForChecking[0] == 3 &amp;&amp; marksByAxisByPlayerForChecking[1] == 2) {\n                if (type == SETFLAGS_MODE) {\n                    tempTableForChecks[tempRowForChecks[0]] = OCCUPIED;\n                    tempTableForChecks[tempRowForChecks[1]] = OCCUPIED;\n                }\n                if (type == CLEAN_MODE) return tempRowForChecks[0];\n            }\n\n            if (marksByAxisByPlayerForChecking[0] == 4 &amp;&amp; marksByAxisByPlayerForChecking[1] == 1 &amp;&amp; type == CHECK_MODE) \n                                    return position;\n\n            position = checkFor5AlongVertAxis(playerMark, x, j, l, position);\n\n            if (marksByAxisByPlayerForChecking[2] == 3 &amp;&amp; marksByAxisByPlayerForChecking[3] == 2) {\n                if (type == SETFLAGS_MODE) {\n                    tempTableForChecks[tempRowForChecks[0]] = OCCUPIED;\n                    tempTableForChecks[tempRowForChecks[1]] = OCCUPIED;\n                }\n                if (type == CLEAN_MODE)\n                    return tempRowForChecks[0];\n            }\n            if (marksByAxisByPlayerForChecking[2] == 4 &amp;&amp; marksByAxisByPlayerForChecking[3] == 1 &amp;&amp; type == CHECK_MODE)\n                return position;\n        }\n\n        for (j = 0; j &lt; 6; j++) {\n            resetAllMarksAlongAxesForFirstHalfOfBoard();\n\n            for (k = 0; k &lt; 5; k++) \n            {\n                position  = checkFor5AlongDiagDownRightAxis(playerMark, x, j, k, l, position);\n                position2 = checkFor5AlongDiagUpRightAxis(playerMark, x, j, k, l, position2);\n            }\n\n            if (marksByAxisByPlayerForChecking[0] == 3 &amp;&amp; marksByAxisByPlayerForChecking[1] == 2) {\n                if (type == SETFLAGS_MODE) {\n                    tempTableForChecks[tempRowForChecks[0]] = OCCUPIED;\n                    tempTableForChecks[tempRowForChecks[1]] = OCCUPIED;\n                }\n                if (type == CLEAN_MODE) return tempRowForChecks[0];\n            }\n            if (marksByAxisByPlayerForChecking[0] == 4 &amp;&amp; marksByAxisByPlayerForChecking[1] == 1 &amp;&amp; type == CHECK_MODE) return position;\n\n\n\n            if (marksByAxisByPlayerForChecking[2] == 3 &amp;&amp; marksByAxisByPlayerForChecking[3] == 2) {\n                if (type == SETFLAGS_MODE) {\n                    tempTableForChecks[tempRowForChecks[0]] = OCCUPIED;\n                    tempTableForChecks[tempRowForChecks[1]] = OCCUPIED;\n                }\n                if (type == CLEAN_MODE) return tempRowForChecks[0];\n            }\n            if (marksByAxisByPlayerForChecking[2] == 4 &amp;&amp; marksByAxisByPlayerForChecking[3] == 1 &amp;&amp; type == CHECK_MODE) return position2;\n        }\n    }\n    return (NONE);\n}\n</code></pre>\n\n<p>So, you know what? That method was even scarier before we got a hold of it. Almost none of the variable names revealed any intention, and all of those semi-helpful-sounding utility methods?  They were all in-line. So it was actually worse than this. But there are limits to our cruelty, it turns out. We had to fix it up at least a little</p>\n\n<h2>Crap4J Gives Us Truth, Brothers and Sisters</h2>\n\n<p>To get a full sense of how scary this codebase is, please see the <a href="http://submissions.agile2008.org/files/Crap4JReportUglyTicTacToe.pdf" title="Whoa, scary.">attached Crap4J report</a> that shows the “percentage of crappy methods” metric pegged at 20.88 out of 15.  (<a href="http://www.crap4j.org/" title="Crap4J: a very useful tool for legacy Java.">Crap4J </a> is a great little one-metric tool that measures how well test-covered the worst of your code is.)</p>\n\n<p>Be afraid. Be very afraid.  We predict that NO-ONE will be able to demonstrate that they have made this seemingly simple requirements tweak in the time allotted. </p>\n\n<p>Attendees will then be asked to test-drive the same requirements tweak in Code Base B, the friendly one with the requisite object model that is well \ntest-driven, well test-protected, and well factored. </p>\n\n<p>Both of these Tic-Tac-Toe games are playable as Java applets. And you know what? They’re good!  They beat the instructors most of the time (which, admittedly, might not be saying all that much).</p>\n\n<p>Many will be astonished at how unspeakably different from each other these codebases are. Many test-driving and refactoring novices will be flabbergasted at the difference in these two systems’ extensibility and clarity. </p>\n\n<p>This is not a complete survey of all of the differences between old-fashioned bad procedural code, and new-fangled agile OO goodness. It is instead a deep dive, from the perspective of a poor programmer with a nasty deadline. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><h2>The Experience: Catastrophe &amp; Epiphane</h2>\n\n<p>Note: As part of the Clean Code Clinic, we’ll hold a 90-minute session twice. You can attend either one. </p>\n\n<p>We’ll get everyone set up with the Ugly code base in Eclipse or Idea, as they prefer, as quickly as we can. We want to get to coding with very little introductory preamble. </p>\n\n<p>All programming will be in pairs or small groups.</p>\n\n<p><strong>Duration: 15 minutes.</strong></p>\n\n<p>We’ll then subject everyone to the seemingly innocent little requirements change in the Ugly code base. We’ll enforce the deadline ruthlessly. There will be wailing and gnashing of teeth. </p>\n\n<p><strong>Duration: 30 minutes.</strong> </p>\n\n<p>We’ll next  have a retrospective on the first exercise, with brief synopses from different teams. We’ll all share the pain. We’ll then have a summary of agile/XP programmer practices that can prevent this kind of heartache entirely. </p>\n\n<p><strong>Duration: 15 minutes</strong></p>\n\n<p>Next, everyone will be given Friendly, Nice Code Base B (again, with a clear, simple model, exhaustive unit tests, etc). They’ll be given a bit of time to attempt the same requirements tweak.  It will take astonishingly little time for the OO cats in the room.  </p>\n\n<p><strong>Duration: 15 minutes.</strong></p>\n\n<p>We’ll retrospect: (Whoa, what just happened? How in the world can Code Base A be so completely intractable for this requirement compared to Code Base B?) </p>\n\n<p>We’ll celebrate all the Aha! moments. We’ll all take one last deep, relaxing breath. </p>\n\n<p>We’ll close with Q &amp; A. </p>\n\n<p><strong>Duration: 15 minutes.</strong></p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20084593	Clean Code Clinic: Dealing with CRRAP (Microtesting Legacy Code)	<div class="content">\n    <p>The second great myth of software development training is the notion that most\nprogramming most of the time is on new code. In fact, most developers spend most of\ntheir time working on CRRAP: Code Requiring Remedial Attention Promptly. In this course,\nwe’ll lay out the five basic patterns for bringing complex legacy code under perfectly\ntested control. If you’ve ever heard or said “Don’t touch that, you don’t know what it’s\nconnected to,” this class is for you. Each pattern is illustrated with a complete real-world\nexample, and in the final section, the patterns are combined to turn an extraordinary piece\nof CRRAP into a clear, coherent, perfectly tested piece of gold.</p>\n\n<p>For maximum benefit from the class, you’ll want a) a serious Java IDE, such as Eclipse or IntelliJ, b) a wireless connection, and c) the willpower to un-ravel a single nightmarish (real-world) legacy class.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This class is divided into three sections of an hour each.  Each section combines a half-hour of lecture/discussion with a half-hour of actual lab time, working on the famous CRRAP application.</p>\n\n<p>Mike Hill is well known in agile circles for his irreverent style and his rock-solid content.  The class was presented at last year’s conference with high attendance and high ratings.  This year, it’s even better:  the labs have been extended and focused, and materials updated accordingly.</p>\n\n<p>The presentation will be made using Industrial Logic’s innovative eLearning system, and a decent wireless setup to the outside world is therefore quite important.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20080443	Clean Code Clinic: Refactoring Fest	<div class="content">\n    <p><strong>Intent</strong></p>\n\n<p>Provide the participants with a hands-on-experience of real world refactoring by taking an open source project and refactoring it.</p>\n\n<p><strong>Summary</strong> </p>\n\n<p>Refactoring is a very well established practice not just in the Agile Community, but outside as well. Following are some of the books that have been published on this subject:</p>\n\n<ul><li>Refactoring: Improving the Design of Existing Code: Martin Fowler</li>\n<li>Refactoring to Patterns: Joshua Kerievsky</li>\n<li>Working Effectively with Legacy Code : Michael Feathers</li>\n</ul><p>Unfortunately, in-spite of such great knowledge available, there are lots of misconceptions around refactoring. The word “refactoring” is often used in a broad context where “enhancement” or “rewrite” would be a better term, and can cause nightmares to project stakeholders.</p>\n\n<p>This session is an attempt to help the development community understand refactoring a little better. It will provide a hands-on opportunity for developers to explore these concepts in action. This session will try to amplify the participant’s learning process by pairing them with other practitioners and peers.</p>\n\n<p><strong>Intended Audience</strong></p>\n\n<p>This session is suited for developers and architects who are interested to learn how to refactor real projects.</p>\n\n<p><strong>Benefits</strong></p>\n\n<p>After attending this session, the participants should be able to:</p>\n\n<ul><li>Build a common vocabulary in the refactoring space</li>\n<li>Identify code smells</li>\n<li>Eliminate code smells by applying the simple refactoring techniques explained in Martin Fowler‘s “Refactoring”</li>\n<li>Write better unit/functional tests for legacy code</li>\n<li>Understand some of the techniques and pitfalls in refactoring legacy code in the absence of unit and functional tests [”Working effectively with legacy code “]</li>\n<li>Take existing code and refactor it to standard design patterns [Refactoring to patterns]</li>\n<li>Learn about the internals of the open source project chosen to refactor</li>\n<li>Know where to look to continue learning the techniques of refactoring</li>\n</ul><p><strong>History of this workshop</strong>   </p>\n\n<ul><li>This exercise was used during a few Agile Philly User group meetings. </li>\n<li>It was used internally at ThoughtWorks and on many other training engagements. </li>\n<li>I have used this exercise to provide a hands-on exposure to refactoring to various client developers.</li>\n<li><a href="http://blogs.agilefaqs.com/2006/05/21/refactoring-fest/">First blog post about refactoring fest</a></li>\n<li><a href="http://blogs.agilefaqs.com/2007/11/09/refactoring-fest-2">Updated Blog post</a>   </li>\n<li><a href="http://sdtconf.com/wiki/tiki-index.php?page=Refactoring+Fest">Refactoring Fest at Simple Design and Testing Conference</a></li>\n<li>Ran this workshop at the Agile Dev Practices Conference organized by SQE in Orlando</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Outline</strong>\n<strong>Section 1 – 90 Minutes</strong></p>\n\n<p><strong>Iteration 0 / Overview : 45 mins</strong></p>\n\n<ol><li>20 mins: Quick overview about refactoring with some examples.</li>\n<li>10 mins: High level overview of the open source project‘s design</li>\n<li>05 mins: The participants form pairs and each pair picks up a module/package of the open source project.</li>\n<li>10 mins: The participants spend time understanding the functionality of the module/package picked up by the individual pairs.</li>\n</ol><p><strong>Iteration 1 : 45 mins</strong></p>\n\n<ol><li>10 mins: I’ll show 2-3 simple code smells, explain associated refactoring techniques.</li>\n<li>15 mins: Each pair identifies one or more classes from the module/package, which has these code smells. They try and understand what it does, in the process they might do some basic refactorings like extract method and rename variables/methods. Eventually the goal is to writes one or more unit tests around it. Once they have sufficient passing unit tests [safety net], they start cleaning up code by applying some advanced refactoring techniques. In some cases, sufficient unit tests might not be required to do simple refactoring like extract method, rename variable, etc. Sometimes internally restructuring the code, can help us understand it better. Hence the participants will have to constantly switch between ‘understanding’, ‘unit testing’ and ‘refactoring’ hat.</li>\n<li>20 mins: The pairs stops refactoring. Couple of pairs connect to a central project and demonstrates their accomplishment to the rest of the group. We can break into a discussion about each team‘s refactorings.</li>\n</ol><p><strong>Break – 30 Minutes</strong></p>\n\n<p><strong>Section 2 – 90 Minutes</strong></p>\n\n<p><strong>Iteration 2: 40 mins</strong></p>\n\n<ol><li>The pairs swap partners so that each team gets a new member and one old member continues on the selected module/package.</li>\n<li>10 mins: I’ll show 2-3 little more complicated code smells and explain associated refactoring techniques.</li>\n<li>Pairs try to apply these refactoring techniques for the next 15 mins.</li>\n<li>At the end of 15 mins we have another 15 mins demo and refactoring discussion.</li>\n</ol><p><strong>Iteration 3: 40 mins</strong></p>\n\n<ol><li>The pairs swap partners again.</li>\n<li>10 mins: I’ll show 2-3 more complicated code smells and explain associated refactoring techniques.</li>\n<li>Pairs try to apply these refactoring techniques for the next 15 mins.</li>\n<li>At the end of 15 mins we have another 15 mins demo and refactoring discussion.</li>\n</ol><p><strong>10 Minutes - Retrospective</strong></p>\n\n<ul><li>What worked? The participants indicate what they learned.</li>\n<li>What did not work?</li>\n<li>What to do differently next time? Suggestions from participants on how to improve the session.</li>\n</ul><p><strong>Infrastructure Required</strong></p>\n\n<ul><li>U shaped table setup with a projector at the center of the table which can connect to all the computers.</li>\n<li>Either the participant get their own laptops with required software setup or we provide the participants with computers. We’ll need 10-15 computers for the participants. Each computer is set up for a pair [2 chairs]. The presenters will set up the computers with the required software a day in advance of their session.</li>\n<li>10-15 flip charts, one per team.</li>\n</ul><p><strong>Pre-requisites for attending the session</strong></p>\n\n<ol><li>Object Oriented Programming</li>\n<li>Some knowledge of Java and Servlets [don’t worry too much about this, pairing can save you]</li>\n<li>You need the following software setup on your machine before you come:\n<ul><li><a href="http://www.eclipse.org/downloads/">Latest Eclipse IDE for Java Developers</a></li>\n<li><a href="http://java.sun.com/javase/downloads/index.jsp">Latest Sun JDK</a></li>\n<li><a href="http://tomcat.apache.org/index.html">Latest Apache Tomcat Web Server</a></li>\n<li><a href="http://sourceforge.net/project/showfiles.php?group_id=34106">Latest Very Quick Wiki</a></li></ul></li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20082381	Automated Testing Clinic: Testing with a Purpose	<div class="content">\n    <p><strong>Summary</strong></p>\n\n<p>There are two questions worth asking oneself over and over when creating automated acceptance tests.</p>\n\n<ul><li>What is the purpose of this test?</li>\n<li>Does the test express this purpose as clearly as possible?</li>\n</ul><p>This clinic uses exercises and examples to reinforce the good habit of writing tests with a clear purpose. Our focus is on favoring “declarative-style” tests over “procedural-style” tests.  (See Bill Wake’s explanation of the difference at <a href="http://xp123.com/xplor/xp0503/index.shtml" title="http://xp123.com/xplor/xp0503/index.shtml">http://xp123.com/xplor/xp0503/index.shtml</a>)</p>\n\n<p>The key learning — writing purposeful tests — is applicable in any testing tool; we have chosen to give the exercises and instruction in FitNesse (Java), so this clinic will also give attendees a way to learn and practice FitNesse skills.</p>\n\n<p><strong>Objectives</strong></p>\n\n<ul><li>Learn how to write more understandable tests.</li>\n<li>Create stronger, more useful tests with less effort.</li>\n<li>Build test suites that are valuable to non-testers.</li>\n<li>Gain experience writing and running tests in FitNesse (Java).</li>\n<li>Understand the benefits of FIT/FitNesse table-based approach to testing.</li>\n</ul><p><strong>Audience</strong></p>\n\n<ul><li>Developers and testers interested in creating automated acceptance test suites in FitNesse.</li>\n<li>Bring a laptop set up with a Java development environment. (Or perhaps the instructors can provide USB drives for attendees with complete setup for this clinic)</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Our teaching style uses small, guided exercises in the first session, moving to more free-form and challenge in the second session.</p>\n\n<p>First session: <strong>Introduction to Purposeful Testing in FitNesse</strong></p>\n\n<ul><li>Readability: Participants quickly look at a set of sample tests and rate each one for understandability. Gather all ratings, show tests in order of rating, discuss what makes tests readable or unreadable.</li>\n<li>Creating test objectives from requirements: Participants create test objectives for a requirement; instructors provide a “bad” example to contrast with good objectives created by participants.</li>\n<li>Writing tests in FitNesse: ColumnFixture and ActionFixture.</li>\n<li>Removing unnecessary detail: Participants refactor a messy, unreadable test into a clearly understandable test.</li>\n<li>Declarative vs. procedural style: Participants refactor a set of procedural tests into a single declarative test. </li>\n<li>Debrief and discuss advantages of FIT’s table-based approach.</li>\n<li>Agile wrap-up: Participants share one insight they have gained.</li>\n</ul><p>Second sesssion: <strong>Practicing Purposeful Testing in FitNesse</strong></p>\n\n<ul><li>Clear tests encourage more ideas: Show one sample test at a time (Perhaps have about 5 sample tests?) Participants brainstorm to come up with more test cases for that test. Discuss which tests made it easier for them to think of more test cases.</li>\n<li>Self-guided practice: Teams write tests for a sample application. Instructors answer questions and provide help as needed.</li>\n<li>Teams swap tests. The new “owners” of the tests spend a moment looking over the tests to identify their purpose; then present to the whole group.</li>\n<li>Agile wrap-up: Participants share one insight they have gained.</li>\n</ul><p><strong>About the Instructors</strong>\nKay has 8 years experience leading automated testing efforts, extensive FitNesse experience and has taught corporate training courses on FitNesse. Christian is the author of the open-source testing framework Jameleon and has mentored teams on unit and acceptance testing for over 7 years. Both instructors presented tutorials at Agile 2007 and have been active in the Agile community since 2001. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20080734	Automated Testing Clinic: FitNesse.NET	<div class="content">\n    <p>Automated acceptance testing is a key agile practice. This clinic provides some intense hands-on experience with the FitNesse.NET automated testing environment. I will provide an overview of automated functional testing and the FitNesse.NET environment. I will guide participants, working in pairs, to develop test and production code for a bowling scoring system.</p>\n\n<p>Participants should be experienced C# developers with an interest in automated functional testing.  Experience with FitNesse is helpful but not mandatory.  Participants should bring a laptop with a C# IDE. A setup CD for FitNesse.NET will be provided.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Session 1: (90 minutes)</p>\n\n<p>(10 min) Introductions: Presenter introduces the session. Participants rate their skill level in automated testing and name the biggest challenge they are currently facing.</p>\n\n<p>(5 min) Testing as a core agile practise: Motivation for automated testing and test-first. Quality, early validation, safety net, productivity, objective measurement of progress, collaboration and communication.</p>\n\n<p>(5 min) The TDD and STDD Cycles:  Red-green-refactor and describe-demonstrate-develop. Unit tests vs story tests vs coverage tests vs exploratory tests. Code right and right code.</p>\n\n<p>(5 min) The FitNesse.NET environment part 1: The wiki, the test and suite pages, the test runners, fixture code and the system under test.</p>\n\n<p>(5 min) Fixture Roadmap part 1: A brief overview of some common fixtures and what they do.</p>\n\n<p>(5 min) FitNesse.NET Set-up: Participants will set up FitNesse.NET on their laptops.  We’ll provide the software on CD.</p>\n\n<p>(50 minutes) Hands-on:  The remainder of the session will work through a set of exercises using the classic bowling game domain, with a few additional features.  For each exercise, we will describe the requirement and discuss some FitNesse features that we can use to develop story tests.  Participants will form working groups (pairs or whatever they wish) and work on the exercise.  Presenter will circulate to provide advice to groups that are stuck.  We will conclude each exercise by showing a possible solution.</p>\n\n<p>(5 min) Wrap-up: Participants talk about what they’ve learned, what they’re still puzzled about, where they’d like to see tools go.</p>\n\n<p>Session 2: (90 minutes)</p>\n\n<p>(10 min) Introductions: Presenter re-introduces the session. New participants rate their skill level in automated testing and name the biggest challenge they are currently facing. Presenter summarizes highlights of 1st session.</p>\n\n<p>(5 min) Introduction to test styles: Declarative vs procedural. Specifying behavior. Given-When-Then.</p>\n\n<p>(5 min) The FitNesse.NET environment part 2: More about the wiki, the test and suite pages, the test runners, fixture code and the system under test.</p>\n\n<p>(5 min) Fixture Roadmap part 2: A brief overview of some more fixtures and what they do.</p>\n\n<p>(5 min) FitNesse.NET Set-up: Participants will set up FitNesse.NET on their laptops.  We’ll provide the software on CD.</p>\n\n<p>(5 min) Recap of exercises from session 1. The CD will provide sample solutions for session 1 so new participants can continue from there.</p>\n\n<p>(50 minutes) Hands-on:  The remainder of the session will work through a set of exercises using the classic bowling game domain, with a few additional features.  For each exercise, we will describe the requirement and discuss some FitNesse features that we can use to develop story tests.  Participants will form working groups (pairs or whatever they wish) and work on the exercise.  Presenter will circulate to provide advice to groups that are stuck.  We will conclude each exercise by showing a possible solution.</p>\n\n<p>(5 min) Wrap-up: Participants talk about what they’ve learned, what they’re still puzzled about, where they’d like to see tools go.</p>\n\n<p>Exercises will be:</p>\n\n<p>Session 1</p>\n\n<ul><li>Calculate game score, using Column</li>\n<li>Calculate game score, using Do</li>\n</ul><p>Session 2</p>\n\n<ul><li>Simple scorecard, using Row and Array</li>\n<li>Validate rolls, handling exceptions</li>\n</ul><p>We’ll have some additional exercises available, if time permits:</p>\n\n<ul><li>Register players, set-up, passing data</li>\n<li>Enhanced scorecard, using more advanced features</li>\n<li>Player statistics, using more advanced features</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20084674	Acceptance Testing Clinic: FitNesse	<div class="content">\n    <p><strong>Intent</strong><br />\nTo help the participants learn, how to build acceptance criteria and automated acceptance tests from User Stories to drive development and testing.    </p>\n\n<p><strong>Overview</strong><br />\nCollaboration, feedback, and shared understanding are some of the core values of agile practices. In addition, many agile projects need executable specifications created with your customers’ participation. Unfortunately, many agile teams struggle with building automated acceptance tests to implement executable specifications. I’ll explain this practice and provide a demonstration of how to perform Acceptance Test-Driven Development (ATDD) on real projects using FitNesse and the FitLibrary. I’ll share my recipe for getting customers involved on agile projects that use automated acceptance tests. The participants should also be able to learn how to start this practice in your team and how managers can track the team’s progress using these acceptance tests.    </p>\n\n<p><strong>Audience</strong><br />\nCustomers, Business Analyst, QAs, Developers, anyone interested in the topic. This tutorial expects participants to have some knowledge about Agile and Iterative development. In the past, this tutorial has been most effective when participants are already using Agile and want to start the practice of acceptance testing. Some familiarity with Fit/FitNesse would help.</p>\n\n<p><strong>Outline</strong><br />\nThis tutorial will provide in-depth answers to the following questions.   </p>\n\n<ul><li>What is Automated Acceptance Testing. Why do we need? </li>\n<li>Where does Acceptance Testing fit in an Agile process? </li>\n<li>What does the term Executable Specification mean? </li>\n<li>What roles do QA’s play? What roles do developers play? What roles do BA’s/Customers play? </li>\n<li>What impact does Acceptance Testing have on quality and productivity? </li>\n<li>What tools are available? (FIT, FitNesse, FitLibrary, etc) </li>\n<li>How to write Acceptance Tests first, before writing the code? </li>\n<li>How to organize Stories, Acceptance Criteria and Acceptance Test better?</li>\n<li>How to create different levels of test suites to give feedback at different levels?</li>\n<li>How to version control the FitNesse wiki with their source code?</li>\n<li>Inline editing of their FitNesse pages, with out having to worry about Wiki syntax</li>\n<li>Integrate FitNesse with their builds, so that they can run their acceptance tests as part of their Continuous Integration loops</li>\n<li>Integrate FitNesse with CruiseControl or other CI servers to that the team can see the acceptance test results from the build</li>\n<li>Execute acceptance tests against the server side components in a web/app server</li>\n<li>What patterns and anti-patterns teams use for ATTD?</li>\n</ul><p><strong>Slides</strong> : <a href="http://www.slideshare.net/nashjain/acceptance-test-driven-development-197048/" title="http://www.slideshare.net/nashjain/acceptance-test-driven-development-197048/">http://www.slideshare.net/nashjain/acceptance-test-driven-development-19...</a><br />\nSlides are slightly out dated. They needs to be updated to incorporate some of the questions asked above. Also the number of slides need to reduced and we need to focus more on hands-on session.   </p>\n\n<p><strong>Presentation History</strong><br />\nThis tutorial was presented in various forms at XP/Agile Universe 2004, STAR West 2005, STAR East 2005, local user groups and many other training engagements.<br />\nIntroduction to Automated Acceptance Testing, Agile2006<br />\nIntroduction to Acceptance Test Driven Development, Agile2007<br />\nIntroduction to Acceptance Test Driven Development, SQE’s First Agile Development Practices Conference in Orlando.   </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Content Outline</strong><br />\nSection 1 – 90 Minutes   </p>\n\n<ul><li>Introductions</li>\n<li>Hopes and Concerns activity</li>\n<li>Warm up activity to help participants understand important of “acceptance (doneness) criteria” and difficultly in coming up with the same</li>\n<li>Introduction to Acceptance testing and Acceptance test drive development using FitNesse and FitLibrary.</li>\n<li>Examples of good and bad acceptance tests</li>\n<li>Quick Demo of ATDD</li>\n</ul><p>Break – 30 Minutes   </p>\n\n<p>Section 2 – 90 Minutes   </p>\n\n<ul><li>Hands on exercise for all the participants (laptops/computers would be required at this stage)</li>\n<li>Patterns and Anti Patterns</li>\n<li>Conclusion</li>\n</ul><p><strong>Infrastructure Required</strong><br />\nA projector, round or rectangular tables with 5-6 chairs per table, a whiteboard or flip-chart per table, 2 packs of 200 PostIt Stickies (red and green)</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20084596	Continuous Integration Clinic	<div class="content">\n    <h2>Main Message:</h2>\n\n<p>Continuous Integration has put a lot of focus on automation of the build and unit test process.  This quest for automation has been expanding to include more and more automated tests and deployments as well.  This presentation provides an overview of how to apply automation to activities further within the life-cycle.</p>\n\n<h2>Description:</h2>\n\n<p>This presentation looks at where we’ve been and where we’re headed in terms of Continuous Integration.  We’ll briefly take a look at the history of Continuous Integration and its model implementations.  Then we’ll explore how the adoption of Continuous Integration drives the desire for more and more automation; and the effect of that automation on further testing and deployments.  We’ll delve into some of the difficulties with automating tests as well as strategies to overcome them.  We’ll then take a look at some of the challenges to automating deployments and common approaches to handle them.  Finally, we’ll consider methods for integrating the various automated activities throughout the life-cycle into a cohesive whole.</p>\n\n<h2>Outline:</h2>\n\n<ul><li>Introduction to Continuous Integration</li>\n<li>What is it</li>\n<li>History</li>\n<li>Model Implementation</li>\n<li>Applying the tenets of CI further in the life-cycle</li>\n<li>automating deployments</li>\n<li>automated testing (functional, integration, regression, etc)</li>\n<li>impact on different users throughout the life-cycle</li>\n<li>Summary</li>\n<li>CI started with build</li>\n<li>CI pushed for more testing</li>\n<li>More testing pulled along automated deployments</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20084381	Continuous Integration Clinic: Continuous Monitoring	<div class="content">\n    <p>Continuous Integration is at the heart of every Agile project. However, the status of the build process is only one source of information about the health of a project. Project velocity, bug counts, system performance, code metrics, and production uptime all provide valuable information about project health. But these bits of information are generally locked away in different systems and are not easily accessed or leveraged by the software team. Continuous monitoring is about pulling all of these sources of information together in a way that is visible and empowering for the entire team. The session demonstrates how a team can quickly create Toyoto Production System-inspired andon boards by leveraging the power of wall-mountable flat-panel displays and simple dashboards (think continuously-updatable, easily reconfigurable and extensible Big Visible Charts on steroids).</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session is divided into 3 sections:\ni) a review of lean production concepts, several examples of andon from manufacturing, and a list of ways in which andon can be applied to software teams. \nii) a demonstration of a software team andon in action. \niii) a discussion of ways in which andon can be leveraged for software teams.</p>\n\n<p>Each section will run for 30 minutes.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Clinic	2008
20080377	Continuous Testing: TDD Turned Up To 12	<div class="content">\n    <p>Continuous Testing (CT) is a developer practice that involves automatically running tests after every change, even so much as a single statement. It gives you instant feedback about the semantic correctness of your code, just as modern IDE’s give you instant feedback about syntax errors. CT has a profound impact on the way we use TDD. This session will cover the history, theory, practice, and daily application of CT to real-world projects.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>First, I’ll cover the history and basics of Continuous Testing, discuss it’s application on different platforms, and our ongoing experiences with CT at Semantra. Then I’ll show a demo of the practice using various languages and some open source continuous testing tools. Finally, we’ll wrap up with a discussion of where this practice might be headed.</p>\n\n<h2>Outline</h2>\n\n<p><strong>What is Continuous Testing? (2-4 slides)</strong></p>\n\n<ul><li>History</li>\n<li>Benefits</li>\n<li>Survey of available Open Source tools</li>\n</ul><p><strong>Continuous Testing with statically-typed languages(7 - 10 slides)</strong></p>\n\n<ul><li>Using dependency analysis to find a minimal tests</li>\n<li>A stochastic examination of the effectiveness of test dependency analysis (see below)</li>\n<li>Using CT as a method for discovering unnecessary coupling</li>\n</ul><p><strong>CT for dynamically-typed language (7 - 10 slides)</strong></p>\n\n<ul><li>Using CT as a substitute for code completion tools</li>\n<li>Inline Commands: Controlling your development using temporary code</li>\n<li>Compiling vs. Interpreting</li>\n<li>Scaling to larger projects</li>\n</ul><p><strong>CT @ Semantra (3 - 5 slides)</strong></p>\n\n<ul><li>Realized Benefits</li>\n<li>Pitfalls/Drawbacks</li>\n<li>Impacts on architecture</li>\n</ul><p><strong>Demo (20-30 minutes)</strong></p>\n\n<ul><li>Infinitest-java</li>\n<li>Zen-Test</li>\n<li>Infinitest-groovy</li>\n<li>Infinitest-py</li>\n<li>A backdoor to CT with NUnit</li>\n</ul><p><strong>Looking to the future (4-8 slides)</strong></p>\n\n<ul><li>Is speed is the only relevant category for tests, or one of many factors? What if we:\n<ul><li>Run the fast tests first?</li>\n<li>Provide immediate feedback when tests slow down?</li></ul></li>\n<li>How else can we prioritize test runs?\n<ul><li>Distance from last change?</li>\n<li>User configurable?</li></ul></li>\n<li>Should “bad” tests be failing tests? What if we:\n<ul><li>Fail on uncovered code</li>\n<li>Fail on slow tests</li></ul></li>\n<li>What other opportunities does CT open?\n<ul><li>Parallelization of tests across multiple cores?</li>\n<li>Automatically integrate on every green bar?</li></ul></li>\n</ul><p><strong>Q&amp;A (20 minutes)</strong></p>\n\n<h2>A Stochastic Examination…</h2>\n\n<p>I’m going to set up a small experiment where:</p>\n\n<ol><li>I’ll use Jumble to randomly introduce a change in a target project with a fair amount of dependency injection (probably JMock)</li>\n<li>Run all the tests to see if the change introduces any errors</li>\n<li>Run Infinitest to see if it detects the same errors</li>\n<li>Revert the change, and try again</li>\n</ol><p>After running this a few thousand times, I should have some solid statistical data on how often Infinitest-java finds the truly minimal set of tests. I’ll present the results of this, along with the technique, as part of the presentation.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Demonstration	2008
20084224	Advanced Test Patterns in C++	<div class="content">\n    <p><strong>Printed Program Guide Blurb</strong><br />\nBooks on Test-Driven Development abound for C# and Java, but there are few directed towards C++ programmers. Yet much software is written is C++, and C++ is an extremely powerful language, one that I’ve found to be quite well-suited for doing TDD. I will present a series of practical and efficient testing patterns specifically for C++.  Most of the techniques involve templates; one of them involves lexical closure. Many of these techniques are also well-suited for dealing with legacy code.</p>\n\n<p><strong>Abstract</strong><br />\nBooks on Test-Driven Development abound for C# and Java, but there are few directed towards C++ programmers.  Yet much software is written is C++, and C++ is an extremely powerful language, one that I’ve found to be quite well-suited for doing TDD.  I will present a series of practical and efficient testing patterns specifically for C++.</p>\n\n<p><strong>Topics Covered</strong> </p>\n\n<ul><li>The standard way to mock an API call (or free function call) is through “Sub-class and Override” (a.k.a. “Test Sub-class”). What do you do if your code needs to be so performant that you can’t use a virtual method? What other techniques are available?  </li>\n<li>How do you mock an API call in a static method?  </li>\n<li>Suppose you have a static method which contains an automatic variable of class type Foo.  How do you inject a test double of Foo into a static method?    </li>\n<li>Suppose you have an instance method and want to replace an automatic variable (or API call) with a Test Spy. What’s the safest way of getting the answer back from the spy?    </li>\n<li>Say you have a class containing an inconvenient data member of type Foo.  How can you create a test version of your class with the Foo data member replaced with a Test Double?  </li>\n</ul><p>The answers to most of these questions involve templates.  The answer to one of them involves lexical closure.  Many of these techniques are also well-suited for dealing with legacy code.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>PowerPoint slide-deck presentation - almost entirely sample code:  problem statement followed by solution(s).  Q &amp; A during and after.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Tutorial	2008
20080337	Code Metrics & Analysis for Agile Projects	<div class="content">\n    <p>What do code and methodology have to do with one another? Everything! This session is a survey of tools and metrics that allow you to determine the quality of your code along with strategies to “wire it” into your agile project. I talk about the Hawthorne effect, analysis tools, useful metrics, tools for generating metrics, and how to analyze raw data into actionable tasks.The metrics I cover include: cyclomatic complexity, efferent and afferent coupling, the Chidamber/Kemerer metrics suite, CRAP4J, and all the metrics covered by Panopticode. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a “traditional” speaker-led talk, with strong encouragement for audience interaction, especially around the examples I show.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Talk	2008
20080801	Architecture in an Agile Organization	<div class="content">\n    <p>Our organization just ended a successful pilot project using agile methods. As a result management has decided to introduce agile across IT. There are still questions about adopting agile across the organization:</p>\n\n<ul><li>Who will ensure we have the “right” architecture for our future needs?</li>\n<li>Who is responsible for software quality reuse?</li>\n<li>Does agile work large-scale projects</li>\n<li>Who will focus on the big picture?</li>\n</ul><p>This talk will present patterns and methods about how an agile organization manages architecture concerns.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The presentation, depending upon the number of attendees, can be conducted in at least 2 ways:</p>\n\n<ol><li>More lecture-based\nIn this format I will explain concepts and interact with attendees through questions.  This is not my preferred way but if we get over 30 people it may be the best way.\n<ul><li>Software as an asset</li>\n<li>Facets of architecture to consider</li>\n<li>Architecture support in Agile software development</li>\n<li>Infrastructure and practices to support architecture needs</li>\n<li>Team configurations to support architecture evolution</li>\n<li>Business language for architecture requirements</li>\n<li>What can be managed at the enterprise level?</li>\n<li>How can we help teams deliver good architectures</li></ul></li>\n</ol><p>If there are 30 or less attendees we can run exercises and simulations for parts of the agenda which help reinforce concepts such as:\n* Technical debt\n* Facets of architecture\n* Continuous integration\n* Writing user stories for non-functional requirements</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Talk	2008
20084299	Agile Developer Practices for Dynamic Languages	<div class="content">\n    <p><strong>Abstract</strong></p>\n\n<p>Developer practices for traditional and agile Java development are well understood and documented. But dynamic languages—Groovy, Ruby, and others—change the ground rules. Many of the common practices, refactoring techniques, and design patterns we have been taught either no longer apply or should be applied differently and some new techniques also come into play. In this talk, techniques for agile development with dynamic languages are discussed. How should we apply design patterns? How should we better apply refactoring techniques? What new aspects do we need to think about?</p>\n\n<p><strong>The Pitch</strong></p>\n\n<p>Developer practices for traditional and agile Java development are well understood and documented. But dynamic languages—Groovy, Ruby, and others—change the ground rules. Many of the common practices, refactoring techniques, and design patterns we have been taught either no longer apply or should be applied differently. In addition, some new techniques can come into play to improve your development.</p>\n\n<p>In this talk,  new and modified techniques for agile development with dynamic languages are discussed. How should we apply design patterns, how should we better apply refactoring techniques and what new aspects do we need to think about are all discussed.</p>\n\n<p>Topics include:</p>\n\n<ul><li>the pros and cons of static and dynamic typing</li>\n<li>closure refactoring</li>\n<li>better ways to apply design patterns including delegation pattern, observer pattern, iterator pattern, strategy pattern, composite pattern, proxy pattern, decorator pattern</li>\n<li>guidelines for creating domain specific languages (DSLs)</li>\n<li>pros and cons of using metaprogramming</li>\n<li>the impact of dynamic programming on dependency injection, immutability, aspects and interface-oriented design</li>\n<li>evolving our approaches to mocking, TDD and BDD</li>\n</ul><p>The examples are mainly illustrated using Groovy with some Ruby and a spattering of other languages. Handouts will include Groovy and Ruby examples for each topic. Based on feedback from last year, topics have been further elaborated and concrete examples are given for any controversial practices.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This talk is heavily example driven. For each topic the general agile context for the topic is presented with one or two slides. Then examples in Groovy and Ruby (and a spattering of other languages) are given (given time limitations it may not be possible to present both Groovy and Ruby examples for each topic - the presenter has mostly been using Groovy for the last couple of years so there is a slight bias towards that language - however handouts will cover both Groovy and Ruby and depending on audience interest, either can be examined). Attendees with a laptop will be able to run some of the examples if they choose but the intent is not to allow formal breaks for doing exercises. Attendees should treat the exercises as bonus material they can take home for exploration after the conference.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Talk	2008
20084747	Clean Systems: Clean Code at the Architecture Level	<div class="content">\n    <p>The phrase <em>clean code</em> encapsulates a philosophy of coding and specific principles that improve code quality and extensibility. These principles include the importance of code that clearly expresses its intent and the effective use of encapsulation and abstractions to isolate details appropriately. What about at the architecture level? Can systems be <em>clean</em>? </p>\n\n<p>Effective <em>separation of concerns</em> keeps systems clean, nimble, extensible, and hence agile. These concerns include the domain logic implemented by the system, middleware services, performance, availability, and life-cycle concerns like startup vs. normal runtime processes. The techniques we will discuss include dependency injection, test-driven development (not just at the code level!), aspects, scripting, and domain-specific languages.</p>\n\n<p>Achieving clean separation allows concerns to evolve independently. We will see how this empowers us to defer architectural decisions until the optimal moment, when we have the best possible knowledge of our requirements and options. We can even make major architectural changes when necessary. Hence, not just code, but our architectures can be agile, too.</p>\n\n<p>Java-specific examples will be used, but the principles are universally applicable.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This tutorial will consist mostly of a lecture with many concrete examples and group discussions of the attendee’s own experiences.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Tutorial	2008
20082766	Exploratory Test Driven Development: Red,Yellow, Green, Refactor	<div class="content">\n    <p>We propose Exploratory Test Driven Development (ETDD): a methodology where the user writes Parameterized Unit Tests and lets an automated tool generate parameter values to cover all reachable statements. This exploratory code analysis makes ETDD different from traditional Test Driven Development. As a result the developer writes fewer, more expressive tests by hand and lets the automated tool systematically test all corner-cases.\nIn this talk, we present ETDD for .Net using Pex, an Automated Exploratory Testing tool from Microsoft Research.</p>\n\n<p><strong>Automated Exploratory Testing (AET)</strong></p>\n\n<p>Exploratory Testing (ET) [3,4] is test design and test execution at the same time. As testing progresses, the tester learns more and more about the behavior of the code. Together with experience and creativity he can craft more and better tests.</p>\n\n<p>Pex [1] uses Dynamic Symbolic Execution, a technique that works in a way similar to ET. The tool executes the code multiple times and learns about the program behavior by monitoring the control and data flow. After each run, it picks a branch that was not covered previously, builds a constraint system (i.e. predicate over the test inputs) to reach that branch, then uses a constraint solver to come up with new test inputs, if any. The test is executed again with the new inputs, and this process repeats. On each run, Pex might discover new code and dig deeper into the implementation. We also refer to this process as Automated Exploratory Testing. Saff et al. [2] also describe this process as Theory Based Testing.</p>\n\n<p>AET is exposed to the user through Parameterized Unit Tests (PUTs). From a PUT authored by the user, Pex will generate a number of closed unit tests that invoke the PUT:</p>\n\n<pre><code>// add element to empty list, check count is equal to one\nvoid AddTest(int capacity) { \n    List l = new List(capacity);\n    l.Add(null); // the underlying array might be resized here\n   Assert(l.Count  ==  1);\n }\n// generated unit tests\nvoid AddTestMinusOne() { this.AddTest(-1); }  // negative test; capacity cannot be negative\nvoid AddTestZero() { this.AddTest(0); }\nvoid AddTestOne() { this.AddTest(1); }\n</code></pre>\n\n<p><strong>From Red, Green, Refactor to Red,Yellow, Green, Refactor</strong></p>\n\n<p>The TDD development flow is usually described as a short feedback loop where the developer bounces from the tests to the code and vice-versa. The step are usually 1) write a unit test, 2) watch the test fail, 3) make a minimal code change, 4) watch the test pass, 5) go to (1) (skipping the refactoring part).</p>\n\n<p>ETDD shortens this loop by providing a shortcut between step (5) and (2), i.e. shortens the amount of test to write:  1) write a parameterized unit tests, 2) generate unit tests, watch a least one failing, 3) make a minimal code change, 4) watch the failing test pass, 5) go to (2) until there are no more failures, 6) go to (1).  In step (2) Pex will generate more and more passing tests, and may also provide the next failing test; this is the <strong>yellow</strong> state where we have new passing tests and failing tests.</p>\n\n<p>By reducing the number of tests to write by hand, the ETDD practitioner ends up spending more time writing the production code. </p>\n\n<p><strong>It’s still about <em>Design</em></strong></p>\n\n<p>Although ETDD brings significant changes to TDD, it still retains <em>Design</em> aspect of it. When a developer writes a PUT, he designs the API and the expected behavior as the code, just as much as with a regular unit test. The difference is that, instead of focusing on a particular example with concrete values (i.e. magic numbers), PUTs let the developer express particular scenarios, without the need to invent irrelevant values. In that sense, ETDD is even more about <em>Design</em> than TDD.</p>\n\n<p><strong>Should I drop TDD? NO!</strong></p>\n\n<p>Developers do not have to drop TDD when doing ETDD; in some case, it’s easier to start with unit tests to get the ideas down. But at some point, one can refactor the unit test into a parameterized unit test and take advantage of the automated exploratory testing engine.</p>\n\n<p><strong>Links</strong></p>\n\n<p>[1] <a href="http://research.microsoft.com/pex">Microsoft Pex Home Page</a><br />\n[2] <a href="http://nitsan.org/~maratb/blog/2007/09/14/theories-in-practice-easy-to-write-specifications-that-catch-bugs/">“Theories in Practice: Easy-to-Write Specifications that Catch Bugs”, David Saff, Marat Boshernitsan, Michael D. Ernst.</a><br />\n[3] <a href="http://www.satisfice.com/articles/what_is_et.shtml">“What is Exploratory Testing?”, James Bach</a><br />\n[4] <a href="http://en.wikipedia.org/wiki/Exploratory_test">“Exploratory Testing”, WikiPedia</a></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We will do a live demo of ETDD and Pex.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Demonstration	2008
20084274	Don't give up on mocking!	<div class="content">\n    <p>First, I’d like to present an experience report about real-life development with mock objects: the test-driven struggle. Then I will show how to improve the TDD experience and code quality through a slightly different approach to mocking: taking a step back from the invasive nature of interaction based testing and getting closer to the way we do state based testing. Finally, I will introduce a new mock library for java: <a href="http://mockito.googlecode.com/">Mockito</a> which was driven by these observations. Mockito implements what Gerard Meszaros calls a Test Spy.</p>\n\n<p><strong>Process in short:</strong></p>\n\n<p>Experience report (shows the problem) -&gt; tutorial of a new tool (tries to fix the problem)</p>\n\n<p><strong>Intended audience:</strong></p>\n\n<p>TDD practitioners, especially those who gave up on mocking.</p>\n\n<p><strong>After the talk, listeners will:</strong></p>\n\n<ul><li>Write even more agile code (is it possible?)</li>\n<li>Write absolutely awesome test code</li>\n<li>Get a key to the dreamland where mocks are tamed. It’s called Mockito.</li>\n<li>Convert to The Mockist Church (obviously)</li>\n</ul><p><strong>Presenter</strong></p>\n\n<p>Szczepan Faber spent some time in London consulting for Thoughtworks. Currently he works for Sabre Holdings in Krakow/Poland. He’s the author of mockito library, a new mocking framework for java. He is crazy about the technical side of agile: designing testable systems, TDD. He has an interesting name that only Polish people can pronounce…</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Investigating mocking - the experience report: about 45 minutes (30 mins talk + 15 mins for Q/A).</strong></p>\n\n<p>There will be slides and code examples with a bit of TDD, red bar, green bar. The starting point is the latest trend I observed: quitting mock library and going back to writing mocks by hand. There will be some historical background on the mock libraries. I will stick to java world mostly with occasional look at .NET / dynamic languages.</p>\n\n<ul><li>Why some people don’t believe in mocking? Is mocking too powerful, too invasive or simply too ugly?</li>\n<li>Has progress in mock libraries already ended? What’s going on in java &amp; .NET hemispheres? What’s up with dynamic languages?</li>\n<li>Does test code quality vary when built using different mock libraries?</li>\n<li>Does application code quality vary when test driven using different mock libraries?</li>\n<li>What do we mock for? What would the perfect mocking tool look like?</li>\n</ul><p><strong>Mockito in examples compared to classic frameworks: about 45 minutes (30 mins talk + 15 mins for Q/A).</strong></p>\n\n<p>TDD experience using Mockito: test-driving a new feature, highlighting the syntax and simplicity of the API. I will show how Mockito deals with verification failures in a way which helps maintaining the proper TDD rhythm. I will show some code written with other mocking frameworks (EasyMock, jMock) and explain the difference in TDD feel.</p>\n\n<ul><li>What’s wrong with the expect-run-verify pattern?</li>\n<li>What is a “Test Spy”?</li>\n<li>How can a slim API of the mock library improve quality of the application code?</li>\n<li>What is Mockito how to use it?</li>\n</ul><p><strong>Notes</strong></p>\n\n<p>The session could also go to “Tools for agility” scene but I really liked the exemplary title “The state of the art in mocking frameworks” from developer jam scene. I think it fits perfectly to what my session is about.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Demonstration	2008
20080802	A Hundred Days of Continuous Integration	<div class="content">\n    <p><strong>Description for Program Guide</strong></p>\n\n<p>Many agile teams use Continuous Integration (CI). It’s one of the XP practices that has been broadly adopted.  How effective is it? Does the effort of maintaining the CI server save time over a lengthier process that attempts to never break the build? While much anecdotal evidence exists to the benefits of CI there is little supporting data. How do you convince teams that it’s worth adopting and how best to do it? This report covers experiences with CI in a distributed team environment and attempts to answer these questions.</p>\n\n<hr /><p><strong>Paper Abstract</strong></p>\n\n<p>Many agile teams use Continuous Integration (CI). It is one of the Extreme Programming practices and has been broadly adopted by the community [1].  Just how effective is it? Does the effort of maintaining the CI server and fixing build breaks save time compared to a lengthier check-in process that attempts to never break the build? While much anecdotal evidence exists as to the benefits of CI there is very little in the way of data to support this. How do you convince teams and management that it’s worth adopting and how best to do it? This report outlines our experience with CI in a distributed team environment and attempts to answer these questions.</p>\n\n<hr /><p><strong>Original Proposal</strong></p>\n\n<p>This report outlines our experiences with CI a distributed team of developers over several months. It uses data from the CI server and source code control system to evaluate its effectiveness. The data allowed us to see the main causes of build breaks and their impact and frequency. These metrics can be used as one measure of team health. </p>\n\n<p>We used the same data to calculate the amount of time spent maintaining and fixing the build. We then compared this to a model based on the same data that assumed a more conventional, lengthy “get check-ins right first time” approach. The CI based approach shows significant time savings.</p>\n\n<p>We also consider the pros and cons of other check-in strategies and their potential cost. Our experience includes some lessons learnt and best practices we would recommend when using CI on a distributed team. </p>\n\n<p><em>A draft of this paper has been circulated internally at Microsoft and the feedback has been very positive. I would welcome feedback on this and the opportunity to present this to a wider audience. I can make the draft available to the review committee.</em></p>\n\n<p><strong>Answers to specific questions raised by reviewers:</strong></p>\n\n<p><strong>Kirk Knoernschild</strong> - If I make the paper I have now available prior to the conference the IEEE considers it already published and therefore ineligible for conference publication (at least that’s my understanding). This talk is definitely an experience report, hence the content and length. I am considering submitting another clinic/talk on CI best practices.</p>\n\n<p><strong>Fabrizio Cannizzo</strong> – I think there will definitely be some variation in the effectiveness of CI depending on the product under development and the composition and distribution of the team.  I could mitigate this by adding additional data from one of our other projects although this would probably be considered similar in terms of team composition and distribution.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This will be a 25 minute talk with the remaining 5 minutes for questions. I’m suggesting this as it is the same format as  experience reports at Agile 2007. I’d be happy to talk for slightly longer if this would have merit. </p>\n\n<p>I will give a <em>very</em> brief overview of Continuous Integration (CI) and give the audience some context in terms of the distributed makeup of our team and the sort of project we were working on. We’ll then review some of the data analysis; what broke the build, for how long and how often. This leads to some interesting results around the value of unit testing and static analysis as part of a CI process. These results are applicable to all teams not just distributed ones.</p>\n\n<p>Next I’ll present the amount of time spent maintaining and fixing the CI server based on the data and then compare this with my (“traditional”) model in which developers try and never break the build to show the expected savings. I’ll also consider other models and their attendent limitations, e.g. modifying the “traditional” model by checking in less frequently to reduce checkin overhead.</p>\n\n<p>Finally I’ll cover some of the best practices around CI we used on our team and summarize my findings overall. </p>\n\n<p><em>Note:</em> Currently this is listed in the Developer Jam stage but I’m not entirely clear where this fits best; Committing to Quality and possibly Questioning Agile also seem to have some sort of fit.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Experience report	2008
20082238	Team pace - Keeping build times down	<div class="content">\n    <p>If short build times (&lt; 10 minutes) are good and longer build times (&gt; 20 minutes) are bad how do we achieve shorter build times without massive hardware investment and parallelization? What are the effects on a team/project as the build time goes up and how can we keep it under control.</p>\n\n<p>This presentation/discussion is in two parts.</p>\n\n<ul><li>Comparison of two project teams (1 with longer build times and one with &lt;2 minute build times)</li>\n<li>Technical review of the how the short build times were achieved and maintained.</li>\n</ul><p>The project teams:</p>\n\n<ul><li>Used an agile process Scrum/XP</li>\n<li>Paired</li>\n<li>Located in a single teamroom</li>\n<li>Wrote in Java</li>\n<li>Web based application</li>\n<li>Comparable size</li>\n<li>Local build server</li>\n</ul><h2>Part 1</h2>\n\n<p>In the first part we explore how build times affected the performance, pace and working practices of the team.</p>\n\n<ul><li>Checkin Frequency</li>\n<li>Velocity</li>\n<li># broken builds</li>\n<li>Time to fix broken builds</li>\n<li>Happiness</li>\n</ul><h2>Part 2</h2>\n\n<p>In part two we will explore how the application architecture and developer choices affect build times and indirectly productivity. This exploration will be code based (Java). Following a description of each key element there will be an open discussion on the effects of this element how it affected the build and team productivity.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Presentation/Discussion style split into roughly two equal 45 minutes slots.</p>\n\n<p>1st slot covering the observed effects of different build time</p>\n\n<p>2nd examining the decisions and code that resulted in very short build times.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Experience report	2008
20084594	Effective and pragmatic Test Driven Development 	<div class="content">\n    <p>Often it is suggested that Test Driven Development has moved into the mainstream and that not applying a test first approach is exceptional. Having worked with TDD for the last five years I have observed that far from being ubiquitous, effective application of TDD is uncommon.\nThis session takes a pragmatic approach in evaluating the implementation of, impediments against and measurable benefits of TDD on a commercially successful project. Analysis of this experience will show how and why TDD is being used incorrectly and how this situation can be corrected. </p>\n\n<p>Specifically the session will concentrate on real word examples from the projects in question in the areas of:</p>\n\n<p><strong>The approach taken in the introduction of TDD.</strong></p>\n\n<ul><li>How the intent to use TDD was communicated.</li>\n<li>The degree of freedom developers were allowed in their application of the technique.</li>\n<li>The measurement of the application of the technique.</li>\n<li>A brief description of the technical mechanics employed (use with Ajax, Mocks and Spring etc.).</li>\n</ul><p><strong>Impediments to and pitfalls during TDD adoption.</strong></p>\n\n<ul><li>After initial enthusiasm competent developers can come to resent TDD as they perceive it as being a technique which reduces their development velocity. This is especially true when burndown charts and measurement of velocity are introduced at the same time as TDD.</li>\n<li>Dogmatic application, especially common to new practitioner, leads to increased costs without corresponding return on investment.</li>\n<li>TDD is a technique that is easy to communicate, easy to execute in a workshop environment but surprisingly difficult to master on a live project. </li>\n<li>Along with other agile techniques, TDD produces empirical evidence which can be used to measure code quality and progress. As with all statistics care has to be taken in the naive interpretation of results. The bar is be green, the coverage high and the acceptance tests passing. This is a good sign but not an absolute guarantee of success that outweighs any other indication. It can be politically difficult to correct the misplaced enthusiasm of others after a period of TDD evangelising.</li>\n<li>Although well understood in the agile community the real implications to the cost profile of a project are little understood and often hesitantly communicated to the stakeholders. It is well documented that initial development costs more but there is also an increased cost in making maintenance code updates to the developer. In theory there is a reduction in cost in testing, bug fixes and rework but measurements of these activities is more difficult and often overlooked.</li>\n</ul><p><strong>The measurable benefits</strong></p>\n\n<ul><li>As practitioners gain experience their code quality increases. Classes become more cohesive and less tightly coupled.</li>\n<li>Driving development top down from the acceptance tests encourages developers to apply the YAGNI principle. They are much less likely to build that extra piece of cool code which turns out to be of limited benefit in meeting the user goal.</li>\n<li>Solutions architects and business stakeholders quickly grasp that tests increase confidence of the functional correctness of a given area. This makes them more confident in their support of other agile techniques such as refactoring. This introduces a virtuous circle where code can be cut faster because developers know that thy will be able to go back and optimise or add features later with management approval. It also means that the code base stays dynamic and is less likely to be the subject of arbitrary and all encompassing code freezes dictated by senior managers attempting to reduce risk of instability.</li>\n<li>TDD can be pushed the right to the beginning of the development process. Acceptance tests are created at the same time as the use cases (in some cases these acceptance tests became the definitive source of the use case definition). This focuses the analysts on what the reality of their requirements and gives a concrete measure of progress.</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session will be driven by a set of powerpoint slides and accompanying document. </p>\n\n<p>The focus will be on practical examples of the situations described showing UML designs and code where applicable. It may not be possible to reference the clients by name (negotiations are ongoing with the parties concerned) but each conclusion will draw heavily on the real world scenario which occurred on project. </p>\n\n<p>Project management artifacts such as burndown charts, test coverage statistics and defect counts mapped back to discrete areas of code will be used to illustrate points. The session will focus on concreate experiences and the lessons that can be taken away and applied on other projects.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Experience report	2008
20081650	Advanced TDD Randori and Fishbowl	<div class="content">\n    <p>Audience: Agile developers who already practice test-driven development.</p>\n\n<p>Based on feedback from a number of introductory TDD Randori presentations given in 2007 by Dave Nicolette and Rod Coffin, Dave and Ryan Hoegg, and Rod and Ryan individually, it seems as if most of those who show up for agile conferences, user groups, and internal corporate seminars already know the concept, the value proposition, the basic techniques, the best practices, and the available tools for test-driven development. Participants in these sessions have been asking for more depth. In particular, we have had more than a few requests for a workshop covering the application of TDD to:</p>\n\n<ol><li>building up complex algorithms incrementally (e.g., computationally-intensive embedded systems, or business logic based on interdependent business rules).</li>\n<li>an existing codebase that was not written with testability in mind the first time around (legacy code).</li>\n<li>multi-step refactorings (e.g., Replace State-Altering Conditionals with State, or Replace One/Many Distinctions with Composite).</li>\n</ol><p>We will use Java with JUnit in an Eclipse environment for the hands-on segments.</p>\n\n<p>Request for specific feedback</p>\n\n<p>Between the two of us, we have not reached a consensus about whether this should be one session or two. One of us feels point #1 deserves a dedicated session, while the other does not see enough unique material here to warrant two separate sessions. We would appreciate feedback about what participants would like to do, and we can tailor the material accordingly.</p>\n\n<p>We also are not sure whether this would fit better in Developer Jam or Examples. We would appreciate guidance on that, too.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We plan to follow the randori format for the workshop segments and to run the retrospective as a fishbowl. This structure has been well-received in past presentations and seems to be a good way to maintain active participation and interest.</p>\n\n<p>The randori format was developed at the Paris and Helsinki code dojos in 1995. It’s described <a href="http://davenicolette.wikispaces.com/Randori">here</a> and <a href="http://wiki.agilefinland.com/?CodingDojo">here</a>. It’s very “live” and a lot of fun. Here’s a summary, partially gleaned from <a href="http://wiki.agilefinland.com/?CodingDojo">Agile Finland</a> with a few modifications:</p>\n\n<ul><li>There is one computer with the video output projected on a screen so all participants can see it.</li>\n<li>Coding is done at the single computer by a pair of developers.</li>\n<li>One half of the pair switches out every 5 or 10 minutes. We will start with 10 minutes based on experience/feedback from last year’s workshops, and change the time interval if appropriate.</li>\n<li>The pair on the keyboard should continuously explain what they are doing.</li>\n<li>The pair on the keyboard should stop when someone from the audience falls off the sled — and only continue when that someone is back on track again.</li>\n<li>The audience should give comments on design only when there is green bar. (During red bar audience can only ask questions)</li>\n<li>The pair should not continue on writing new code if other participants are not happy with the current design (The code should be always well refactored before starting to write new code)</li>\n<li>The pair will use TDD (Test-Driven Development).</li>\n<li>The programming language to be used is announced in advance per session. We will use Java for this session.</li>\n<li>The presenter acts as a product owner.</li>\n<li>There is no fixed limit on the number of attendees, since observers may at least participate in the fishbowl retrospective.</li>\n</ul><p>The fishbowl format has been used quite a lot, and we suspect it doesn’t require much explanation. Just in case, there’s an explanation <a href="http://davenicolette.wikispaces.com/Fishbowl">here</a>.</p>\n\n<p>Because of the content of this particular workshop, we will have to intersperse brief explanatory presentations with the randori activities. We will keep the talking to a minimum; just enough to set up the programming challenges for the randori segments. Also, one of us will participate in the initial pair of each randori segment to help things get started well. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Developer Jam	Workshop	2008
20083298	Test-Driven GUI Development Made Easy	(No description)	Developer Jam	Tutorial	2008
20080847	Agility Night Live - TV Sketches and Project Stories	<div class="content">\n    <p><strong>Concept</strong>: Work like you’re producing a live weekly TV variety show.</p>\n\n<p><strong>Description</strong>: A glimpse behind the scenes of the production of a weekly show like Saturday Night Live offers an incredible example of a team of people who have agility in their DNA. Writers, actors, set designers, producers, studio execs, etc. all have a single-minded focus on delivering an exceptional quality show every single week. Slipping the schedule is not an option. Customer satisfaction (viewer ratings) are the central measure of success. The production team must collaborate and adapt to unexpected challenges every single week.</p>\n\n<p>This talk will include a series of video clips from behind the scenes on the Saturday Night Live set as well as clips from the (now cancelled) NBC series “Studio 60: Live From Sunset Strip”. I will use each clip to demonstrate and highlight the key principles, behaviors, and habits of highly agile teams and individuals. I will challenge the audience to imagine that they are “producing a weekly TV show” as members of agile teams and agile organizations. I’ll raise such questions as:</p>\n\n<p>• What role do you play in the production of your organization’s weekly live TV show(s)?<br />\n• How do you contribute to the goal of producing a high quality show every Friday night?<br />\n• How does the agile team keep its focus on viewer ratings?  </p>\n\n<p>I will use my experience as an agile trainer, coach, mentor, and technical team member to share:</p>\n\n<p>• Stories about what works well and barriers to success<br />\n• Key guiding principles that promote agile DNA &amp; quality thinking throughout the organization  </p>\n\n<p><strong>Value Statement</strong>: Many of the presentations/workshops/tutorials at the agile conference focus on specific practices and practice tuning. This talk will complement those other sessions by helping participants think about the value of changing habits and behaviors in addition to adopting practices. Most of us in the agile community have seen agile teams that can exercise the practices but still behave in “waterfallish” ways. We’ve also seen or experienced those teams that truly have agility in the bloodstream. It affects everything the team does, and the way that everyone approaches everything. This talk focuses on helping teams develop their agile DNA to become the latter type of team.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I’ve given this presentation to smaller audiences in the past year. My presentation is a PowerPoint slide deck with embedded video (and audio) clips. Each video clip is a distinct example of a key behavior or habit that is part of agile DNA. The talk is an interactive talk in which I present a video clip and what it represents followed by a dialog with the audience about how to map the example into their agile culture. In this way the presentation, discussion, and Q&amp;A are interspersed throughout the presentation.</p>\n\n<p>Ideally I would like to connect my laptop to the PA system in the room. However, I will provide a set of powered PC speakers for the audio portion of the presentation.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Talk	2008
20082400	Learning Kaizen from TOYOTA [with MindMaps]	<div class="content">\n    <p>I will present examples of process improvement (Kaizen) in factories in Japan, demonstrate how the Toyota Production System (TPS) constantly improves the way things are done to meet changing customer needs, involving wokrplace(Gemaba) people. After presentation of key TPS concepts, small groups will explore commonalities between Agile and TPS by developing Mind Maps, and then exchange the results. Note that this is a re-run of the same program at Agile2007, presented by Mary Poppendieck and Kenji Hiranabe(me). This time, the content is shortened, focusing on the best stories.</p>\n\n<p>Key case studies(stories) showing TPS concepts and applications will be presented, including</p>\n\n<ul><li>How to reduce WIP or Work in process.\n</li><li>Stop-the-line culture. li&gt;\n</li><li>Reconstruction of a factory, changing velt-conveyer production to workcell production. li&gt;\n</li><li>Organizational change, and conflict. li&gt;\n</li><li>How topdown adoption of organizational change program fails. li&gt;\n</li><li>Empowering Gemba people. li&gt;\n</li><li>Educating poeple. li&gt;\n</li></ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>After presentation of each key TPS concept, small groups will explore commonalities and differences between Agile and TPS by developing Mind Maps, and then exchange the results with other attendees.</p>\n\n<p>The procedure would be, Introduction, story-1, discussion-1, story-2, discussion-2, …, and share findings.</p>\n\n<p>A mind map is drawn by each group on a peice of flip chart paper spread on the group table.</p>\n\n<p>Resulting group mind maps would be like these(these pics are the ones of the Agile2007 session);</p>\n\n<p><a href="http://jude-users.com/en/modules/weblog/details.php?blog_id=37" title="http://jude-users.com/en/modules/weblog/details.php?blog_id=37">http://jude-users.com/en/modules/weblog/details.php?blog_id=37</a></p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Workshop	2008
20080380	Exposing the â€œdevilsâ€ within - Agile taboos and other hurdles in a large organization	<div class="content">\n    <p><strong>Summary</strong>  </p>\n\n<p>In the last couple of years, some agile practitioners are moving away from the core values and principles. We are now seeing that many of the practices we love in Agile is reduced to academic ramblings. This fuzziness has lead parts of the community back to vague and undisciplined processes. In large organizations this is becoming particularly prevalent since many people that really never understood the core values, now adopt simplified ways of Agile, ignoring the hard and still most important parts of it. </p>\n\n<p>This workshop will challenge you to expose and discuss how we can get back to the core Agile values; Delivering high quality software at a racing pace, with a happy team. Even in large globally distributed organizations. We want the participants of this workshop to be able to reveal who and what is blocking their efforts and how to get through them to make a real difference. After this workshop, you will have more clarity, so that you are able to come up with a tangible plan for improving your own situation in your organization.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The format of the workshop will be in a modernized way of structured “open space”.</p>\n\n<p>1.The presenters give a small introduction based on their experience with large distributed organizations to set the tone for the workshop.</p>\n\n<p>2.In the good nature of standup meetings, all participants are asked to name and quickly explain issues and taboos they have encountered. We will make sure to follow a very strict approach, so that this does not take more time than it needs to.</p>\n\n<p>3.Together with the attendants, we select the two most pressing matters and split into groups. The groups will discuss one subject each.  Participants are free to choose which group they want to attend. </p>\n\n<p>4.After the first discussion, we have another very quick standup where the participants are asked to name new subjects they want to discuss. </p>\n\n<p>5.Since new issues and subjects should have emerged from the first discussion, the participants vote for two new items to discuss and we divide into two new groups. </p>\n\n<p>6.We repeat the process once more, so that we have in total three discussions.  </p>\n\n<p>7.The presenters sum up the output of the discussions.</p>\n\n<p>We are two presenters and we will be active in one discussion group each. Our responsibility will be to make sure that the discussions are relevant to the subject and that all participants get to state their experience and opinions. We will take notes and sum up the workshop at the end.</p>\n\n<p><strong>Example experiences</strong>  </p>\n\n<p>Below are some examples on concerns we have had based on our own experiences in the environments we have been working in:</p>\n\n<ul><li><p>Project managers who takes an interest in Scrum, but due to lack of experience in agile practices neglect the importance of self-directing team and tries to impose direction and delegation and tasks. Unfortunately this happens often. Project managers may be uncomfortable leaving the normal command-and-control style. We would like to discuss such experiences and how those could be dealt with</p></li>\n<li><p>Similarly projects that just introduces daily stand-up meetings but no other practices to support agile development. I have heard projects claiming they are agile just because they run what they call scrum-meetings. What happens then, and how can we get it right from there.</p></li>\n<li><p>Test-driven development is catching on, and project managers have started an interest in the coverage reports and want to follow up ridigly on the coverage numbers. In some cases we have seen that the members have created tests just to increase the coverage, not really adding useful tests. In such cases you can create a good environment to discuss the quality and attitude towards the tests itself, and the purpose of those.  </p></li>\n</ul><p>The point of the session is to dare to challenge and assess all the experiences the participants have had and use those experiences to move forward in an even more positive direction.</p>\n\n<p><strong>Organizers experience:</strong><br />\nOur Bios will highlight some of this. In addition, we would like to point out these experiences for the purpose of this workshop:</p>\n\n<p>1) We started early; Jan-Erik started 8 years ago, Lars started 6 years ago in introducing agile practices in our own work</p>\n\n<p>2) Through the years we have seen the evolution of the practices, new fads come and go, and the real usefulness of them as well as the current risk of not achieving what we expect due to missing important pices of the puzzle</p>\n\n<p>3) In particular we expect some discussions around Scrum with a focus on management discipline and XP with a focus on the practical measures to put in place to ensure delivering working software - we are seeing that the popularity of Scrum has lead to less focus on other important areas; to highlight this: we are seeing a lot of meetings and frequent deliveries, but often times tests still have poor quality or are neglected, people skimp on pair programming, the daily standup meetings turn out to be a drag etc…. I.e. we have observed important signs of neglecting important practices. </p>\n\n<p>4) The “taboo” in question could very well be Scrum - we all enjoy the positive interest in agile practices that Scrum have created; however has the popularity come at the expense of other important practices?</p>\n\n<p>5) We have now worked for larger organizations for a couple of years (Lars in a 18.000 people european-based IT company; Jan-Erik in a 5.000 people global naval certification company); and have first hand experience in scaling agile practices, and the value of scaling agile to larger organizations as well as the added challenges such organizations impose on making agile practices deliver on the promise</p>\n\n<p>6) Still - this is a workshop format, and our intention is to bring people together who have started to experience these challenges, and encourage discussions and sharing of these experiences. We will be happy to share our own, and focus on bringing out the groups experiences on the table in order to facilitate how we can improve</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Workshop	2008
20081655	Overcoming Resistance to Change	<div class="content">\n    <p>Audience</p>\n\n<p>Since people in all roles are involved in organizational change, both as change agents and as resisters, the target audience for the session includes anyone who is interested in learning more about the forms of resistance they may see in their own organization, and how to overcome it. Because of the nature of the information, there is no real separation among beginner, intermediate, and advanced levels; nor is there any arcane material geared specifically for either technical or management personnel.</p>\n\n<p>Value</p>\n\n<p>The facilitators hope that participants will gain a deeper understanding of why people resist change – possibly even why they themselves resist change – based on an improved appreciation for different perspectives and different priorities. We also hope participants will be able to return to their own organizations with a toolkit of effective and practical methods to overcome resistance to change.</p>\n\n<p>Background</p>\n\n<p>Apart from the presenters’ personal experiences, the session draws on research and experience from a range of sources in the IT industry, the agile movement, the field of psychology, and management science concerning personal and organizational resistance to change. It is designed to engage participants through experiential learning techniques, humor, and direct hands-on exercises to help them understand the reasons why intelligent people resist change, even when the benefits of the change appear self-evident to those who are promoting it. The session includes group exercises to practice techniques designed to overcome resistance to change. While much of the material could apply to any sort of change, our focus is on organizational change toward agile/lean culture and practices.</p>\n\n<p>Agenda</p>\n\n<p>(1) Introduction</p>\n\n<p>Why do people resist change, even when the benefit is self-evident?\nWhy would a sincere, competent, sincere person of good will resist change?</p>\n\n<p>(2) Resistance as a Resource game</p>\n\n<p>Hands-on group exercise to explore different points of view of why people might resist change</p>\n\n<p>(3) Why do people resist change?</p>\n\n<p>Premise: People resist change when they perceive a potential threat to themselves</p>\n\n<p>(4) Types of resistance</p>\n\n<ul><li>Cognitive</li>\n<li>Emotional</li>\n<li>Behavioral</li>\n</ul><p>(5) Forms of resistance</p>\n\n<ul><li>Active / passive</li>\n<li>Overt / covert</li>\n<li>Individual / group</li>\n<li>Aggressive / timid</li>\n</ul><p>(6) Who will resist? It depends on who proposes the change</p>\n\n<ul><li>Business management</li>\n<li>IT management</li>\n<li>IT technical staff</li>\n<li>Differences in priorities</li>\n</ul><p>(7) Is resistance (necessarily) bad?</p>\n\n<ul><li>Destructive resistance</li>\n<li>Constructive resistance</li>\n</ul><p>(8) Behavior patterns and political plays of resisters</p>\n\n<ul><li>Counter-implementation strategies</li>\n<li>Counter-counter-implementation strategies</li>\n</ul><p>(9) A six-stage approach to overcoming resistance</p>\n\n<ul><li>Facilitation</li>\n<li>Education</li>\n<li>Involvement</li>\n<li>Negotiation</li>\n<li>Manipulation</li>\n<li>Coercion</li>\n</ul><p>(10) Overcoming preconceptions about “agile”</p>\n\n<ul><li>Value proposition</li>\n<li>Buzzwords</li>\n</ul><p>(11) Overcoming resistance: Role-playing game</p>\n\n<p>Hands-on group exercise to practice techniques for overcoming resistance</p>\n\n<p>(12) Retrospective</p>\n\n<ul><li>What went well?</li>\n<li>What could be improved?</li>\n<li>Did you recognize types/forms of resistance or political behaviors from your organization?</li>\n<li>Can you apply this approach in your organization?</li>\n</ul><p>(13) Open-ended discussion</p>\n\n<p>History</p>\n\n<p>This is a new workshop developed by Dave Nicolette and Lasse Koskela based on workshops each has presented in the past. Both facilitators are consultants who specialize in agile organizational transformation and agile team coaching. As such, they frequently deal with resistance to change. </p>\n\n<p>Lasse’s <em>Resistance as a Resource</em> workshop was presented at <a href="http://xpday6.xpday.org/programme.php#Resistance_As_A_Resource_by_Lasse">XP Day London 2006</a> and <a href="http://www.xpdays.de/2006/sessions/Resistance.html">XP Days Germany 2006</a>. Dave’s <em>Introducing Agile Where Agile Isn’t Wanted</em> was presented at <a href="https://davenicolette.wikispaces.com/Agile+Not+Wanted">Tulsa TechFest 2007</a>. The present workshop combines ideas and feedback from those events with experience and new information.</p>\n\n<p>This has been submitted to XP 2008, but we will not know whether it is accepted until after the review period for Agile 2008. </p>\n\n<p>Additional information</p>\n\n<p>Kotter and Schlesinger’s Six Change Approaches (summary): <a href="http://www.valuebasedmanagement.net/methods_kotter_change_approaches.html" title="http://www.valuebasedmanagement.net/methods_kotter_change_approaches.html">http://www.valuebasedmanagement.net/methods_kotter_change_approaches.htm...</a></p>\n\n<p>Dale Emery’s Resistance as a Resource Game: <a href="http://cwd.dhemery.com/2005/04" title="http://cwd.dhemery.com/2005/04">http://cwd.dhemery.com/2005/04</a></p>\n\n<p>Preliminary version of presentation slides: <a href="http://www.davenicolette.net/goodies/overcoming_resistance.ppt" title="http://www.davenicolette.net/goodies/overcoming_resistance.ppt">http://www.davenicolette.net/goodies/overcoming_resistance.ppt</a></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>After asking participants to suggest reasons they believe people resist change, the facilitators guide participants in an exercise designed to help them see things from the point of view of others in their organization as a way to understand why reasonable people might see things differently than those who are promoting change. The exercise is based on the work of Dale Emery, and is a variant of his “Resistance as a Resource” game.</p>\n\n<p>The purpose of the game is to stimulate thinking about the differing priorities and concerns of various groups in an organization. The basic premise is that people resist change because they are worried about their own status after the change has been implemented. </p>\n\n<p>After a discussion of the results of the exercise, the facilitators describe several types of resistance people commonly experience when they are fearful about the implications of a proposed change: Cognitive, emotional, and behavioral. These types of resistance are expressed in a variety of ways: Active vs. passive, overt vs. covert, individual vs. group, aggressive vs. timid. </p>\n\n<p>The idea to adopt agile software development methods may originate in different parts of an organization. The sources of resistance and the reasons for the resistance vary based, in part, on who is proposing the change. If we think of an organization as comprising three main constituencies – Business, IT Management, and IT Technical – we can identify potential sources of resistance as well as natural allies in the transition to agile methods depending on which of these constituencies is proposing the change. The key lies in understanding the differences in priorities of the three groups, and how to explain the value proposition of agile in ways that make sense to each.</p>\n\n<p>The facilitators describe behavior patterns that are commonly observed when various groups within an organization resist change. This portion of the presentation is largely based on the work of David Buchanan and David Boddy, authors of The Expertise of the Change Agent: Public Performance and Backstage Activity. It is also based in part on the personal experiences of the facilitators and on feedback from participants in previous workshops on the same general subject that each has presented. </p>\n\n<p>Armed with a good understanding of the reasons for resistance and for the ways in which resistance may be expressed, participants are now ready to learn practical and effective techniques for overcoming resistance. The facilitators present a six-stage approach to overcoming resistance, based on the work of John Kotter and Leondard Schlesinger, authors of Choosing Strategies for Change. </p>\n\n<p>From most-desirable to least-desirable, the six approaches are Facilitation, Education, Involvement, Negotiation, Manipulation, and Coercion. The facilitators explain how these approaches address the three main types of resistance – Cognitive, Emotional, and Behavioral – and which approaches are realistic depending on the change agent’s position and clout in the organization, and who in the organization is resistant to the change.</p>\n\n<p>This system of six approaches is then put into practice in group exercises in which participants play the roles of change agent, resister, and observer as they pretend to represent each of the three main constituencies involved in agile adoption. </p>\n\n<p>The session concludes with a very agile activity – a retrospective. Participants share their observations and comments on what they experienced and what they learned during the session, and how they might apply the new skills in their own organizations. Participants also have the opportunity to share specific situations from their organizations and gain insights and suggestions from each other.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Workshop	2008
20081960	Successful Agile Transitions: Using Appreciative Inquiry to Discover What Works	<div class="content">\n    <p>Using agile development methods can deliver business value, high productivity, joyful collaboration, shared accountability, and fun. But getting there can be difficult. Teams that are transitioning to agile often encounter resistance, fear, chaos, and uncertainty. In this workshop you will learn how to use—and you will experience firsthand—a technique called <em>“appreciative inquiry.”</em> This approach leverages the wisdom of the group to determine and apply the best strategies (such as risk evaluation, top-down, and skunks-works methods) to ease your team’s transition to agile.</p>\n\n<p>Specifically, you can start with a small, low-risk project; taking on a high-risk/high visibility project and declaring that agile is the way to success (top-down); start with a skunk-works project and then marketing agile to the rest of the organization (bottom-up); engage external consultants to train and coach teams, building expertise through practice and retrospection, and more. </p>\n\n<p><em>What really works?</em> </p>\n\n<p>Do different techniques work better in different situations? What are effective ways to market the power and promise of agile? What are the best ways to discover transition risks and challenges in your organization so that you can most effectively mitigate them? What role does the personalities of key players, or their positions of power, play in your success? Should the transition to agile be driven by management, or by IT (information technology)? Does the type of software product being developed affect successful agile transitions? </p>\n\n<p>Using an appreciative inquiry approach, you’ll explore the most successful ways to actively and positively start and sustain the transition to agile in your organization and on your project. In <em>appreciative inquiry</em> (see: <a href="http://www.appreciative-inquiry.org/" title="http://www.appreciative-inquiry.org/">http://www.appreciative-inquiry.org/</a>), you seek the positive core of your topic using peak experiences to appreciate what is, to imagine what might be, to determine what should be, and then to create what will be. </p>\n\n<p>You will focus on developing a set of effective, workable strategies by (1) topic area (selecting projects, managing the start-up, engaging customers, selecting business or technology partners within the organization, marketing agile) and by (2) project (high risk versus low risk, project size, project impact on the bottom line, team profile). For each strategy, you’ll define the criteria for deciding which transitioning approaches are best in which circumstances, and you’ll define specific tools or techniques that aid in success.</p>\n\n<p>At the conclusion of this entirely interactive workshop, you will be able to:</p>\n\n<p>• Identify elements and circumstances that contribute to a successful agile transition </p>\n\n<p>• Understand how your project’s profile and people factors impact a successful transition</p>\n\n<p>• Name specific techniques and activities that productively and positively enable a successful transition</p>\n\n<p>• Experience how an appreciative inquiry approach can be used to tackle difficult issues</p>\n\n<p>• Experience how participatory techniques capture the imagination and energize a group to produce a single outcome</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li>Kick off: outcome, agenda, roles, rules, overview to the workshop techniques to be used (appreciative inquiry and storyboarding) (10)</li>\n<li>Appreciative inquiry: pair interviews, subgroups debrief findings (30)</li>\n<li>Success Elements: individual, subgroup, then whole group storyboard success elements (50)</li>\n<li>Subgroup workshops (successful agile transition by topic area):  agree on topic areas, define outcomes and process for subgroups, subgroups workshop on self assigned topic areas (50)</li>\n<li>Debrief by topic areas: groups share findings (20)</li>\n<li>Workshop debrief: feedback on the process and transferring what you learned to your organization (20)</li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Workshop	2008
20083078	Mr Agile Goes To Washington: The Impact of Politics on Agile Projects	<div class="content">\n    <p>In the movie “Mr Smith Goes to Washington”, we follow the journey of an idealistic politician, as he learns to deal with the political side of Washington. Likewise Agilists undertake a journey, where we learn that it takes more than working software that meets business needs for software projects to truly succeed. This workshop aims to bring industry professionals together, to develop and share practices that will help us handle the political situations that face agile projects today.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We welcome position papers from anyone involved in creating software, who has experience with the impact of politics on agile projects.  </p>\n\n<p><strong>How to Submit?</strong>\nPlease write a 1-4 page paper explaining your experience of how politics may have helped the project succeed and / or prevented the project from being successful. Position papers should be emailed to <a href="mailto:angela@martinitconsulting.com">angela@martinitconsulting.com</a> by Tuesday 22-Jul-2008.\nIf you’d like some advice before submitting, please feel free to contact the workshop facilitators at <a href="mailto:angela@martinitconsulting.com">angela@martinitconsulting.com</a> or <a href="mailto:rachel@agilexp.com">rachel@agilexp.com</a> </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Workshop	2008
20084941	Building Self-Organization Skills through the Touchstones Discussion Project	<div class="content">\n    <p>Self-organization is a key concept in agile software development, but teams are often more used to taking orders than making their own decisions.  Touchstones Discussion Project prepares participants to take responsibility for their own future by applying structured discussion techniques that encourage them to examine and adapt their own behavior, their peer relationships, and their culture.  Those who join us in this interactive Touchstones session will experience the power of group learning in a setting that emphasizes respectful participation, collaborative skill-building, active listening, and participative leadership.</p>\n\n<p>This session provides a strong foundation for building participation in retrospectives, defining active research agendas, and fostering group learning in a supportive, critical, and honest environment.  The conditions that nurture creativity and discipline in high-productivity organizations like Toyota are sometimes referred to as “ba”.  Touchstones provides a mechanism for generating ba on a continuing basis.  For more information about Touchstones, see <a href="http://touchstones.org" title="http://touchstones.org">http://touchstones.org</a>.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Introductions (5 minutes)</p>\n\n<p>Introduction to the Touchstones Discussion Project (10 minutes)</p>\n\n<p>Small group discussion of what makes a good discussion (10 minutes)</p>\n\n<p>Report back and discussion of the Touchstones rules for good discussions (10 minutes)</p>\n\n<p>Reading of an excerpt from Mary Shelley’s Frankenstein or A.R. Ammons’ Identity (10 minutes)</p>\n\n<p>Discussion of the text (25 minutes)</p>\n\n<p>Reflection on the discussion and definition of what areas might be be improved (10 minutes)</p>\n\n<p>Wrap-up (10 minutes)</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Workshop	2008
20085051	Whose Project is it Anyway?	<div class="content">\n    <p><strong>Whose Project is it Anyway?</strong>\nPresenters: Bonnie Aumann, Rob Kinyon</p>\n\n<p>From organizing the backlog of stories to choosing a branching strategy, developers and clients can find themselves wondering who’s really driving the project. These problems are only exacerbated when an outside team is brought into the client-space. In this session we will explore organizational patterns and anti-patterns, particularly focusing on conflict resolution, via improvisational role-playing.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Roleplay Structure - 10 min each.</strong>\n* Divide up into groups of 4-5. \n* Two people are given an outline of a situation based on their character’s point of view. \n* They then role-play to find a solution.\n* Feedback given from watchers.\n* Roleplay a second time.\n* Feedback and conclusions.</p>\n\n<p><strong>Session Structure</strong>\n0:00 - 0:15 Introduction and Overview of conflict management principles</p>\n\n<p>0:15 - 0:45 Demo a role play with a volunteer from the audience</p>\n\n<p>0:45 - 0:55 Break into groups</p>\n\n<p>0:55 - 1:20 Role play until 10 minutes before end, swapping pairs</p>\n\n<p>1:20 - 1:30 Recap and share conclusions</p>\n\n<p><em>Alternate:</em>\nInstead of having prepared scripts, the group could come up with a list of problems/problematic people. When broken out into groups, that person would play the role of the troublesome person they described with another person responding.  This would require more time.</p>\n\n<p><em>NOTE: This basic structure was used effectively in a “Agile Coaching 101” workshop run by Command Information at Agile2007. The difference I see here is that this is directed at the whole team experience.</em></p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Workshop	2008
20084639	Throwing the Agile Transition Party	<div class="content">\n    <p>At last!  After ten years of successfully coaching teams into XP, Mike Hill reveals the secret to agile transition:  throwing a continuous good party.</p>\n\n<p>There are several keys to hosting a good transition party:</p>\n\n<ul><li>The Pre-Party Prep:\n<ul><li>Invitations — Who to get involved, and how.</li>\n<li>The Dance Floor — Preparing the workspace.</li>\n<li>Food &amp; Favors — Getting everyone in the mood.</li></ul></li>\n<li>The Early Days:\n<ul><li>Finding a Groove — Getting your team into rhythm.</li>\n<li>Path-Smoothing — Dealing with incompatible guests.</li>\n<li>Games — Keeping the team entertained.</li></ul></li>\n<li>The Steady State:\n<ul><li>Remembrance (and Forgetting) — How to keep what’s cool and lose what’s not.</li>\n<li>Surprise — Dealing with changes in an agile way.</li>\n<li>Expanding The Scene — Growing the party.</li></ul></li>\n</ul><p>For this talk, just bring a good mood and some transition questions.  RSVP!</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is an hour long presentation followed by a half-hour’s discussion session.</p>\n\n<p>Mike Hill is well known in agile circles for his irreverent style and his rock-solid content.  In this talk, the emphasis is on building a pleasurable transition, the only known way to do it.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Talk	2008
20086429	Culture Stage Introduction	<div class="content">\n    <p>Do you feel overwhelmed by the number of sessions to choose from? Would you like to get a bit of help in finding your way around? Would you like to get a bird’s eye overview of what the Culture stage has to offer? </p>\n\n<p>In this session, we will give you some guidance by introducing the Culture stage and providing an overview of the good stuff that will be happening there. There will also be time for your questions about the conference and how to make the best of the time you have to spend in the sessions.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Short presentation</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Talk	2008
20082640	Storytelling Skills for Agile Teams	<div class="content">\n    <p>An agile project starts when a customer brings a wish list to a development team to be shaped into a release plan; a guide to what can be delivered and when. Agile teams use story telling to explore user needs and tease apart the requirements into a prioritised list based on business value but also considering technical dependency and risk. This tutorial takes you thru the process of story shaping, from raw requirement to release plan. Along the way we introduce participants to critique and counteracting faulty arguments so they can get to the essence of their stories.</p>\n\n<p>Benefits for participants:\nParticipants will learn about how to use storytelling for agile projects and also more generically applicable conversation skills of handling criticism and defusing false arguments or illogical discussions. We use experiential exercises so participants have fun while learning.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Content outline:\nThis tutorial will cover the following topics: user stories, stakeholder prioritisation, refining stories using critique/argument moves, design stories, estimating based on complexity points, and release planning.</p>\n\n<p>Timeline\n(30 minutes) Introduction to stories\n(30 minutes) Exercise 1: Stakeholder prioritization\n(15 minutes) Exercise 2: Writing iteration stories\n(15 minutes) Exercise 2b: Writing design stories\n(10) Introducing planning poker \n(20 minutes) Exercise3: Estimation and Release Planning\n(15 minutes) Introduction to faulty arguments and biases\n(20 minutes) Exercise 4: Arguments/Counteracting them\n(10 minutes) Discussion of key learning points</p>\n\n<p>We will start with a short presentation on the role of storytelling in agile planning. We next introduce the example of a family looking for a new house – each family member writes user stories on index cards for features in the house. The family then gets together to pick the top five to give the realtor/estate agent. This practices storytelling and stakeholder prioritisation.\nNow we move into the part that estimating has to play in creating a release plan. We need to dig deeper into each story before we can estimate them in story points, allocating them into buckets. We introduce the techniques in a slide presentation and follow this with group work – the families have now moved in to their new home and now write the stories for house repairs and remodelling. The family has a limited budget and plans to do as many of the tasks themselves at weekends. After writing about the challenges in design stories, they then estimate the stories in points and put together a plan for what can get done in next 3 months. This will lead into group work to practice arguments and counterarguments followed by a debrief.\nThe session ends with discussion of key learning points.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Tutorial	2008
20081131	Lessons from Agility meets an eCommerce SaaS Product	<div class="content">\n    <p>ChannelAdvisor is an eCommerce SaaS provider in the online sales arena. In 2007 we decided to take on Scrum / XP as our Agile methodology in developing our products. Our overall adoption has been successful and we are driving further into Agility in 2008. However, some important lessons surfaced from our implementation.  </p>\n\n<p>This session focuses on lessons learned in adopting agility including—the importance of effectively training the entire organization, assuring deep stakeholder understanding; the need for experienced coaches; how to deal with lingering waterfall thinking; and the dynamics of organizational (not just technical team) agile adoption.  </p>\n\n<p>While your mileage may vary, we believe we faced common challenges and hope our war stories will help your adoption.  </p>\n\n<p><strong>Learning Points:</strong><br />\n1) We underestimated the need for a more organization-wide adoption focus. We’ll explore aspects of that.<br />\n2) How to overcome SaaS driven challenges: quality demands, multi-tasking; the interplay with closely-coupled real customer input; start-up organizational dynamics; and  responsiveness.\n3) How we’ve approached specific challenges—adoption of agile tools, buffering from excessive multi-tasking, CI implementation challenges, avoiding Waterfall-thinking in our team design efforts.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>It is a lesson learned - so a little time will be spent on our context. SaaS really comes into play for us from a speed and quality perspective. We’re finding out more and more why it’s critical to test continuously and well. However, we do have a legacy codebase, so that challenge is ongoing for us.</p>\n\n<p>The overall format will be story-like; providing a time-line of challenges and the incremental adjustments we’ve made to face them and improve. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Talk	2008
20083289	â€œItâ€™s not the pants, itâ€™s the people in the pantsâ€: Learnings from The Gap Agile Transformation	<div class="content">\n    <p>After 7 years of traditional IT delivery, Gap Inc. Direct decided to adopt Agile. \nThis experience report discusses three key factors that contributed to our successful (and ongoing) Agile transformation:\n1. Ambitious Pilot Project\n2. Massive Investment in Continuous Integration\n3. Rethinking our Assets\nThe choices we made might seem risky and even counter-intuitive, but understanding them could help other organizations consider different points of view and priorities as they embark on the transition to Agile. Additionally, we will identify ongoing challenges and what is left in our transformation backlog.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This will be 25 minutes presentation followed by 5 minutes of questions and answers.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20084083	Crawl, Walk, Run: 4 years of Agile Adoption at BabyCenter.com	<div class="content">\n    <p>Four years ago the BabyCenter team was tasked with more projects than actual developers while delivery dates were set long before projects were scoped or staffed.  Now, four years later, the team has evolved into sprints with predictable, steady velocities and a comprehensive planning process wrapping the Scrum Sprints.  Learn how BabyCenter grew up by adapting Scrum and modifying the planning process.  Join Ken and Keith as they trace BabyCenter’s journey from chaos to a relatively mature Agile organization.    Good lessons for new and experienced Product Owners alike.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>BabyCenter, LLC, a Johnson &amp; Johnson operating company, has spent the past four years adopting agile processes.  BabyCenter shares social community websites with millions of unique users a month receiving more than 100 million page views/month.  The BabyCenter team began adopting Scrum in the spring of 2004.   BabyCenter also has incorporated many concomitant Agile practices, including Continuous Integration, Test-Driven Development, automated functional testing with Fit, and pair-programming.  <!--break-->  The engineering teams run on two-week Sprints and roll code to production after every sprint.  The team has evolved into Sprints with predictable, steady velocities and a comprehensive planning process wrapping the Scrum Sprints. All repeated tasks are highly automated, and production oncall events have dropped to nearly zero. A large fraction of release branches actually have no bugs in them, and there have been no rolled-back deployments in over a year.</p>\n\n<p>But from what humble beginnings! </p>\n\n<p>Four years ago, the team was tasked with more projects than actual developers, delivery dates were set in stone long before projects were scoped or staffed.  Emergency bug fixes were pushed to production several times per week by developers, and sites were routinely impaired.  Multitudinous business stakeholders had direct access to team members, deluging them with requests for projects, each more urgent than the previous (in progress, yet unfinished) one. Product management had a penchant for large, BDUF projects.  Developers ran amok in production, creating ever more problems with clever “solutions” to operational difficulties.</p>\n\n<p>This talk will cover BabyCenter’s journey from chaos to a relatively mature Agile organization.</p>\n\n<p>Some themes we will hit on are:<br />\n - changes in development, operational, product management, and business stakeholder culture and behaviors<br />\n - the evolution of the planning process from set-in-stone dates to velocity-based prediction<br />\n - the importance of a great Product Owner<br />\n - experiments with various tracking technologies (cards, spreadsheets, full-blown product management tools)<br />\n - the difficulties in doing real functional Fit testing  </p>\n\n<p>We’ll then describe in detail BabyCenter’s current implementation of Scrum, including:<br />\n - a series of pre-Sprint planning and scoping meetings<br />\n - formal business stakeholder checkins during the Sprint<br />\n - a “two-bucket” product backlog: balancing short-term tactics with long-term strategy<br />\n - Sprint Breaks<br />\n - a process so repeatable that it became boring, and efforts to inject some chaos back into the Sprints<br />\n - a management team that no longer questions the teams velocity   </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20083889	Scaling Agile: Finding your Agile Tribe	<div class="content">\n    <p><strong>Premise</strong>\nThe ability of agile practices to scale to “large” software development efforts (more than three teams or 30 team members) has been widely debated in recent years. While a variety of inhibitors to scaling agile are frequently cited, this experience report describes how the primary challenge to scaling agile that we faced was finding the right people to build our agile tribe. The effective adoption of Agile requires passionate, motivated individuals who accept change, think like a business owner, operate willingly outside team walls, and identify and drive program issues. Finding such a large number of people with these qualities is much more difficult than establishing methods to support communications, progress tracking, and other agile practices. We conclude by describing the attributes of the type of person that we believe will thrive in a large-scale Agile shop. </p>\n\n<p><strong>About Us</strong></p>\n\n<p>• Division of Siemens Medical Solutions, Inc. USA - commercial software for the Medical Industry\n• ThoughtWorks was brought in to “jump start” the adoption process – provide developers and Scrum Masters experienced in Agile practices</p>\n\n<p><strong>Project History/Challenges</strong></p>\n\n<p>During this part of the discussion, we will identify two of the key project challenges we experienced. We will describe the processes and tools we put in place to address the challenge, but seek to illustrate how the root cause of the problem was individual adoption of Agile.</p>\n\n<p><em>Integration &amp; Dependency Management</em></p>\n\n<p>While on Agile projects, one seeks to reduce external/cross dependencies as much as possible. A project of this scale, that is adopting a SOA strategy, still requires a significant amount of cross-team integration. We were particularly dependent on one core service provider throughout the project. We struggled with:</p>\n\n<p>• Finding effective, lightweight methods for identifying and tracking dependencies and defining requirements and creating contracts</p>\n\n<p>• Scheduling implementation and integration to limit blockages and reduce code decay \nWe created solutions to these problems and, in specific instances, were able to effectively manage large-scale integration. However, we were unable to do so across the project due to individuals being unable to:</p>\n\n<p>• Proactively seek out future integration points and potential challenges</p>\n\n<p>• Stop using highly contractual, document-centric processes and sit down together to solve the problem quickly and efficiently</p>\n\n<p>• Take ownership of the completed integration point and change individual team backlogs</p>\n\n<p><em>Continuous Integration</em></p>\n\n<p>•We were continuously challenged by the size and complexity of the build. “Getting to Green” has been a major endeavor, requiring extensive coordination and special tools (e.g. AntHillPro). To date, we’ve been able to create a build process that effectively manages our myriad dependencies and supports a total build of the application in a reasonable time. We were less successful in establishing the individual sense of responsibility for getting the total build to green.</p>\n\n<p><strong>Profile of an Exemplar Agile “Tribe Member”</strong></p>\n\n<p>We do not mean to say that we didn’t find resources who were effective in a large-scale Agile project. Quite the contrary: we were able to locate and recruit a number of people who met the criteria, and if we had a 100 of these people, we would be able to bring global peace, conquer world hunger, etc. What are these people like? Your basic Agilist, plus the ability to think like a Global Citizen or “Tribe Member.”</p>\n\n<p>When you are in a small team, it’s much easier to be Agile. You are all focused on a common set of problems and it’s about making your team as efficient as possible. When you are part of a larger community, you also need to look at other people’s problems and sometimes sacrifice your efficiency for the sake of the program. At times, this may seem counter to Agile principles. To be successful, you must:</p>\n\n<p>• Be comfortable thinking and operating outside your team (break down the team walls). You cannot let the “them versus us” mentality exist between teams. You have to want to move around, work with different people, change your focus and take on different responsibilities throughout the life of the project.</p>\n\n<p>• Think like a Business Owner, not just a Product Owner. On a single team, the business and the team are easily aligned, but with multiple teams and product groups, you need to think about what would be the best overall result would be, even if that means individual product teams are sacrificed. You have to think about the end result, not just finishing what is on your plate.</p>\n\n<p>• Be ready to raise issues you identify and fight aggressively for the program’s attention to them. In a small team, it’s much easier to communicate your concerns (e.g. in a stand-up), but in a large setting you will need to communicate to a broader audience and fight for priority against a host of competing issues. You have to be comfortable communicating uncomfortable truths, ready to debate issues in unfriendly forums, and persistent enough to drive issues to conclusion.</p>\n\n<p>• Accept change. Sure, “embracing change” is the xP motto, but on a small project you have greater understanding of the drivers for that change. In a large project, many more factors might force change upon you that you might not want to adopt (e.g. employing specific testing methods to support another group’s requirements). </p>\n\n<p><em>Finding Your “Tribespeople”</em></p>\n\n<p>So the challenge is locating these people. It can be easy to find people who are interested in working on a big Agile project. It’s much more difficult finding people who you want on your big Agile project.\nRule #1: Don’t base your decision on Agile experience! Agile is a mindset, not a skill set. Some people do this stuff intuitively, others spend years in an Agile environment and still don’t get it.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session will be in the form of a presentation (slides) with these three sections:</p>\n\n<p><em>Introduction/Background (5 minutes)</em></p>\n\n<p>• History of the project (250+ people building medical software using Scrum and dev practices of XP) </p>\n\n<p>• Challenges that we faced in scaling agile for this project (described above) )</p>\n\n<p><em>Findings/Recommendations (20 minutes)</em></p>\n\n<p>• Identification of the core challenge in scaling the project (determined through retrospective): finding the right agile tribespeople </p>\n\n<p>• What we learned — key attributes to look for in recruiting agile tribespeople to ensure success</p>\n\n<p><em>Questions &amp; Answers (5 minutes)</em></p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20084702	The Price of Agile Is Eternal Vigilance	<div class="content">\n    <p>You’re the executive-sponsor of your division’s foray into agile. It was successful with the first development team; you saw good results with the second and third; by the fourth you knew you had something!  Now you want to roll it out across the entire organization. But each of your teams approaches agile differently.  You’d like a consistent approach, but you don’t want to stifle the culture of cooperation and coordination that agile has brought to the organization. How do you scale with a consistent approach that also supports The Manifesto?</p>\n\n<p>To successfully scale agile across a large development organization, that organization must augment the agile framework with a set of clearly defined, non-negotiable rules and regulations, practices and expectations, and the organization must  train itself to constantly and consistently enforce, and question,  these conventions from within.</p>\n\n<p>Agilists place a lot of emphasis on the discipline of individuals and the discipline of teams.  But this is not enough to scale agile across a large development group.  Frameworks, like agile, provide a preferred approach. The organization itself has to commit to a consistent approach.</p>\n\n<p>VeriSign Enterprise Security discovered, when we tried to scale agile across our division, that we required a broader brand of discipline.  So we set up non-negotiable practices, procedures, metrics and reporting.  We found that when we conformed to these rules we set down we were consistently successful.  We also found that when we deviated from our organizational constitution, or when we tried something new without setting down ground rules for everyone to follow, we consistently failed.  We found that in addition to setting down rules and policing ourselves, we needed to regularly examine, adjust and communicate out new policies as we learned how we could best leverage agile disciplines to build and deploy successful products.</p>\n\n<p>Deciding to Scale</p>\n\n<p>VeriSign Enterprise Security began implementing agile using scrum in June 2006.  In February 2007, after eight months of experimenting with agile development, the division was ready to roll the agile framework out to the entire development organization of more than 40 people in four locations.  We had seen demonstrable success with the three teams what were using agile; now we would have eight teams comprised of the entire organization.  Our individual engineers and QA people were dedicated to the discipline of agile.  They were forming into teams that were dedicated to the practices of agile.</p>\n\n<p>There was just one problem.  Which disciplines and practices, exactly, were we talking about?</p>\n\n<p>We were going to a lot of trainings, a lot of conferences, learning from a number of consultants, and reading a lot of books.  We hung posters of the Manifesto on every blank wall in the building so that everyone would understand the fundamentals.  But, while the fundamentals were consistent across the information sources who were instructing us about agile, the particulars often were very different.</p>\n\n<p>Some agilists recommended 4-week iterations, some recommended 2 or even 1-week iterations.  Some recommended using scrum walls with cards and stickies, some used on-line tools like Rally and ScrumWorks. Some insisted that we would fail miserably unless teams were co-located, others told us our distributed structure would not be an obstacle.  Our three scrummasters were advocating and practicing some very diverse “agile” and there was a ton of discussion about what our “best practices” ought to be, or if best practices were best left to each team to decide upon.  </p>\n\n<p>After weeks of discussion we decided that we needed internal consistency if we were going to scale agile to the entire organization.  So as a team we set up some rules to live by.</p>\n\n<p>We also had some organizational goals in mind.  If we were going to set down new rules, we should tailor them to solving some of the problems we were facing as a business unit.  We were doing a lot of releases to production every quarter, sometimes as many as three or four major releases, each with its accompanying overhead.  We determined that we could solve this problem if we set expectations around our new agile development process.  We would merge whatever was ready from branches into trunk and release on a set quarterly schedule, which would be the last Wednesday of every quarter.  Once this was locked in and communicated out, it would be only in extreme cases where the business could say they couldn’t wait for the quarterly release to get some new technology out to the market.  If this worked, we would have the entire organization marching toward a common goal every quarter: completing the milestones that lead to deployment day.  We talked about how we wanted our process to work and, like the benign dictatorship that we are, we wound up with these:</p>\n\n<p>Non-negotiable items:\n•        Release kick-offs, Iteration kick-offs, UATs, retrospectives and daily scrums using standard agendas\n•        Scrum wall (physical story cards, task cards) is primary working record of iteration activity \n•    QA integrated into the team and the sprint\n•        Five, two-week iterations every quarter\n•        Definition of done within 2 week iterations = development, QA sign-off, Product Owner acceptance\n•        No changes to User Stories or additional User Stories during the iteration\n•        When team members “go missing” during an iteration for any reason, we will take a hit to velocity and note it in our documentation\n•        Sign-off is QA acceptance (QA test-plan pass)\n•        Standard spreadsheets for velocity tracking and sharing\n•        All major releases will have a code freeze, regression (3 weeks) and pilot (2 weeks) prior to GA on the last Wednesday of every quarter\n•        All major releases will have an entropy reduction iteration running parallel to regression</p>\n\n<p>We clearly communicated these expectations to scrummasters and technical leads, who in turn made them clear to each agile team.  We met with stakeholders at all levels to make our intentions clear and to gain their acceptance.  Once we were all informed of organizational expectations, we began the process of rolling agile out to everyone.</p>\n\n<p>Community Policing</p>\n\n<p>That decided, now somebody or everybody had to be a cop.</p>\n\n<p>We knew it wouldn’t work unless we were committed to it as a management team.  So from the very top down, for the first few weeks, we monitored each team extremely closely.  This wasn’t easy.  We were not all entirely convinced that we had chosen the correct non-negotiable practices.  Some of us were pretty certain that we’d chosen the wrong practices.  But we remained united as a management team under a director who made certain that even if we disagreed, we committed.  We also committed to re-examine our policies quarterly.</p>\n\n<p>To assist us with our policing we created a wiki space for our required artifacts.  Each wiki page displayed a list of user stories per iteration noting any pertinent assumptions, housed all the story test plans, and recorded the attendance and outcomes of each UAT meeting.  We published velocity numbers, backlog items and points, retrospective results, regression plans, noted production release information, design documents, security and technical documents and approvals, UI mockups and any MRDs and FRSs.  For the edification of future generations, we included the celebratory haikus created by the Athena team after each successful iteration (“18 points this time/ We’re pretty happy with that!/ Somewhere, a leaf falls”).</p>\n\n<p>The wiki gave everyone visibility into the inner workings of each team with minimal invasiveness. We were able to determine pretty quickly if a team was conforming to the non-negotiables and course-correct if they were not.  </p>\n\n<p>Conformity had other advantages as well.  Although points-estimating was left up to each individual team with no consistent standard imposed, we could compare teams to each other.  We could look at how well, over five iterations every quarter, each team predicted velocities, consumed work, integrated QA, and dealt with disruptions (illness, production outages, blockers).  We could roll team metrics up to the organizational level.  We wound up with a consistent set of artifacts which became extremely valuable during our annual audit process.  It was fairly easy for developers and QA resources to move between teams.  But most importantly, we were able to implement a quarterly production release schedule, a goal we had had in mind for a very long time.  Product Owners and customers became used to and happy with an extremely predictable major quarterly deployment, and Product Owners have found that they can manage market windows within this schedule.</p>\n\n<p>Interestingly, our greatest failures have occurred during instances where we have not set down widely-communicated rules and expectations.  We attempted to drive test-driven development through the scrum teams during our third and fourth agile releases.  We failed, though, to set down precisely what our expectations were for our development teams and to police and reward or correct developers based on results.  As such, we had very spotty results with TDD, with some teams succeeding to implement it, but most not meeting with the level of success for which we had hoped.  </p>\n\n<p>Amendments</p>\n\n<p>Now we look at our process every quarter and decide how we need to amend what we’re doing.  We roll up information from retrospectives conducted during the release, add agenda items of topics we’d like to explore, and we closely examine our successes and failures.  We’ve added new rules surrounding many issues that have cropped up.  We don’t let team members move on to a new story if there are any testing issues remaining on an in-progress story, for instance, as we found that the testing was piling up at the end of iterations.  We want teams to document UAT criteria specifically at iteration planning meetings and hang the UAT criteria cards up on the scrum wall.  We’ve expanded the requirements for a project sign-off to better set up regression and deployment teams with information they need for builds and testing.  We implemented a scrum-of-scrums run by our release management team to identify inter-team dependencies and resolve merge issues before they occur.  </p>\n\n<p>We remain extremely committed to policing for the benefit of the organization.  It has proven extremely effective to have defined sets of non-negotiable expectations, behaviors and deliverables and to make each member of the organization responsible for making sure we are all adhering to our regulations.  </p>\n\n<p>• By documenting up front, as an organization, how every team would operate, we were able to scale agile across the operation with very little confusion.  We set clear expectation for development and for the business.  We created common metrics, a common schedule, and shared goals and expectations.</p>\n\n<p>• By making everyone aware of what was expected and responsible for delivering, we set up a culture focused on behaviors and deliverables that drove us toward success.</p>\n\n<p>• By constantly assessing what works, we let people know that process change is natural and encouraged, and that we’re committed, as an organization, to a successful practice and product.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We will use a Powerpoint presentation to describe our methodology and results, and open the floor to questions.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20081249	Becoming a fearless leader of change (to agile or any new idea) in your organization	<div class="content">\n    <p>Those of us who attend conferences or read articles see new ideas we want to take back to our organizations, but then we struggle to make something happen. This struggle has become especially apparent as enthusiastic agile development proponents want to encourage their teams to apply these approaches. We will provide successful change management strategies to help agile proponents and anyone who wants to influence others to adopt a new idea.  Hear how to encourage people to become so involved and interested in new ideas that they want to change. Bring your frustrations! We will uncover solutions to the roadblocks that allow “powerless leaders” to fearlessly make ideas happen in their organizations.</p>\n\n<p>Intended Audience</p>\n\n<p>Anyone who is trying to introduce new ideas into an organization </p>\n\n<p>Benefits of Participating</p>\n\n<p>This tutorial will help participants understand what successful change agents have learned while attempting to introduce new ideas into their organizations. These lessons have been documented in a pattern language that has been published in the book: Fearless Change: Patterns for introducing new ideas–a top seller at past agile conferences. Participants will learn about the change strategies documented in this language and will explore how they can use these strategies to solve their specific problems in leading the transition to agile.  The goal is to help them become fearless agents of change in their organizations. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Process/Mechanics</p>\n\n<p>This tutorial is a combination of a play, presentation and a “first-aid clinic” exercise.  It is a highly interactive session.</p>\n\n<p>Timetable</p>\n\n<p>Introductions (leaders and participants): Description of the session and the materials.</p>\n\n<p>Presentation, play, and discussion: Introduction to the Fearless Change project and the patterns, lessons learned, and case studies. The lecture supports a “play” in which participants act out roles involved in the introduction of Agile into an organization.</p>\n\n<p>Exercise: First-Aid Clinic.  The group will be divided into small teams and will use the patterns to address their own problems in leading change.  Participants and tutorial leaders will discuss their plans, assumptions, and reasons.</p>\n\n<p>Wrap-up:  Summary, retrospective and de-brief.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Tutorial	2008
20082977	Creating Cultures Where Agile Emerges	<div class="content">\n    <p>Agile practices emerge in a collaborative environment. As the leader on several projects, I saw the emergence of iterative development, test first, evolving functional specs, pair programming, minimal documentation, and customer involvement at every step of the way. \nSuccessful tools to create this environment cover creating an open environment, bringing the right experience, skills, and thinkers together, how to stimulate and foster the free flow of ideas, and letting people to decide what they want to do and by when (self-accountability). Tools to lead collaboration will also be introduced.</p>\n\n<p>As I look at these projects, the tools I developed fall into two processes:<br />\n1.  Collaboration Process<br />\n2.  Process for Leading Collaboration.  </p>\n\n<p>The collaboration process steps are:<br />\n-   Create an open environment<br />\n-   Bring the right experience, skills, and thinkers together<br />\n-   Stimulate and foster the free flow of ideas using sticky notes and group prioritization, and<br />\n-   Allow people to decide what they want to do and by when (self-accountability).    </p>\n\n<p>To collaborate we need the free flow of ideas. This requires a trusting environment - one that is free from fear of speaking up and questioning other ideas no matter who they come from, one that is nonjudgmental. </p>\n\n<p>But how do you create such an environment? How do you maintain it? In this tutorial attendees will learn how to create such an environment, identify gaps to openness, practice tools to remove fear and know what techniques to avoid (those that stifle creativity and innovation). </p>\n\n<p>Next we will address getting the right people in the room – how to avoid myopic thinking and get a wide and diverse set of thinkers with experience not only to solve the problem but help people address the issue with a different view.</p>\n\n<p>To implement collaboratively, we talk about how team members set their own accountability, how teams define their measurements and success factors, and hold each other accountable. </p>\n\n<p>Finally, the conversation of most importance: how leaders step back and when they step up and lead. We will look from both sides of this relationship: what teams want and need; what leaders want and how they can tell when they need to lead. While many leaders know this is important, we often don’t address how it is done. Each person in their own context must discover their own ‘Leadership Tipping Point’ where they understand when and why they step up and how to step back.</p>\n\n<p>The process for leading collaboration is:<br />\n-   Get the right type of people, those with integrity who are trustworthy and who are a fit for the organization in passion and what they do best,<br />\n-   Trust your teams first,<br />\n-   Let the teams decide and let you know the direction they think best for the company,<br />\n-   Stand back and let people work.</p>\n\n<p>How do we find hire, and promote the ‘right people’? Dee Hock, CEO Emeritus of VISA International, states we should hire on integrity first, then motivation, capacity, understanding, knowledge, and lastly, experience. We usually do this backwards (experience first). In this tutorial we will discuss how to hire and promote on Hock’s criteria.</p>\n\n<p>Yes, leaders must trust first. And we must create a culture of trust where team members are supported in building trusting relationships, where there is a ‘safety net’ so teams can fail early and minimize the impact to team success.</p>\n\n<p>To improve operations, leaders must listen to the solutions of the people closest to the ineffective processes. In this tutorial, you, attendees will learn how to collaborate in identifying processes that are not working and find solutions to improving them. </p>\n\n<p>Many teams fail because leaders have difficulty in stepping back – and do not know when to step up and lead. We will review the strategies we have talked about earlier in this tutorial in the context of leading collaboration across the many different departments in an organization.</p>\n\n<p>In this tutorial, you learn how they can put these tools to work in their organizations at all levels. Working together in hands-on breakout sessions, you discover where your environment might not be open, how to reduce/remove any fear that might be in your organization and how to create a culture of trust. Through the practice of collaboration, you discover effective ways to find creative ideas and solutions to business, operations, and project issues. Finally, we will address the difficult step of standing back and develop some strategies for doing this.</p>\n\n<p>What fascinates me is that by following these steps as a leader, agile arrives! People begin to do customer involvement, iterative delivery, test first, and other agile practices. While agile might work in other situations than these, this method does work. It gives leaders all they through the organization, from CxO to team leaders, tools to support the success of agile.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>30 mins: Discussion of Collaboration Process.<br />\n30 mins: Group exercise to define an open environment.<br />\n30 mins: Small groups work on strategies to fill the gaps to create an open environment in their organization.<br />\n30 mins: Discuss Collaborative Leadership.<br />\n30 mins: Using collaboration process, build strategies for creating a culture of trust.<br />\n30 mins: Develop strategies for when to step up and when to step back as a leader in collaborative environments.  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Tutorial	2008
20080410	Creating Agile Streams for business and technical value	<div class="content">\n    <p>Have you ever played the role of business owner and found yourself between “a rock and a hard place” of organizational politics when prioritizing backlog features?   The Agile Stream approach negates those politics by dedicating development teams to organizational units and allowing those teams to continue working, iteration after iteration, as long as they continue delivering business value.  The end result is a company constantly changing, improving and looking for the next highest business value it can create.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Experience Report written for conference publication;</p>\n\n<p>Process/Mechanics\n•   20 minute discussion of Aquent’s experience\n•   10 minute Q&amp;A\n•   Two Flipchart size posters displaying Organizational and Stream flow\n•   “Chalk Talk” using white board or flipchart paper: write/draw as we discuss topics\n•   No Need for PowerPoint or other audio visual support </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20082881	The Big Projects Always Fail: Taking an Enterprise Agile	<div class="content">\n    <p>In March 2006, our organization began adopting agile in a small project setting. Two years later, all our software development across an IT department of 85 and a development team of about 50 is organized using agile. We’ve adopted tools, processes, and a culture that includes many of the foundations of agile, including daily stand-up meetings, weekly estimation / planning / deployments, continuous integration, and collaborative team rooms. A majority of our work is web development, but we’ve also adopted this model for our legacy systems and a PeopleSoft ERP. </p>\n\n<p>I’d like to share what we’ve learned over this two year period: what works, what doesn’t work so well, and optimization choices we’ve made that help with certain things and hurt in other areas. A component of the conversation will be discussing some of the cultural challenges within the technology organization associated with providing “structure” to what was previously a chaotic software development process, as well as some of the staff-level difficulties of implementing stand-ups and team rooms. I would also like to spend some time on the challenges of communicating the value and effectiveness of agile to your business customer when not all of them are convinced that the direction is sound. Of all our challenges on the technology and process side, this is probably the biggest obstacle to the perception of success.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session will be a standard, interrupt-able presentation (20-25 minutes) in “top ten list” format, followed by a Q&amp;A session.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20083313	An Ericsson example of enterprise class Agility	<div class="content">\n    <p>Agile in development teams has distinct benefits, but in large organizations a development team is a small part in the chain from customer request to customer delivery. Introducing Agile is a massive change in both our culture and our ways of working. The results are impressive: team motivation and product management satisfaction increased. We will present how to leverage on improvements in development in a large organization, the main choices we made, the resistance we had to overcome and how we made the changes stick. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20082172	Enterprise Agile - panel discussion	<div class="content">\n    <p>The growing trend of companies to widely adopt agile across their organizations has created change far beyond what happens at the level of the team. This panel examines issues surrounding enterprise agile adoption.  We will explore topics such as agile transformation and initiation, leadership, culture change, hiring, incentives and technology.  Experts from diverse large companies such as Google, Yahoo!, Salesforce.com, The Gap and Barclay’s Global Investors will discuss these issues, grounded by their experiences. Audience members will also get the opportunity to submit questions to the panel. </p>\n\n<p><strong>Above is for the program guide</strong></p>\n\n<p>Initiation \n—What does it mean for a large company to start using agile? (use examples from your organization) \n—How does it begin? Why does it begin? \n—What are the key challenges faced? \n—What results are seen? </p>\n\n<p>Cultural Change \n—What is the cultural impact to your organization? \n—How does this impact or surface systemic issues in the organization? \n—How does the company adapt leadership and management? </p>\n\n<p>People \n—How does the organization deal with people who don’t want to use agile? \n—Is there a change to the way the company hires? Who it hires? \n—Is there a change to the way the company does performance reviews or incentives? </p>\n\n<p>Overall \n—Knowing what you know now, how would you recommend a company approach agile adoption?<br />\n—What are your lessons learned?</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a 90 minute panel discussion, moderated by Nicola Dourambeis, Salesforce.com  </p>\n\n<p>Confirmed speakers include: \nMark Striebeck, Google \nGabrielle Benefield, Yahoo! \nPetra Skapa, The Gap \nRichard Watt, Barclay’s Global Investors \nSteve Greene, Salesforce.com </p>\n\n<p>Format: \nSpeakers will be asked to first briefly describe their organization’s experiences with agile and then the topics will be examined.  Audience members will also be invited to submit written questions for panelists, for the final section of the panel.  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Panel	2008
20081464	Planning and Facilitating Release Retrospectives	<div class="content">\n    <p>There is a lot of emphasis, in literature and practice, on holding and leading sprint or iteration retrospectives. There is less information, guidance and advice about retrospectives with larger scope- release and project retrospectives that span multiple iterations and/or teams. Using journal information recorded from the planning and the conducting of a release retrospective with a scrum team, we’ll explore questions on who attended, when was a good time, what the goals, activities and results were, how it was planned and facilitated, and what the team and the facilitator learned. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This report will be as conversational as possible.  As in other talks I’ve done at other venues, I’ll use some polling by raised hands to gauge where the group is- have they or their teams had release retrospectives?  Project retrospectives?  Were they the facilitator or a participant?</p>\n\n<p>The basic flow will be (but will be flexible based on the data gathered above):\nIntroduction/Motivation for Release Retrospectives 5 min\nPlanning the retrospective 10 min\nHolding the retrospective 5 min\nFeedback and lessons from the retrospective 7 min</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20082785	The (Fr)Agile Organisation - (an experience report of trying to make an Agile culture stick)	<div class="content">\n    <p>Four years ago the New Media division of the BBC began adopting Agile project management practices for web, interactive TV and mobile product development. They proved to be an instant success enabling teams to work more efficiently and transparently than ever before. More recently there began to be concerns on the ground that Agile would be seen as a passing fad by some newly appointed key senior managers, and coupled with departmental restructuring led to a belief that Agile would be challenged before being put aside.</p>\n\n<p>Today New Media is re-branded as Future Media and the entire structure of the department has changed - with some key people being moved around the business. Many of the Agile pioneers have moved on and the baton passed. Key roles have appeared and disappeared and Agile practices have been inspected and adapted. However, even after 4 years of successful Agile working there still seems to be a nagging doubt as to whether being Agile will permanently stick. With every new senior appointment made the same questions arise; “Do they support Agile practices?”, “Are they a threat to our Agile ways of working?” It sometimes feels as if we’re precariously Agile rather than fundamentally Agile. </p>\n\n<p>This experience report looks at the causes of this uncertainty and ways to address it. Is it because Agile methods are not yet universally understood? Is it because of some of the popular misconceptions that still pervade about Agile? Or is it down to factors that are unique to this organisation?</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This would be an experience report. I would aim to deliver the report in 20 minutes and have 10 minutes for questions.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20084295	Integrating Software by Integrating People	<div class="content">\n    <p>In 1996, Landmark Graphics was a company that had grown from a startup 10 years prior into a leading provider of software applications in oil and gas exploration. The growth via acquisition had resulted in a collection of corporate cultures separated by prior organization, geography, product line and business domain. The visionary leadership realized that the best way to create integrated solutions was by integrating the people.  This example of leading collaboration has paid off through increased profitability and market share.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is an Experience Report.</p>\n\n<p>The full experience report is available at </p>\n\n<p><a href="http://www.toddlittleweb.com/Papers/New/Int%20SW%20by%20Int%20People%202007-07-05%20Final.pdf" title="http://www.toddlittleweb.com/Papers/New/Int%20SW%20by%20Int%20People%202007-07-05%20Final.pdf">http://www.toddlittleweb.com/Papers/New/Int%20SW%20by%20Int%20People%202...</a></p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20080493	Jazz improvisation as a metaphor for understanding agile development organizational behavior	<div class="content">\n    <p><strong>Overview</strong><br />\nDespite the maturity, available training, and publications related to these processes, most organizations are not well positioned to adopt them. Agile development involves changes in <em>organizational behavior</em> which can take years and require a good understanding of the behavioral support needed for agile development. Designing organizational behavior is a difficult task and not easy to understand, but metaphors can aid considerably.    </p>\n\n<p>This talk will focus on the participants and interactions inherent in a jazz improvisation band as metaphor to understand the organizational behavior needed to support a migration to agile software development.    </p>\n\n<p><strong>Intended audience</strong><br />\nPrimarily intended for those managing agile teams.  Also theam members or management attempting to migrate to agile development.  </p>\n\n<p><strong>Benefits of participating</strong><br />\nThis metaphor is important for <em>agile team members</em> as a way to communicate collaborative, emergent behavior to their management and it is important as a way for <em>management</em> to understand the necessary behavior on their part to encourage collaboration with agile teams. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>THIS IS A 60 MINUTE PRESENTATION.<br />\nThe presentation will consist of small group exercises (approximately 20 minutes total) and lecture.<br />\nTalk will be as follows:<br /><em>What is Organizational Behavior and how can I use this information?</em> 5 Minute<br /><em>Where did the idea of jazz ensemble Improvisation come from?</em> 5 Minutes<br /><em>What are the special characteristics of jazz improvisation?</em> 10 Minutes<br /><em>Exercise 1</em> How can you work like a jazz ensemble?  10 Minutes<br /><em>Applying jazz improvisation ensemble characteristics to agile development team behavior?</em>  10 Minutes<br /><em>Excercise 2</em> What works, what fails with collaborative behavior?  10 Minutes<br /><em>Metaphor strengths and failings.</em> 5 Minutes<br /><em>Conclusing and using the metaphor at work.</em> 5 Minutes.  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Talk	2008
20080247	An HR Perspective on Agile Careers in Corporations - Survey Results, Analysis and Forecast	(No description)	Agile & Organizational Culture	Talk	2008
20083357	Agile Communities in Japan	<div class="content">\n    <p>We do agile in Japan.  To some extent, at least.  In this presentation, I’m going to introduce you communities in Japan centered around agile.  Those communities played (and are playing) very important role to spread agile in Japanese software industry.  Early days, they have been the window to cutting-edge agile activities in US and Europa.  Many people loved, say, XP and tried to practice just to hit hard on obstacles.  Yet they bring their failures to communities and discussed to learn from it.  Communities also held offline events to let people meet each other.  </p>\n\n<p>Well, I’m still gathering info about agile communities in Japan.  I present them below.  I’d rather hear whether you will be interested in this presentation and in what aspect.  I’d love to adapt to reviewers’ comments.</p>\n\n<p>I also hope to highlight some of the differences between Japanese agile and western agile.  More on the differences, we submitted another session proposal, Agile In Japan:  <a href="http://submissions.agile2008.org/node/3920" title="http://submissions.agile2008.org/node/3920">http://submissions.agile2008.org/node/3920</a></p>\n\n<ul><li>XP-jp mailing list</li>\n</ul><blockquote>\n  <p>One of the earliest (Feb. 2000) community started by Kenji Hiranabe.  Hosted many hot discussions and reports of findings.  Now quite silent (as many other mailing lists are.)</p>\n</blockquote>\n\n<ul><li>XP Japan User Group (XPJUG)</li>\n</ul><blockquote>\n  <p>Also quite old.  Holding a few smaller (30-80 people) events per a year and one big (100-200) event called ‘XP MATSURI’ or XP Festa.  Still very active with 1200+ valid mail addresses.  There is Kansai (western part of Japan) branch and it’s also active.</p>\n  \n  <p>A report of XP MATSURI 2006 (see the images)\n  <a href="http://www.kumikomi.net/article/report/2006/24xp/01.html" title="http://www.kumikomi.net/article/report/2006/24xp/01.html">http://www.kumikomi.net/article/report/2006/24xp/01.html</a></p>\n</blockquote>\n\n<ul><li>Object Club</li>\n</ul><blockquote>\n  <p>Started as a group studying Object Oriented things and grown up to cover broader area.  Held 9 big events (2 per a year) and several smaller ones.  Past themes: Object Brain, Learns from failure in Object Oriented development, MIERUKA (visualization) and agile, Project Facilitation, worldcafe and lightning talks, Su-Ha-Ri, XFD (eXtreme Feedback Device which is a MIERUKA devices), Object Oriented returned.  Started by Kenji Hiranabe and his colleagues.</p>\n</blockquote>\n\n<ul><li>Project Facilitation Project</li>\n</ul><blockquote>\n  <p>Community of people aiming to change software development from fields, people and really valuable processes.  Not strictly agile but share common values.  </p>\n</blockquote>\n\n<ul><li>Agile Process Association</li>\n</ul><blockquote>\n  <p>Community of companies (also accepts personal registration).  Business oriented.  Have several working groups including agile mind SIG.</p>\n</blockquote>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Simple ppt/pdf presentation with possible Q&amp;A time. (Do you like to have Q&amp;A time?)</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Talk	2008
20083058	When Working Software Is Not Enough: A Story of Project Failure	<div class="content">\n    <p><strong>Presentation Description</strong></p>\n\n<p>The true measure of project progress is working software - or is it?  Our team thought it was, and we were wrong.  This is the story of our team, a team that set out to build a new order tracking system for a worldwide vehicle manufacturer, and failed.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>The Story</strong></p>\n\n<p>The team had six months to build an order tracking system from the ground up to replace a legacy system. The team reviewed the backlog of legacy use cases, performed analysis on the existing system and met with the client to understand what business problems they needed the system to address. The customer, whose specialty was building vehicles, like the traditional approaches common with manufacturing. The team highlighted the ambiguous requirements to the customer and proposed a collaborative solution that would allow the customer to provide feedback to the team based on an emerging, working system – the team introduced Scrum, with XP thrown in for good measure, and the customer agreed to take this approach.</p>\n\n<p>The team had a surprise waiting for it, lurking in the dark. After eight months of development, after demonstrating a working application to the client every two weeks based on emerging requirements, the customer said the team had failed to deliver what they requested.</p>\n\n<p>The team was shocked to hear this. After all, the customer met with the formally every two weeks in the demo, and informally two to three times per week to flesh out requirements and provide feedback as functionality was being built. There were no warning signs until now.</p>\n\n<p>The customer told the team they had missed several elements that were critical to success for the project manager from the customer side. They were:</p>\n\n<ol><li>Unclear stories on the product backlog</li>\n<li>Not providing project deliverable status</li>\n<li>Not providing reasons for stories and functionality being prioritized lower</li>\n</ol><p>The team, understanding the customer pays the bills, did what it could to salvage the relationship and deliver the application. After all, this was a key account for the company.</p>\n\n<p>In its end-of-project retrospective, the team identified several elements that it failed to help the customer understand in its usage of agile for this project:</p>\n\n<ol><li>Sharing risk in the project. The customer was used to fixed bid contracts, where the vendor takes on all the risk. The team, on the other hand, thought the customer was sharing the risk in the project, and that was wrong.</li>\n<li>Providing timely and valuable feedback. Multiple customer user representatives sat in each demo meeting, telling the team that what was being built was correct. It was not until there were six weeks remaining in the project when the customer “woke up” and started actually using the application that had been delivered, resulting in changes to components that had been complete for months.</li>\n<li>How decisions for requested functionality impacted other functionality. The customer, used to a fixed bid scope, did not understand that when functionality was de-prioritized that it meant it was at risk of not being complete. The backlog waterline was not understood.</li>\n<li>Accountability. The team identified that some customer representatives were not comfortable with accountability. This became obvious when, at the end of the project, several people began blaming the team project manager for work not being accomplished, regardless of what documentation and decisions were available. The project manager for the team was to blame.</li>\n</ol><p><strong>Presentation Outline</strong></p>\n\n<p>I plan to use this time based on the following rough agenda:</p>\n\n<p>90 minutes - 60-70m for the talk part, 20-30m for q/a.</p>\n\n<ol><li>Project overview.</li>\n<li>How I failed.</li>\n<li>Retrospective results.</li>\n<li>Q &amp; A. (20-30m)</li>\n</ol><p><strong>Session Learning Objectives</strong></p>\n\n<p>My intent in this talk is to provide the audience insight into a real life, fresh-off-the-presses project that met all technical deliverables but still failed in the eyes of the customer, in hopes of giving people insight into how <em>not</em> to make the assumptions (and mistakes) the team made.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Talk	2008
20082797	From Waterfall to Agile â€“ transforming the mindset	<div class="content">\n    <p>In a crisis ridden business environment, customers have become averse to surprises and there is a heightened need for shorter development cycles and higher visibility. This is translating into customers specifically asking for agile. Service organizations like Wipro Technologies need to adopt lean and agile methodologies to support the transition. As agile coaches, the biggest challenge we face is in transitioning the mindset of the team from that of a waterfall model to an agile thought pattern. Our experience in converting waterfall team to agile is shared in this report.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20084267	Tidal Wave: The Game Changing Transformation	<div class="content">\n    <p>Many companies are now adopting Agile methods to hopefully fix problems with delivering software in a timely, sustainable manner.  However, most people seem to think that the transformation will be quick, and that once implemented, people can proceed along, with little or no change throughout.</p>\n\n<p>We are going to show how our team went through various transformations as we adopted different Agile project management tools.  The transformations cover a span of about two years, and it shows how the transformation not only affected the product team, but also affected the entire organization - the organization continues to change, reinforcing the fact that Agile is never static.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>In this experience report, we will show how Agile brought about multiple waves of transformative change – one at the team level, and the other at the organizational/business unit level.  We will go through the history of one such team in Yahoo! to highlight some of the transformational changes that the team went through, and how their changes affected the levels up the organization.  This will be a 30-minute presentation followed by Q&amp;A session, with a paper published in the proceedings.</p>\n\n<p>The First Wave: 2005/2006<br />\n1.  History<br />\n-   Prior to adopting agile development process, the team had challenges to deliver business objectives and communication was a major issue.<br />\n-   Fire drills after fire drills and heavy burnout<br />\n-   Half of the team were relocated to Southern California (from Northern California) in Q4 ’05<br />\n2.  Agile Transition<br />\n-   The team was trained in Scrum in Dec 2005, and started running scrum first Monday of Jan 2006 (Jan 9th, 06)<br />\n-   Agile coach was involved with the team.<br />\n-   Team had a hard time initially (a. Breaking down tasks,  b. Coming up with a product backlog)<br />\n-   Team consistently worked on improvements through retrospectives<br />\n-   Instituted a “sprint break” – a break after doing a number of sprints back to back<br />\n3.  Results<br />\n-   By the end of Q1 of 2006, the team delivered so much more that they were specially mentioned in the State of the Product report released by the Chief Product Office<br />\n-   Team morale increased<br />\n-   Team was able to collaborate even when they were 300+ miles apart<br />\n4.  Transformative Change: Team Level<br />\n-   Team started delivering<br />\n-   Team’s pride and morale increased  </p>\n\n<p>The Second Wave: 2006/2007<br />\n1.  History<br />\n-   Q2 2006 the team learned Story Points<br />\n-   Team was using Scrum, but quarterly release planning was still done in a waterfall manner.<br />\n-   It was hated by the team, and release planning became the curse word.<br />\n2.  Logistics<br />\n-   The team was trained on multi-level planning (Jean Tabaka) – November 2006<br />\n-   First release planning was done after training – Jan ’07 for Q1 ‘07<br />\ni.  Stories for the entire quarter were divided into the 3 months based on business priority<br />\nii. Then the team created high level tasks against each story (by month)<br />\niii.    Then the team started out with the top priority story of the month and put it in that month and continue this process until the team thinks they are full for the month<br />\n-   Then repeat step iii) for the following month.<br />\n-   When it came to the 3rd month of the quarter, the team looked at the leftovers from first 2 months + the originally assigned for 3rd month and re-prioritize<br />\n3.  Result of first release<br />\n-   The team – using Scrum – started delivering consistently every quarter.<br />\n-   With release planning, they were able to track the progress of Q1’07 – delivered 85% of planned (+ unplanned/changed stuff)<br />\n4.  Transformative Change: Team and Business Unit level<br />\n-   The team was able to build trust with upper management<br />\n-   The team was more comfortable and started to spread the Agile DNA within the business unit; other groups in the division started to use Scrum</p>\n\n<p>The Third Wave: 2007<br />\n1.  History<br />\n-   Inspect and Adapt: the team over the subsequent release planning started to use unique practices to the team<br />\n-   Release planning PostIts replicated in both Sunnyvale and Santa Monica<br />\n-   Distributed team release planning among Sunnyvale, Santa Monica, and Bangalore:<br />\n- Q1 release planning:<br />\ni.  Bangalore team did not participate in Q1 07<br />\nii. Santa Monica (SM) team stayed in SM except for the head designer and one product manager. The rest of the SM team communicated via video conference<br />\niii.    Result: Santa Monica team felt disconnected. It was better to be all in the same location.<br />\n- Q2 release planning:<br />\ni.  One visiting member of the Bangalore team, without being trained, participated (and he got the gist of it!)<br />\nii. So, moving forward, the team requested one member of the Bangalore team to be present in Sunnyvale<br />\niii.    The head of product management and all of the designers flew up to Sunnyvale. The rest of product management team was available via video conference.<br />\niv. Result: New process worked, the team had better collaboration. They also had better knowledge of priorities and goals.<br />\n- Q3 release planning:<br />\ni.  One member of the Bangalore team, the head of product management and all designers flew up to Sunnyvale to join the engineering team.<br />\nii. Rest of the product management team was available via video conference<br />\n-   Roles and artifacts in each locale<br />\ni.  Santa Monica – Product Management, Designers, Web Developers<br />\nii. Sunnyvale – Engineering<br />\niii.    Bangalore – QA<br />\n2.  Logistics<br />\n-   Q1:<br />\ni.  Since no team can do everything, every time there was an additional request from upper management, the Scrum Master went to the general manager(GM) to prioritize or tradeoff the latest additions against the committed items<br />\nii. The stories in release plan were prioritized, with approval by the GM and head of engineering<br />\n- Q2:<br />\ni.  The stories were put in 4 priority buckets, with one non-negotiable bucket and one bucket indicating additional resources needed<br />\nii. Same process with the GM<br />\n- Mid-Q2 and onwards:<br />\ni.  Stories priority buckets were the same<br />\nii. At this point, upper management and GM no longer needed to be reminded that the team could not do everything. The tradeoff happened in the Product Management level<br />\n3.  Results<br />\n-   Q1 – delivered 85% of planned (+ unplanned stuff)<br />\n-   Q2 – delivered 90% of planned (+ unplanned stuff)<br />\n-   Q3 – delivered 92% of planned (+ unplanned stuff)<br />\n-   Easily integrate unplanned items<br />\n-   Limiting features to the essential<br />\n-   Team commitment increased<br />\n-   Team participation increased<br />\n-   Team health and morale stabilized – mandatory sprint break<br />\n4.  Transformative Change: Organization and Business Unit<br />\n-   Instead of one big bang for a release, the team was able to negotiate 3 iterative release schedules with the VP of the Business Unit<br />\n-   By the end of the 2nd release, the team was ahead of financial plan metrics<br />\n-   As a result, VP had de-scoped and called off  the 3rd release – a first ever for a product at Yahoo!   </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20084403	Forming to Performing: Transitioning Large-Scale Project Into Agile	<div class="content">\n    <p>This session describes how a large scale team transitioning from Waterfall to Agile while going through all phases of Tuckman’s model non-linearly.  Non-linear transitions is a key for the management to realize in order to help the team reach the next level quicker.   I present the issues we encountered, lessons we learned, and how we coped with difficult situations in each of the four phases of the Tuckman’s Model of team development. </p>\n\n<p>In recent years Agile software development has become an emerging methodology in the software development industry.  After two years of breaking through barrier after barrier, our organization adapted Agile successfully.  It is not a trivial task.</p>\n\n<p>Through my experiences as a developer and part-time Scrum Master for the Enterprise Architecture team, I was able to observe the interactions between people implementing various techniques to bring the performing team to the next level.  The teams in our department were able to reach most of the four phases of the Tuckman’s Model for  team development – Forming, Storming, Norming and Performing. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>A presentation deck to present the experience report in a 30 mins talk</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20080789	â€œCome Together, right nowâ€â€“How the songs of The Beatles helped our Product Owners and Teams Live in Harmony	<div class="content">\n    <p>KeyCorp, a financial institution with $100 billion in assets, has been working hard to get our new projects started fast, on the right path, with a solid foundation.  We took the advice of the famed rock band The Beatles, when they sang, “Come together, right now.”  This session shares a program we developed called Agile Connections, which brings people together early in a project to get it started on the right foot.  I will also provide my outline, sample agendas, tips for planning, and suggestions for making up your own.</p>\n\n<hr /><p>WHAT IS KEYCORP\nKeyCorp, a financial institution with approximately $97 billion in assets, has a development organization with 1,500 associates across 2 major domestic development centers and 3 offshore centers supporting 800+ applications.  We have been progressing down the agile path for 2 ½ years.  </p>\n\n<hr /><p>PROPOSAL\nIn a large organization, how do you get a new project started fast, on the right path, with a solid foundation?  Our  culture was such that, when anything new was brought into the organization, our  approach  was to  send people to training.  In this case, we sent Managers to ScrumMaster training, our business partners to Product Owner training, and the developers to yet a different training class.  It didn’t work,  our projects were still starting slow.</p>\n\n<p>So at KeyBank, we took the advice of the famed rock band The Beatles, when they sang, “Come together, right now.” We’ve established a program called Agile Connections, which brings together the product owner, stakeholders, ScrumMaster, team, and support partners early in a project to get it started on the right foot. </p>\n\n<p>• Step 1 is to connect the product owner, stakeholders, ScrumMaster and their managers through a 2-hour Agile Overview.<br />\n• During steps 2 and 3 we add the core team and support partners to the mix. During these steps we provide an Agile Workshop and Project Jumpstart.  This step is typically 3 days.\n• Step 4 is to provide ongoing coaching to the project team to ensure the “connections” built during the first three steps remain in tact.</p>\n\n<p>Most of the hands-on work to get the project started occurs during the 3-day Agile Workshop and Project Jumpstart, where everyone involved in delivering the project comes together in the same room. At the conclusion of the workshop the team walks out with a high-level release plan, the beginning of a product backlog and their first sprint planned.  More importantly, they walk out with the confidence to continue down the agile path.  Why?  Because this isn’t a classroom “training” approach.  This is an interactive workshop that focuses on one project.  The project team learns a technique, practices it, and then applies it directly to their project.  </p>\n\n<p>The Agile Connections Workshops have been extremely successful.  Here is some of the feedback we’ve received.  “we should have spent our time in this workshop rather than in creating a requirements document”; “crtitical to the progress we’re making”; “we understand now it’s a business project with technology components”; “huge wow for me”.</p>\n\n<p>TAKEAWAY:\nMy intent during Agile2008 is to enable participants to walk out of the room with the confidence that they too could develop and deliver an Agile Connections Workshop.  I will provide my outline for the workshop, sample agendas, tips for planning a workshop, and suggestions for making up their own.</p>\n\n<hr /><p>EXECUTIVE SUMMARY\nACT I\nScene 1 – HELP! - Agile was introduced April 2005, by the time we looked up, we realized that we had left our clients behind. \nScene 2 – Nowhere Man, please listen - Our product owners were frustrated.<br />\nScene 3 – We Can Work It Out - Product Owner Class didn’t work for us.  </p>\n\n<p>ACT II\nScene 1 – Here Comes the Sun - We created Agile Connections. \nScene 2 - All Together Now - Agile Connections Workshops have been extremely successful (see feedback in appendix).  </p>\n\n<p>ACT III\nScene 1 – Twist and Shout -  Business partners are our marketing tool.<br />\nScene 2 - With a Little Help from My Friends - Pay It Forward philosophy—coached ScrumMasters to develop/deliver Agile Connections Workshop.\nScene 3 - The Long and Winding Road - What did we learn?  - What are we doing about it?  </p>\n\n<p>APPENDIX\nFrom our Director of Development:\n• Agile Connections Workshop has been critical to the progress we’re making.\nFrom our product owners:\n•  I believe that all the time spent on pulling together our requirements document would have been better spent in a workshop like this, talking about the project and what the options for development approach could be. It allowed all of the participants of the project to hear the same message about what Agile methodology is and how to best utilize it.  Best value - now. Doesn’t have to be the “cadillac”…implement, gain value…enhance ! Get revenue going! Huge “wow” for me.\nFrom our development teams: \n•  We understand that it’s all about the product owner.  We understand that these are business projects with technology components versus technology projects.  A good product backlog is a mainstay.\nFrom our ScrumMasters:\n•  This is the best start to a project that I’ve ever had.  It was extremely valuable to learn a technique and then apply it to our project.  The fact that we discussed each story gave everyone an excellent overview of other team member needs.  This would have been weeks worth of e-mails, and even then I don’t think we would be this far along.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>25 minute powerpoint presentation describing KeyCorp’s experience.  As described in the summary, I will discuss our problem, how we solved it &amp; what we learned.  I will also describe the process we follow when developing a project specific workshop.<br />\n5 minutes of Q &amp; A.\nThank you for your consideration!</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20080833	Implementing Agile at MyBoeingFleet.com and Beyond	<div class="content">\n    <p>MyBoeingFleet.com is one of the leading portals operated by Boeing, and an industry leading e-commerce site in both data volume and revenue.     Considering the risk-averse environment of Aerospace, how does a group change process to something more Lean and Agile, and still attain CMMI level 3?   This presentation will track the timeline of my effort, with many collaborators, in bringing in Agile to MyBoeingFleet and the Boeing enterprise.  There are special challenges not typically encountered at other corporations that I ran into, and speak about  how I overcame those things (or didn’t).   The presentation concludes with a summary of the experience as it stands today — what does our Agile look like and how I got just-in-time assistance from the most unlikely of places: our own process organization. </p>\n\n<p>Some questions that I will address include: </p>\n\n<ul><li><p>What are the things that work well at a Boeing scale? </p></li>\n<li><p>Dealing with a heavily matrixed, highly distributed organizations</p></li>\n<li><p>How do you deal with waterfall or difficult processes such as gated reviews, Earned Value, and legal and contractual issues?  </p></li>\n<li><p>What tools and processes made the transition easier?</p></li>\n<li><p>What is still left to be done? Open questions? </p></li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>My presentation, as it stands today, has the following process: \nFirst I’ll go into the Problem statement &amp; background.  I’ll show where I am in the org, some demographics on Boeing, and then right to the meat.  Then I migrate into the The Adoption Process – timelines, successes, and difficulties, both at my level and at the Enterprise, and how I stretched to cover both.   I sum up some recommendations for those who need to start on their own trek, or who have been discouraged by their challenges.  </p>\n\n<p>Note this is only 30 minutes.  The reference above is not accurate (its not an hour and a half!)</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20080966	SOX Compliant Agile Processes	<div class="content">\n    <p>Abstract:\nSarbanes Oxley is a regulatory requirement for all public listed companies in United States. At its core, SOX requires that an organization maintains adequate controls over financial data and its access across the organization.Current market has been very volatile and business requires application to be delivered in less time and accommodate always changing requirements to gather more business. This brought new ideas of using Agile techniques like (Scrum and Extreme Programming) for application development in a waterfall organization. Agile techniques act as catalyst for development teams to deliver efficiently and effectively to business.In this presentation we will discuss the approach for getting the projects using agile techniques SOX compliant.</p>\n\n<p>What is SOX\nSarbanes Oxley is a regulatory requirement for all public listed companies in United States. At it’s core, SOX requires that an organization maintains adequate controls over financial data and its access across the organization. The infamous section 404, requires that CEOs and CFOs sign off on that, with severe penalties if they are wrong.\nSection 404 \nRequires “an internal control report, which shall \n1) State the responsibility of management for establishing and maintaining an adequate internal control structure and procedures for financial reporting; \nand \n2) Contain an assessment, as of the end of the most recent fiscal year of the issuer, of the effectiveness of the internal control structure and procedures of the issuer for financial reporting.” \n“For Sarbanes-Oxley compliance efforts, it is important to demonstrate how IT controls support the COSO framework. An organization should have IT control competency in all five of the components COSO identifies as essential for effective internal control. They are:\n• Control environment\n• Risk assessment\n• Control activities\n• Information and communication\n• Monitoring”</p>\n\n<p>Our Experience</p>\n\n<p>Current market has been very volatile and business requires application to be delivered in less time and accommodate always changing requirements to gather more business. This brought new ideas of using Agile techniques like (Scrum and DSDM) for application development in a waterfall organization. Agile techniques act as catalyst for development teams to deliver efficiently and effectively to business. </p>\n\n<p>Organization being a public listed company has to comply with requirements of SOX, and its IT division faces the jaunting task of enhancing Time to Market to business using Agile techniques and getting all the application development SOX compliant. </p>\n\n<p>In this presentation we will discuss the approach for getting the projects using agile techniques SOX compliant.</p>\n\n<p>One area of SOX compliance is making sure the financial info that a company uses is consistent and correct. For software, this is more an issue with what systems are in place, and how these system store and access financial data. These types of requirements would of course feed things into Scrum backlogs, perhaps affecting the Product Owner’s work, but has less to do with the development process itself.</p>\n\n<p>A second area is making sure the systems, once we have the proper requirements figured out, actually function correctly when working with the financial data. Scrum does not specify testing practices, but the spirit of Scrum asks us to provide a measure of completeness for backlog items, which of course implies testing. If we use agile acceptance testing practices to build a solid, automated testing safety net around our backlog items, it makes proving the correctness of financial systems a whole lot easier, and auditing for correctness pretty straightforward. But we have to raise our level of testing to a high level no matter what process.</p>\n\n<p>A third area is controlling changes to the financial software systems, so that we can prove that we’re not altering the functionality or correctness of them without some level of control over those changes. Fortunately, Scrum (and most all agile processes) already provide a pretty good level of scope control via the product backlog and sprint backlog. I think we’d provided more ceremony around backlog change, like sign offs or something, to provide the auditor with the evidence that changes are not being made without controls. It put some extra hoops in place for developers when they want to refactor code—</p>\n\n<p>Fourth area is around maintaining traceability across the system. This was done through implementing traceability matrix in a more efficient manner.</p>\n\n<p>All these approaches led to the following benefits:</p>\n\n<p>Reduction of 50 % in deliverable \nproduction\nApprox 30 % savings of effort \nspent in developing deliverables\nReduction in project life cycle with \nreduced sign offs</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Paper will discuss about mapping of SOX 404 section against Agile principles. Handouts will be distributed and a checklist mapping the same will be handed over to participants.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20081573	Dead Sheepdog: Ethical Dilemmas and Agile Software Development	<div class="content">\n    <p>We all experience pressure to compromise our work and our reasonable care for others. As software becomes more beneficial, more pervasive, and inter-connected, our potential to harm grows.</p>\n\n<p>Agile practices make a contribution to ethical practice but we can and should be doing more to help each other navigate the ethical dilemmas we face.</p>\n\n<p>This open space session will frame professional ethics in context with agile values and engage participants in a conversation about how our day-to-day actions affect our employers, customers, peers, end users, and society.</p>\n\n<hr /><blockquote>\n  <p><em>“I compared the ScrumMaster to a sheepdog who would do anything to protect its flock, or team.” (from “Agile Project Management with Scrum” by Ken Schwaber)</em></p>\n  \n  <p>A dead sheepdog can’t protect its flock.</p>\n</blockquote>\n\n<hr /><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session will start with a short talk on ethics and its place in our professional context. We will introduce some concepts from the experiences of Roger Boisjoly on the NASA Shuttle Program (<a href="http://judykat.com/ken/2007/12/02/ethical-action-is-not-moral-certainty/" title="http://judykat.com/ken/2007/12/02/ethical-action-is-not-moral-certainty/">http://judykat.com/ken/2007/12/02/ethical-action-is-not-moral-certainty/</a>), as an opening to an interactive discussion. Following our review of the Boisjoly Case Study, we will share some personal/professional experiences, to personalize the participants’ experience.  We will then engage the audience in conversations around specific ethical dilemmas (including whether the CSM is unethical).</p>\n\n<p>The session will be very interactive, with the co-presenters serving as both discussion leaders and facilitators/moderators. The conversation will be open and participatory.  We will utilize some of the techniques from Open Space Technology, as documented by Harrison Owen in his book “Open Space Technology”, including engaging the participants in deciding what topics to cover.</p>\n\n<p>Given our time constraints, the Open Space approach must be limited, but should serve to fully engage the participants and drive interesting subjects. As the conversations progress, each sub-group will be encouraged to identify a scribe who can record notes of their discussion and report back to the group as a whole. Those notes will be assembled by the presenters, and compiled into a report back to the community after the event.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Talk	2008
20083632	How to Get Started with Enterprise Agile Adoption: An Emergent Organizational Change Approach	<div class="content">\n    <p>Adopting agile in a large organization is qualitatively different than it is for small organizations.  It is not just a ‘scalability’ issue.  In larger organizations, the adoption of Agile—even if it is ‘simply’ an isolated project here or there—will generate ripples of change that reverberate much further into the organization than we expect.  </p>\n\n<p>In this session we will investigate several ideas and concepts related to organizational change in order to equip managers and coaches with a means for approaching the transition to agile in their organization.  We offer no particular ‘solutions’ here.  Rather, I want to present some perspectives that I have come to think of as essential for large organizational change.  Among the ideas we’ll be investigating are:</p>\n\n<ul><li>Top-down vs. bottom-up change</li>\n<li>Planned, episodic change vs. Emergent, continuous change</li>\n<li>Change that is ‘Native’ and ‘Organic’ vs. change that is imported and based on ‘best practices’</li>\n</ul><p>As we will see, all of these views have a place when considering Agile adoption.  However, my own bias, based on my work with nearly a dozen companies, tends toward approaches that are emergent, continuous, holistic, and organic.  This particular mix of change approaches acknowledges:</p>\n\n<ol><li>The role of senior leaders as progenitors of the images, metaphors, narratives and minimal enforcements that will power the transformation initiative;  </li>\n<li>The need for the importation of ideas and competencies from outside the organization, for instance, through external coaches and through exposure to external training of staff; </li>\n<li>Finally, accidents and inadvertent discoveries that come about when informal change movements are allowed to rise from the staff ranks in an unstructured and unmediated fashion. </li>\n</ol><p>These principles are discussed within the context of at least one real-world large-scale agile adoption effort which the presenter himself helped to facilitate.  </p>\n\n<p>Target Audience: Agile leaders and managers in organizations who are just beginning the agile adoption process, and coaches and consultants who help them.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li>Introduction to the Session: A systems view of enterprise agile adoption (10 min)</li>\n<li>Three standard change approaches: top-down, bottom-up, planned change  (20 min)</li>\n<li>The four dimensions of an adaptive change change effort: continuous, emergent, holistic, and native (20 min)</li>\n<li>Present and discuss an adaptive agile transition pattern (20 min)</li>\n<li>Present and then discuss specific case studies in relation to the patterns and concepts presented thus far. (20 min)</li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Talk	2008
20083876	Refactoring of Cultural Smells 	<div class="content">\n    <p>==== 90 words description - beginning =====</p>\n\n<p>Using the analogy to code smells and their refactoring (Fowler, 2000), the tutorial introduces cultural smells, as well as refactoring activities, for cases in which agile software development is considered and adopted. The participants become familiar with patterns of cultural smells and appropriate refactoring activities, and are guided to check their fitness for their organizations as well as to develop new ones. \nParticipants of any level of experience in agile development are welcome to participate, using their experience as the smelling device for cultural smells and their refactorings.   </p>\n\n<p>==== 90 words description - end  =====</p>\n\n<p>Using the analogy to code smells and their refactoring (Fowler, 2000) , this tutorial introduces cultural smells, as well as refactoring activities, in software development environments. Specifically, we refer to cases in which agile software development is considered and adopted either on the team or the organizational levels. During the tutorial, the participants become familiar with cultural smells and refactoring activities, and are suggested to check the fitness of these refactoring activities to their organizations. \nThe tutorial fits for practitioners with some experience in agile software development – developers, team leaders, consultants, customers and managers. This experience with agile software development serves as the smelling device of cultural smells and the need for cultural refactorings.\nAt the end of the tutorial, a catalog of Common Cultural Refactorings is presented and discussed.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The tutorial is based on mini-lectures, based on which the participants work on hands-on activities. In these activities the participants are asked to share their professional experience with respect to software development environments in general and agile software development in particular. In addition, case studies for analysis are presented to the participants and analyzed. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Tutorial	2008
20083489	A better culture change approach for busy practitioners	<div class="content">\n    <p>You need organizational change tools that reflect agility: <em>accessible</em> by most everyone without in-depth learning, <em>adaptable</em> for your particular situation, and <em>applicable</em>, providing tangible results without months of fuzzy “prep” work.  We think we have an answer for you.  You will become acquainted with an organizational/cultural change framework and try your hand at applying it to a common problem.  Our goal is to give you enough information so you can decide if further investigation is warranted. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a hybrid session between a talk (need some background to understand the model) and a tutorial with timeboxed exercises loosely set up around an agile/Scrum framework.  It can also be done as just an experience report or some other variation that will be most useful to attendees or as needed to fit time constraints.  Introducing a completely new (for most) model will be a tight fit into 90 minutes; however, we are aiming for a shorter than normal period to be considerate of the many good session ideas and allow more to be included in the overall conference time period.</p>\n\n<ol><li><p>5 minutes – kickoff and setting up session backlog</p></li>\n<li><p>5 minutes – personalization of backlog via individual exercise:  assessment of where participants’ current work teams are and where participants would like them to be if optimally agile (this exercise is best done without prior model knowledge)</p></li>\n<li><p>20 minutes – Iteration 0:  architecture orientation (culture model introduction + clarification Q&amp;A)</p></li>\n<li><p>5 minutes – session refinement of backlog via review of composite session assessment results and discussion of both individual and group implications, reflecting how an assessment can be used in attendees’ situations (we will gather and produce a visual if projection devices are available) and producing a session target culture for use in the following exercise iterations</p></li>\n<li><p>5 minutes – team (8-12 attendees) self selections and movement to iteration areas</p></li>\n<li><p>15 minutes – Iteration 1:  produce a team agreement of how to handle a particular situation (provided by us) so the culture moves toward the target.  This will help participants get an immediate feel for model application.<br />\nBackground:  the Competing Values Framework is based on four quadrants of behavior that are <em>all</em> in play at any given time, though in differing intensities/levels.  Individuals and organizations from team level to corporation will exhibit behavior based on the combined intensities.  Because it is easier to begin thinking in terms of a single quadrant in its extreme form, this exercise is designed to take a group of people, physically separate them into four quadrant subgroups (e.g. tape squares on the floor), and have them come up with solutions to the question/issue based on their adopted “extreme” views.  Once these views are expressed, the second phase is for each quadrant subgroup to physically move in to the exercise “target” blend point and come up with how their original positions would be modified based on that movement.  The four quadrant subgroups then come up with a composite view that represents how their group would handle the situation/issue.  (much easier to demonstrate than explain … kind of like explaining how to tie shoes verbally!)</p></li>\n<li><p>5 minutes – Interation 1 team retrospective/debrief.</p></li>\n<li><p>5 minutes – Iteration 2 planning:  team determines topic for next interval and makes any changes needed.</p></li>\n<li><p>15 minutes – Iteration 2:  a second extreme/target culture exercise around an agile topic chosen by the team. </p></li>\n<li><p>10 minutes – final Q&amp;A + wrap-up.</p></li>\n</ol><p>Note:  we are considering setting up a web site for follow-on discussions around this model and for mutual support of those thinking further/beginning implementation after the conference.  We will also make an experience report available (conference/IEEE format) to attendees (paper at session; online at website) and submit it as part of the proceedings, but will not “present” it in the session to make more time available for participants to experience the approach directly.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Tutorial	2008
20080242	Agile Supports Improved Culture and Quality for Healthwise	<div class="content">\n    <p>In 2007, four years after the first Agile experiment at Healthwise, this organization was identified by the Wall Street Journal as one of the top 15 small employers in the United States. Healthwise also received the 2007 National Psychologically Healthy Workplace Award in the Small Not-For-Profit category. Coincidence?. We think not.</p>\n\n<p>This 250 employee organization uses Scrum and Lean principles to manage multi-disciplinary product development and research teams. Our teams create written content; produce interactive media in multiple formats, and development software. Agile techniques even found a home in I.T. and operational production teams.</p>\n\n<p>Our Agile wisdom was hard earned. We don’t have all the answers; and some smells persist even now. You can decrease your organizations pain by learning how this bottom up Agile adoption ultimately supported our culture of Respect, Team Work, and Do the Right Thing.</p>\n\n<p><strong>Why Healthwise is a Compelling Case Study</strong></p>\n\n<ol><li>We have before and after metrics to demonstrate the efects of Scrum and Agile adoption.</li>\n<li>We currently have 12 teams using Scrum or Lean practices. Only 4 of these are software developmnet teams. We have demonstrated the ability to use these tools in multiple environments.</li>\n<li>We didn’t get it right the first time, and we can talk about our false starts. It took about a year for us to truly find our way and we have compelling advice for organizations looking to avoid our mistakes.</li>\n<li>I am an engaging presenter and will provide a good experience for the attendees to the session.</li>\n</ol><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Although this is presented as a case study, we will examine the falls into anti-patterns that occured along the way. Participants are encouraged to help discover alternative paths of execution as we review each critical juncture in the organizations growth.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20081337	Executing Agile in a Structured Organization: Government	<div class="content">\n    <p><strong>Overview</strong><br />\nLearn from our experience in executing Agile in a complicated and integrated organization and culture at The City of Calgary.  This experience report will be of particular interest to large organizations and those in government. We are are going to describe the lessons learned from our journey from first deciding to look at Agile to actually executing and evaluating it. Our particular viewpoint will focus on how this played out  in a government IT organization that is highly structured.  </p>\n\n<p><strong>Cultural Context</strong><br />\n• Team dynamics were focused on managing the team as opposed to leading it.<br />\n• Process and its complexity could obscure the end goals and motivations of a team’s effort.<br />\n• Highly defined roles for all team members at times hampered needed communication and collaboration.<br />\n• Client participation was challenging to get and keep past requirements sign off.<br />\n• Teams were not empowered to make the decisions that directly impacted them and how they worked on a project.    </p>\n\n<p><strong>Lesson Learned</strong><br />\n• How to work with service groups within our organization that were accustomed to predictive plans that defined when their services were required. (Infrastructure, Data, PMO).<br />\n• How we changed the physical environment to promote face to face communication.  Learn how this resulted in a positive change in team dynamics.<br />\n• How early inclusion and involvement of our customer led to more effective communication and understanding.<br />\n• How we very early on recognized and then addressed the uncertainty and apprehension felt by the team and the organization when challenging the current culture.<br />\n• How and why we tailored a process for the organization and adapted it to work in practice.<br />\n• How executive sponsorship and support was critical to promote and explore techniques that otherwise would not have been an option.<br />\n• How we dealt with confusion on the new roles and responsibilities working within a culture that has very distinct, defined roles.<br />\n• The fact that we were unable to achieve completely cross functional teams. We will discuss why we were unable to do this and what we think the impact was.  </p>\n\n<p><strong>You will want to attend because;</strong><br />\n• You are a Leader  in your organization trying to figure out how to implement Agile.<br />\n• You work in Government and want to hear some real life experience that might apply to your organization.<br />\n• You are New to Agile.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>As an experience report, we will first provide the context under which we worked and then present our lessons learned and then open up for discussion and questions.\nOutline:<br />\n**Cultural Context  **  (5 minutes)<br /><em>The City of Calgary</em><br />\n**Experience Report** (20 minutes)<br /><em>Things that Worked Well</em><br /><em>Things that Needed to Improve</em><br /><em>Stuff that Didn’t Work</em><br />\n**Discussion** (5 min)   </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20084771	The Accidental Agilists: One Teamâ€™s Journey from Waterfall to Agile	<div class="content">\n    <p>This presentation outlines one team’s shift from the traditional waterfall methodology to an agile approach for web development. The transformation occurred over the course of an advising system project at The Ohio State University. Using the five stages of grieving as a metaphor, we will describe how the team moved from denial that waterfall was failing to acceptance that agile practices would be the best way to deliver the mission-critical application. Ultimately, the entire team re-envisioned itself, transformed its business practices, and evolved into a significantly more agile shop.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Co-Presenters</strong></p>\n\n<p>Beth Snapp, Manager of Web and Application Development</p>\n\n<p>Diane Dagefoerde, Director of Technology</p>\n\n<p>Technology Services Office</p>\n\n<p>Colleges of the Arts and Sciences</p>\n\n<p>Ohio State University, Columbus, Ohio</p>\n\n<p><strong>Intended Audience</strong></p>\n\n<p>This case study will be of interest to anyone who has “felt guilty” about turning away from the well-entrenched waterfall model and moving toward agile development methodologies. The session will be particularly informative to participants familiar with the unique challenges of working in software development in higher education/government/non-profit organizations. </p>\n\n<p>This session will be an experience report with powerpoints. Although we would like to figure out ways to make this presentation more interactive, we have a lot of material to cover in 30 minutes due to its “case study” nature. </p>\n\n<p>• Overview of the Project w/Demo (10 minutes)</p>\n\n<p>• Summary of How We Moved from Denying that Waterfall Wasn’t Working to Accepting that Agile Was the Best Way to Deliver the System (15 minutes)</p>\n\n<p>• Questions and Discussion (5 minutes)</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20082119	Touchy-feely Impediments to Agile Adoption	<div class="content">\n    <p>What exactly is THE reason Agile adoption fails sometimes and succeeds in others?  We’re not quite sure.  So why this talk?</p>\n\n<p>Well, we do know some things:<br />\n1) The reasons tend to be people-centered.<br />\n2) It probably has something to do with human nature and not Agile in specific.<br />\n3) Most of us are unaware of the problems.  </p>\n\n<p>So, this talk introduces the work of three others from the business/management domain that ring true:<br />\n1) Responsibility Redefined<br />\n2) The Responsibility Virus \n3) The Ladder of Inference</p>\n\n<p>These three points of views are complementary and highlight many of the problems we see today in our organizations.  By attending this session you will see many of the mistakes we make again and again and begin to understand how they hinder our work.  By seeing the problem, then you have a chance of solving it.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a 90 minute talk where I will introduce each of the 3 topics, give each an example, and then open for discussion.  These are meant as teasers to get people interested in reading and learning more about each topic.  No games, no exercises, just discussion. </p>\n\n<p>For example, I’ll spend about 30 minutes on Avery’s Responsibility Redefined model, give examples of where I’ve caught myself with these problems and what I’ve personally done about them, and then open it up for discussion.  Those who want to learn more can pick up Avery’s book, attend a session or two that he’ll probably give at Agile and go to his Knowledge Team leadership training….</p>\n\n<p>The same can be said about the others.  This is a presentation to shed some light on these problems so that an attendee now sees the problem, and THAT is the beginning of solving the problem.</p>\n\n<p>As for audience participation, there will be a few simple exercises sprinkled in to bring some points home, but as one commenter said, this is really meant as a seed presentation to get people interested and involved than a tutorial.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Talk	2008
20082245	Integrating Scrum with the Process Framework at Yahoo! Europe	<div class="content">\n    <p>The presentation describes how Yahoo! International, and in particular, the Yahoo! Europe, has moved from having a very waterfall inspired process framework, to having one which is very lightweight and flexible, and thus compatible with Agile methodologies.  This was achieved through Agile teams collaborating with the Process Group in its own iterative inspect and adapt cycle.  The Process Group has evolved from being a control-oriented team, with a process-centric framework, to being a coaching-oriented team, with an organisational-centric framework.  Thus, rather than telling teams how to run their projects, they help teams ensure they are meeting business needs.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a powerpoint based presentation which has been given recently at both the London ScrumGathering and XPDay 2007.  The organisation and cultural context is described, followed by a description of the various stages of the journey with examples finishing with the current situation and next steps. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Experience report	2008
20082877	Throw-Away - But Recycle! How Scrum affects the PMO	<div class="content">\n    <p>Especially in large development organizations, agile practices and processes are often introduced bottom-up where they create pockets of agility. While these pockets exchange agile techniques and practices they also spread out into other units.  The network of these pockets creates a sense of unity and camaraderie among the agile workforce. After reaching a critical mass, this agile spirit is extremely infectious and will sooner or later target other units within the organization as well, for example the Project Management Office (PMO).</p>\n\n<p>Due to a variety of reasons many PMO’s have been pushed into dead-end corners. In its role, the PMO is commonly in charge of “rolling-out” processes in the organization; many of them waterfall.  Also, the PMO is responsible for monitoring the progress of these active projects at milestones, similar to a process police. Without the proper involvement and participation, this progress and milestones are unfortunately often misinterpreted when agile projects come into the game.</p>\n\n<p>A better definition of a PMO would be an office which will influence the entire organization with better project management practices harvested and re-communicated. This PMO would staff a pool of ambassadors who play an active part in one project and become a change agent in another project. </p>\n\n<p>During this session we will look at the role of the PMO in an organization which executes partially or exclusively agile projects.  That will require a new fresh look at trust and servant leadership from the PMO’s point of few. Just like the title of this proposal, we will need to recycle the existing functions and responsibilities and make something amazing new out of it.</p>\n\n<p>To demonstrate the impact of agility on “non-developing” parts of the organization, we will use Scrum as an example. The terminology and territory of this process is widely known which will make it easy to build analogies to the new the role of the PMO.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This presentation is planned as a 30 minute tutorial segment, a mix between lecture and experience report. The session could be extended to 90 minutes if the review team thinks it could attract more common interest among the conference attendees. I have selected “tutorial” for the 30 minute proposal, but If extended to 90 minutes the majority of time would fall into the “experience report” category. The additional time would be used for a more in-depth experience report how agile practices had been pitched towards a PMO in a large financial institution. That experience report will include an assessment of the successes and failures and an outlook.  The presentation will peak towards the end of the presentation where we will try to derive an answer for the pressing question, “Will there be a PMO in an agile organization?”</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Talk	2008
20084736	The Tail and the Dog: Aligning Governance with Agile Project Management	<div class="content">\n    <p>Organizational change - for example, the introduction of Agile practices - is like an infection.  At first, the infection is localized and the body politic ignores it.  Eventually and <em>inevitably</em>, the body politic will take notice, as its expectations and habits are disturbed.  At that time, it will marshall its immune system and seek out and destroy the infectious change.  IT management’s &amp; business’s immune system is its governance processes.  Unless governance processes and expectations are properly aligned with new agile and lean processes, agile and lean change will fail.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session is a short report on practical experience with introducing lasting change into an organization … and one of the major stumbling blocks that we had to clear.  The lessons learned are presented, discussed, and reduced to witty, memorable aphorisms (we hope) on a crib sheet that simulates two stone tablets.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Talk	2008
20083637	Extreme Interviewing: Finding the Right People for Your Agile Team	<div class="content">\n    <p>Some Extreme Programming practices — such as paired programming and open and collaborative workspaces — present challenges to the traditional hiring process as most interview candidates have trouble imagining the transition to such an environment.  A traditional interview process might yield candidates who are technically competent, yet ill-prepared and perhaps even unwilling to undertake such a dramatic change to their own ideas of software development practices.  This is obviously a problem.\n<br /><br />\nBecause the existing team needs to work very closely with new hires, using such practices as paired-programming, their participation is central to the selection effort during Extreme Interviewing.\n<br /><br />\nThis talk examines how one organization meets those challenges head on with a practice called “Extreme Interviewing.” During this highly interactive session attendees will attend a simulated interview and participate as both interviewers and interviewees.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The time will breakdown roughly as:\n</p><ul><li>20 minutes for introduction and case history\n</li><li>10 minutes for exercise 1 - “interviewees” participate in an estimating session with their first partner, the two must come to a consensus on the estimate for the story cards\n</li><li>10 minutes for exercise 2 - “interviewees” get a new partner, in this exercise they must collaborate with their partner to plan a sales demo, a functional beta, and the first product release using the story cards from exercise #1\n</li><li>10 minutes for exercise 3 - “interviewees” get yet another new partner, in this exercise they work together to specify sample sets of input and their expected outputs for each of the described functions.  The goal is to pick the best sample values to be used in a testing protocol to ensure good software design.\n</li><li>15 minutes for exercise 4 - “interviewers” participate in a simulated review session that evaluate the type of feedback we typically collect during the interviewing process and asks the session participants to make recommendations on next steps\n</li><li>10 minutes for participant feedback on their experience during the session\n</li><li>15 minutes for closing remarks and Q&amp;A</li></ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Agile & Organizational Culture	Talk	2008
20080376	Open Source Meets Agile - What can each teach the other?	<div class="content">\n    <p>Christian Reis a veteran of the open source movement, will begin with a 60 minute talk summarizing the fundamental beliefs and essential processes found in open source development.  Mary Poppendieck will follow with a 30 minute summary of the strengths and weaknesses of both open source and agile development, and what they can learn from each other.  During the second half of the workshop, the attendees will break into teams, and each team will come up with a list of what open source methods might contribute to agile thinking.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Workshop	2008
20085032	Agility, Evolution, Emergence, and the Primodial Ooze	<div class="content">\n    <p>There are those among us who believe that a puddle of primoridal ooze, a Ball of Mud, if you will, can, if you leave it alone for four billion years or so, turn into a sentient primate that can ponder his or her own existence without the benefit of “intelligent” design. Indeed, such an “intelligent” creature might him or herself design marvelous software artifacts to burnish mighty civilizations. What ever one might think of the plausibility of biological evolution, surely no one would dispute that software is the product of, if not omnicient, at least semi-intelligent designers.</p>\n\n<p>Teleonomy is the science of adaptation.  It is “the quality of apparent purposefulness in living organisms that derives from their evolutionary adaptation”.  The term was coined to stand in contrast with teleology.  A teleological process is one that is planned in a purposeful way by a sentient, intelligent being.  Artifacts that emerge from such a process are the products of foresight, and intent.  A teleonomic process, such as evolution, produces products of stunning intricacy without the benefit of such a guiding intelligence.  Instead, it blindly accrues information about what has worked, exploiting feedback from the environment via the selection and survival of fitter coalitions of such insight.  It unwittingly choreographs a grand audition of a horde of variations on what it has learned thus far, culling the also-rans, and casting the winners in its next production.  It hoards hindsight, and uses it to make “predictions” about how to cope with the future. </p>\n\n<p>The Agile movement is itself a product of an emergent zeitgeist that arose around the turn of the last century. It emphasizes adaptation and feedback, hindsight over foresight. </p>\n\n<p>This talk will explore some of the striking parallels between sofware evolution and natural evolution, and examine whether these commonalities are coincidental, or indicative of more fundamental principles of evolution in any complex system.</p>\n\n<p>For instance, practices like pairing have the same benefit in development orgranizations that sexual reproduction has for the genome: best practices are rapidly disseminated throught a population. Similar parallels can be found for short iterations. Even practices not generally regarded as agile, such as copy and paste, have striking biological analogs. Phenomena akin to speciation can be seen in the cultivation of code bases. An examination of evolution in other realms can cast traditional academic thinking regarding modularity and reuse in a fresh light.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I’ve been wanting to develop some of the rough notions in <a href="http://www.laputan.org/chaos/chaos.html" title="http://www.laputan.org/chaos/chaos.html">http://www.laputan.org/chaos/chaos.html</a> for, gee, eight years now….</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Talk	2008
20084186	Coaching self-organizing teams	<div class="content">\n    <p>Self-organization of human beings is a tricky thing. Agile coaches, especially ScrumMasters, are constantly challenged with how to motivate/persuade/trick their teams into self-organizing and doing things, without telling them what to do,  but there is very little information or training on this topic. Allowing a team to self-organize along the lines of “oh well, they’re all adults, they’ll figure it out” is just as irresponsible as reverting to the command-and control school of management. So, how should one go about it? This tutorial presents an approach utilizing leading-edge research and techniques from social complexity science and team dynamics to change the dynamics of a team with the aim of optimizing their work together.</p>\n\n<p>TOPICS:</p>\n\n<p>An introduction to socially complex systems and self-organization</p>\n\n<ul><li>Social complexity and team dynamics</li>\n<li>Rank and Power issues</li>\n<li>Influence and Persuasion</li>\n</ul><p>Sense-making models and techniques</p>\n\n<ul><li>The Stacey model</li>\n<li>The Cynefin butterfly model</li>\n</ul><p>Understanding cognitive bias</p>\n\n<p>Intervention models and techniques</p>\n\n<ul><li>The Heat model</li>\n<li>The ABIDE model</li>\n<li>The Flow model</li>\n</ul><p>Motivation theory</p>\n\n<p>Social network analysis and stimulation</p>\n\n<p>Case studies and real-world applications</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This tutorial will be held as a talk interspersed with exercises and discussion, allowing us to address real needs of attendees. Due to the nature of the topic, and of the exercises, attendance will be limited to 50 people.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Tutorial	2008
20081604	Real Options in a Nutshell - Bottled Common Sense	<div class="content">\n    <p>How Real Options can help in running your project. Real Options is a decision-making process based on Financial Option Theory and Applied Psychology that can be used to manage risk. </p>\n\n<p>The main challenge of this session is changing people’s mindset and behavior. We found a rational decision-making process based on maths and logic, rather than emotion and intuition. \nThis session demonstrates that Real Options are at the heart of most Agile practices and principles, and are what drives Toyota.</p>\n\n<p>After this session making decisions will never be the same again.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We start the session with a game. The aim of the games is simple….. To engage participants kinesthetically and emotionally.\nWe then present the core of the material, explaining along the way our journey to find various pieces in the jigsaw. After some case studies to illustrate the theory the session is closed by a discussion around the subject.</p>\n\n<p>The explanation of the game we run is at the bottom of this section on purpose. If you want to experience the full benefit of this presentation it is our recommendation to not read the description of the game as this may reduce its effect.</p>\n\n<p>This presentation is delivered by two of the top entertainers in Agile land…  The session has been referred to as “quite a comedy show while being very well presented and very informative at the same time”.</p>\n\n<p>Topics: </p>\n\n<ul><li>The history of Real Options - How we failed to make our millions out of Agile.</li>\n<li>Options in the Real World.</li>\n<li>Real Option Analytics.</li>\n<li>Death of an Analyst.</li>\n<li>Uncertainty is painful.</li>\n<li>Real Options and Agile.</li>\n<li>Real Options and Toyota, Microsoft and Google.</li>\n</ul><p>Case studies:</p>\n\n<ul><li>An IT Project Case Study.</li>\n<li>A Case Study about getting home.</li>\n<li>Decisions in IT Projects - Catch a plane or sail away…</li>\n</ul><p>The session ends with a panel of Two - Chris and Olav answer more questions.</p>\n\n<p>It has been presented at XP Day, Javapolis, QCon, SPA, APLN Summit and more than 20 interesting places as well.</p>\n\n<p>If you want to know more about Real Options, read our article on infoQ.com:\n<a href="http://www.infoq.com/articles/real-options-enhance-agility" title="http://www.infoq.com/articles/real-options-enhance-agility">http://www.infoq.com/articles/real-options-enhance-agility</a></p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Tutorial	2008
20082092	Stuck in your own code? Alleviate cognitive friction today!	<div class="content">\n    <p>After one or two years of development, many applications become excessively difficult to change. Developers waste a significant portion of their time fighting “cognitive friction” - looking for code, figuring out how to reuse existing code, understanding new APIs, making and fixing mistakes, etc. In this session, you will learn, through concrete examples, how to apply usability principles to reduce cognitive friction, helping you write code that does not become an obstacle to agility. You will take home a number of techniques that you can start applying right away.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a presentation in four parts:</p>\n\n<p>Seeing friction</p>\n\n<pre><code>* Understanding cognitive friction\n* Main types of friction\n* Q&amp;A\n</code></pre>\n\n<p>Guidance</p>\n\n<pre><code>* Understanding the phases a developer goes through when performing a task\n* Improving navigation through the code\n* Guiding users of yout code by using for instance static typing and the capabilities of modern IDEs\n* Improving error feedback to keep the developer back on track\n* Q&amp;A\n</code></pre>\n\n<p>Alignment</p>\n\n<pre><code>* Understanding mental mappings\n* Aligning code with the underlying concepts, removing duplication of concepts\n* Q&amp;A\n</code></pre>\n\n<p>Centering</p>\n\n<pre><code>* Understanding interaction contexts\n* Splitting the application in several worlds where developers can focus on a problem without facing the complexity of the whole application (“Disney Effect”)\n* Optimizing the code for given “Change Cases” (the most frequent kinds of tasks performed by the team).\n* Q&amp;A\n</code></pre>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Talk	2008
20080741	Come and Take It! Lean Pull Applied	<div class="content">\n    <p>—— begin 90 word abstract ——<br />\nHow can we as software professionals and craftsmen know that we are producing the most valuable system at just the right time for our users? \nThe concept of <em>“pull”</em> from lean manufacturing challenges mainstream approaches to software development and reconsiders how value is delivered to the customer by inverting the thought process and focusing first on delivery.\nIn this demonstration participants will experience how a real working system can be constructed from the ground up by employing popular industry <em>“signals”</em> to <em>“pull”</em> the creation of working software.<br />\n—— end 90 word abstract ——</p>\n\n<p><strong>Come and take it!</strong>  Learn how to build the right system where each agent takes just what they need, just in time, to create <strong>value</strong> for the customer.</p>\n\n<p>How can we as software professionals and craftsmen know that we are producing the most valuable system at just the right time for our users?  The <em>kanban</em> method and the concept of <em>“pull”</em> from lean manufacturing, in combination with agile values and practices, provide a powerful guide for how we can improve our profession by employing popular industry <em>“signals”</em> to <em>“pull”</em> the creation of working software.<br />\nBy inverting the thought process and focusing first on delivery, “pull” challenges mainstream approaches to software development by reconsidering how value is delivered to the customer.</p>\n\n<p>In this demonstration participants will experience how a real working system can be constructed from the ground up through the definition of executable specifications.  See how through a series of micro-iterations, requirements can pull the creation of executable specifications, developer tests, production code, and refactorings.</p>\n\n<p></p><center>\n<img src="http://www.rodcoffin.com/images/pull.png" style="width: 50%; height: auto" /></center>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session consists of two parts.  The first is an exploration of the ideas behind lean “pull” and will run for about 30 minutes.  In this part we will explore the idea of pull in lean manufacturing and make the case for how it is both similar and different than software development.  The second is a live demonstration of how these ideas can be put into practice in a software development environment and will run for about 45 minutes.  The remaining time will be open for a dialog between the presenters and attendees.</p>\n\n<p>In the demonstration portion of the session we will engage in a role-playing demonstration between a product owner and developers.  In a series of short iterations we will together create stories, acceptance criteria, and executable specifications which act as signals pulling test, code, design, and conversations.  Out of this process a real, working system will be built.  Throughout, we will be employing behavior driven development as a better way of capturing requirements and thinking about a system.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Demonstration	2008
20083757	GTD + Kanban + Round Robin for Product Owners	<div class="content">\n    <p>Agile Development teams can utilize a number of techniques to visualize and track the items they work on. There is also various models to manage your personal life, Getting Things Done and the Mark Forster models.<br />\nFor Product Owners and analysts there is a lack of similar tools and techniques. This demonstration will show how a Kanban board (task board with “states”) can be combined with a “round robin” scheme to keep analysist and Product Owners working on multiple tasks of high priority, but with potentially long lead times and fuzzy done criteria.<br />\nThe technique is especially important in the early stages of the life cycle of a “product issue”, long before it can be placed in a development increment or sprint.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>5-10 minutes describing one dimension of the challenge for Product Owners (or analysts or …) with a few slides<br />\n5-10 minutes demonstrating at a Kanban-like board (or possibly with some more slides)<br />\n5-10 minutes Q&amp;A  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Demonstration	2008
20084949	Enterprise Agile Consortium - Company to Company Mentorship for Agile Adoption	<div class="content">\n    <p>Thru conference and gathering participation, several companies who have been practicing Agile for a number of years discovered that most of the topics or discussions were not addressing the difficult issues facing larger organizations - i.e. performance management, distributed and offshore teams, Agile portfolio management, etc.  Two separate Enterprise Agile discussions amongst the leaders of companies with large development teams and similar experience implementing Agile have been held. This session will review some of the lessons learned as well as introduce you to the Enterprise Agile Consortium model.</p>\n\n<p>Examples of these companies are: Capital One, JDA Software, Red Hat, Legg Mason, Sabre, Ultimate Software, Farm Credit Services of America, NPR, and Carlson Wagon-lit.  The event went off very well and was extremely valuable to the companies that attended.  </p>\n\n<p>The notes, discussions, and information exchanged was of great  value to the companies.  It was so valuable that a 2nd event occurred in March 2008 hosted by JDA Software in Scottsdale, AZ.  </p>\n\n<p>This session would be for other companies to come hear from experienced practitioners who have implemented Agile broadly across their organizations and what lessons can be learned from their experiences.  Having a number of years of experience has caused us all to challenge some pre-disposed beliefs about what works, what doesn’t work, why the book isn’t always right, etc.</p>\n\n<p>This session will also provide other interested companies information on how they can get involved in the Enterprise Agile Consortium (EAC) and the benefit they might expect.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session will be run in primarily three parts.  The first part will be a presentation of what key lessons learned were developed at the two Enteprise Agile Consortium events (June 2007 and March 2008).  This portion will last approx. 20 minutes.  The second part will provide information on how companies can be part of the Enterprise Agile Consortium and the third part will be some brief Q&amp;A.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Talk	2008
20082311	KFC Development - Finger Lickin' Good	<div class="content">\n    <p>This workshop explores three important Lean concepts - Kanban, Flow and Cadence (KFC) - which can be combined to generate a more pipeline-based approach to software development, as opposed to the more common timebox-based approaches of more traditional Agile methods. The presenters will describe their experiences implementing these ideas at Yahoo! and explain the concepts using examples, simulations and games. In addition, because this is a new and emerging way of working, there will be an opportunity for discussion between the participants about how the ideas might be applied in their own situations, in order to advance the art.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The workshop will be organised around the 3 concepts of Kanban, Flow and Cadence. </p>\n\n<p>We will begin with some general background to Lean thinking and an overview of the concepts we will be introducing, in order to set the context. We will then focus on the three concepts in more detail, including a mix of tutorial, experience report and hands-on exercises / simulations / games. After presenting on each concept, we will open up the topic for discussion, with the audience breaking out into groups to explore how the concepts may or may not apply to their situations. Each group will have the opportunity to present back so that ideas and suggestions can be captured and shared, for example on the conference wiki.</p>\n\n<p>Kanban - This section will cover what a Kanban system is, how it works, how can it be applied to software development. We will show how a Kanban System can highlight bottlenecks, constraints and other areas for improvement, and describe a number of alternatives used by different teams, along with the pros and cons of each one. Hands-on exercises will be used to explore these options and trade-offs.</p>\n\n<p>Flow - This section will cover how to leverage a Kanban system for software development in order to maximise value and minimise waste. We will introduce the idea of Minimal Marketable Features as a tool to bring out what the value is to be pulled through the pipeline, backed up by real examples from our projects.</p>\n\n<p>Cadence - This section will describe how to manage releases and commitments in the absence of traditional iterations and iteration planning. Metrics such as lead time and throughput will be introduced to explain how rolling wave planning can be achieved with minimal investment as inventory. In addition we will address how other rituals such as stand-ups and retrospectives apply to KFC Development.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Workshop	2008
20085166	Artful Making for Agile Teams	<div class="content">\n    <p>This session isn’t a conventional presentation at all: it’s an interactive workshop in which everyone participates. </p>\n\n<p>We all know folks who seem to be naturally creative, outrageously productive, somehow able to do things we can’t do. We call them “talented,” “artistic,” “super intelligent,” or some other word that means they’ve got an inherent ability that we don’t have.\n    Thing is, most of what we call talent is actually skill, and can be learned. Not only can it be learned (by you), but it can be practiced, and you can get better at it with practice. </p>\n\n<p>This session is a very brief introduction to some of those skills, and the exercises that will help you get good at them, and then better. The exercises are derived from those used by the artists whose work is most like software development: actors. The skills to this session introduces include: warm up, release, concentration, work on the edge, collaboration, and innovation.</p>\n\n<p>NB. None of these exercises requires you to perform in public or do anything seriously weird. If you can take your shoes off, you’ll be fine. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Stacia and Lee will present a brief overview of the logic behind learning acting skills to improve work in Agile. We’ll then take the group (as individuals, as a whole, and as small teams) through a sequence of exercises in which they’ll learn and practice warm up, release, concentration, work on the edge, collaboration, and innovation. A retrospective at the end will encourage everyone to relate the session to their own work at home.</p>\n\n<p>If there’s room, we could do a 180 minute session. But perhaps 90 minutes is a better introduction.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Workshop	2008
20084804	Estimating Considered Wasteful: Introducing Micro-Releases	<div class="content">\n    <p>Groups that are releasing their software to production one or more times per week are doing micro-releases.   </p>\n\n<p>Industrial Logic has been doing micro-releases of its Greatest Hits eLearning product (<a href="http://industriallogic.com/elearning" title="http://industriallogic.com/elearning">http://industriallogic.com/elearning</a>) for a few years now.  </p>\n\n<p>Micro-releasing has simplified our process by eliminating traditional agile planning activities, such as </p>\n\n<ul><li>estimating user stories</li>\n<li>reconciling estimates</li>\n<li>calculating velocity</li>\n<li>trying to obtain a consistent velocity</li>\n</ul><p>Instead, our focus remains on the mini-release.  What important user story or stories do we most need to ship to production in the next few days?  </p>\n\n<p>In this talk, I’ll describe </p>\n\n<ul><li>What led up to these changes</li>\n<li>Our context — people, amount (and kind of) test automation, etc.</li>\n<li>The nitty-gritty details of this approach — using real examples from our project</li>\n<li>Benefits we are seeing from this approach</li>\n<li>What needs improvement</li>\n<li>When Micro-Releasing does or does not make for a good fit</li>\n<li>How Micro-Releases relates to Chartering and larger-scale Release Planning</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This talk would be broken into 50-minutes of lecture, including a look at our plans, release data, etc.   There would be 40 minutes of Q+A, as I anticipate many questions.  </p>\n\n<p>This is a new talk.   I’d rehearse it at a few Bay Area locations before giving it at Agile2008.  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Talk	2008
20080957	Starting a Kanban System for Software Engineering with Value Stream Maps and Theory of Constraints	<div class="content">\n    <p>Any process with a recognizable workflow can be made into an efficient pull system by applying the kanban method.  We can use kanban to transform either a traditional phase/gate software development system or a time-boxed iterative system into a lean continuous-flow system.</p>\n\n<p>Kanban is one of lean’s most fundamental methods, and kanban and value streams go together hand in hand.  </p>\n\n<blockquote>\n  <p>“The two pillars of the Toyota production system are just-in-time and automation with a human touch, or autonomation.  The tool used to operate the system is kanban.”  — Taiichi Ohno, Toyota Production System</p>\n</blockquote>\n\n<p>Value stream maps are the essential input into the design of the workcell and the allocation of kanban to processes.  When you map out a value stream, the time proportions of value-adding processes are also proportional to the work-in-process that should be allowed in each segment of the stream.  By examining the application of people to processes, we can begin to distinguish between pull vs flow transitions and allocate work-in-process limits accordingly.  The Theory of Constraints can then be used to identify additional queue states and adjust kanban limits in order to smooth out flow and maximize total throughput.  The resulting heijunka board becomes a live representation of the value stream in process. </p>\n\n<p>This session is not meant to be a general description of kanban systems in software development.  Rather it is a tutorial on how to launch the process for a new team or project.  Some prior exposure to the kanban idea is recommended.</p>\n\n<p><a href="http://www.infoq.com/articles/hiranabe-lean-agile-kanban" title="http://www.infoq.com/articles/hiranabe-lean-agile-kanban">http://www.infoq.com/articles/hiranabe-lean-agile-kanban</a></p>\n\n<p><a href="http://video.yahoo.com/watch/1376740/4739520" title="http://video.yahoo.com/watch/1376740/4739520">http://video.yahoo.com/watch/1376740/4739520</a></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>30 minutes:</strong>  We will construct value stream maps for both a functionally-organized IT department, and a cross-functional feature team, using typical examples from the presenter and enhancing them with real-life examples from the participants.<br /><strong>30 minutes:</strong>  We will use these VSMs to draw a first draft of a heijunka board for each workflow, and iteratively enhance each board by discussing organizational scenarios and strategies.<br /><strong>30 minutes:</strong>  Then, we will run a simulation of one of the heijunka boards, and introduce problem scenarios that we will use the Theory of Constraints to resolve.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Tutorial	2008
20081420	The use of Ritual in Agile currently and identifying improving ways to harness the power of ritual	<div class="content">\n    <p>For over 10,000 years ritual has created effective Communities. A handshake is a ritual. Ritual reinforces the values; it creates the experience of living out values in the reality and appreciation for those values. Agile is a set of values and principles and the conscious application of ritual will help teams be more effective.  An example: A team was not using paired programming effectively. The team created a ritual. When taking a task, announce, “Who can I pair with?”.  The team became more effective in the practice of paired programming. </p>\n\n<p>The objectives of this presentation is two fold. \n1. Understand the power of ritual being used in Agile communities today. This will help us value and fine tune our process.\n2. Identify other ritual that could be applied to Agile communities to improve process and team work.</p>\n\n<p>Outline\n1. Define Ritual - Ritual is an outward expression of an internal event which gives greater meaning, wieght and percieved efficacy to the event. Ritual plays a powerful psychological role in the lives of people.<br />\n2. The value of ritual. Applying the analogy of rituals of our society or past societies to the rituals performed by agile communites helps us understanding the psychological impact of those events. This allows us to fine tune these rituals, help us start them and helps us develop that ability in others.<br />\n3. The ScrumMaster as Shaman, proctector of the people from the evil spirits (management)<br />\n3.1 Feelings of impotency and powerlessness to achieve an outcome because of influence by powers greater than our selves can destroy morale and motivation. The Shaman was the protector who used his influence to allow the people to live and accomplish their goals. He gave the community hope.<br />\n4. The Iteration/Sprint as a Hunting party<br />\n4.1 Iteration planning as hunting party send off/ Military operation briefing.<br />\n4.2 Iteration review as Hunting party return / Military parade<br />\n4.3 Daily Stand-up as hand shaking.<br />\n5. The build as the Community Center / church<br />\n6. The build lava lamp as a Shame / Totem pole.<br />\n7. Open for discussion of other agile practices to ritual comparisons. Focus on how that comparison deepens our understanding of the practices and how it changes how we will use it or implement it on our projects.<br />\n8. Identify Key rituals in today’s world that could deepen the team work and improve productivity of agile projects. Tho goal is a set of new rituals that will improve our processes<br />\n8.1 Initiation phase, Military organization bootcamp, Religious institutions (confirmation or bar Mitzavah), Fraternities and soroties. How do we onboard Agile team members and how do we recognize it. What could we learn and how would this improve our teams.<br />\n8.2    Recoginition of success, Team versus person oriented recognition, The use of Clothing from head gear to modern day medals and team insignias. Coins, tatoos, awards, plagues, patches on jackets or clothes. tatoos.<br />\n8.3 Removing from Team, School graduation, honorable and dishonorable discharge.   </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This would be 3o minutes of presentation and the rest of the time dedicated to idnentifying improving rituals and practices for more effective team work.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Workshop	2008
20081229	The Pomodoro Technique: can you focus - really focus - for 25 minutes?	<div class="content">\n    <p><em>With the three basic tools - pen, paper and a kitchen timer – The Pomodoro Technique will empower you with the agile abilities of Constant feedback about your working habits, Dedicated decision points to respond to change, Opportunities on a day to day basis to improve your personal process, A sustainable pace also when the deadline is getting closer, Improved quantitative and qualitative estimates, Strategy for how to cope with interruptions and task switching and a Method to regulate complexity. And The Pomodoro Technique fits perfectly inside Scrum and XP.</em></p>\n\n<p>—</p>\n\n<p><strong>Agile methods like Scrum and Extreme Programming are getting more and more popular in the software development industry today. They help projects focusing on the results. But, how can you work agile as an individual or a pair?</strong>  </p>\n\n<p>Pomodoro Technique was invented by Francesco Cirillo in the early 90’s, but has only recently got a reputation as a productive agile methodology for the individual/pair work. Do you have a strategy for how to structure your working time?  </p>\n\n<p>Pomodoro Technique bolsters the ability to stick to Agile values like responding to change, simplicity, feedback, sustainable pace and individuals over tools.   </p>\n\n<p>With the three basic tools - pen, paper and a kitchen timer - you will get…  </p>\n\n<ul><li>Constant feedback about your working habits  </li>\n<li>Dedicated decision points to respond to change  </li>\n<li>Opportunities on a day to day basis to improve your personal process  </li>\n<li>A sustainable pace also when the deadline is getting closer  </li>\n<li>Improved quantitative and qualitative estimates  </li>\n<li>Strategy  for how to cope with interruptions and task switching  </li>\n<li>Ability to regulate complexity  </li>\n</ul><p>Audience level:<br />\n   - Intermediate  </p>\n\n<p>Target audience:<br />\n   - All  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li>Explaining the context (10 minutes)</li>\n<li>Mechanics of the Pomodoro Technique (20 minutes)</li>\n<li>How to cut down on interruptions (20 minutes)</li>\n<li>Estimate the effort for activities (20 minutes)</li>\n<li>Conclusions (10 minutes)</li>\n</ol><p>I will not just deliver a basic stand-up speech. I work extensively with gestures, props and audience interaction.  </p>\n\n<p>This is a 90 minutes version of the popular half day course that I have developed and taught in Sweden.  </p>\n\n<p>More about Pomodoro Technique can be found here: <a href="http://www.tecnicadelpomodoro.it/docs/francesco-cirillo/2007/ThePomodoroTechnique_v1-3.pdf" title="http://www.tecnicadelpomodoro.it/docs/francesco-cirillo/2007/ThePomodoroTechnique_v1-3.pdf">http://www.tecnicadelpomodoro.it/docs/francesco-cirillo/2007/ThePomodoro...</a><br />\nThe slideshow from my half day course can be found here: <a href="http://www.slideshare.net/snoteberg/the-pomodoro-technique-471351" title="http://www.slideshare.net/snoteberg/the-pomodoro-technique-471351">http://www.slideshare.net/snoteberg/the-pomodoro-technique-471351</a>  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Tutorial	2008
20081999	Good Used Cars, Cheap Health Insurance, and Successful Consulting Engagements	<div class="content">\n    <p>Why is it impossible to find a decent used car?</p>\n\n<p>The economic theory of “asymmetric information” shows us what happens to a market in which one party holds important information about the quality of the goods or services.  Health insurance is another market where the parties each hold significant information. We will examine what happens in these markets as a result of that asymmetric information.</p>\n\n<p>Another market plagued by asymmetric information: software consulting services. We’ve all seen enormously costly disasters created by low quality services. Yet, there seems to be virtually no way to gauge a service providers true abilities.  Asymmetric information and the optionality of transactions explains used car sales.  It also explains why consulting contracts for expensive projects are virtually doomed to fail, and why the projects’ failures don’t stick to the providers.</p>\n\n<p>So, how can a buyer get past the “sales spin”?</p>\n\n<p>How can a provider differentiate?</p>\n\n<p>This talk brings ideas together from economics, game theory, and software development to discuss the common problem that all consultants eventually face: the impossibility of differentiation under asymmetric information.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a talk with presentation, to be followed by open discussion in approximately equal measure.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Talk	2008
20080307	Starfish are agile!	<div class="content">\n    <p>Agile is not only a good way to develop software but also  a great way to build teams that collaborate better and respond more quickly to the changes in business environment.</p>\n\n<p>This talk presents some evolved thinking backed by some research about how successful decentralized/ distributed organizations have followed agile principles to gain significant competitive advantage over traditional centralized/ heirarchical organizations.</p>\n\n<p>Ori Brafman and Rod Beckstrom in their highly applauded book “The starfish and the spider” have described decentralized teams (called starfish) as contrasted with centralized heirarchical organizations (called spiders).</p>\n\n<p>This talk draws inspiration from the book and goes on to highlight how agile teams are more like starfish. Both stafish and agile teams have mentors and catalysts and not authoritarian leaders driving them to success. These decentralized organizations are characterized by local, self governing teams which are similar to the scrum teams - self sufficient; having their own customer, product owner, delivery and quality control functions. Like the local units of decentralized organizations; scrum teams are also guided by loosely defined tactical goals and their ability to self govern allows them to quickly respond to the changes in these goals.</p>\n\n<p>Thinking about starfish one needs to switch context to a broader meaning of agile- flexible, people centric, more functional, less bureaucratic, embracing and quickly responding to change.</p>\n\n<p>You will leave this session with a bigger vision of how the agile movement (along with open source, distributed teams, outsourcing/ off-shoring and decentralized e-businesses) is one of the convergent trends that will result in shaping the organizations of the future.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session will kick off with a game between 2 teams -spider vs starfish. The game will demonstrate the power of circular oranization with decentralized decisionmaking over heirarchical one with centralized decisionmaking.</p>\n\n<p>Then I will cover the similarities between agile teams and decentralized teams that Ori Brafman and Rod Beckstrom call Starfish in their book “The Starfish and the Spider”<br />\n( <a href="http://www.starfishandspider.com/" title="http://www.starfishandspider.com/">http://www.starfishandspider.com/</a> ) </p>\n\n<p>I will look at some success stories of agile teams who embraced the open source/ free ware movement. Teams that created successes like Eclipse, Skype, Craigslist and Wikipedia would be covered here. </p>\n\n<p>Then I would go on to discuss how traditional corporations (spiders as Ori and Rod would call them) find it tough to beat these agile teams at their game. We will briefly touch upon evolving technologies and internet based productivity tools that would better equip these open, distributed, agile, self governing teams in days to come. </p>\n\n<p>Finally we will have a brainstorming session to define the likely shape of future organizations built by smart tech savvy individuals who are contributing to the open source using distributed/ decentralized agile teams within or without traditional corportions. </p>\n\n<p>The audience will be broken into several groups. Each group will discuss </p>\n\n<p>1) What type of organizations can be / can’t be built using the scrum teams as the primary building blocks?</p>\n\n<p>2) Will the change happen entirely outside the corporate heirarchical organizations or would it happen inside - some kind of metamorphosis?</p>\n\n<p>In the end each group will elect a representative to present their points to the larger audience for about 5 minutes each.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Talk	2008
20081977	Can IT Projects be insured?	<div class="content">\n    <p><strong>Summary:</strong>  Many non-technical organisations are scared of IT projects.  High failure rates.  Technical jargon.  Expensive consultancy.  Rather than face this, they avoid IT projects completely.  This hurts all of us - the organisation forgoes the value that a project might deliver, and developers forgo valuable work.  Completion bonds (insurance policies that a project will complete on budget) are common in the film industry.  I’d like to explore whether completion bonds might be a way to get over this “trust hurdle”, and how agile approaches might align to such bonds.</p>\n\n<p><strong>Rationale</strong><br />\nIndependent film producers often need to arrange “completion bonds” in order to obtain financing for their films.  These are effectively insurance policies that projects will deliver on time and on budget.  The financier pays a premium to an independent third party (the guarantor), who then monitors the project and ensures it stays on track.  And if it doesn’t, then the guarantor repays the original financing.</p>\n\n<p>The guarantor takes a very active role to manage risks affecting the project.  This starts with the “specification”.  Before giving any guarantee, the guarantor conducts a thorough review of the script, production schedules, budget, and so on.  They meet with key members of the production team to confirm that appropriate direction and controls are in place, that the plans are feasible, and that the team has the necessary skills and experience to deliver them.</p>\n\n<p>The guarantor then actively monitors status throughout the production.  They receive daily progress reports showing what scenes have been shot, how many people have been on set, what materials have been used, and so on.  They review details of expenditure against budget.  They retain the right to visit the set at any time, unannounced, and to meet with anyone involved with the production.</p>\n\n<p>If the production runs into difficulties, the guarantor may step in to take control of the troubling aspects.  They may, for example, impose additional financial controls or seek changes to the script or personnel.  In extremis, they may bring in their own producer to take control of the whole project.  In the UK, the guarantor steps in at some level on about one in five films.  </p>\n\n<p>For the financier, a completion guarantee helps bound their investment risk and provides access to independent expertise.  A completion guarantee may cost between 2% and 6% of the total production budget, but that’s a price many are prepared to pay for effective risk management.</p>\n\n<p>What’s this got to do with agile development?</p>\n\n<p>I think many organisations, especially small to medium businesses and public sector bodies, are failing to initiate valuable projects.  They read statistics such as the Chaos Reports and get scared of the risks of project failure.  They talk to IT companies and get confused by the technical jargon.  They don’t trust the consultancy industry to help them navigate this maze.  So they don’t initiate projects that might actually deliver a lot of value.  Or if they do initiate projects, they bound them with such tight “risk mitigation” practices – heavyweight procurement processes, long contractual negotiations, burdensome project oversight structures – that an atmosphere of mistrust and bureaucracy is built in from the outset.  This, perversely, increases the risk of failure even further, creating the conditions for an escalating “cycle of mistrust”.</p>\n\n<p>This mistrust hurts all of us.  Organisations are forgoing potential benefits.  Developers are forgoing potential work.  Or if we do get work, it’s set up for failure from the outset.</p>\n\n<p>It’s easy to say “we should all trust each other more and this cycle would be broken”.  It’s a lot harder to actually build trust.  Agile approaches already do a lot to build trust.  Working together day-to-day, regular visibility of progress, openness – all help build trust.  But many of the organisations I work with have trouble getting over the initial trust hurdle to try out agile in the first place.</p>\n\n<p>I think completion bonds could be a way to reduce the size of this trust hurdle.  I also think agile development may create many of the conditions necessary for insurance companies to offer completion bonds – regular visibility of progress and constant checking that the client and development team remain aligned, for example.  This session will explore what we might need to do to make it possible to offer completion bonds on agile projects.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The workshop is really about exploring a couple of questions:\na) What would we need to do to make it possible to offer completion bonds on agile projects?\nb) Would such bonds help some non-technical organisations to be more confident to initiate projects?</p>\n\n<p>I’d therefore like to use a facilitated brainstorming approach based on the Consensus Workshop and Focused Conversation methods (<a href="http://www.ica-uk.org.uk/facilitation/gfm.htm#consensus" title="http://www.ica-uk.org.uk/facilitation/gfm.htm#consensus">http://www.ica-uk.org.uk/facilitation/gfm.htm#consensus</a>), which I’ve used with a number of clients.  My proposed agenda for the workshop is therefore:<br />\n15 mins - Introduction to Completion Bonds<br />\n60 mins - Consensus Workshop on question (a)<br />\n15 mins - Wrap up and Focused Conversation on question (b)  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Workshop	2008
20080424	Agile infrastructure and operations: how infra-gile are you?	<div class="content">\n    <table><tr><td><img src="http://www.jedi.be/pages/starwars-agile-o-meter/figures/mini-ken-schwaber.jpg" alt="Ken Schwaber" size="100px" /></td><td valign="top">\nSome have described Agile and Infrastructure as an oxymoron: they just don’t fit together. During one year we have focused on using agile techniques in three different infrastructure related projects. From a unique infrastructural point of view, we will show that the term ‘agile infrastructure’ consists of multiple layers and to become effective, each layer needs to be addressed.  Compelling stories with a certain pattern, not unlike bed stories, but this time you won’t fall asleep!\n</td></tr></table><p>The conference required an IEEE-paper on the case study: Download it here  <a href="http://www.jedi.be/presentations/IEEE-Agile-Infrastructure.pdf" title="IEEE Paper: Agile Infrastructure and Operations">IEEE-Agile-Infrastructure.pdf</a> .</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session will be 45 minutes long: 30 minutes of presentation and 15 minutes of feedback/interaction.</p>\n\n<ul><li>5minutes: introducing the stage and results of internet survey: <a href="http://www.jedi.be/pages/starwars-agile-o-meter" title="Star Wars Agile-O-Meter">How agile is your enterprise?</a></li>\n<li>20 minutes: case 1,2,3 summary: overview of the three cases</li>\n<li>5 minutes: my conclusion of the three cases (Black Swan relationship)</li>\n<li>15 minutes: Three statements (5 min / statement) will be put forward to the public. Using an interactive voting mechanism you can contribute to the discussion.</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Experience report	2008
20080570	Agile and labour turnover - Should I stay or should I go? 	<div class="content">\n    <p>Servant leadership, pair programming, transparency and self-organising teams are evil. They make people leave! Or don’t they?</p>\n\n<p>Agile values and practices often cause enough pain for someone to leave the team or even the company. On the other hand they can retain or even attract people. </p>\n\n<p>What can you do if you want people to stay or go?</p>\n\n<p>After this session you can deal with labour turnover, or lack thereof. You will understand the systemic aspects of labour turnover by turning stories told by participants into diagrams of effects.</p>\n\n<hr /><p>Issues we will discuss are:  </p>\n\n<ul><li>What was the employee turnover rate when you introduced an agile way of working?  </li>\n<li>Which values in your country, company or profession affect the turnover rate?  </li><li>  What are the costs and benefits of labour turnover?   \n</li><li>Ken Schwaber mentions a 20% turnover when introducing Scrum. Does the 20% rule scale? (Meaning: if you introduce Scrum to 1000 people, does that mean 200 leave?)  </li>\n<li>How do you keep the right people, and lose the ‘wrong’ people? </li> \n<li>Your issues  </li>\n</ul><h3>Benefits</h3>\n\n<p>After attending this session you will be better prepared to deal with labour turnover, or lack thereof. You will have a ‘bigger picture’ of labour turnover through stories from other participants. By making diagrams of effects from these stories, you will also have a systems view of labour turnover, which allows you to be effective in more situations.</p>\n\n<h3>Intended Audience</h3>\n\n<p>People from different companies and different cultures. HRM managers, general managers, change agents, agile coaches, developers, testers and other team members. </p>\n\n<h3>Background</h3>\n\n<ul><li>Leaving a company, or firing employees, is not that easy (e.g. bad for morale, expensive )</li>\n<li>You may want to keep your people, even when they resist the change, \n<ul><li>attracting new people is too difficult  because of a tight labour market in some countries. </li>\n<li>they may have valuable knowledge and skills</li></ul></li>\n<li>In <em>The Enterprise and Scrum</em> (p6),  Ken Schwaber states that when Scrum is introduced, one should expect a turnover of 20%. People who don’t like the change or cannot adapt to it, simply leave or are fired. </li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>you’ll see what the timetable is when you come to the session ;) We’ll do an introduction, tell some of our own stories to explain how to make a diagram, and then it is up to you to tell your stories and share your experiences!</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Workshop	2008
20083483	The Hidden Life of Groups	<div class="content">\n    <p>Software development is performed by groups of individuals. <b>When individuals become a members of a group, behavior changes.</b> The group becomes focal and the individuals become background. The group behaves as a system and exhibits system-level behavior. Groups as a system exhibit primitive emotional behaviors that can derail the group from its stated primary task. </p>\n\n<p>Group relations theory says that a group behaves as a system—and that the primary task of the group is <em>survival</em>. Although this primary task is frequently masked, survival as a group becomes the primary preoccupation— and latent motivating force— for all group members.</p>\n\n<p>Understanding the undercurrent of group-level emotional behaviors manifested by all groups is important to effective Agile practice because these behaviors are a source of tremendous quantities of waste. Agile team members who understand group relations theory  can more quickly pool their rational thinking, combine their skills, solve problems, and perform complex decision-making. Group relations theory helps explain the astonishing success of Scrum’s simple ground rules.</p>\n\n<p>Under group relations theory, the group has a dual identity. The first identity is <em>the work group</em>, who are assembled to execute on the stated task. The second identity, the  <em>basic-assumption group</em>,  exhibits and manifests the latent aspect of group life. The combined wishes, fears, defenses, impulses and projections of the individuals in the group constitute the goals and objectives of the basic-assumption group. </p>\n\n<p>A tension exists between the work group and the basic-assumption group. The behavior of the basic-assumption group has the potential to generate tremendous amounts of waste, while the behavior of the work group is capable of very high productivity. Basic-assumption behaviors can be minimized through the rigorous enforcement of simple ground rules and associated group norms. This is precisely how Agile methods like Scrum actually work.</p>\n\n<p>Software development occurs in groups. Group relations theory helps explain the group-level sources of waste in software development. Attend this session to participate in a deep-dive into the application of group relations theory in your Agile practices. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>30 minutes: Introducing Group Relations Theory: Core Concepts</p>\n\n<p>15 minutes: Questions and answers dialogue</p>\n\n<p>30 minutes: Applied Group Relations in Agile Practice: The Scrum Case Study</p>\n\n<p>15 minutes: Questions and answers dialogue</p>\n\n<p><b>In this session you learn:</b>\n<br /><br /></p>\n\n<ul><li>The history, development and premises of group relations theory. Groups defined. </li>\n\n<li>The difference between stated (conscious) tasks and latent (unconscious) tasks that are universal in all groups</li>\n\n<li>How the hidden undercurrent of emotional life inherent in all groups automatically generates waste</li>\n\n<li>The four basic assumptions : Dependence, Fight/Flight, Pairing, and Oneness</li>\n\n<li>How the four basic assumptions affect leadership and authority in all self-organizing  teams. How genuine Agile methods manage group-relations effects in these teams</li>\n\n<li>How genuine Agile methods like Scrum actively manage the hidden life of groups</li>\n\n<li>How SDLC/waterfall methods actively encourage the irrational wishes, fears, defenses, impulses and projections of teams—thereby leading to absolutely huge amounts of waste</li>\n\n<li>How Scrum’s clear and simple ground rules effectively manage the tension between the work group and the basic-assumption group by managing the focus of attention. The role of cognition in group relations</li><li>\n\n</li><li>How to apply group relations theory immediately in your Agile practice. </li>\n\n<li>Sources of more information on applying group relations theory in your Agile practices</li>\n\n</ul><p>Resources and Links:</p>\n\n<p>Group Relations Theory<br /><a href="http://www.grouprelations.com" title="www.grouprelations.com">www.grouprelations.com</a></p>\n\n<p><a href="”http://en.wikipedia.org/wiki/Complex_adaptive_system”" target="“_blank”">Complex Adaptive Systems</a></p>\n\n<p>Jeff Sutherland on Complex Adaptive Systems<br /><a href="http://jeffsutherland.com/scrum/2007/11/is-it-scrum-or-lean.html" title="http://jeffsutherland.com/scrum/2007/11/is-it-scrum-or-lean.html">http://jeffsutherland.com/scrum/2007/11/is-it-scrum-or-lean.html</a></p>\n\n<p>See also, from this presenter:</p>\n\n<p>‘Paying’ Attention to Agile: Inattentional Blindness with Examples<br /><a href="http://submissions.agile2008.org/node/695" title="http://submissions.agile2008.org/node/695">http://submissions.agile2008.org/node/695</a>\n<br /><br /></p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Talk	2008
20084064	Operating on the Creative Edge: Applying Improvisation Techniques in Agile	<div class="content">\n    <p>Drawing from the art of improvisation, Agile coaches Jim York and Tobias Mayer lead this fun and fast moving session to explore healthy and innovative ways of communicating and collaborating. Many Agile teams suffer from dysfunctional interpersonal communication born of learned “bad” behaviors.  These stifling exchanges keep individuals entrenched in old ideas and inhibit forward progress.  In this session, Jim and Tobias share a different approach based on their experience teaching Agile teams improvisation techniques to help them find creative ways to discover and deliver customer value.  </p>\n\n<p>Participants will learn how to generate a collaborative space, building upon one another’s ideas in a creative and innovative fashion.  They will experience the power of positive feedback, emergent design and even failure, and will understand how to heighten their own awareness and understanding during an exchange so that they can respond with agility and purpose.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We conducted a shorter version of this session at last year’s conference.  The workshop was successful (we had to turn people away as it is limited to 30 participants, we had excellent participation, and we received much positive feedback).   However, it was a bit rushed and only touched the surface of the benefit the exercises can have. This year we are proposing a half day session so that the topics may be more fully developed and explored by the participants.</p>\n\n<p>The session format is highly interactive, exploratory and creative, with debrief discussion as appropriate.  The facilitators will lead the participants through word games and other interactive games designed to facilitate group awareness, understanding, and direction.  Examples include:</p>\n\n<ul><li>The Failure Bow — an introduction to prepare for the session</li>\n<li>Writing a letter one word at a time  </li>\n<li>The Story Spine — collaborative story telling using a fixed framework</li>\n<li>String of Pearls –- more story telling, going backwards, forwards, and from both ends to the middle.  </li>\n<li>Arms — where one person is the arms of another as they create a story led by gesture  </li>\n<li>Help me see it — emergence in action</li>\n</ul><p>We have used the improvisational techniques and exercises proposed for this session in dozens of leadership and other agile training workshops over the past 3 years.  In their written feedback, the participants in these workshops have consistently ranked these exercises among the highlights of their learning experience.</p>\n\n<p>Here is a selection of comments from Agile2007 and other sessions where these exercises have been used:</p>\n\n<ul><li><em>“Great session!  I would like this session to be one of the 3 hour sessions.  There is so much we could cover.”</em>   </li>\n<li><em>“I thought the session was great and would recommend the entire organization going through something like this. I also think it would be interesting to have more execs participate…”</em>   </li>\n<li><em>“The Failure Bow set the tone for the whole session.  It was perfect!”</em>   </li>\n<li><em>“At first this felt awkward and embarrassing, but in the end I really enjoyed it.  I didn’t think I’d be able to participate, so I surprised myself.”</em>   </li>\n<li><em>Loved all of it!</em>   </li>\n<li><em>“The [workshop] was most effective for its success in changing the atmosphere and the substance of communication and action […] The entire encounter unfolded outside the box, and so was alternately awkward, liberating, and fun.”</em>   </li>\n<li><em>“Style of delivery, energy, etc. were right on target.”</em>   </li>\n<li><em>“An important outcome of today’s session was…there was movement. People began talking…”</em>   </li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Workshop	2008
20083887	Agile development in a medical device company	<div class="content">\n    <p>Developing software in a medical device company imposes a number of challenges on any methodology. There is a high level of dependency on hardware systems, long validation cycles and a strict regulatory environment which requires adherence to international standard and a high level of traceability. At Cochlear Limited (the largest cochlear implant manufacturer) we have been using agile software methodologies in this environment for just over two years. During this session Victor Rodrigues will explain how agile methodologies can be adapted to adhere to the emerging IEC62304 standard for software development in medical devices. Riaan Rottier, the project manager for the first software development project that used Scrum from start to finish, will then present on the software team’s experience, the lessons we learned, the tools we used and some of the challenges we still have to overcome. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>60 minute presentation \n30 minute Q&amp;A/Discussion</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Experience report	2008
20083926	Mature  Agile with a twist of CMMI	<div class="content">\n    <p>Systematic is an agile CMMI level 5 company, where the default way of working is based on Scrum and story based early testing. Several years of Experiences in combining CMMI with Scrum, has shown that the mix of Scrum and CMMI provides strong synergies and results, which were reported during Agile 2007. This session presents specifically how agile methods like Scrum and story based early testing development can be sucessfully augmented with inspiration from CMMI. CMMI provides solid support for what disciplines to consider. When these disciplines are applied with an agile mindset they become solid specific guidance, that help you focus on important aspects of agile methods that perhaps are not normally elaborated, for example how to ensure a proper quality of a Product Backlog or how to ensure a proper “production line” for the project. This guidance may not be needed for small agile projects, but as the agile movement continues to grow, and is used for larger and more complex projects, we increasingly need to address issues related to increased size and complexity. The experiences from combining CMMI and Scrum has led Systematic to identify a number of activities to this end - and the good part is that these activities truly can be implemented in the spirit of the agile manifesto and principles - in other words suggesting how agile methods can be augmented and matured to ensure that even larger and more complex projects in the future can and will benefit from agile - perhaps with a twist of CMMI :-)</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>A combination of lecturing and discussion.  </p>\n\n<p>00 How Systematic combines CMMI and agile methods like Scrum and story based early testing development<br />\n15 How CMMI supports agile methods and how it helped Systematic to adopt Scrum<br />\n30 Specific examples on activities from CMMI that provides a better agile implementation<br />\n45 Why the combination of CMMI and agile is better than agile alone<br />\n60 Discussion: Agile with a twist of CMMI in the future?<br />\n90 Wrap up  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Experience report	2008
20080495	Separation of concerns: New Practices for Decreasing Coupling and Raising Cohesion	<div class="content">\n    <p>Using simple but proven design principles, this presentation explains the “Layered Module” architecture style, an approach to manage dependencies between the modules which compose a program. We will discuss the single responsibility principle. We will see how to use abstract classes and interfaces as a mean to reduce dependency surface. In the same way, we will present the techniques of dependency injection and inversion of control to reduce the coupling between classes. Lastly, we will discuss benefits to modularize and decouple with layers using namespaces (packages). </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>A) Depends upon abstractions<br />\n - Single responsibility principle<br />\n - Class as unit of modularity<br />\n - Working with Interfaces, the contract as unit of abstraction<br />\nB) Depends upon stability<br />\n - Design using “Component” as unit of deployment and stability for teams<br />\n - Design using “Class” with dependency injection and inversion of control techniques<br />\nC) Beyond the class as unit of modularity<br />\n  - Modularized and decouple with layers and uses “Namespace” as unit of composition (packaging) </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Talk	2008
20080769	Agile Game Development	<div class="content">\n    <p>Over the past five years, agile has been adopted by the video game industry.  It all started at one developer in Southern California called “High Moon Studios”.  This studio introduced Scrum and later XP to the rest of the game industry over the following years and helped agile methodologies become one of the most commonly used ways of making games.</p>\n\n<p>Clinton Keith, the CTO of High Moon Studios who introduced agile to the studio and industry will tell the story of how video game developers, in less than two decades,  have gone from the garage to large studios requiring years of effort by over a hundred developers to make a game.  This rapid growth in team size, cost and failure rates have driven this industry to the brink of failure despite its rapid growth.  The video game industry is notorious for extended death march projects and creating controversial products that aren’t always what their customers want.  Agile has helped address these problems in a big way.</p>\n\n<p>Clinton will describe how the studio adopted agile and how agile practices have been adopted to video game development.  Video game teams are highly cross disciplined and the product value they seem is “fun”.  How the customers and team “find the fun” and identify and reduce waste is a challenge.  Agile video game teams have adopted not only Scrum and XP, but are adopting Lean, Kanban and other practices to find ways to make better games.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This will be a powerpoint presentation that will include video and audio.  The presentation will be a <strong>heavily modified</strong> version of one given at the Scrum Gathering in Boulder, CO.   </p>\n\n<p><strong>Overview</strong><br />\n* A history of video game development and methodologies used.<br />\n* The presentation will include stories of video game development “gone bad”.<br />\n* The current state of the business which is driving the need for agile.<br />\n* The application of agile to video game development and the changes to agile practices for the unique needs of video game development.  </p>\n\n<p>I’ll touch upon some (or all) of these subjects to highlight how some of the standard practices of agile methodologies have changed for game development (while maintaining agile values and principles):</p>\n\n<ul><li>Iterations &amp; “done”.  </li>\n<li>Time-boxing art.  </li>\n<li>Agile and leadership.  </li>\n<li>Retrospectives.  </li>\n<li>Adopting XP.  </li>\n<li>Coaching &amp; classes.  </li>\n<li>Adoption issues.  </li>\n<li>Agile teams and publishers.  </li>\n<li>Scrum for artists and designers.  </li>\n<li>Large &amp; Cross-discipline team structure.  </li>\n<li>Fears and issues with agile planning.  </li>\n<li>Art production &amp; agility.  </li>\n<li>Lean production.  </li>\n<li>Value stream mapping &amp; Kanban.  </li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Talk	2008
20080917	Mirror, Mirror on the Wall... Why Me?	<div class="content">\n    <p>Snow White and the Seven Dwarves Kanban is a mini-adventure of self-discovery to improve personal effectiveness. Here’s your chance to improve the way you communicate by developing a better understanding of others and of yourself. The mirror will show you your real ability in working with others. Once you and your colleagues know more about yourselves, you can use the game to create teams where everybody plays to their strengths and help one another address each other’s weaknesses.</p>\n\n<p>Through detailed consideration of what you think of others and why, you will gain new insights into who you are. You will also develop a clearer understanding of who you want to be. Once you’ve identified possible areas for self-improvement, you can choose to change and become more effective in the way you work, both on your own and with others.</p>\n\n<p>By knowing the strengths of different types of people, you will be able to build well-balanced teams that play to the strengths of everyone in the team. And because you will recognise weaknesses, you will know where the team can improve.</p>\n\n<p>This session is run as a two-part game:</p>\n\n<ul><li>Looking into the Mirror: Find out how you see other people and what that tells you about yourself. Identify actions for personal improvement.</li>\n<li>Build Your Own Agile Fairytale Team: Build a team of complementary fairytale characters to give your project a happy ending.</li>\n</ul><p>We also give a brief overview of the tools that complement this game such as Belbin Team Roles and Myers-Briggs Type Indicator.</p>\n\n<p>This is the second instalment in the <a href="http://www.agilefairytales.com">Agile Fairytales</a> series.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ul><li>00-15 Introduction</li>\n<li>15-70 Play the Snow White and the Seven Dwarves Kanban game</li>\n<li>70-90 Sharing of insights with the whole group</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Workshop	2008
20081468	Agile Contracting	<div class="content">\n    <p>Many software development organizations work within the bounds of contractual agreements in both internal and external (consulting) projects. As Agile practitioners, we often hear that Agile Contracting is challenging and practitioners are looking for solutions. In this workshop we will offer a toolbox of strategies to help deal with different contracting scenarios and promote Agile practices, protect the development organization, and provide value and protection to the contracting organization. Then we will collaborate to elicit new contracting tools from the Agile community to be added to the toolbox.</p>\n\n<p>Attendees should gain a deeper understanding of the problems associated with Agile Contracting as well as practical solutions for dealing with contracts in an Agile manner.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This interactive presentation will start with a review of three primary concepts of interest for individuals and organizations working with Agile methodologies in particular in contractual relationships. First we will review different situations in which Agile Contractors find themselves within the “Iron Triangle” of project limiters (fixed timeline, budget and scope). Then we will investigate the Failure Signs that can reveal missteps in implementing Agile practices in these situations. Finally, we will review a Toolbox of strategies and concepts that can help remedy the issues. Toolbox strategies include: </p>\n\n<ul><li>Getting Agile in at the “ground floor” (from proposal through contract)</li>\n<li>Creating contracts that are “looser” in scope - value-based vs. scope based</li>\n<li>Determining the team velocity in advance and sizing the entire backlog to derive duration of project (given current backlog)</li>\n<li>Including a definition of Done for the project</li>\n<li>Creating an Agile Evangelist at the client</li>\n</ul><p>After walking through the three concept areas, we will break the group into teams and have them each work through a possible scenario composed of one Situation and one or more Failure Signs (either from our presentation or as suggested by the group), and ask each team to suggest remedies either from the Toolbox or from their own experience. We will then have each team debrief to the group.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Workshop	2008
20084190	Value Stream Mapping - Extending Our View to the Enterprise	<div class="content">\n    <p>As effective as Agile teams have become, many times it isn’t the team that is the problem.  In many cases, the structure within which the team exists is more problematic than the performance of the team itself.  The myopic view of agility towards teams has not helped address this problem.  </p>\n\n<p>Value Stream Mapping comes from Lean Thinking and provides a way to see the entire chain of events that leads to a product from its inception.  It describes the transition from concept to cash.  It maps the flow of ideas and actions across the entire organization.  </p>\n\n<p>The power of value stream mapping is that it:<br />\n • Makes explicit what is often tacit knowledge in the process<br />\n • It focuses on time, not cost.  Time based decisions are often much more useful than cost based decisions<br />\n • It identifies actions needed to eliminate waste in the process being followed by the team in creating value for the customer<br />\n • It provides a common discussion point for the entire organization to participate in<br />\n • It solves problems that looking at only part of the process can’t  </p>\n\n<p>Real-life examples are presented, as well as some fundamental principles of Lean to provide guidance to the participants.  After some background in the principles behind value stream mapping is presented, participants will break up into groups and create a value stream map of their own development process.  </p>\n\n<p>The tutorial will close with why and how value stream mapping can be the place to start for a team undergoing a transition to agile methods.  It will also discuss how a team already doing agile can greatly improve their efficiency with value stream mapping.</p>\n\n<p>Participants will learn:<br />\n • What a Value Stream Map is<br />\n • Why they are important<br />\n • How to create a value stream map  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This “tutorial” is more hands on session than tutorial.  I do a 30-45 minute background and then a two hour exercise on value stream mapping.  This hands on session is very powerful for people (we’ve run these before at our own mini-conferences).  We then close with about a 15-30 minute wrap up.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Tutorial	2008
20082340	The Doctor is "In" - Using the Office Hours Concept to Make Limited Resources Most Effective	<div class="content">\n    <p>Typically, scrum teams work best when team members are 100% allocated to the team. But what about team members that can’t be? What about teams that don’t have a member from a functional area like User Experience or TechPubs? This experience report examines how salesforce.com has handled:  sharing resources between teams, and filling in gaps when a functional expert is missing from a team. Salesforce.com uses an “Office Hours” program for teams to utilize the expertise of functional experts (like writers and designers) when those experts aren’t on the team.</p>\n\n<p>Salesforce.com’s Technology organization transitioned over 30 product teams from a waterfall development process to an agile development process. After this transition, it was evident that shared resources, such as user experience and product documentation professionals, could not support as many teams as they had in the past using a waterfall process. As a result, shared resources were assigned to fewer teams, which left some teams without designated team members for product documentation and user experience. This experience report highlights how salesforce.com has adopted the concept of “Office Hours” in order to make these limited, shared resources most effective and to support teams that do not have a designated resource for user experience or product documentation.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li><p>Introduction to salesforce.com’s Development Services - brief overview of the “shared resources” problem for Tech Pubs, User Experience, and System Testing </p></li>\n<li><p>How many teams is too many? - Team member-to-scrum team ratios we’ve developed and why</p></li>\n<li><p>What to do if you don’t have enough people? - The Office Hours concept and how it works, including the mechanics of holding Office Hours, the timing of Office Hours, the prioritization process of which scrum teams have to use Office Hours vs. getting a dedicated team member. We’ll also talk about how well it does or doesn’t work for different functional groups like Tech Pubs, User Experience, and System Testing.</p></li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Experience report	2008
20083716	Overcoming Brooks' Law	<div class="content">\n    <p>Has your boss ever asked you to speed up your project? After you explain there are not enough hours in the day, more programmers are assigned to your project. Now you can’t even come close to getting your work done; now your teaching the new programmers but watching every line of code they write! It’s classic Brooks’ Law; adding manpower to a late software project makes it later. Brooks’ is right for a traditional team, but he never worked on a fully developed agile team implementing Extreme Programming. </p>\n\n<p>Surprisingly, many of the practices of Extreme Programming also help teams overcome Brooks’ Law and actually allow an increase in production through addition of resources. If more software development teams successfully demonstrated this phenomenon, many business sponsors would be interested in supporting Extreme Programming. </p>\n\n<p>My experience on a large, long term project successfully demonstrated that Extreme Programming practices allow adding resources while still increasing the velocity of the project.  This experience report shares how our strong team effectively sped up story card completion pleasing the business sponsor and moving the software forward.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Since the session is 30mins it will run in a presentation format, while welcoming questions and open discussion through out.</p>\n\n<p>Attached is my paper that formed from this idea. I have attached it to help clarify my thoughts, but it would be my intention to rework the paper for the agile2008 audience.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Experience report	2008
20084268	Beginner's Mind--The Zen of Agile	<div class="content">\n    <p>Based on “Zen Mind, Beginners Mind” —- Suzuki Roshi</p>\n\n<p>THE POINT: “Beginner’s mind is Zen practice in action. It is the mind that is innocent of preconceptions and expectations, judgments and prejudices. Beginner’s mind is just present to explore and observe and see “things as-it-is.” I think of beginner’s mind as the mind that faces life like a small child, full of curiosity and wonder and amazement. “I wonder what this is? I wonder what that is? I wonder what this means?” Without approaching things with a fixed point of view or a prior judgment, just asking “what is it?”——  Abbess Zenkei Blanche Hartman on Suzuki Roshi’s epic work “Zen Mind, Beginner’s Mind”</p>\n\n<p>We believe that if teams don’t stay in the moment, look below the surface at the here and now, and maintain openness and wonderment, they will ultimately adopt a fake Agile and fail in their adoption. They will kill the whole intent of Agile for software teams; that is, they will miss the maturation and growth born of team and self inspection and adaption without judgment and without adherence to pre-conceived notions of some gross-level Agile practices. In fact, we contend that Waterfall software development actually is a great example of a severe case of “Expert Mind”, a mindset that all can be known, defined and made expert to the point of no need for inspection of self or team.  That “Expert Mind” view causes stagnation and lack of real team ownership and improvement in practices. We in Agile must embrace “Beginner’s Mind” if we want to reap the great rewards Agile software development has to offer.</p>\n\n<ul><li>THE TESTS (the things participants will walk away with from this workshop): \no   Staying in the present is true focus and integral to Agile team success</li>\n</ul><p>o   Agility is also a series of small successes and failures (reframed as experiments or learning moments) that we must be open to</p>\n\n<p>o   Building a sense of team or self expertise may blind your sense of possibilities</p>\n\n<p>o   Lean to keep values as core and have your practices continually evolve around your values</p>\n\n<p>o   Use frequent inspect and adapt of yourself as well as process, practices and teams</p>\n\n<p>o   Use frequent brainstorming of wild ideas; staying stuck can cause teams to often overlook</p>\n\n<p>o   Making “the here and now” practice takes work, takes investment, takes discipline</p>\n\n<p>o   Things that work/don’t work are often overlooked</p>\n\n<p>o   Zen moments are everywhere, you simply have to be open and ready so you can recognize them and decide what to do</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>o   What does “Beginner’s Mind” means to Agile teams? (prep and exercise)\n A small group exercise in which members take basic Beginner’s Mind practice information and brainstorm about what that looks like for Agile teams. Teams report out to open group</p>\n\n<p>o   What does “Expert Mind” thinking mean to Agile teams? (prep and exercise)\nSame small groups now brainstorm how they could recognize thinking that inhibits openness or keeps teams at surface assumptions about Agile practices. Teams report out to open group</p>\n\n<p>o   What are some Agile project journeys that exhibit both these attributes and challenges?\nBoth David and Jean share several project journeys where they have watched  teams successfully apply “Beginners Mind” or fall prey to “Expert Mind” thinking. We bring examples that have more than what they seem (surface evaluation and constricting assumptions) going against it. And, we provide examples that show teams using “the moment” and openness to continually improve their practice without getting stuck. Our goal is to show that quick decision-making, or clinging to assumptions about practices have hindered teams’ growth.</p>\n\n<p>o   What did you hear (listening and exercise)</p>\n\n<p>o   Where do you see yourself keeping a “Beginners Mind” versus an “Expert Mind”?\nAn exercise of One-on-one interviews where participants ask each other about their project journeys and write down what they hear. Groups of 6 then bring their interviews/stories together, mine similar events/observations, and on a flipchart  capture what Beginner’s Mind practices they see emerging from their stories and discussion. The entire group shares their work through silent observation of the flipcharts, sort of like visiting a Zen temple or Zen garden.</p>\n\n<p>o   What are the possible small events you should now look for in your Agile adoption and practices?\nAn exercise of individual contemplation that participants keep to themselves in personal written form or pictures</p>\n\n<p>o   Our brilliant wrap up :- )\nProvide our set of Zen and quasi-Zen (fun) quotes on little pieces of paper and have small groups randomly pull a quote from a hat. The small group now builds its Agile story, fun or serious, about the quote they have selected based on all that has been discussed during the session. We finish with final readouts and celebration!</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Workshop	2008
20083567	Swarming - The Birds and the Bees and Agile	<div class="content">\n    <p>More and more teams find themselves working in an incredibly chaotic environment. How the team reacts to the stimuli in that environment can mean the difference between success and failure. Discovering and applying the rules that will best guide us to success in this complex ecosystem is a daunting task. Where else can we look for examples of this kind of complex group behavior?   </p>\n\n<p>In the animal world there is a fascinating set of behaviors that are self organizing, emergent, have simple rules, no central control, etc. These ideas resonate strongly with some of the central tenets of Agile development. These patterns of behavior exhibited by animals are very reminiscent of the team behavior we are seeking in Agile development teams. What can the behavior of groups of animals teach us about working on Agile teams?  </p>\n\n<p>In this presentation we will discuss the definition and characteristics of swarming behavior and how it applies to the work of Agile teams. Through a combination of hands on exercises and discussion, we will explore the rules that seem to work well in the natural world and the Agile development world.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The presentation will be organized in the following fashion:<br />\n1) An Introduction to Swarming 20 minutes<br />\n        Go over the basics<br />\n        Review animal models (ethology)<br />\n        Distinguish between working on one thing and Swarming<br />\n        Examples of rules for swarming<br />\n2) Swarming exercise 10 minutes \n        Exercise with the whole group - the swarming exercise<br />\n3) Applying Swarming to Development 20 minutes<br />\n        Outline a set of rules that might be applied to a development team<br />\n        Describe how Scrum/Agile methods create a system that provides a framework for swarming<br />\n4) Team Swarming Exercise 10 minutes<br />\n       Split group into smaller teams - Do the role mapping game<br />\n5) Critical Factors for Swarming 20 minutes<br />\n       Environmental influences<br />\n       What environments support swarming?<br />\n6) Q&amp;A 10 minutes</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Talk	2008
20081930	The Agile Haiku Workshop	<div class="content">\n    <p>Writing haiku, the art form of short poetry from Japan, is a great way to reset the brain, express emotions without using emotional language, and explore the wealth of talent for writing and communication which exists in each of us. Often, our thought processes are procedural in nature. We treat our lives and work as railroads to success. This workshop explores the structure and language of haiku, aiming to break the habit of procedural thought through techniques which capture the moment and nurture the brain’s natural tendency to make connections.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Participants will learn:</p>\n\n<ul><li>how to write haiku (and why they’re not 5-7-5)</li>\n<li>a little of the history of haiku, its traditions and related forms such as tankas, rengas, senryu, scifaiku, horrorku etc.</li>\n<li>how to communicate emotionally, without emotional words</li>\n<li>how the art of haiku draws on aspects of NLP</li>\n<li>how the brain connects seemingly disparate events, and how haiku can be used to help nurture the ability to make those connections</li>\n<li>mind-mapping, and how to use it both generally and for creating haiku</li>\n<li>how you can use the art of haiku to give useful feedback, or realise the source of your own feelings</li>\n<li>how being a haijin (a haiku poet) can improve your work life, help you write emails and make presentations, and find peace in a turbulent world.</li>\n</ul><p>This session is suitable for anyone, including people speaking English as a second language. Previous participants who swore they had no art with words have discovered that they possess the soul of a poet.</p>\n\n<p>Value statement and tests: see Summary. It’s not completely insane, and it’s been run successfully several times before!</p>\n\n<p>Abstract: Participants learn to write haiku through simple exercises. We explore how this can help us communicate, and understand and appreciate aspects of ourselves, our colleagues and our work.</p>\n\n<p>Performance style: I teach with examples, using exercises which gently lead participants from a broad understanding to a deeper skill, surprising them with their own abilities along the way. Diverse images are provided to help stimulate the participants’ imaginations. I have only ever run this session for software professionals, and have had great feedback. Some previous participants now write haiku regularly. I can run this session with 4 to 30 people.</p>\n\n<h2>The Story So Far</h2>\n\n<p>I’m an Agile coach, a BDD enthusiast and a (paid) published poet. About three years ago I realised that I had some skills that were strange and a little rare. These included the ability to change and diverge from proscribed processes without fear, to express myself briefly and purposefully, with impact, and to write. I created this session to pass on some of those skills. It’s since been run at Thoughtworks, at client sites and at XPDay 2005, where it was received very well, becoming the main topic of conversation in the pub afterwards!</p>\n\n<p>The skills are disparate. There’s no direct link between Agile and haiku… but experience suggests that the practitioners of one really like the other too, using them in emails, code comments, etc. I also found similarities with the art of haiku in NLP, and have adapted the workshop accordingly.</p>\n\n<p>Examples of haiku from experienced haijins accompany each exercise. </p>\n\n<h2>Exercise 1: The Random Haiku</h2>\n\n<p>We each write a few phrases about a visual or sensory scene that we find emotionally moving. We then swap the phrases, creating verses from random snippets. Invariably each poem creates an image, often different in each participant’s imagination.</p>\n\n<p>This exercise gives people confidence about their ability to create poetry and introduces some of the guidelines of good haiku.</p>\n\n<h2>Presentation: A little history</h2>\n\n<p>About the four haiku masters, how haiku originated, and the different forms which have evolved.</p>\n\n<h2>Exercise 2: The Renga</h2>\n\n<p>The renga is an ongoing poem throughout the workshop, to which each participant will contribute.</p>\n\n<h2>Exercise 3: Mind-mapping</h2>\n\n<p>An introduction and a quick overview of Mind Mapping, some practice pieces, and how to use mind maps to create a haiku, centralised on the main theme, without incorporating any direct images. We examine the results.</p>\n\n<h2>Exercise 4: Free-form haiku</h2>\n\n<p>We create our own haiku based on the rules we’ve learned so far.</p>\n\n<h2>Q&amp;A: How can haiku help us?</h2>\n\n<p>What happens to our brain if we practice this regularly? How does it affect our ability to make connections? Our vocabulary? Our communication skills?\nWhat changes about the way we look at projects?\nWhat will we do differently?</p>\n\n<h2>Reading of the Renga</h2>\n\n<p>A look at the shared art we’ve produced, and how it’s evolved as the session has progressed.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Workshop	2008
20084863	Estimating Relative Complexity	<div class="content">\n    <p>Reasonably accurate estimation of user stories is necessary in order to provide the customer with development schedule predictability. Small stories are usually fairly easy to estimate, but estimates for larger stories are often accompanied by higher degrees of uncertainty. Although a large story may sometimes be broken down into smaller stories for purposes of estimation, this is not always the case.</p>\n\n<p>This workshop proposes a method for enabling a team of developers to rapidly quantify the relative complexities of larger user stories by using “tests” as the unit of estimation. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session is intended to be a highly interactive workshop and discovery session, the purpose of which is to demonstrate a rapid method of estimation that leverages the skills of every team member to arrive at estimates for medium to large user stories.</p>\n\n<p>I’ll begin the session by reviewing why we make estimates in the first place, emphasizing that the purpose of estimating is chiefly to provide the customer with development schedule predictability. I’ll also engage the group in a brief discussion on the merits of estimating using relative units (such as story points) rather than absolute ones (hours or days), touching on the meaning of the term “complexity”.</p>\n\n<p>Once this foundation has been laid, I’ll point out that most developers are probably already employing an agile practice which, if looked at differently, provides an indication of the relative complexity of stories already developed, namely test-driven development (TDD). Since more complex stories should be supported by greater numbers of unit tests, we can imagine that determining the approximate number of tests ahead of time would give us the relative complexities of a set of stories for estimation purposes.</p>\n\n<p>The trick, then, is to be able to determine how many tests might be required to support a particular story.</p>\n\n<p>At this point, I’ll ask the attendees to divide up into teams of from 3 to 6 people each. Each team will be assigned the task of coming up with relative estimates for a small set of stories from a fictitious product.</p>\n\n<p>In the first phase of estimating any given story, all team members will write down on large Post-It Notes as many “test titles” as they can imagine, as quickly as they can, and place them on a section of wall. This phase will be limited to about 5 minutes.</p>\n\n<p>In the next phase (also about 5 minutes long), each team will use “cluster mapping” to group together redundant or similar tests, arriving at a single test count for the story.</p>\n\n<p>This process will be repeated for all stories in the set. The result is a set of estimates indicating the relative complexity of the stories.</p>\n\n<p>Once all stories have been estimated by all teams, we’ll have a look at both the absolute figures (test counts) produced by all teams, as well as the placement of the stories in order of relative complexity. Correlations will be drawn where they exist.</p>\n\n<p>In summary, we’ll discuss how estimates whose units are “test count” might be mapped to the more standard estimates in unitless “story points”.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Breaking Acts	Workshop	2008
20081226	Converting Business Value into Actual Money	<div class="content">\n    <p>One of the central tenants of Agile practices is the emphasis on customer value. That’s great, but if you’re a product company then focusing on business value alone isn’t enough. You need to convert business value into actual money flowing into your company. </p>\n\n<p>Consider, for example, a company that offers their product through a perpetual license with an annual maintenance fee. Customers expect the product to continue to improve in every release. But if the company doesn’t understand how to extract more money from its customers for each release, pretty soon they won’t be able to keep releasing at all!</p>\n\n<p>Same structure, different rules for other kinds of products. Consider a SaaS provider of software solutions that charges a monthly fee per user. Should the product simply keep getting better every month for the same price? </p>\n\n<p>This tutorial will provide concrete examples of how to structure backlogs and releases to ensure that while you’re providing business value to your customers, they’re equally motivated to recognize this business value and put more money back into your product. It will teach value exchange models (how your customers exchange money for value) and profit engines (how you make more money for providing more value) so that you can continue to practice Agile for a long time.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This tutorial will consist of a slides and interactive exercises. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20084388	Business Value: Discovering what it is and what to do about it	<div class="content">\n    <p>The first principle of Agile is to deliver value to the customer.  Understanding Business Value better can often do more than anything else to make your efforts better.  We need to improve our Business Value Engineering.</p>\n\n<p>In this Discovery Session, we intend to look at the principles and values that underlie Business Value and its uses.  And we will look at how we practice Business Value Engineering throughout the life of the effort.  Expect challenges, not pat answers. This discussion will enable you to improve your Business Value Engineering. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The Socratic method will be the main facilitation technique.   </p>\n\n<p>Description\nIntroductions and why you are interested in this topic<br />\nBasic organization of the workshop<br />\n    What is Business Value<br />\nWhy is Business Value important? Ideas and experiences.<br />\nWhat is Business Value?  Break into small teams to discuss.  Then each team shares.<br />\nWhich definitions of business value align best with which people?  (eg, with customers, with shareholders, with workers)<br />\nWhat do customers really want?  What did you buy “today” and why?<br />\nDoes the Business Value of a project ever change?  Why?  How do we discover that change?  Ideas and experiences.<br />\nTools used to identify Business Value.  Brief discussion to identify and explain.<br />\nIn a project, who should care about Business Value?  And who is responsible?<br />\nDoes Business Value seem easier or harder now?  </p>\n\n<p>2nd Section: <strong>What do we do about it?</strong>  </p>\n\n<p>• Cost-benefit analysis and decision-making. Are they key in the use of Business Value?  Is the time value of satisfaction important?</p>\n\n<p>• At what level do people need to agree on what Business Value means for their effort?  (Team, Dept, Firm, Supply Chain)</p>\n\n<p>• What should we do before we commission an IT project?</p>\n\n<p>• What should we do once a project is commissioned (but before iterations start)? (when the Product Backlog is/ Stories are created)</p>\n\n<p>• What should we do in the Iteration Planning Meeting?</p>\n\n<p>• What should we do during an Iteration?</p>\n\n<p>• What should we do at Iteration Review?</p>\n\n<p>• What should we do at Release Time? What should we do at the end of an IT Project? What do we do some time after an IT project is over?</p>\n\n<p>• Can we use Business Value across multiple projects?  If so, how and when?</p>\n\n<p>• If there is change and learning about Business Value, how is that best incorporated?</p>\n\n<p>• Who will perform the practices you’ve proposed?</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Workshop	2008
20080552	Business Value - Soup to Nuts	<div class="content">\n    <p>A few years ago Andy Pols and Chris Matts wrote a Cutter Article called “The Five Business Value Commandments”. In the article, Andy and Chris explained what Business Value was and the principles that should be used to determine it. </p>\n\n<p>This session explains business value and presents their experience to date. </p>\n\n<p>This interactive session covers</p>\n\n<p>What is business value?\n“Bad” business value statements.\nWar Stories.</p>\n\n<p>It would appear that the key to successfully implementing business value is short production releases with automated acceptance testing to ensure quality.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li><p>What is business value? A very SHORT introduction to business value modelling.</p></li>\n<li><p>Business value - The Case Study. An exercise to allow participants to create a business value model based on a real life case study.</p></li>\n<li><p>Thats not business value! An exercise to determine whether business value statements are actually business value or simply nonsense. This will be canned examples plus examples from the group.</p></li>\n<li><p>Business value - How it really works! Short experience report by Chris on Andy on how their approach to business value has evolved over the centuries to cater with different issues. Why are short iterations so important to changing stakeholders investment behaviour. Why IT should never sit in the middle of the business conversation on investment. + Questions.</p></li>\n<li><p>Group discussions - The room breaks into groups to discuss business value…. War Stories, Clinics ( What / How / Why do I? ) et al.</p></li>\n<li><p>Summary - An accellerated goldfish bowl to suck the learning from the room. We hope to video this part of the session as well as record it on flip-charts.</p></li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Other	2008
20083266	Toward Enterprise Agile Scalability:  A New Way to Look at Accounting for Agile Software Development Costs	<div class="content">\n    <p>Abstract: Traditional corporate accounting standards and practices have evolved around a waterfall based IT investment model where IT projects are delivered in discrete, time boxed phases.  As organizations adopt an iterative agile development and delivery model, they may encounter inherent constraints and points of friction with legacy accounting practices and policies which could adversely impact Agile adoption and scalability.  Success requires a paradigm shift which starts with an understanding of the FASB accounting standards and mapping existing accounting standards to the Agile development lifecycle.\nBenefits for participants: Participants will become familiar with the FASB accounting  standard (SOP 98-1) which outlines the accounting rules for appropriately expensing or capitalizing costs associated with software development; and learn how to apply these rules to agile design, development, deployment and iteration management.   </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Content outline: This tutorial will cover the following topics: \n1.  Understanding key components of FASB’s accounting standard SOP 98-1:  Accounting for the Costs of Computer Software Developed or Obtained for Internal Use (ACC Section 10,720) through an Agile Lens\n2.  Learning what work can be capitalized on an Agile project\n3.  Learning how to map and apply this knowledge to your organization </p>\n\n<p>Timeline:</p>\n\n<p>(10 minutes) Foundational problem:  History   </p>\n\n<p>(20 minutes) Exercise 1:  Guidance on Understanding Interpreting Accounting Law through an Agile Lens - Hands-on exercise developing a rule based scorecard </p>\n\n<p>(20 minutes) Exercise 2:  Applying the accounting rules to the Agile Software Development Lifecycle</p>\n\n<p>(20 minutes) Exercise 3:  Mapping to your organization - crafting an action plan to partner with (and educate) appropriate finance and management audit</p>\n\n<p>(20 minutes) Discussion of key learning points;  Q &amp; A</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20084944	Crafting User Stories â€“ Four Experts and The Audience Weigh In	<div class="content">\n    <p>User stories play a central role in Agile requirements, planning and implementation. However, experts have different formulas for crafting stories and teaching others how to do it.  </p>\n\n<p>In this session, Jennitta Andrea, Gil Broza, Mike Cohn and Ron Jefrries will share their unique, similar or different perspectives on such issues as:</p>\n\n<ul><li>Format: Do stories have a typical format or does that just get in the way?</li>\n<li>Scope: What is / is not a User Story? </li>\n<li>Size: Does size matter?  </li>\n<li>Splitting: What is it?  Is it needed?  If so, when?   </li>\n<li>Authors: Who writes or changes User Stories?</li>\n<li>Details: What amount? What belongs and what doesn’t? How much is in the conversation?</li>\n<li>Tasks: Their importance or relevance for writing good stories.</li>\n<li>Estimates: Are estimates necessary for a User Story to be a User Story?   Or are they optional?</li>\n<li>Acceptance: When and how are acceptance criteria defined? Who can accept a story? Are there shades of acceptance (e.g. done and done-done)</li>\n<li>Evolutionary Design: Does it play a role in crafting great stories?</li>\n<li>Planning: The role of stories in Planning</li>\n</ul><p>We expect plenty of agreements and disagreements among the speakers — all of which should provide for lots of fun and helpful insights.  </p>\n\n<p>Joshua Kerievsky will be the session’s moderator.  He will actively include the audience, make sure the speakers are well behaved and do his best not to speak his own opinions!</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The panel will run roughly like so:</p>\n\n<ul><li>Moderator will introduce one of the topics mentioned above or a topic submitted by the audience</li>\n<li>Each speaker will have 2 minutes to say (and/or show via projector) something about the topic.</li>\n<li>There will be a general, time-boxed discussion - with moderator encouraging speaker and audience participation.</li>\n<li>At end of time-boxed period, moderator will poll the audience on whether to continue or move on to the next topic.</li>\n<li>Repeat</li>\n</ul><p>Throughout the session, we will have someone play the role of journalist, who can highlight key points, learnings, differences from each mini-discussion.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Panel	2008
20082541	Delivering Measurable Business Value with Scrum	<div class="content">\n    <p>Everybody is talking about “delivering business value”, but what does this mean in Scrum? Scrum emphasizes the Product Owner’s role in prioritizing backlogs and building the highest priority features first. But how can a Product Owner demonstrate measurable value delivered? More importantly, how do leaders articulate the real project or product goals for everyone to clearly understand? </p>\n\n<p>The answers to these questions go beyond Scrum’s world of features, user stories, product and sprint backlogs. Attend this session to learn a method for delivering measurable business value with Scrum.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session will be a presenter-lead with small-group exercises inner-mixed to illustrate the concepts. Participants will be encouraged to ask questions, agree, disagree and otherwise engage in discussion on how business value and Scrum relate to one another.</p>\n\n<p>I’ll cover a background on my experiences as a technical architect and development team lead using XP (2001 - 2007), Scrum (2006 - present) and Evo (2005 - present) and how I came to be passionate about this topic. I’ll create exercises that will give attendees practice with taking real-world business problems and breaking them into measurable objectives, defining failure and success targets, and implementing measurement plans to capture the data going forward. During the talk I’ll inner-mix case studies from clients that have used this approach including their results and feedback from implementation.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20081608	Prioritizing and Sequencing Features: several techniques including â€œMinimal Marketable Featuresâ€	<div class="content">\n    <p>short form for 90 word session description: </p>\n\n<p>Basic backlogs for a simple project are easy to prioritize and sequence.  Backlogs for complex programs of many teams and many interdependent projects, (or complex product suites) are harder to measure value and prioritize.  Deriving the optimal story sequence in the release plan in order to maximize project value requires a more scientific approach.  </p>\n\n<p>This session will introduce a set of heuristics and tools that will provide a solid introduction and practical tools.  It will also describe the flaws of some commonly used financial model project selection techniques.  </p>\n\n<p>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</p>\n\n<p>Basic backlogs for a simple project are easy to prioritize and sequence, and we trust our Product Owners to prioritize the backlog and sequence stories into the release plan, after considering information on dependencies and risks provided by the team.  </p>\n\n<p>Backlogs for complex programs consisting of many teams and many interdependent projects, (or complex product suites) are much harder to measure and compare value and prioritize.  Deriving the optimal story sequence in the release plan in order to maximize project value requires a more scientific approach.  </p>\n\n<p>This session will introduce a set of heuristics and tools that will provide a solid introduction and practical tools.  It will also describe the flaws of some commonly used financial model project selection techniques.  </p>\n\n<p>Along with Kano and others, we will introduce “Incremental Funding Method” (Denne and Cleland-Huang) that can help you with roadmap and release planning.  The Incremental Funding Method is a data driven financially <em>informed</em> (recognizes  intangibles) approach to backlog prioritization and sequencing.  IFM and the concept of the “Minimal Marketable Feature” fit harmoniously with incremental delivery of software per Agile, and can help define a path to dramatically accelerate ROI and reduce risk in projects. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ul><li>Features, epics, themes, stories, and backlog management</li>\n<li>Measuring value in features</li>\n<li>Quick review of standard financial measures (ROI, NPV, IRR, breakeven, etc); which are more or less useful in an Agile/Lean environment, and how do measures apply to agile </li>\n<li>Introduction to several feature prioritization techniques\n<ul><li>Kano analysis, theme screening, theme scoring, relative weighting, buy a feature and other games</li></ul></li>\n<li>Incremental Funding Method \n<ul><li>Defining Minimal Marketable Features</li>\n<li>Explain the IFM Heuristic (guidance to approach optimal time adjusted NPV for ea possible sequence start date) </li>\n<li>How to make projects “self-funding” with IMF </li>\n<li>Sequencing features with complex dependency chains </li>\n<li>Prioritizing and sequencing features w intangeable benefits </li>\n<li>Incorporating measures of risk </li>\n<li>Difference between financially <em>informed</em> (IFM), and financially driven</li>\n<li>How do we talk to Finance and Line of Business to manage value better, and become more Agile together</li></ul></li>\n</ul><p>What is the IFM heuristic?\nThere is no algorithmic solution to maximizing the NPV of a software development project with multiple features. The problem is a category that mathematicians call NP-Complete. The only way to find the optimum sequence is to calculate the NPV of all feasible sequences and choose the best one. For all but the simplest projects, this is not computationally feasible in finite time. The IFM heuristic provides a way to quickly identify a near-optimal sequence without resorting to unfeasible computational overhead. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20085075	User Story Mapping: making sense out of your user story backlog	<div class="content">\n    <p>Is your agile project buried under a mountain of user stories? As you add stories, does your vision of the product you’re building grow hazier? As story count increases, do business stakeholders become more frustrated with prioritization? Do you find it difficult to communicate the big picture of what your system does? User story mapping is a simple approach to gathering and organizing user stories. A story map will help you prioritize stories into sensible releases that maximize value by placing emphasis on the users of the software and what they can accomplish when the software is released. In a fun and fast-paced tutorial, Jeff Patton reviews the basics of good agile stories and describes approaches for gathering and combining user stories into a story map. Leverage story maps for planning incremental releases and for breaking down large stories into smaller pieces of work. </p>\n\n<p><img src="http://www.agileproductdesign.com/downloads/story_map1.jpg" alt="building a story map on the office floor" title="" /><img src="http://www.agileproductdesign.com/downloads/story_map2.jpg" alt="talking in front of a story map" title="" /></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This tutorial is taught by alternating presentation and discussion with hands-on exercises that allow participants to learn by doing.  Participants will function in small teams to build a “story map” then learn to leverage that story map to tell bigger stories about their product, plan incremental releases, and thin releases down to more economical feasible sizes while retaining usefulness to users, and value to stakeholders.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20082887	From Concept to Product Backlog - What Happens Before Iteration 0?	<div class="content">\n    <p>Delivering value early and often is a well established agile practice. But rushing directly into Iteration 0 development can lead to tunnel vision (thereby building the wrong product)  or unnecessary (thereby wasteful) refactoring. This tutorial describes what needs to happen between when a project is conceived by a customer and when software development can start in earnest. It identifies the artifacts (beyond story cards) that may need to be produced, whether and when they should be produced, which activities can be used to produce them and who should be involved.</p>\n\n<p>Many agile methodologies assume a customer (or product owner) walks into the room with a swack of money and a pile of story cards and tells the development team to start building the functionality described on the top few cards. The same methodologies often eschew any form of “big up front” activities yet often leave us in such a rush to deliver business value that we don’t have time to do many traditional “up front” activities like user/task research and find ourselves battling the resulting “tunnel vision” for the duration of the project. We may also find ourselves struggling to feed the hungry development machine with high-quality user stories and acceptance tests thereby reducing the entire team’s effectiveness. </p>\n\n<p>While a pile of story cards may be the first thing the development team sees, this is rarely the first set of activities that happens on a project, agile or otherwise. In practice, the customer usually comes with a problem and maybe some vague idea of how to solve it with technology. Whoever they come to has to help them crystallize the vision, design the product, get the necessary funding and populate the initial product backlog. If that someone was you, would you know how to help them get to Iteration 0 and a staffed development team?</p>\n\n<p>This tutorial provides an overview of what needs to go on “behind the scenes” between when a project is conceived and when development can start in earnest. It identifies the artifacts that may need to be produced, whether and when they should be produced, which activities can be used to produce them and who should be involved in those activities.</p>\n\n<p>This tutorial complements the more detailed tutorials on Writing User Stories, and Iteration 0 Activities which provide detailed guidance on how to carry out individual activities/practices to produce specific artifacts. This tutorial shows how everything fits together and how the activities and artifacts support each other and how this supports subsequent development. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>90 minute session – somewhat interactive<br />\no   Lecture interspersed with short exercises to engage audience</p>\n\n<p>Outline:\n* Recap of development phase of agile projects<br />\n* Exercise: What do we need to get started development?<br />\n* The traditional role of Iteration 0<br />\n** Define initial Architecture<br />\n** Setup Infrastructure &amp; Tools<br />\n* Overview of pre-Iteration 0 activities &amp; artifacts<br />\n* More detailed description of each Pre-Iteration 0 Activity and Artifacts …<br />\n** What it is<br />\n** Why we do it<br />\n** How it relates to other activities<br />\n** When we need it and when we don’t<br />\n** Who needs to be involved?<br />\n* … interspersed with the occasional exercise (180 minute format)  such as\n** Generate a list of stakeholders and goals for a sample system\n** From a detailed feature list, distill down to a product box\n** From an initial ist of features, develop a paper prototype to evolve into a UI Story Board\n** Starting with a high level feature list and a UI Story Board, Annotate  the board with detailed story cards for particular features\n* Recap of entire agile process from Concept to Backlog to Cash  </p>\n\n<p>The topics I would cover would include: (intended to be nested UL’s)</p>\n\n<ul><li>What is the timeframe?<br />\n** More than just Iteration 0<br />\n** Goes from whenever the idea is hatched to start of iteration 1.<br />\n*** Precedes or Includes Iteration 0 activities<br />\n** May precede or run in parallel with procuring (seed) funding  </li>\n<li><p>What are the goals?<br />\n** First, Understand what we are building well enough to describe it to others<br />\n** Second, Understand it well enough to start designing the product<br />\n** Third, Understand it well enough to do overall effort/cost/timeframe sizing<br />\n** Fourth, Understand it well enough to engage the right technical resources<br />\n** Finally, Populate the Product Backlog so that we can start development  </p></li>\n<li><p>What are the artifacts?<br />\n** Business Needs or Goals<br />\n*** Stakeholders and Goals<br />\n**Product/Solution vision<br />\n*** Key features list<br />\n*** Key Use Case list<br />\n*** Release Plan<br />\n*** UI Storyboard<br />\n**Feature Breakdown Structure<br />\n*** Epics / Proto-Stories<br />\n*** User Stories (for early iterations of first release)<br />\n*** Tests/Examples (ditto)<br />\n*** Expansion factor (for estimating overall size)  </p></li>\n<li><p>What are the activities?<br />\n**Product Envisioning Workshop<br />\n*** Stakeholders and Goals<br />\n*** In/Out of Scope list<br />\n*** Use Case List<br />\n*** Features List<br />\n*** Elevator Statement<br />\n*** Product Box<br />\n** Release Planning Workshop<br />\n*** Initial Release Plan<br />\n** Product Design Workshops or Sessions<br />\n*** Paper Prototyping<br />\n** Product Suitability Testing<br />\n*** Wizard of Oz Testing<br />\n**Story-Writing Workshops<br />\n*** Story Definition<br />\n*** Test Definition  </p></li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20083073	Creating Shared Understanding with Cards	<div class="content">\n    <p>In the fable of the blind men and the elephant, each of the blind men touches one part of the elephant (e.g. side, tusk, tail) and develops an incorrect perception of the elephant as a whole.  This fable provides an excellent analogy of the customer community; each person and/or department represented in the community will have a different perspective of the problem and/or solution. In this session you will learn (and practice!) how index cards can be used to create shared understanding when defining stories and planning releases.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session is primarily aimed at Agile 2008 attendees who are new to agile, and/or using cards to create shared understanding when working with stakeholders/teams.  It covers the following:</p>\n\n<p><strong>Why Shared Understanding?</strong> (10 minutes). \nDuring this part of the session we will introduce the sorts of situations typically encountered where people have different perspectives and often leave a requirements / planning session thinking they are all agreed, when in fact, they leave with different understandings about what was agreed.  </p>\n\n<p><strong>Introducing Cards</strong> (40 mins).\nAn exercise to introduce a card based technique that can help to reduce this issue.  The exercise is non-software so everyone can be involved and participate.  We ask participants to work in pairs, and first try the exercise without cards and then try it again using cards.  Time to reflect on the use of the techniques is also built into this section.</p>\n\n<p><strong>Using cards to prioritize</strong> (10 mins).\nAgain, in small groups, we set-up an exercise in prioritizing with cards, so that attendees get a sense of the different uses the card technique opens up for them.</p>\n\n<p><strong>Using cards to create models</strong> (25 mins).\nContinue exploring the uses of cards to create models using cards, and how that impacts the quality of the model and the shared understanding gained by the different participants in the modeling exercise.</p>\n\n<p><strong>How can you use cards tomorrow?</strong> (5 minutes).\nA summary of what has been covered and how attendees could use this technique on their projects tomorrow.</p>\n\n<p>Further information concerning the exercises is included in the sample slides attachment.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20084865	Beyond Agile!  Product Innovation Debate: What and who drives innovation?	<div class="content">\n    <p><strong>Program Description</strong>:</p>\n\n<p>Evidence is mounting that Agile adoption is finally mainstream, so what’s next?</p>\n\n<p>This panel draws the discussion away from process and technology to focus on what we build, not just how we build it. Panelists discuss the important role of product innovation and debate philosophies about how to source innovation.  The panel tackles questions like what role Agile plays in helping or hampering product innovation; should innovation come from designers, customers, or elsewhere; where does product design meet product innovation; and how do we deliver innovation?  </p>\n\n<p><strong>Submission Abstract</strong>:</p>\n\n<p>For years software conferences have buzzed with innovation.  We’ve witnessed innovation in the forms of waterfalls, spirals, maturity models, unified processes, modeling languages, structured methods, Object-Orientation, extreme programming, and Agility.  At some point, though, shouldn’t we focus on product innovation?  If so, who is responsible for making product innovation happen?</p>\n\n<p>With the high adoption rate of Agile, now is a great time to shift our attention from process innovation to product innovation.  Nobody buys a new TV because it was developed with the latest process.</p>\n\n<p>Agile delivery teams sometimes expect product innovation to “just happen” with Agile projects.  Rapid feedback, stakeholder involvement, user stories, and daily stand-ups are terrific but they won’t necessarily drive product innovation. Techniques like Concept-driven design and Outside-in product development are used in other industries to drive product innovation but are slow to be adapted for software.  </p>\n\n<p>This panel hits the product innovation issue at full speed. Some panelists will challenge the basic assumption that product innovation isn’t part of the typical Agile project.  The audience will hear thoughtful opinionated panelists exchange ideas about how to obtain the best innovation results and whether innovation should be sourced from users and customers, from genius product designers, or from other mechanisms.  What approach wins between social innovation democracies and competitive design?  Are they even different anymore?</p>\n\n<p>A major question for the panel will be, CAN CUSTOMERS AND USERS DESIGN INNOVATIVE PRODUCTS?  How wise it is to use customers/users as product owners?  Agile teams place customers and users in roles where they make key product design decisions, often without any product design training.  How innovative are the results?  Some panelists will argue that customers and users are not qualified as product designers and, for that matter, neither are engineers.  Innovation injects itself into a product when designers are forced to solve everyday problems differently.  “How can I give them a scroll bar without giving them a scroll bar?” (See the iPhone).  Other panelists will strongly disagree with this point of view.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>FORMAT:  Moderated debate format (not “open mic” format)</p>\n\n<p>There are so many controversial aspects to this topic that a panel/debate is the best way to surface the many differences. The organizers propose to provide a moderator who can keep the session engaging and moving.  The organizers believe panels should be as entertaining as they are informative.  </p>\n\n<p>Our moderator will take a few filtered audience questions, probably on index cards.</p>\n\n<p>MODERATOR: \n<strong>Susan Abbott</strong>, Professional Moderator &amp; Customer Research Strategist\n<a href="http://www.abbottresearch.com/whoWeAre.htm" title="http://www.abbottresearch.com/whoWeAre.htm">http://www.abbottresearch.com/whoWeAre.htm</a></p>\n\n<p>ORGANIZERS:\nThad Scheer, Luke Hohmann, Scott Pringle, Peter Hodgkins, and Erik Stein.</p>\n\n<p>PANELISTS: </p>\n\n<p><strong>Rich Mironov</strong>, CMO, Enthiosys</p>\n\n<p><strong>Thad Scheer</strong>, Managing Partner, Sphere of Influence, Inc.</p>\n\n<p><strong>Aaron Williams</strong>, VP, SAP</p>\n\n<p><strong>Martha Amram</strong>, CEO &amp; Founder, Green Now USA</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Panel	2008
20081728	Extremely Short Iterations as a Catalyst for Effective Prioritization of Work	<div class="content">\n    <p>In this client organization, agile methods were not producing expected improvements, primarily because the stakeholders could not agree on priorities of the work.  The team decided to use extremely short iterations to expose the problems caused by a lack of prioritization.   Mishkin Berteig will present this case study in detail including organizational characteristics and history, the early stages of agile adoption, the crisis, the experiment with two-day long iterations, the stakeholder analysis, the importance of financial modelling in clarifying the crisis, and the resolution that emerged.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This will be a lecture-style presentation with slides and a Q&amp;A period at the end.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Experience report	2008
20083856	Establishing an Agile Portfolio to Align IT Investments with Business Needs	<div class="content">\n    <p>As leaders in a large IT organization of a Fortune 250 company, we leveraged our agile project experiences to transform how IT manages its portfolios of projects. Along the way we ran headlong into inherent conflicts between agile and legacy corporate processes and mindsets. We recognized the need to transform those legacy processes and mindsets to effectively manage project investments in an agile manner. In this session we discuss the challenges we faced and the successes we realized with IT investment funding, change management, and governance.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Twenty minute experience report presentation followed by ten minutes of question and answer. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Experience report	2008
20084655	Using Agile for Buy vs. Build Decisions	<div class="content">\n    <p>When exploring possible IT solutions to business problems, one of the key questions that is typically asked is whether it makes more business sense to either build the solution entirely, buy an off-the-shelf package, or some combination.  This decision can be just as time-consuming and cost intensive as the actual development itself.  An opportunity exists to apply agile techniques in order to better focus the buy vs. build decision. In order to maximize business value, the buy vs. build process should make every effort to leverage the strengths of Agile.</p>\n\n<p>In this session, we will explore our experiences in applying Agile techniques to help in this key decision. The following concepts will be presented and examples provided from our experiences to date that illustrate how agile can be used to address buy, build or a combined approach:</p>\n\n<ol><li>Managing the selection process using iterative techniques.</li>\n<li>Separating the buy vs. build decision/process from the product backlog.</li>\n<li>Utilizing the product backlog for vendor scorecarding and evaluation.</li>\n<li>Utilizing Agile estimation and planning techniques for costing both buy and build scenarios.</li>\n<li>Allowing business product owners to be more engaged in the selection process.</li>\n<li>Identifying which user stories are buy candidates and which are build candidates in a combined build and buy approach.</li>\n<li>Communicating buy vs. build decision to external stakeholders.</li>\n</ol><p>This information will be shared in a retrospective format, identifying specific successes and lessons learned in applying Agile to this decision.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Presentation: 25 minutes<br />\n- 5 minutes: Motivation, why agile for buy vs. build, Background on ARC, our business and our specific buy vs. build examples<br />\n- 10 minutes: Agile concepts applied to the mechanics of buy vs. build,  Results to date<br />\n- 10 minutes: Successes and lessons learned</p>\n\n<p>Q&amp;A: 5 minutes</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Experience report	2008
20084739	Adventures in Agile Contracting: Evolving from Time and Materials to Fixed Price, Fixed Scope, Fixed Schedule Contracts	<div class="content">\n    <p>For Info Tech, Inc., the transition to Agile practices three years ago lead to a change in the way we collaborate and contract with our long term, mostly government customers. Our evolution covered Time and Materials (T&amp;M) contracts, a Hybrid of T&amp;M and Fixed Price and most recently a Fixed Price, Fixed Scope, Fixed Schedule contract that supports Agile development. Our goal has been to meet our customer’s needs for predictable results while maintaining our commitment to agile practices. Key success factors include developing a responsive contract modification process that allows for quick change management and identifying non-tangible scope deliverables beyond the software components.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Key Benefit for Participants:</strong>  Gain foresight into the evolving and collaborative processes that lead to successful agile contract development and implementation with one or more fixed constraints (scope, cost, schedule).</p>\n\n<p><strong>Outline</strong>\nThe presentation and experience report will take the audience through the following outline:  </p>\n\n<pre><code>I.   Introduction  \n\nII. Cultural Shift Transitioning from Waterfall to Agile in Consulting Services  \n\n    A.  Stage Zero: Waterfall, Fixed Constraints – software met\n        customer needs for predictable scope, cost and end date \n        but results did not always meet customer requirements for\n        usability and high ROI  \n\n    B.  Stage One: Agile, time and materials contracting \n\n    C.  Stage Two: Agile, time and materials contracting, \n        adding fixed price milestones  \n\n    D.  Stage Three: Agile, with Fixed triple constraints of \n        scope, schedule and cost  \n\nIII.    Stages of Evolution in Agile Contracting  \n\n    A.  Agile Contracting in Time and Materials (T&amp;M)  \n\n        1.  Customer Collaboration and Expectations Management –\n        with scope and priorities refined each sprint in parallel with ongoing\n        design optimization (refactoring) came the perception of variable\n        cost and schedule to complete expected scope.   \n\n        2.  Management and Contracting Processes – Payment based\n        on effort per sprint with annual assessment and changes to \n        contract based on projected remaining scope  \n\n        3.  Benefits and Lessons Learned from Contract Model – Full \n        commitment to Agile practices produced optimal code design. \n        Scope allowed to change in less time with less management. \n        Learned to improve customer awareness of estimating at \n        complete in Agile.  \n\n    B.  Agile Contracting in T&amp;M/Fixed Constraints Hybrid  \n\n        1.  Customer Collaboration and Expectations Management \n        focused on allowing Agile practices to continue while producing\n        agreed upon deliverables.  \n\n        2.  Management and Contracting Processes similar to T&amp;M\n        approach with portion of funds allocated to a set number of\n        deliverable milestones based on schedule  \n\n        3.  Benefits and Lessons Learned from Contract Model – Improved focus\n        on minimal requirements, however, we began reducing design optimization\n        per sprint in order to align with fixed schedule milestones  \n\n    C.  Agile Contracting in Fixed Constraints   \n\n        1.  Customer Collaboration and Expectations Management focuses on more\n        detailed review of product backlog items and requirements up front to\n        develop contract that fits within fixed triple constraints  \n\n        2.  Management and Contracting Processes – Payment based on\n        accepted scope deliverables per sprint. Fixed constraints require\n        additional time and management resources to address contract\n        modification processes throughout the project.  \n\n       3.   Benefits and Lessons Learned from Contract Model – Completing\n        functionality faster but less flexibility in Agile practices used\n        to optimize code design and infrastructure may lead to more\n        maintenance and enhancement effort than envisioned. Learned\n        to improve customer awareness of non-tangible deliverables \n        and adherence to minimal requirements.  \n\n    D.  What Lies Ahead  \n\n        1.  Continuing Evolution – ongoing assessment of results and \n        integration of process improvements to address any changes in \n        customer needs related to project administration and contract terms  \n\n        2.  What We Need and No More – keep processes streamlined\n        and supportive of the fundamentals of Agile  \n\nIV. Conclusion  </code></pre>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Experience report	2008
20080282	Money for Nothing and Your Change for Free: Agile Contracts	<div class="content">\n    <p>Working with leading consultancies in Europe, Russia, and the U.S. has generated interest in basing entire company strategies on Agile contracting and delivering software products and projects. The “Money for Nothing” strategy works when customers want fixed price estimates for the entire contract up front. The Agile contract allows termination of the contract early when the value of features drops below an ROI criteria. The contract allows the customer to save 80% of their remaining funds by giving the Agile vendor 20% of the remaining contract value in return driving the margins of an Agile contractor from 15-20% up to 50-80%.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session will:</p>\n\n<ol><li>Train participants on how to develop a more effective Agile business strategy.</li>\n<li>It will show them how to create options in standard contracts that clear the way for Agile development.</li>\n<li>The way to terminate projects early to save money for the customer and increase margins for the vendor will be carefully described.</li>\n<li>The way to improve the development environment to encourage a “brain drain” from waterfall companies into Agile companies will be reviewed.</li>\n<li>Some individuals and companies after experiencing this presentation have radically altered their business strategies. Their resulting rapid growth in size and profitability will be used as case studies in the presentation.</li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Talk	2008
20083214	Successful Customer Collaboration Resulting in the Right Product for the End User	<div class="content">\n    <p>In May 2007, our DISA customer asked Pragmatics to support the requirements definition and development of a new web application for the Joint Forces Command (JFCOM) Joint Staff (JS).  JFCOM needed to have the application built, delivered and fielded in a tight, six-week time frame.  </p>\n\n<p>This experience report describes our successful development effort from initial requirements definition to successful delivery, fielding, and acceptance by end users.  Topics include the extensive use of agile practices, including successful collaboration with the customer which resulted in the right product for the end users. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session would primarily be PowerPoint slides explaining our experience and how we used agile practices to deliver and field a successful, useful product to the end user.  Collaboration and feature prioritization with the customer will be emphasized. Questions and answers can occur throughout the session.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Experience report	2008
20084568	The product owner team	<div class="content">\n    <p>Being a product owner is a difficult job.  BT has been using product owner teams to manage the details of “what should be built”. These teams own the content and the breakdown of user story epics into user stories for delivery teams and act as proxy customers to those delivery teams.  This experience report examines a project, implementing an up to 24Mbps service over the 21CN network, which was successful in applying the approach and concludes with some advice on how best to apply Product Owner Teams.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>20 minutes presentation\n10 minutes for questions</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Experience report	2008
20081295	Building Great Products, Incrementally: An Agile Product Owner's Primer	<div class="content">\n    <p>Agile development allows product managers to use tight scope control to deliver products to market fast and solve more customer problems. But sometimes, “minimum credible” gets pushed too far, and teams release incomplete features that frustrate their customers.   </p>\n\n<p>In this tutorial, we’ll explore how an effective agile product manager can tightly manage scope, deliver features fast, and make time to refine designs and incorporate customer feedback.  You’ll learn how to balance new development, feedback, and debt management to satisfy stakeholders while building a great product.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This tutorial will be an interactive lecture including discussion and an excercise.</p>\n\n<p><em>Agenda</em></p>\n\n<ol><li>Tutorial Overview/Introductions (5 minutes)</li>\n<li>The Agile Product Paradox: How Agile enables you to make better products faster, but also thinner products faster (15 minutes)</li>\n<li>What does “Minimum Credible” mean? How much scope control is enough? (10 minutes)</li>\n<li>Managing Stakeholder Expectations (30 minutes)</li>\n<li>Blending Backlogs: Different types of needs (10 minutes)</li>\n<li>Exercise: Rocks, Gravel, and Sand (10 minutes)</li>\n<li>Exercise debrief and summary (10 minutes)</li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20081084	Prioritizing Your Product Backlog	<div class="content">\n    <p>The biggest risk to most projects is building the wrong product. Regardless of how fast your agile team becomes, how brilliant your technical solutions are, or how many automated tests run continuously, nothing matters if you’re building the wrong product.</p>\n\n<p>In this tutorial we’ll look at non-financial ways of both prioritizing product backlog items and choosing among competing project ideas. Included are relative weighting, theme screening, theme scoring, and Kano analysis.</p>\n\n<p>The techniques are easy, the concepts are powerful. You’ll return home with practical knowledge about applying these straightforward techniques.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Prioritizing at the Right Level (10 minutes)</strong>\nThis section describes the approach that will be taken during this session and then presents the view that the product backlog must be prioritized at the right level. Prioritizing efforts are burdensome and confusing if done with features that are too small; for example, which is higher priority, the front left wheel of a car or the front right wheel? Prioritizing is useful at a higher level (the air conditioning system vs. the transmission).</p>\n\n<p><strong>Non-financial Prioritization (80 minutes)</strong>\nThis section will describe some non-financial prioritization techniques such as Kano analysis, theme screening, theme scoring, relative weighting, and analytic hierarchy process. A little over half of this type will be spent on two hands-on exercises to help participants understand the techniques.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20081710	Manager's Introduction to Test-Driven Development	<div class="content">\n    <p>The purpose of this session is to help non-technical project managers understand the business value of one of the popular agile software development techniques. It is designed to help project managers understand the impact on their projects when their technical teams use the agile technique, test-driven development (TDD). </p>\n\n<p>Audience: (1) Project managers working with agile development teams, and (2) technical agile practitioners looking for arguments to convince their management that agile methods are worthy of adoption.</p>\n\n<p>We begin by demonstrating the technique of TDD using a tool familiar to nearly all project managers: Microsoft Excel. Clarke Ching developed a <a href="http://www.clarkeching.com/2006/04/test_driven_dev.html">TDD exercise using Microsoft Excel</a> that many others have used as the basis for demonstrations and presentations on the subject. We use this exercise to demonstrate the red-green-refactor TDD cycle with a tool familiar to nearly all project managers so that they can see what the buzzword means and get a feel for the technique. This is followed by a presentation focusing on the effect of TDD on project timeline, code quality, cost of development, cost of ownership/support, and longevity of the code in production. The core of the message is that TDD helps a team control the accumulation of technical debt in the codebase, and this in turn controls costs, reduces time to market, and results in a cleaner product that will have a longer production lifetime. </p>\n\n<p>A copy of Clarke’s Excel exercise and our presentation slides are available from <a href="http://davenicolette.wikispaces.com/TDD+for+Managers" title="http://davenicolette.wikispaces.com/TDD+for+Managers">http://davenicolette.wikispaces.com/TDD+for+Managers</a>. There are also notes from past presentations of this session.</p>\n\n<p>Karl and Dave gave this presentation at Agile 2007 to an audience of about 15 people, all(?) of whom were non-technical project managers. Dave gave the presentation at XP Days Germany 2007 to an audience of about 40, of whom at least 30 were technical professionals who were looking for business-focused arguments to make with their own management to support the idea of trying agile methods at their companies. The session can be useful to both types of participants.</p>\n\n<p>Agile methods are not usually applied in isolation, and this presentation always generates discussion that leads into the value proposition of other agile practices and of agile generally. Talking about the business value of TDD naturally leads to closely-related practices and tools such as version control and continuous integration. The session can be a good way to break the ice with managers who are new to agile concepts, since it gives them something concrete they can play with to get a sense of the value. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The 90-minute time slot is divided into three 30-minute segments:</p>\n\n<p>(1) Very brief intro followed immediately by the live demo. Participants are welcome to follow along on their own laptops, too.</p>\n\n<p>(2) Talk with slides explaining the business value of TDD in terms of its effect on project timeline, development cost, cost of ownership of the resulting solution, and longevity of the resulting solution.</p>\n\n<p>(3) Interactive discussion period. Any and all issues related to the business value proposition of agile are welcome.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Demonstration	2008
20081159	Get Your Agile Project Started on the Right Foot: Requirements and Architectural Envisioning	<div class="content">\n    <p>At the beginning of a project your stakeholders will invariably ask how much is it going to cost, what are you going to build, how long is it going to take, and how are you going to build it.  To answer these questions you’re going to have to do some initial, high-level modeling of the requirements and of the architecture of the system during the initiation effort of your project.  Agile Model Driven Development (AMDD) provides strategies to gain the benefits of modeling without the pain of needless documentation.</p>\n\n<p>To get your project off on the right foot you’re going to have to do some initial requirements modeling with your business stakeholders, and some initial architecture modeling with your technical stakeholders.  This doesn’t imply that you need to write comprehensive documentation or spend months on these activities.  This presentation overviews the modeling efforts that occur during iteration 0 when you take AMDD approach to your projects.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Lecture</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Talk	2008
20082236	User Stories and Use Cases? Sure, it even makes sense.	<div class="content">\n    <p>I’m not sure why but somewhere along the way User Stories were branded ‘agile’ and Use Cases largely relegated to a high ceremony tool for non-agile methodologies. This talk sets out to challenge that view by suggesting that both User Stories and Use Cases could, and should, co-exist as complimentary techniques in effective agile methodologies.</p>\n\n<p>The terms User Story and Use Case are two pretty broad terms, so the first thing this talk does is to clarify just what I mean by each. It would of course be possible to adopt one term over the other. For example, we could call a User Story a Use Case Brief (a la Cockburn), but I offer reasons why it is helpful to keep a separation between the two terms. I also will show how User Stories can be used to provide a uniform method of capturing functional requirements, as well as system constraints.</p>\n\n<p>Once we are all on the same page I outline how, and when, User Stories and Use Cases can be used in a typical agile methodology, and importantly how one relates to (and compliments) the other. For example, typically User Stories are the technique of choice when Release Planning and Use Cases help a lot with Iteration Planning.</p>\n\n<p>As User Stories and Use Cases can exist at different levels, from business use down to component interaction, I show how a User Story can relate to more than one Use Case, and how a Use Case can be related to more than one User Story. Similarly I also look at how Use Cases can sometimes provide a ‘glue’ between User Stories.</p>\n\n<p>To illustrate how this all actually works in the wild I offer some real life examples where this approach was adopted successfully. A major benefit of this approach was improved stakeholder understanding of the project and an easier foundation for QA.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I’ve initially marked this down as a 30 minute talk. It could probably be longer but I think the key message could be delivered in 30 minutes. I expect there to be some discussion points and will probably try to allow enough time for discussion throughout the presentation. Of course neither using user stories or use cases is new so I won’t be introducing them, other than to clarify what I mean by the terms. The intention is to be thought provoking by re-casting older, possibly stale ideas in a fresh and useful way.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Talk	2008
20085047	Stop confusing my customer! The challenge of balancing frequent feature releases with dependent feature sets in large projects. 	(No description)	Customers & Business Value	Experience report	2008
20084916	Agile Planning in Action	<div class="content">\n    <p>Immerse yourself in agile planning!  This highly-interactive session creates a real-world planning environment, complete with user stories, estimates, stakeholders, and tough planning trade-offs.  As part of a team, you’ll compete to create the best product possible.  The product?  A tutorial on agile development… that our presenter will actually deliver.  Just as in real agile planning, you’ll have to figure out what your fellow attendees want to hear about, how to make difficult trade-offs, and how to fit all of the possibilities into the limited time available.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a highly interactive session, with very little lecture.  It’s aimed at beginners, but anybody can attend and enjoy the session.  The session consists of two teams competing to create an agile tutorial using agile planning techniques.</p>\n\n<ul><li>Introduction—a brief explanation of agile planning (10 min)</li>\n<li>Agile Planning—the main exercise, explained below (30 min)</li>\n<li>Judging—picking a winner (10 min)</li>\n<li>Delivery—delivering the winning tutorial (10 min)</li>\n<li>Debrief—whole-group discussion about what happened and what was learned (30 min)</li>\n</ul><p>Participants are divided into two teams of about ten people each.  These are the “product teams,” who will be using agile planning techniques to create a tutorial.  The rest of the group are “stakeholders.”  Part of the job of the product teams is to figure out what the stakeholders want.  Each team interviews stakeholders, creates stories, and prioritizes them.  I act as the programming team, estimating the stories and setting the iteration budget.</p>\n\n<p>At the end of the planning stage, the stakeholders vote to decide which product team has the winning selection, which I then deliver.</p>\n\n<p>Finally, I facilitate a group discussion about what we learned from the session, using the “Focused Conversation” technique, which involves a series of questions in the following order:</p>\n\n<ul><li>Observations</li>\n<li>Reactions</li>\n<li>Interpretations</li>\n<li>Decisions</li>\n</ul><p>Each participant leaves with one or two specific new ideas to try upon returning to work.</p>\n\n<p><em>Learning Objectives:</em></p>\n\n<p>Participants learn how agile planning works in practice, but more importantly, they get a chance to experience the frustration that arises from having to make decisions with real consequences.  Then, during the debrief, we explore those frustrations and how best to deal with them.  Participants leave with new strategies for collaborative planning, and a new appreciation for the difficulties their product owners face.</p>\n\n<p><em>Timing:</em></p>\n\n<p>I’ve proposed this session for 90 minutes, but it works even better in a 180-minute slot.  With 180 minutes, I introduce multiple iterations, which allows participants to see how iterating allows them to learn and improve their planning.</p>\n\n<p><em>Session History:</em></p>\n\n<p>I’ve delivered this session many times before, including at Agile 2007.  I’m proposing it again because it’s always received good ratings from participants, it’s tons of fun, and—because participants generate much of the content—it’s different every time.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20080823	The Customer Role in Agile Projects	<div class="content">\n    <p>This workshop is aimed at exploring and understanding the customer role on Agile projects. It will answer several common questions about this role, like: What’s an agile customer? What’s the role of the agile customer? Why is this role so important? Is the agile customer one person or a team? What traits should a agile customer have? Why does the role break down? There will be a highly interactive breakout session that will bring different perspectives on the topic from the participants experience and tries to deepen the understanding of this important issue.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The goals of the breakout session  </p>\n\n<p>Asking the team to explicitly sequence these activities accomplishes several goals:<br />\n   • It gives the team a better understand how the customer role fits in the big picture of the agile process.<br />\n   • It gives everyone on the team a better appreciation of the customer role in the project.<br />\n   • It causes the whole team to think about what is the underlying goal of each activity in order to put it in a specific order.<br />\n   • Teams realize that there are many activities that their current teams aren’t doing.<br />\n   • It gives everyone on the team a better understanding of what Agile activities need to happen in the release / iteration lifecycle.<br />\n   • Participants will learn new ideas from the other participants experiences.   </p>\n\n<p>Tentative outline:<br />\n   •    5 minutes: speaker introductions<br />\n   •    15 minutes: presentation to discuss and answer common questions around the agile customer role.<br />\n   •    45 minutes: Exercise - Teams sequence index cards that have predefined  set of agile activities in the order that they occur during the agile iterative lifecycle<br />\n   •    10 minutes: discussion about the experience of the exercise<br />\n   •    15 minutes: presentation on how the rest of the team can get involved to help the agile customer be successful   </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Workshop	2008
20081586	Energize your Strategy through Agility and Innovation	<div class="content">\n    <p>Organizations transforming to agile processes are commonly first interested in delivering business value in shorter intervals more frequently and with better stakeholder involvement. These benefits are usually achieved by adopting agile practices over traditional procedures. \n We will showcase how agility can help organizations using agile techniques to create an environment of project teams which act as entrepreneurs.  These empowered teams will introduce technology and ideas to re-invent, improve and streamline existing business processes.  We will discuss in depth how organizations can use business cases to test innovative ideas.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>After an introduction to the topic and the characteristic of innovation (30 Minutes) we will walk through a scenario of managing a project portfolio (case study). First (10 Minutes), the scenario will establish a common understanding of the vision and strategy (in this case a focus on innovation). Then, in a group, participants will receive project metrics and status from the current projects as well as business cases for future potential projects.  This information is shared by simulating an iterative rhythm.  The project portfolio will be aligned with the strategy of the organization.The take-aways of the exercises will be summarized (10 minutes) and the session de-briefed (10 Minutes).</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20082993	Dude, Where's Our Release Plan?	<div class="content">\n    <p>Projects with a healthy, living and visible release plans have a vehicle to evaluate cross cutting investments like ubiquitous product language, incremental ROI validation, systemic issues, usability, and more. Projects with weak release plans (or planning) may do well in any one iteration, but still fail to establish value based planning across iterations, which inevitably can lead to weak or limited delivery of product value. This interactive session will present the value and techniques associated with using iteration based feedback and metrics to direct and redirect continuous release planning.</p>\n\n<p>There are many agile projects that under value the importance of release planning. While iterative development helps validate your direction, many agile communities excel at iteration planning but fail to nurture living release plans. This often leads to varying problems like poor product vision or failure to realize real costs associated with releasing new version of the product.  </p>\n\n<p>The session will contain presentation, anecdotal evidence, and small and large group exercises. The participants will leave with a host of tools and ideas for creating and sustaining a living release plan.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session will be highly interactive and ask participants to share how they use, misuse, or neglect release planning. Participants will be challenged to think and rethink their ideas of release planning and the value it offers.   </p>\n\n<p>The working outline is:<br />\n- What is Release Planning? Why do it? <em>(group exercise)</em><br />\n- The Value(s) of Release Planning <em>(presentation)</em><br />\n- The Lesser Named Values <em>(anecdotes and small group exercise)</em><br />\n- Top 5 Reasons For Undervaluing Release Planning  <em>(presentation / anecdotes)</em><br />\n- Where is Your Release Plan(ing)? <em>(small group exercise)</em><br />\n- Indicators: Good Vibes and Groove Killers <em>(presentation)</em><br />\n- Putting It All Together: Avoiding The Pitfalls <em>(small group exercise)</em><br />\n- Group review / discussion <em>(group exercise)</em>  </p>\n\n<p><strong>The Session Tests (the intended learnings):</strong><br />\n- Release planning provides much more that the release plan itself<br />\n- The community starts building a common domain language during release planning<br />\n- Discovering new stories and other unknowns are key parts of release planning<br />\n- Aspects of systems or products are served well by the wider scope of release planning<br />\n- Release plans should be periodically reviewed and re-planned to validate product ROI<br />\n- Dropping release planning happens and working without a release plan is often dangerous<br />\n- There are tangible anti-planning patterns that are avoidable if monitored<br />\n- Release planning helps bond communities    </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20080553	Feature Injection	<div class="content">\n    <p>“The process of pulling value from a project injects features into the system”. </p>\n\n<p>Feature Injection is a Tool for Business Analysts. It allows us to identify the minimum marketable features.</p>\n\n<p>This approach is a synthesis of traditional analysis techniques (UML etc.) and TDD / BDD. Feature Injection is a fast, lightweight technique that avoids analysis paralysis. The Business Analyst knows when they are finished in the same way a Developer knows they are finished in TDD / BDD.</p>\n\n<p>Feature Injection is based on Real Options and Kolb’s Model of Learning.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Special Guest co-presenter to be announced.</p>\n\n<ol><li><p>Introduction to Feature Injection – BRIEF presentation using a flip-chart ( or slides if the group is too big ). 5/10 minutes</p></li>\n<li><p>Feature Injection Interactive Worked Example. 10/15 minutes</p></li>\n<li><p>Feature Injection Exercise. 30 minutes.</p></li>\n<li><p>An optional exercise to develop a Business Model using the Modified David A. Kolb Learning Model.</p></li>\n<li><p>Accelerated Gold Fish Bowl to extract learning from the room. This will be videoed and recorded on Flip-charts. 10 minutes.</p></li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20081884	Requirements-Driven Workshops for Large Agile Projects: Essentials for Product, Release and Iteration Planning	<div class="content">\n    <p>In this tutorial you’ll learn how to plan and conduct a series of agile workshops—<em>product roadmap</em>, <em>release plan</em> and <em>iteration requirements</em> workshops—to generate “just enough” requirements-related information at the right time and for the right stakeholder community on large agile projects. This interactive session features lecture, simulation, and discussion. You’ll learn how to get your stakeholders to work together to tackle requirements challenges such as defining your product’s scope and features, developing a workable release strategy, engaging business and technical staff, and more.</p>\n\n<p>For an illustration of these workshops, go to <a href="http://www.ebgconsulting.com/3typesOfWorkshops.jpg" title="http://www.ebgconsulting.com/3typesOfWorkshops.jpg">http://www.ebgconsulting.com/3typesOfWorkshops.jpg</a> </p>\n\n<p>Requirements are the foundation of product development. On large, complex agile projects, teams struggle to grasp just enough of the big picture to mitigate the myriad problems that can arise, such as guessing which slice of the product to start or continue building, encountering the need for extensive rework due to undetected architectural dependencies, establishing a viable release strategy for business planning, and suffering from inadequate customer involvement. </p>\n\n<p>Facilitated workshops are a powerful and efficient way to establish your product roadmap, define your release strategy and explore “just enough” iteration requirements. Workshops combine the value you get from “grokking” your product requirements (see <a href="http://dictionary.reference.com/browse/grok" title="http://dictionary.reference.com/browse/grok">http://dictionary.reference.com/browse/grok</a>) with the benefits of using a collaborative process that builds trust, mutual understanding and accountability. These workshops reveal not only user requirements but also quality attributes and technical infrastructure needs that are crucial to large, complex products. You can use workshops to actively engage customers early in the project and provide a framework for making decisions about when and what to build. </p>\n\n<p>The goal of this interactive session is to give you an experience that will help you decide how to use these types of workshops on your own projects. In the simulation, you will initially develop product-level requirements, along with a product roadmap based on a vision statement and background information provided to you. Next, you will expand on your product–level requirements to deliver a requirements-based release plan for the next level of features, taking into account your product’s true business value and any dependencies between the requirements. Finally, you will develop a slice of iteration-level requirements (those requirements to be completed in a given iteration), including defining quality attributes and testing your requirements for completeness. </p>\n\n<p>You’ll gain a toolkit of insider guidelines and real-world requirements practices—reinforced with brief practice sessions and group discussions—that you can apply to improve the quality of your development efforts in large agile projects. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li><p>Lecture: overview to the levels of workshop and requirements types delivered in each (10) </p></li>\n<li><p>Lecture: the Product Workshop and their requirements-related deliverables (15) </p></li>\n<li><p>Simulation: form teams, assign and handout role worksheets, review assignment, conduct simulation of Product Workshop (50) </p></li>\n<li><p>Lecture: the Release Planning workshop and their requirements-related deliverables (15) </p></li>\n<li><p>Simulation: simulation of Release Workshop (35) </p></li>\n<li><p>Lecture: Iteration Requirements Workshops, when to structure more ceremony, working ahead for the iteration planning workshop, toolkit of requirements models to draw upon (15) </p></li>\n<li><p>Simulation: Iteration Requirements Workshop (35) </p></li>\n<li><p>Tutorial retro (5)</p></li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20082271	Barely Sufficient Portfolio Management	<div class="content">\n    <p>Yogi Berra is quoted as saying, “It is difficult to make predictions, especially about the future.” Effective management of a software portfolio is a challenge that many companies ignore, avoid or fail to follow through because it is too hard. Many approaches to portfolio management get so complex that decisions fail to get made. But what would “barely sufficient” portfolio management look like? In this hands-on tutorial we review some basic portfolio management guidelines and introduce a simulation game where participants make decisions about which investments a company makes. </p>\n\n<p>Through the instruction and the simulation, participants will learn about product, project, and portfolio management issues such as business strategy, investment return, constraint management, technical and market uncertainty and project complexity in order to optimize overall return.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Structure:<br />\nMinutes Topic<br />\n30  Portfolio Management Basics<br />\n15  Game Setup<br />\n45  Iteration 1 - Q1<br />\n0   Break<br />\n20  Iteration 2 - Q2<br />\n20  Iteration 3 - Q3<br />\n20  Iteration 4 - Q4<br />\n30  Retrospective - Debrief</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20081225	Managing the Middle: Product Owners and the Politics of Backlog Management	<div class="content">\n    <p>Product owners often find themselves stuck in the middle of a complex and swirling set of political, organizational, and customer forces when dealing with their backlogs. Each of the stakeholders who interact with the product owner want different levels of detail, degrees of traceability, and understanding of practical and strategic intent.</p>\n\n<p>Customers want to see that you’re listening to their needs with reasonable traceability. Executives, who don’t have the interest or attention span to listen to a product owner explain the details, want product owners to communicate fewer and more strategic items. The development team, on the other hand, require that product owners elaborate backlog items to a level of detail that they can estimate effort, develop acceptance criteria, and demonstrate progress within the chosen timebox. Finally, the rest of the organization, ranging from sales to service and support, require that product owners communicate accurate information about the final results, typically in a mix of both strategic and tactical importance. </p>\n\n<p>The purpose of this workshop is to explore ways that product owners and product managers have successfully communicated product backlogs. Please come prepared to share your approach to at least one facet of the communication and management of a backlog. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I intend to moderate the discussion, allocating time roughly as follows:</p>\n\n<ul><li>10m: review of the workshop goals, introductions </li>\n<li>15m: best practices for managing customer input </li>\n<li>15m: best practices for communicating and managing executive expectations</li>\n<li>15m: best practices for communicating and elaborating backlog items for developers</li>\n<li>15m: best practices for disseminating results of the release to marketing, sales, service, and support</li>\n<li>20m: shared discussions, conclusions, and capturing results for sharing with others outside of the workshop</li>\n</ul><p>I will be prepared to seed discussions on each facet based on Enthiosys consultant experiences in working with client teams. However, since this is not intended to be a tutorial, I will only seed discussions when necessary to “jump start” the conversation. My expectation is that the experiences of the workshop participants will provide ample material to solicit and share best practices.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Workshop	2008
20082037	Release Planning (The Small Card Game)	<div class="content">\n    <p>This course will use the release planning game to explore various project planning strategies. The game is played in small groups of approximately four players. Both programmers and customers may play, in any combination. </p>\n\n<p>In each cycle of the game, the players plan and “implement” a product. Each time through, they learn some new lessons enabling them to plan and implement better next time.  Scoring is based upon each team’s total return on investment</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We like to present this session every other year or so.  </p>\n\n<p>This is a highly interactive session. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20084712	The Aikido of Agile Project Metrics	<div class="content">\n    <p>Management loves the idea of metrics.  Project teams, though, hate it:  no one likes to be examined like a bug under a magnifying glass.  It’s such a shame that this is the perception, because constructive metrics are a project team’s best defense against insanity.  When well done, metrics practice is like the martial art of Aikido, which uses an opponents own energy and momentum - and in this case self-interest and responsibilities - to overcome them.  This course explores constructive metrics at the release level that can be used as  leading indicators.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Tutorial Outline:<br />\n* Introduction to an agile, lean approach to metrics and trend analysis [10 minute presentation]<br />\n* Release progress tracking and trends analysis (including backlog growth, release burndown, release velocity, and projection to completion) [10 minute presentation &amp; 20 minutes of exercise in interpretation with worksheet and group discussion]<br />\n* Release quality tracking (coverage, pass rate, stability, acceptance, and projection to release) [5 minute presentation &amp; 15 minutes of exercise in interpretation with worksheet and group discussion]<br />\n* Work-in-progress and cumulative flow diagrams [5 minute presentation &amp; 10 minutes of exercise in interpretation as group discussion]<br />\n* Rolling up release metrics to the project level - Business Value and Effectiveness [10 minute presentation]<br />\n* Summary of insights [ 5 minute presentation]</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Tutorial	2008
20083868	Exploring user stories through mind mapping	<div class="content">\n    <p>Gathering and writing “User Stories” is always a challenging activity and interview skills are the primary factor that makes the activity effective. In this session, I propose a method for exploring “User Wish” — user’s vague\nideas before shaping user stories —  using semi-structured interview with mind maps. The former half of the session is an introduction of mind maping and how to use it in user story exploration. The latter half will be a demonstration and workshop of attendees.</p>\n\n<ul><li> What is a Mind map and Why ?\n</li><li>How Software Development Benefits from Using Mind Maps\n</li><li>User Stories and Mind Maps — exploring user wish through mind mapping\n</li><li>Demonstration and Hands-on workshop\n</li></ul><p>This session’s original idea is written in my article <a href="http://www.stickyminds.com/s.asp?F=S11861_ART_2">“Agile Modeling with Mind Map and UML”</a>.\n(but UML part is omitted in this session)</p>\n\n<p>The resulting mind maps are like this. (“City Library System” user wish mind map)\n<img src="http://www.stickyminds.com/images_upload/XDD11861imagelistfilename6.PNG" /></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The former half of the session is an introduction of mind maping and how to use it in user story exploration.\nThe latter half will be a demonstration and workshop of attendees.</p>\n\n<p>I’m author of a Japanese book <a href="http://www.amazon.co.jp/dp/4822283143">“Mind mapping for Software Development: how graphical communication works”</a></p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Customers & Business Value	Workshop	2008
20083051	Pragmatic Personas: Connecting With Developers Via TDD	<div class="content">\n    <p>Even though personas are known to create more usable and valuable products, they are still unknown to many developers. Fortunately, techniques like story test driven development allow developers and personas to connect in a way that is valuable in the daily work of coding and delivering software.   </p>\n\n<p>Pragmatic personas help developers clarify stories and acceptance tests, providing tangible value and increasing the stickiness (and value) of personas among the developers and the entire project community. Come learn how the simplest persona that could possibly work usually provides the most value.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session will walk through the creation and use of several personas to guide story writing and story test driven development. The participants will help create personas and stories for a product (as a group) as well as trying out the exercise for their products of projects (in small groups).   </p>\n\n<p>The personas will be used to create tests which will be automated, becoming executable definitions of the user experience. The participants will leave the session with persons, stories, and automated story tests which they can bring back to their shop as examples of how to create and connect personas to automated tests in a way that is accessible and tangible for the developers on their project.</p>\n\n<p><strong>The Sessions Tests</strong> <em>(things that people with hear and experience)</em>  </p>\n\n<ul><li>Personas which are simple are powerful are more likely to be sticky in developer land.  </li>\n<li>Stories told in context of the user experience clarify value and create better automating tests.  </li>\n<li>Naming the product value for the product personas helps create stronger products and backlogs.   </li>\n<li>Tests are stronger when connected to user experiences via personas.    </li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Tutorial	2008
20081140	Agile and Paper Prototyping	<div class="content">\n    <p>Paper Prototyping\nMistakes and oversights during the design and development phases can be costly, if not detrimental to a business. Paper prototyping is an excellent, low-cost method to catch these mistakes and correct them before development begins. </p>\n\n<p>This highly detailed, practical, and hands on workshop will provide a framework for creating and testing paper prototypes. Here’s a brief on what we’ll cover:</p>\n\n<ul><li>bust the common myths</li>\n<li>tools we use for paper prototyping</li>\n<li>show some working examples (yes, I did say working and I do mean interactive prototype models)</li>\n<li>share a few tips and techniques (for handling and simulating interactivity and AJAX)</li>\n<li>How paper prototyping fits into Agile </li>\n<li>What to do when something unexpected happens </li>\n</ul><p>Participants will have a number of hands-on exercises throughout the workshop. Tips, tricks, and special techniques will be incorporated throughout the workshop.</p>\n\n<p>When you leave this workshop, you’ll be a paper prototyping super hero!</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Work on a real world product\nParticipants will work in teams to design and create their paper prototype design. Additionally, we’ll discuss strategies for testing your paper prototype design on customers and receive tips on your testing approach.</p>\n\n<p>You will be randomly split up into design teams. Each team will receive a kit with market research, personas, competitive research, and physical tools necessary to create your paper prototypes. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Tutorial	2008
20084765	Mental Models: Sparking Creativity Through Empathy	<div class="content">\n    <p>What’s a mental model? Those in the field of cognitive research have been defining mental models for a few decades. The term “mental model” has come to mean “a mental representation.” The mental models described in this presentation are representations of people’s behavior, philosophies, and emotion around how they accomplish something, regardless of which tools they use. Aligned with the ways you support users, mental models provide a clear roadmap of where your organization should invest its energies, and also where it shouldn’t, allowing you to stretch your limited resources.</p>\n\n<p>In this presentation, Indi Young, author of the book, Mental Models, will teach you how to better understand user motivations before making decisions about software design. They will provide an information architecture from users’ tasks that will last 10 years, and get everyone from discordant team members to busy executives on the same page with respect to design and strategy.</p>\n\n<p>After this presentation, you’ll come away with an understanding of how mental models have helped organizations from a variety of industries, and be able to create your own mental models right away to improve your web sites and applications. You’ll understand the pros and cons of mental models, and how they fit with other user experience design methods.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Slide presentation + excercises</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Workshop	2008
20084574	User Interface Design Studio	<div class="content">\n    <p>User experience designers – struggling with how to share the role of designer with engineers and other members of your agile teams? Trying to find a better way to communicate the findings of your user-centered research and establish the importance design plays in any software product? Wondering how to get your design ahead of development so you can have time for usability testing and iterative design? We’ve got the answer for you – design studio.</p>\n\n<p>Design studio, as you’ll practice it in this tutorial, is a time boxed, collaborative design session that serves to consolidate ideas and team direction around a common design.</p>\n\n<p>Join Jim Ungar and Jeff White for a fun, fast paced 180 minute interface design studio tutorial. You’ll learn two core lessons: 1) how to plan and conduct a design studio with your agile teams, and 2) the many benefits studio approach to design delivers for user experience designers and agile software development teams.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li><p>Introduction and explanation of studio approach to design, and how it builds the skills of any designer. Slides presented to participants by Jim and Jeff.<br />\n10 minutes</p></li>\n<li><p>The actual studio – participants create many different conceptual sketches to solve a design problem we’ll present.<br />\n2a. 11x17 paper, pencils, and colored sharpies are provided to the participants.<br />\n25 minutes</p></li>\n<li><p>Next, they come together as a team to present their designs.<br />\n3a. Each designer tapes their sketches on the wall, and presents them one at a time.<br />\n60 minutes</p></li>\n<li><p>The team critiques each design. The critique involves the team discussing the pros and cons of the design, and asking the designer questions.<br />\n4a. The feedback is recorded on giant post it notes taped on the wall right next to each concept sketch.<br />\n40 minutes</p></li>\n<li><p>The team makes decisions and trade offs and finally decides upon one final concept with which to ‘move forward’. This final concept is a manifestation of the good parts of the many concepts presented during the studio. Depending on the number of participants, the critique and design session will be done as one large group or split up into multiple teams.<br />\n25 minutes</p></li>\n<li><p>Explanation of the many benefits the design studio brings to agile teams, and to the user experience of the product they are building. \nSlides presented to participants.<br />\n10 minutes</p></li>\n<li><p>Questions and general discussion.<br />\n10 minutes</p></li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Tutorial	2008
20084213	Sketchboards and Prototypes: Agile methods for better and faster UX solutions	<div class="content">\n    <p>Agile cannot replace a holistic user experience vision – something that takes into account design strategy and objectives.</p>\n\n<p>At Adaptive Path, we have been experimenting with a technique that we call sketchboards. We get everyone on the team to participate in a process based on rapid, low-fi techniques like sketching and collaging to iterate ideas and move quickly into prototyping.</p>\n\n<p>When combined, sketchboards and prototypes give everyone on the team a strong foundation to build products that provide focused, beneficial, well-designed experiences for the people who use them.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>In this hands-on tutorial, we will show you how sketchboards work and take you through a process of creating your own. We’ll also show you how to determine what ideas from the sketchboard are the most essential and suitably granular for taking into prototype development. We will address how to select the smallest possible unit to start prototyping, how to focus on the tricky features, and how to determine what key stakeholders need to see to really “get” your product.</p>\n\n<p>Not just for designers – sketchboards work best when the entire team gets involved – so anyone can participate in this tutorial.  </p>\n\n<p><em>You will learn:</em></p>\n\n<ul><li>how to run faster, higher quality design iterations that encourage heavy collaboration  from designers, technologist, and business people</li>\n<li>how to explore many ideas before investing time in building them</li>\n<li>how to employ sketching and collaging activities to give design the same speed and focus that agile gives to coding</li>\n<li>how to determine the fidelity required for <strong>your</strong> prototype(s)</li>\n<li>how to determine what’s the essential functionality to prototype</li>\n</ul><p><em>This 2.5 hour tutorial will be structured roughly as follows:</em></p>\n\n<ul><li>Speaker intro - 5min</li>\n<li>Sketchboard Lecture - 30min</li>\n<li>Sketchboard Activity - 45min</li>\n<li>Discussion - 15min</li>\n<li>Prototype Lecture - 30min</li>\n<li>Prototype Activity - 30min</li>\n<li>Discussion - 15min</li>\n<li>Q &amp; A - 10min</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Tutorial	2008
20084860	The User Feedback Two-Step	<div class="content">\n    <p>As Agile practitioners, we recognize the need for a strong and accurate user voice on the Agile team. And yet, an Agile project leaves little time for elaborate up-front design and lengthy user research. In this session we’ll practice the User Feedback Two-Step, the dance that user representatives on a team have to play to interleave their work with the developers and with end-users. Nimble players can be ready with designed and tested user interfaces at the point where developers need them, while implementing user acceptance testing in parallel. </p>\n\n<p>Ensuring a strong user voice on the team can be difficult in real-world projects. Real users have their own work to do—it can be hard to get them to commit enough time to provide the detailed guidance an agile process envisions. Furthermore, users don’t typically reflect on their own work and strategies—they need techniques that help them articulate their work so they can understand their true needs and the implications of a new system.</p>\n\n<p>All this has to fit into the basic structure of an Agile project—quick iterations, each delivering a chunk of user value. There’s no time for Big Design Up Front, yet UX experts know if there’s no UX design and no iteration of that the design with users, the result will be a mess, requiring redesign and rework in future iterations.</p>\n\n<p>The User Feedback Two-Step provides a structure for interleaving UX and development work inside the iterations of an Agile project. We’ll use the User Feedback Two-Step game as a way of teaching UX practitioners (and their development partners) how to dance.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We’ll first lay out the basic problem and then introduce some key techniques:</p>\n\n<ul><li>An adaptation of <strong>Contextual Inquiry</strong> for quick discovery of customer issues and problems to drive the next iteration. We’ll introduce key principles and practice a short interview; </li>\n<li><strong>Paper prototyping</strong> as a method to quickly design and test user interfaces before developers start implementation. We’ll build a small prototype together and discuss its usage; and</li>\n<li><strong>Interactive Inquiry</strong> as a method for quick user acceptance testing of a completed iteration. We’ll talk about how to run and Interactive Interview and give a demo.</li>\n</ul><p>Then we’ll play the Two-Step game to show how these three elements can fit into an agile project structure to provide continuous, reliable user feedback with minimal rework. The game will enable participants to play out the process and the different roles, seeing how they dovetail with each other.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Tutorial	2008
20083860	The UX Graffiti Wall	<div class="content">\n    <p>The UX Graffiti Wall, a persistent physical public display, aims to capture feedback and ideas on core issues that user experience practitioners confront in an AGILE development environment. Conference attendee contributions may be based on personal experiences or discussion surrounding session and tutorial topics.  </p>\n\n<p><a href="http://www.flickr.com/photos/57321203@N00/2568888679/"><img src="http://farm4.static.flickr.com/3010/2568888679_fe7c60832c.jpg" /></a><br /><b>Figure 1.</b> — from <a href="http://www.flickr.com/people/57321203@N00/">peterjfroessler</a> - <a href="http://www.flickr.com/groups/topic/66672/">(?)</a> Conceptual Sketch of UX Graffiti Wall</p>\n\n<p>Feedback may take on a variety of expressive forms, examples of which will be provided on the display.  Attendees walking by the UX Graffiti Wall have the freedom to document their responses to issues in any form that allows them to most effectively communicate their ideas (i.e. sketches, visualizations, bulleted lists, explanations, etc.).  This particular format, to the best of our knowledge, has yet to be explored in a conference setting.  Yet, current literature supports this more open-ended methodological approach that we are proposing [1,2] as well as the use of mixed media and visualization techniques (Figure 1.) as an alternative form of expression and documentation [3,4].</p>\n\n<p><a href="http://www.flickr.com/photos/7523746@N07/2243080070/"><img src="http://farm3.static.flickr.com/2107/2243080070_90b885871c.jpg" /></a><br /><b>Figure 2.</b> — from <a href="http://www.flickr.com/people/7523746@N07/">uswim</a> - <a href="http://www.flickr.com/groups/topic/66672/">(?)</a> Use of graphical visualization techniques at the 2008 San Francisco VizThink conference   </p>\n\n<p><img src="http://infosthetics.com/archives/ted_bigviz.jpg" /><br /><b>Figure 3.</b> Idea Map captured by a sketch artist at the TED 2008 conference   </p>\n\n<p>We plan to use a broadly-defined collection of key issues regarding user experience practices in an AGILE context as a starting point for the collection of creative solutions, approaches, experiences, and best practices.  We feel the AGILE 2008 conference will provide a unique forum for opening up the conversation across all roles that play a part in AGILE development.    Additionally, obtaining feedback in the same venue as the many papers, talks, and workshops may help to provide points of reference unavailable to the community back on their home turf.</p>\n\n<p>Preliminary results will be shared during the scheduled session time.  We also expect to synthesize, package, and share a comprehensive set of results in the long-term using a similar publicly-accessible medium.  The resulting repository of topics, comments, and ideas from the AGILE community this year will hopefully help fuel future discussions and help us to better understand the challenges of incorporating User Experience efforts into an AGILE environment.  </p>\n\n<p>[1] Hilliges, O., et al. (2007). Designing for collaborative creative problem solving. Proceedings of the 6th ACM SIGCHI conference on Creativity &amp; cognition, 137 – 146.</p>\n\n<p>[2] Gerber, E. (2007). Improvisation principles and techniques for design. Proceedings of the SIGCHI conference on Human factors in computing systems, 1069 – 1072. </p>\n\n<p>[3] <a href="http://www.vizthink.com/" title="http://www.vizthink.com/">http://www.vizthink.com/</a></p>\n\n<p>[4] http://images.autodesk.com/adsk/files/ted2008_autodesk_bigviz_\\book_2008_03_14.pdf  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The exhibit will persist across the entire five conference days.  We plan to share responsibility for managing and moderating the exhibit with several other attendees from Salesforce.com User Experience as well as other interested parties.  Materials needed for participation will be provided at the Wall on supply tables.  A large instruction poster will provide direction and seed content will show participants the various forms their contributions can take (storyboards, cartoons, process maps, definitions, etc).</p>\n\n<p>The four colors for the sticky notes provided will represent roles participants play in their AGILE teams (i.e. developer, user experience practitioner, product manager, scrum master).  The three colors of color-coding labels available are intended to mark the feedback as a question, general comment, or solution/suggestion/idea.  Moderators will be tasked with either assisting participants with this coding system or coding contributions once they have been added.  All contributions will be clustered and coded at the end of each day. Pictures or video of the UX Graffiti Wall will also be taken as it evolves and grows.</p>\n\n<p>Working space will be provided with additional foam boards for emerging topics as well as an idea ‘parking lot’ for attendee contributions that may be difficult to  fit into the provided framework.</p>\n\n<p>In addition to requesting seed content in the form of Polaroid® photos and comments, we would also like to ask presenters of each user experience session or workshop to encourage their audience to build on the photos and comments they will post.  We plan to discuss mechanics ahead of time with each session or workshop leader so it is clear what should be announced at each session to increase participation, and what should be documented by them (photos, quotes, etc.).</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Other	2008
20085097	Meshing Gears: Real-world examples of how design and development integrate -- and fail to	<div class="content">\n    <p>Agile methods provide new opportunities to create great products through tightly integrated design and development. But too often, that promise is not fulfilled. In this session, you’ll learn why that is and how leading teams make it work.</p>\n\n<p>Through examination of a variety of real-world projects—from scrappy startups to a team at Google—we’ll discuss patterns for successful user-focused development, and the anti-patterns that can hobble even strong teams. Whether you’re a designer, developer, or product manager, you’ll leave this session with ways to better integrate design and development on your own projects.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><h3>Presentation Outline</h3>\n\n<ul><li><strong>Introduction (10 m)</strong> - Why good design matters to developers, why developer involvement matters to designers, and why a well-integrated team matters to all project stakeholders.</li>\n<li><strong>Six Example Teams (60 m)</strong> - Six real-world examples of teams, including photographs of working spaces, selected process artifacts, and snapshots showing the evolution of products over time. Each will include lessons learned. Questions from the audience are welcome.</li>\n<li><strong>Review, Rate, and Rank (20 m)</strong> - After a quick review of discovered patterns and anti-patterns, attendees will jointly rate their impact and choose the ones that will have the utility on their current projects. Handouts with take-home material will be provided.</li>\n</ul><h3>Example Pattern: Sitting Together</h3>\n\n<p>Sitting together is a practice Extreme Programming recommends for developers. But one great way to encourage deeper communication and tighter integration is to add designers to the mix. For example, consider this team:</p>\n\n<p><a href="http://www.scissor.com/resources/teamroom/main_room.jpg" title="http://www.scissor.com/resources/teamroom/main_room.jpg">http://www.scissor.com/resources/teamroom/main_room.jpg</a></p>\n\n<p>On this team, the four developers sat at the two pairing stations at the right of the photo (#7). Just out of frame to the left, the UI designer sat facing the team (#1). The large whiteboards (#2, #5) frequently contained UI sketches as shared reference material for current work, and longer-term design visions were taped to the walls. Easy communication makes for frequent communication; both designers and developers expressed high levels of satisfaction with the working relationship and the quality of the end product.</p>\n\n<p><em>Pattern Pros</em></p>\n\n<ul><li>easy communication enables use of low-cost artifacts</li>\n<li>spending time together builds team relationships</li>\n<li>short feedback loops enable rapid convergence on strong designs</li>\n<li>designers can do still other work when needed</li>\n<li>developers can learn basic usability through osmosis</li>\n<li>frequent validation of work underway reduces cost of rework</li>\n<li>results of guerrilla user testing can be quickly applied</li>\n</ul><p><em>Pattern Cons</em></p>\n\n<ul><li>sometimes designers are spread too thin to spend substantial time with developers</li>\n<li>learning to work side by side can be stressful for all concerned</li>\n<li>some organizations resist building truly cross-functional teams</li>\n<li>when existing relationships are rocky, sometimes people will sit together and still not engage sufficiently</li>\n</ul><h3>Session Notes</h3>\n\n<p>Actual number of teams will vary depending on what additional material we discover between now and then, but we’re shooting for six. Presentation material and a summary of attendee responses will  be made available on-line after the conference. We will also try to persuade members of example teams to attend the conference.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Talk	2008
20085082	Secrets of a Sticky Note Ninja : Rapid Ideation and Problem-Solving with Post-It Notes	<div class="content">\n    <p><strong>Short Abstract</strong>  [88 words]</p>\n\n<p>Sticky notes (aka Post-it Notes [tm]) are the lingua franca of remembering pesky tasks…yet their real potential lies in effectively and rapidly organizing collaborative group work. Don’t underestimate these simple tools: it’s amazing what powerful results you can get from a $2.00 office supply investment. </p>\n\n<p>In this hands-on tutorial, we’ll cover 8 simple, flexible and impactful methods that help you unpack problems, document workflows, identify issues &amp; opportunities (and what to do about them) and keep everyone, from business folks to development teams, in sync and on target.</p>\n\n<p><strong>Long Description</strong></p>\n\n<p>Sticky notes (aka Post-it Notes [tm]) have become the lingua franca of remembering pesky tasks and to-do items…yet their real potential lies in effectively and rapidly organizing collaborative group work. However, few teams know how to make the most of these simple yet powerful tools. In this workshop you’ll take your group collaboration skills to the next level with a set of methods that maximize the potential of sticky notes.</p>\n\n<p>In user experience work, sticky notes are used in all stages of the process, from strategy to design and through development. In this hands-on tutorial, we’ll cover 8 simple, flexible and impactful methods that help you unpack problems, document workflows, identify issues &amp; opportunities (and what to do about them) and keep everyone, from business folks to development teams, in sync and on target. And you’ll have the opportunity to test-drive 2-3 of these methods to gain hands-on experience with the methods.</p>\n\n<p>Armed with only the most humble of office supplies (sticky notes and sharpie pens) we’ll work through 6 major collaborative challenges:<br />\n* Unpacking problem and opportunity spaces<br />\n* Gathering design and development goals<br />\n* Building consensus for shared direction<br />\n* Making sense of complex workflows<br />\n* Delving into the roots of a problem so that you can solve it appropriately<br />\n* Creating idea constellations that spark new approaches and directions  </p>\n\n<p>You will learn:<br />\n* how to pick the right method for a specific problem<br />\n* how to lead a group in collaborative sticky note sessions<br />\n* how to organize a workroom for maximum collaborative success<br />\n* keys to quickly and easily documenting workgroup results<br />\n* how to work asynchronously via sticky-note boards  </p>\n\n<p><strong>Speaker/Facilitator Notes</strong></p>\n\n<ul><li>The facilitator has been working with structured sticky note techniques for over 7 years in a variety of contexts: strategic user experience projects with clients, development teams for WebDev projects, community non-profit organizations and in a city planning context with a neighborhood organization.  </li>\n<li>A short-form (90 minute) version of this tutorial has been presented in the past, at a User Experience conference (Adaptive Path UX Week 2007), and at an Interaction Designers Association (IxDA) San Francisco event. Feedback from the participants was very positive at both sessions.  </li>\n<li>The session has been presented in in a hotel meeting room setting (a crazy-but-overcomeable-challenge…stickies hate fabric walls) with approximately 150 participants, and in an office meeting room setup with over 75 participants.</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session outline is as follows:<br />\n* Intro and context-setting : 5 min<br />\n* Overview of techniques : 20 min<br />\n* 2 hands-on exercises : each 15 min with 10 min share-out<br />\n* Closing and questions : 15 min</p>\n\n<p>Materials include:<br />\n* Sticky note decks in asst. sizes, colors<br />\n* Sharpie pens (because Sharpies smell like ideas…)  </p>\n\n<p>Structure of exercises:<br />\n* We’ll work in groups of 5-7<br />\n* Following each exercise, each group will have the opportunity to ask questions and share experiences with the larger group  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Workshop	2008
20085085	Postcard Patterns: An Agile Pattern Creation Process	<div class="content">\n    <p><strong>Program Guide Description:</strong></p>\n\n<p>At Salesforce.com a waterfall-based process bogged down our first attempt at generating a traditional pattern library. In keeping with our development team’s agile transformation we revisited the process and invented Postcard Patterns – a highly visual, easy to maintain, and easy to produce communication tool.</p>\n\n<p><strong>Attendees will learn how to:</strong><br />\nIdentify Their Audience: <em>Who needs the patterns?</em><br />\nDe-construct Their Application: <em>What are the unique building blocks?</em><br />\nOrganize The Building Blocks: <em>Identify groupings, themes, hierarchies and variations</em><br />\nAuthor A Postcard Pattern: <em>Choose one building block and create a postcard pattern</em>  </p>\n\n<p><strong>End Description (85 words)</strong></p>\n\n<p><strong>Full Description</strong></p>\n\n<p><strong>What it is:</strong><br />\nTraditionally, creating and maintaining a pattern library has been a daunting task requiring extensive resources and, sometimes, dedicated full-time employees. At Salesforce.com our first attempt at producing a comprehensive library was bogged down by a waterfall-based creation and review process that yielded only two patterns in a six-month period. At this rate we would never approach completion.</p>\n\n<p>In keeping with our development team’s agile transformation we revisited the process and invented Postcard Patterns – highly visual, single-page documents that allow design teams to efficiently and effectively drive consensus across teams with a lean, easy to maintain, and easy to produce communication tool. In contrast to our previous pace, we have recently produced 40+ patterns in less than three months.</p>\n\n<p><strong>Attendees will learn how to:</strong><br /><em>Identify Their Audience</em><br />\nWho needs these patterns? Designers, developers, product owners, product managers, customers, and quality assurance, or all of the above?</p>\n\n<p><em>De-construct Their Application</em><br />\nWhat are the unique building blocks in your current application? You will focus on one page (or screen) and work with your team to break it down into meaningful chunks.</p>\n\n<p><em>Organize The Building Blocks</em><br />\nIdentify groupings, themes, hierarchies and variations</p>\n\n<p><em>Author A Postcard Pattern</em><br />\nYou’ll choose one of the building blocks and create a postcard pattern that outlines the most important features.</p>\n\n<p><strong>Why it’s important:</strong><br />\nSoftware is complicated, development teams are complicated and, increasingly, development teams are geographically dispersed.</p>\n\n<p>Communication, consistency and efficiency are of paramount importance. Without stifling innovation or “wasting” resources, Postcard Patterns aid the integration of diverse development teams of developers, designers, quality assurance engineers, usability engineers, documentation specialists, product managers, and their respective roles on scrum teams.</p>\n\n<p><strong>Who it’s for:</strong><br />\n- Product Owners, Product Designers, User Experience Professionals (UI Designers, Researchers, Analysts, Information Architects), and Developers with an interest in design and creating UI frameworks<br />\n- Design professionals working on all forms of application development – from large-scale enterprise applications to consumer-oriented mobile applications.</p>\n\n<p><strong>Why it’s Agile:</strong><br />\nAdaptive – Works for projects big and small<br />\nLean and Simple – Finish with single-page deliverables<br />\nCollaborative – Get team members involved in the design early and keep them involved<br />\nMotivating – Get yourself, your team, and your customers energized for success<br />\nCustomer Satisfaction – Workable patterns appear rapidly and continuously    </p>\n\n<p><strong>What it’s not:</strong><br />\n- A detailed exploration of information architecture techniques for creating a comprehensive taxonomy.<br />\n- A detailed analysis of user research methodologies for kick-starting a pattern initiative.<br />\n- A business-centered discussion for getting executive support for a pattern initiative.<br />\n- A comprehensive overview of all user-centered design practices.    </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Schedule:</strong><br /><strong>15 minute – Introduction</strong><br />\nProblem Definition / Research / Process / Results</p>\n\n<p><strong>30 minute – Process Presentation - Creating a Postcard Pattern Library</strong><br />\n- Define your audience<br />\n- Deconstructing your product<br />\n- Organizing the pieces<br />\n- Documenting the pieces as postcard patterns    </p>\n\n<p><strong>30 minutes – Hands-On Exercise</strong><br />\n1. Pick a real world design problem or bring screenshots from your current application or platform<br />\n2. Brainstorm: Define your audience and choose an appropriate method for deconstruction<br />\n3. De-construct a single page<br />\n4. Create a Postcard Pattern    </p>\n\n<p><strong>15 minutes – Wrap-up</strong><br />\nNext Steps (Postcards are just the beginning) and retrospective    </p>\n\n<p><strong>Takeaways:</strong><br />\n- A completed Postcard Pattern<br />\n- Templates and examples of our internal Postcard Patterns<br />\n- An understanding of the benefits of maintaining a lightweight pattern library<br />\n- An understanding of the complete framework required for launching a pattern library initiative at your place of work    </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Tutorial	2008
20083265	An Agile Approach to Proposition Assessment	<div class="content">\n    <p>Every day, many ideas of widely varying completeness and quality are generated for new products and services. Organizations and individuals face a constant challenge in how they determine which of these ideas will receive further investment and which not. In this paper, we look at a lightweight approach to the assessment of ideas that helps face this challenge. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Experience report	2008
20084391	User Interface Design in an Agile Environment: The Design Studio Approach	<div class="content">\n    <p>In this report we describe our experience with the merger of user centered design (UCD) into agile (team) development practice as manifest in a one day design studio. We will walk through our process from the preliminary design research through the conclusion of the day-long workshop that is the design studio by describing those activities in the context of one project. We will follow by enumerating and  explaining the benefits we have observed from taking a studio approach to design.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The design studio is an activity that fits well with Agile software development practices and User Centered Design (UCD). This experience report documents the concept of a studio approach to interaction design but in the context of practicing agile UCD. It has been our experience that the design studio helps agile and UCD coexist, making both stronger and more effective. Our ideas are largely based on the experience of our user experience (Ux) team in supporting eight Scrum teams over the course of one year. </p>\n\n<p>A design studio, as we have practiced it, is a fairly simple idea:<br />\n- Operating from some common guidelines, participants produce several rough sketch designs.<br />\n- Come together and discuss each other’s work.<br />\n- Merge ideas to one design concept with which to move forward.\nIt is a rapid process that allows designers, developers and stakeholders to collaborate and explore design alternatives.\nParticipants grow their skills by exchanging viewpoints with their peers and openly discussing the strengths and weaknesses of their work. The design is often enriched and strengthened from the feedback. </p>\n\n<p>A design studio as we have practiced it has four main components:<br />\n1.  Research – the design studio is informed by user research.<br />\n2.  Design – also known as ‘pre-work’: Many designs and ideas, generated quickly.<br />\n3.  Studio - A day-long workshop to evaluate alternatives, make decisions, and consolidate to one design.<br />\n4.  Participants - A team of designers and non-designers who are willing to learn and grow within the design process.      </p>\n\n<p>In early 2007 our software engineering organization made the decision to switch from a traditional waterfall development methodology to agile software development using Scrum. \nGiven the challenges of moving design ahead of development under the compressed time frame of Scrum, the design studio seemed a wise choice. Not only does the design studio mandate that the team emerge with a design direction and a deliverable, it does so in the space of one day. In addition, team members gain enough of a shared understanding of the design to begin development, and through their participation in the design studio, take ownership of the product and the design.</p>\n\n<p>We have found that the design studio:<br />\n- Facilitates role sharing and knowledge transfer between designers, stakeholders, and engineers<br />\n- Offers an alternative way to communicate design research findings<br />\n- Allows rapid exploration of design alternatives<br />\n- Gets early commitment to design direction<br />\n- Gets research and design ahead of development and provides more time for iterative research<br />\n- Fosters shared understanding of design vision<br />\n- Promotes team cohesiveness<br />\n- Provides opportunity for sharing best practices across cultures (design, business, agile development)  </p>\n\n<p>The design studio brings the domains of UCD (user centered design) and agile software development together in ways that benefit practitioners of both. We have observed these benefits in the course of daily work and seen the overall quality of our designs improve as understanding of UCD and design best practices spreads among the teams and throughout the organization. We would encourage others attempting to practice UCD in an agile environment to utilize a design studio approach. The adaptations for the UCD practitioner are necessary, and in our case, desirable and beneficial.</p>\n\n<p>Potential References and Citations<br />\n[1] Forlizzi, Jodi. Carrying the Vision: Bringing Design Studio Practice to HCI Institutions<br />\n[2] John, Bonnie. Usability and Software Architecture website. <a href="http://www.cs.cmu.edu/~bej/usa/" title="http://www.cs.cmu.edu/~bej/usa/">http://www.cs.cmu.edu/~bej/usa/</a><br />\n[3] Morris, Shane. Conference course: Interaction Design Studio ACM CHI Conference (2007) San Jose<br />\n[4] Principles behind the agile manifesto <a href="http://agilemanifesto.org/principles.html" title="http://agilemanifesto.org/principles.html">http://agilemanifesto.org/principles.html</a><br />\n[5] Schwaber, Ken. Agile project management with Scrum. Microsoft Press (2004)<br />\n[6] Bowker, G. C. and Star, S. L. 2000 Sorting Things Out: Classification and its Consequences. MIT Press.<br />\n[7]     Ungar, J., &amp; White, J. (2008, Feb 10, 2008). User Interface Design in an Agile Environment: Enter the Design Studio. Presentation at the IxDA Interactions ‘08, Savannah, GA..<br />\n[8] Ungar, J., &amp; White, J. (2008, April 10, 2008). Agile User Centered Design: Enter the\nDesign Studio – A Case Study. Paper presented at the CHI 2008 Art. Science. Balance., Florence, Italy.   </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Experience report	2008
20084790	Using lightweight analysis techniques to workshop shared solutions	<div class="content">\n    <p>Achieving and maintaining a shared understanding across a team about just what a project is intended to deliver, and just why that matters, is tremendously challenging. It is also tremendously important. This workshops explores how a team can create and iterate a number of lightweight models to help both (i) build a shared and evolving understanding of the business problem and what potential solutions look like (ii) make sure they are asking the right kind of questions early. Models considered will include user, process, financial and interface / interaction (e.g. storyboards).</p>\n\n<hr /><p>I’ve submitted an experience report that explores how a small team worked together closely to assess a business idea (proposition) around the provision of an environmentally friendly commuter solution for London (“An Agile Approach to Proposition Assessment”).</p>\n\n<p>This tightly time-boxed exercise built on many of the principles core to Agile software development. It focused on the importance of collaborative, iterative, feedback driven sessions where the business and the implementation team worked together to evolve a shared understanding of potential solutions. This process was supported by a variety of lightweight models (financial, process, etc.) as well as user journeys captured as illustrated scenarios through story boards and low fidelity prototypes.</p>\n\n<p>In this tutorial I’d like the opportunity to explore the techniques used in greater detail - with an opportunity for participants to try out the techniques themselves and provide feedback on other and similar approaches they may have taken. For me providing the customer / business / end-user with models that are insightful and thought provoking - whether that’s a mathematical model that challenges the supposed business case or a low fidelity prototype that captures the potential complexity of an interaction - is absolutely key to making the most of collaborative time.</p>\n\n<p>In the tutorial the group will have the option to explore one or more of:\n- Simple business case modeling\n- Rapid process modeling with cards\n- Storyboarding of key user journeys\n- Creation of paper / low fidelity prototypes</p>\n\n<p>Importantly these individual techniques will be set in the context of achieving an answer to the overarching question “Should the business pursue this idea / proposition or not?” - i.e. we will look at how the various strands above can be pulled together to provide a rapid and robust answer.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The initial 15 - 20 minutes will be used to set context, introduce the core ideas and briefly present the different modeling techniques. Based on this the group will be asked to vote on which of the techniques they would most like to explore.</p>\n\n<p>30 minutes will be given to the top two, one after the other. For each we’ll consider why and when you’d use it before discussing the how. We’ll then divide into smaller groups (6-8) for some hands-on practice of what’s been talked about. After trying the techniques they’ll be an opportunity to reflect on what did and didn’t work (and why).</p>\n\n<p>For the final 15 minutes we’ll open the floor to a broader discussion of where people have seen these, or similar techniques, work (or not) and the common lessons learned.    </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Tutorial	2008
20080542	Two Case Studies of User Experience Design and Agile Development	<div class="content">\n    <p>How can user experience design (UED) practices be leveraged in Agile development to improve product usability?  UED practices identify the needs and goals of the user through user research and testing.  By incorporating UED in Agile development, user research and testing can be utilized to prioritize features in the product backlog and to iteratively refine designs to achieve better usability.  Furthermore, integrating UED and Agile processes can be accomplished with little or no impact on release schedules.  The cases studies presented in this paper describe two examples of UED and Agile integration at VeriSign. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We will compare our experiences with two Agile development projects where user experience design was successfully incorporated into one and not utilized in the other.</p>\n\n<p>The projects differed in up-front research time, starting documentation and target users. For this experience report, they will be referred to as Falcon and Razor. Falcon was a brand new offering for an emerging consumer market.  Razor was a redesign of an existing product with well-defined users and high-level marketing requirements in place.</p>\n\n<p>Falcon successfully incorporated UED practices into the Agile development environment.  From a UED perspective, developing this project using Agile methods resulted in a superior product with better user experience.  In contrast, Razor did not incorporate UED practices.  User testing, learning and refining was not incorporated.</p>\n\n<p>We will also describe how to incorporate user experience methodologies into the Agile development process when you do not have a dedicated user experience team.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Experience report	2008
20084912	Are You Sure? Really? A Contextual Approach to Agile User Research	<div class="content">\n    <p>The creation of excellent user experiences often appears to be a forgotten goal in the software development world. This paper discusses the use of a concrete method, Contextual Inquiry, which leads to insights that will help development teams create experiences and interfaces that match user needs and expectations. This method encourages Agile team members to see the world from the users’ perspective by working directly in the users’ context.  </p>\n\n<p>Contextual Inquiry is a valuable tool for collecting and analyzing user data, superior to relying on general feedback from user self-reports and questionnaires. Our paper starts with a historical view of the problem, then covers how we planned and executed our Contextual Inquiry study, and concludes with lessons learned from our experiences. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Experience report	2008
20085037	Using Persona with XP at LANDesk Software, an Avocent Company	<div class="content">\n    <p>LANDesk Software started developing their shrink wrapped products using a variant of extreme programming (XP) in 2002.  They  made significant changes to a large legacy system, but wanted to communicate better with customers.  They expanded their Human Factors team to focus on this problem.  The Human Factors team developed personae to integrate the user into the development process.  The team had success with this process, and improved visibility into the user psyche by bringing the customer on-site, validating the research behind the personae, and improving the developers’ understanding of the customer needs. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Experience report	2008
20083553	Experience report: Design to Delivery in 7 Weeks	<div class="content">\n    <p>Last fall I received an email with the software requirements from a potential customer that would establish us in an important new market. We had been brought in when the client had only two months left before deploying their chosen solution. The customer requirements list is vague and long, but the prize is big. Could we design and deploy major functionality in just two months? Thanks to agile development and some fortunate circumstances, our team of four delivered the functionality, won the deal, pleased the users, and didn’t work an hour of overtime. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Experience report	2008
20083679	Product Innovation is Practical, Important, and Possible	<div class="content">\n    <p>Not everyone is lucky enough to work at one of the top twenty innovative companies.  The tendency in our world is to go towards short-term solutions that guarantee mediocrity but get the job done.  This experience report tells the story of one software product team that delivered three products. As the team embarked on each new product we realized that pressures from schedule, feature sets, recruiting, and cost were going to be a part of the challenge.  But we learned that despite all of the pressures we could inject innovation. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Experience report	2008
20084316	U-SCRUM: An Agile Methodology for Promoting Usability	<div class="content">\n    <p>SCRUM poses key challenges for usability.  First, product goals are set without an adequate study of the user’s needs and context.  The user stories selected may not be good enough from the usability perspective.  Second, user stories of usability import may not be prioritized high enough.  Third, given the fact that a product owner thinks in terms of the minimal marketable set of features in a just-in-time process, it is difficult for the development team to get a holistic view of the desired product or features.</p>\n\n<p>This experience report proposes U-SCRUM as a variant of the SCRUM methodology.  Unlike typical SCRUM, where at best a team member is responsible for usability.  U-SCRUM is based on our experience with having two product owners, one focused on usability and the other on the more conventional functions.  Our preliminary result is that U-SCRUM yields improved usability than SCRUM.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Experience report	2008
20080262	What is user experience? 	<div class="content">\n    <p>User experience (UX) is a relatively young field that involves a diverse set of skills and activities. UX tasks have grown in importance as the focus of product design moves away from technical possibilities and towards the usefulness, usability, suitability, and overall product experience that can help attract and retain customers.  Come check out the poster near the UX stage to get an overview of what is involved in this increasingly essential discipline.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session provides an overview of UX methods and concerns for attendees who have little experience with the field. The session will zone in on the topic of user-centered design, and include an overview of the range of methods available in the user-centered designers toolbox. Examples or demonstrations will be presented, including reasons for/against using such methods in an agile environment. By the end of the session participants should be equipped with a clearer understanding of the goals/values inherent in UX work and methods, as well as a knowledge base from which to begin using and learning about user-centered design methods back at work. </p>\n\n<p>I have presented a version of this talk at my own company and got good feedback from both management and developers. </p>\n\n<p>Contents of talk:</p>\n\n<p>Introduction: 15 mins</p>\n\n<ol><li><p>What is UX? </p>\n\n<ul><li>clarification of basic terms (UX, UCD, interaction design, interface design, usability, information architecture)</li>\n<li>what is user experience (look and feel, interaction design, information design, usability, product design/vision, performance and reliability, branding)</li></ul></li>\n<li><p>Why is it necessary?   </p>\n\n<ul><li>complexity of todays users and products</li>\n<li>users/customers often don’t know what they want</li>\n<li>identifying value (value across customers, internal value such as standards, identifying critical paths in user interaction vs. simple prioritization, etc.)</li></ul></li>\n<li><p>A selection of UCD methods - 55 mins\nThe discussion of each method will include: a description of the goal/purpose of the activity, an example or demonstration, a description of logistic/resource issues (e.g. time/resources needed to complete this activity), and a description of the expected output. </p>\n\n<ul><li>basic user research: task analysis. Demo: show and describe a task analysis protocol + examples of the types of results and recommendations resulting from a task analysis. </li>\n<li>design drivers: storyboarding/wireframing. Demo: use of a wireframe to explore/communicate a design (how wireframes complement user stories). </li>\n<li>design helpers: user-centered design principles (major principles and resources)</li>\n<li>design evaluation (hi/lo-fi prototying). Major Demo - 20 mins: running a usability study using a paper prototype.  </li>\n<li>Summary: iterative design and development + the importance of information dissemination</li></ul></li>\n</ol><p>Wrap-up: 20 mins</p>\n\n<ol><li><p>Discussion of UCD vs. agile (goals, values, and theory) </p>\n\n<ul><li>inherent conflicts existing between UCD and agile</li>\n<li>creating flexible/scalable designs (it’s hard!)</li>\n<li>“rapid” methods (can we automate user testing?)</li>\n<li>the value of design strategy and standards</li>\n<li>open questions/issues</li></ul></li>\n<li><p>Additional questions + sharing experiences</p>\n\n<ul><li>what problems have you had that you think UX/UCD can solve?</li>\n<li>what other UCD techniques have you used? </li>\n<li>what has worked (or not worked) within the agile context?</li></ul></li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	User Experience	Other	2008
20082188	Rethinking Unit Testing: xUnit.net	<div class="content">\n    <p>The release of NUnit 2.0 was almost 6 years ago.  According to Kent Beck, <em>Most folks who port xUnit just transliterate the Smalltalk or Java version. That’s what we did with NUnit at first, too. NUnit 2.0 is as it would have been done had it been done in C# to begin with.</em>  Unit testing began to really catch on in .NET. Six years later, many .NET developers are doing unit testing, and many of them cut their teeth on NUnit. With many unit tests under their belt, Jim Newkirk (the primary NUnit 2.0 author) and Brad Wilson — with feedback from many friends and co-workers — have released a new unit testing framework for .NET, xUnit.net. In this session, Brad and Jim will discuss the history of xUnit.net, including their motivations and decisions, as well as show the new framework both for test writers and for those who wish to extend the framework for their own uses.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session will be an mixture of lecture and hands on demonstration, for example: </p>\n\n<ul><li><strong>xUnit.net History and Primary Motivations</strong> - 15 minutes</li>\n<li><strong>Use Existing Language Constructs</strong> - 10 minutes</li>\n<li><strong>The T in TDD is Wrong</strong> - 10 minutes</li>\n<li><strong>Be Flexible, Safe, and Sure</strong> - 25 minutes</li>\n<li><strong>Extensibility</strong> - 30 minutes</li>\n</ul><p>Questions will be taken throughout the demonstration. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Demonstration	2008
20083191	Tangible Bug Tracking using LEGO bricks	<div class="content">\n    <h1>Summary</h1>\n\n<p><strong>BUG-LEGO</strong> is a practice to build a tiny structure which is representation of a software bug. Those are build with LEGO blocks and placed in the team’s workspace. LEGO bricks are represented as the priority, dependency, difficulty of software bugs by developer. It is a kind of information radiator.</p>\n\n<p>BUG-LEGO has three benefits.</p>\n\n<ol><li>Intuitive visualization of  the quantity of  software bugs for everyone.</li>\n<li>Changing mindset of developer from negative to positive against software bugs.</li>\n<li>Providing the physical constraint of  the building plate.</li>\n</ol><h1>Material</h1>\n\n<p>I have already uploaded the material on slideshare.</p>\n\n<p><a href="http://www.slideshare.net/kkd/tangible-bug-tracking-using-lego-bricks-in-agile2008-toronto/" title="http://www.slideshare.net/kkd/tangible-bug-tracking-using-lego-bricks-in-agile2008-toronto/">http://www.slideshare.net/kkd/tangible-bug-tracking-using-lego-bricks-in...</a></p>\n\n<p>The demo software, presentation as bricks, bug-lego on trac, aren’t public now.\nIf you’d like to use them, please contact me.</p>\n\n<h1>Description</h1>\n\n<p>BUG-LEGO was devised to reveal our software bugs hidden in BTS system.<br />\nIt was useful for us to show them, moreover, we have seen more than benefits.</p>\n\n<p><img src="http://itpro.nikkeibp.co.jp/article/COLUMN/20060928/249201/zu3_384.jpg" alt="BUG-LEGO" title="" /></p>\n\n<p>First is similar to traditional sticky notes on a wall. But BUG-LEGO is more interesting for visitor. </p>\n\n<p>Second is a important thing. Developers tend to deal with bug negatively. However, they enjoy to do bug, because Representation of LEGO bricks are creative task, and Destruction of them and Throwing them into the box are pleasure. What’s more, the sound of building, destruction and throwing make people who are in the room awake to the bugs.</p>\n\n<p>Third is that the plate has limitation of space, so developer must fix bugs. BTS is useful, but veil bugs in the unlimited storage.</p>\n\n<p>Of course, we are using BTS (Trac). And tickets are stored as detailed information. But tickets stored in BTS are less visible and noticable than BUG-LEGO.</p>\n\n<p>The workflow of BUG-LEGO:</p>\n\n<ul><li>Find bug</li>\n<li>Report it on BTS</li>\n<li>Build a tiny structure\n<ul><li>Priority is represented as horizontal location.</li>\n<li>Dependency is represented as vertical location.</li>\n<li>Difficulty is represented as shape.</li></ul></li>\n<li>Put the ticket’s id on LEGO</li>\n<li>Sign up for BUG-LEGO</li>\n<li>Bring it your desk</li>\n<li>Fix bug</li>\n<li>Destroy BUG-LEGO and throw them into the box</li>\n</ul><p>As we know it, quality is one of the most important goals in engineering processes. For example, CI, Pair programming, TDD/BDD are the practices used to achieve better quality. Keeping it in mind, we’d like to make rather dull tasks into more enjoyable, somewhat positive, activities.</p>\n\n<p>I would like to tell about my experience in using “BUG-LEGO”, and suggest more tangible practice on software development.</p>\n\n<p>I made a speech about the practice on 2007, 2008 in Japan.</p>\n\n<ul><li><a href="http://www.jasst.jp/archives/jasst07e/pdf/A4-1.pdf" title="http://www.jasst.jp/archives/jasst07e/pdf/A4-1.pdf">http://www.jasst.jp/archives/jasst07e/pdf/A4-1.pdf</a></li>\n<li><a href="http://www.slideshare.net/kkd/jasst-20080130" title="http://www.slideshare.net/kkd/jasst-20080130">http://www.slideshare.net/kkd/jasst-20080130</a></li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I’d like to talk about my experience.  And I will try to build lego while I am talking.</p>\n\n<p>What is bug-lego ? (with demonstration) : 10min</p>\n\n<p>Why did we use the practice? : 5min</p>\n\n<p>What did I notice? : 10min</p>\n\n<p>What next idea do I have? : 5min</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Talk	2008
20083793	See Large Scale Multi-Stage Continuous Integration in Real Time	<div class="content">\n    <p>With Continuous Integration, the chances rise exponentially with team size that as you fix a build or test problem, the integration of somebody else’s work creates a new build or test problem. Multi Stage CI addresses this problem by extending the practice of temporary individual isolation to features, teams, staging, QA, and release. This demonstration will show how Multi-Stage Continuous Integration works in the real world by drawing on the experiences of three large distributed teams. See changes by hundreds of simulated developers make their way through the system.</p>\n\n<p>For any meaningful project, a full integration build and test can take 30 minutes during which time other people may check in their changes. This can create a ping-pong effect in which the Continuous Integration system is constantly telling you that something is broken.\nAs developers we shield each other from instability by only checking in when we feel that our changes are integrated, tested, and won’t disrupt other people. Also, we only update our workspace when we are at a point that we feel we are ready to absorb other people’s changes. Multi-Stage Continuous Integration is an extension of this practice. If temporary individual isolation is a good idea, then temporary isolation for features, teams, team integration, staging, QA and release is an even better idea.</p>\n\n<p>As soon as a developer is ready to check-in, instead of checking into the mainline, they check in to their team branch which triggers a normal CI cycle. If that succeeds, then that branch and the mainline are automatically cross-integrated and another CI is triggered for the mainline. Unlike the traditional use of branches for long-lived variants, in Multi-Stage CI, branches act as temporary buffers and changes linger only as long as necessary, similar to the flow associated with a developer workspace. The result is that the impact of a build breaking or test breaking change is usually limited to just a single team instead of the whole world… with zero changes to a developer’s day to day activities.</p>\n\n<p>We will do a very short presentation on the concepts followed by a demonstration of a day in the life of Multi-Stage CI. See changes by hundreds of simulated developers for tens of teams get integrated at the team level, get validated by CI and either automatically move to the mainline or get rejected. This will be followed by CI at the mainline. Also, CI for multiple teams and the mainline will all be happening in parallel. This will be coordinated using Cruise Control, AccuRev, and Jira as an example implementation.</p>\n\n<p>A common reaction after folks move from CI to Multi-Stage CI is: “I never realized how many problems were a result of doing mainline development until they disappeared.”</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Demonstration	2008
20084424	APDT: An Agile Planning Tool for Digital Tabletops	<div class="content">\n    <p>Agile Planner for digital tabletop (APDT) is an agile planning tool supporting collocated and distributed agile planning meetings. Utilizing digital tabletop technology, APDT supports group interactions and natural behavior of agile meeting attendees.  APDT connects tabletops at different locations, creating a virtual-collocated platform that integrates distributed agile teams into a shared meeting scenario. APDT is a novel planning tool that addresses communication problems found in distributed agile planning meetings. An evaluation of APDT has been conducted and the overall feedback is very positive.</p>\n\n<p>In agile development models, planning meetings play an essential role in establishing a concrete understanding of customers’ requirements. Story cards are traditionally used to arrange tasks and feature requests into iterations. In a collocated agile planning meeting, attendees often create story cards and spread them on a table surface to organize them in iterations and releases. Moving a story card from one position to another on the table surface for grouping or prioritizing purposes is a very common practice. Also, because of the circular setting of the meeting around the tabletop, reorienting story cards to make them easier to read for some collaborators is another common practice. </p>\n\n<p>However, in a distributed agile planning meeting, behavior observed in a collocated agile environment has to change. For example, paper index cards on one table are not visible at another location. While there are currently many computer tools that support a distributed agile planning meetings, most of the tools are using desktop computers which provide a small, vertical display with a limted output resolution and a single mouse &amp; keyboard for input. Compared with a large, horizontal table surface available for a collocated agile planning meeting, a desktop display is very small and limits information sharing. Moreover, using a desktop computer, teams have to share a single keyboard-mouse. That is not as natural as using hands to work on a touch sensitive table surface.  </p>\n\n<p>To solve the problem exposed in a distributed agile planning meeting, we developed Agile Planner for Digital Tabletops (APDT), a digital tabletop based agile planning tool. Utilizing APDT on a reasonably sized digital tabletop allows collaborators to create, edit, move, rotate, toss and delete index cards just like they would do with paper artifacts. The added benefit of using a digital tool to facilitate planning (instead of paper index cards) is the ability to share a workspace over distance as well as improved progress tracking in distributed environments without a need to transcribe cards after the planning meeting. APDT provides a multimodal input system that supports gesture-, handwriting- and speech recognition as alternative input methodologies to conventional user interface widgets.</p>\n\n<p>In summary, the APDT integrates the computer based agile planning tools with the digital tabletop and thus provides a more natural environment (large, horizontal, touch sensible and multi-control screen ) to support interactive practices observed in a collocated agile planning meetings. </p>\n\n<p>**In the attached short paper, we illustrate the features of APDT in more detail.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We will use 15 minutes to motivate of development of APDT and show a video of the tool in a real agile planning meeting.</p>\n\n<p>Another 15 minutes will be used to demonstrate APDT which running on a TabletPC connected to a PC Projector. The actual digital table is too large to take it to the conference (about 8 feet by 4 feet).</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Demonstration	2008
20084663	Maven and Continuum - building an ecosystem for Agile builds and testing	<div class="content">\n    <p>Getting a build system right can set the tone of development for years, and yet teams constantly re-invent wheel over and over.  The application of a few key tools, such as Maven and Continuum in a sane ecosystem can provide a solid base for project growth and developer sanity, and can encourage the mature use of Agile practices and processes.  Well designed automation of building, testing, and reporting can provide invaluable developer ease and fast feedback to developers and and other stakeholders.  While most build and automation tools can be coerced into “good behaviour,” Maven and Continuum were developed with a sane life-cycle to start with.  When properly configured, they can help shorten builds, reduce waste, manage project complexity, ease developer ramp-up, and reduce the cost of re-configuring project layout, which in turn encourages fearless re-factoring, continual testing, and testable design.  </p>\n\n<p>This session is a four part tutorial with an introduction.  The introduction will look at principles and ingredients of a sane build infrastructure and its impact on Agile development.   Part 1 will work through a Maven 2 multi-project setup, including basic java, web-app, enterprise-app, parent metadata, and packaging project types.  It will also cover the basic architecture, lifecycle, and dependency management capabilities of Maven 2.  Part 2 will cover Maven-based reports, including code coverage, auto-documentation, etc.  Part 3 covers the setup of Continuum 1.1, including import of Maven 2 projects, setting appropriate build schedules, securing multiple projects and users, and generating notifications based on build events.  Finally, Part 4 will (optionally) cover advanced subjects, such as non-Java projects in Maven (Adobe Flex and C) and non-Maven (Ant, Make, etc.) projects in Continuum, as well as using Maven 2 Ant tags to provide Ant-driven builds with Maven-driven dependency management.  During the sessions, the impact of these tools on Agile practices and processes will be highlighted.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This will be a straight up tutorial.  While everything will be projected, attendees will be able to follow along on their own laptops should they wish to.  Source and config files for all examples will be available at each step, and the steps will be documented and available after the session in PDF.  At each step some limited Q&amp;A will be offered, but most Q&amp;A will be deferred to the end of each of the four parts (Maven 2, Maven reports, Continuum, and Advanced subjects).</p>\n\n<p>This is a formalization of tutorials I have given on-site to clients, and the three hours is aggressive.  If appropriate, Parts 1-3 could be given as a three hour (with more time for Q&amp;A) and part 4 could be given as a separate 90 minute advanced session.  The timing is somewhat scalable.  It can be stretched, which provides more Q&amp;A and more concrete examples, or squeezed, resulting in fewer specific cases and less Q&amp;A.  180 minutes is probably the least you can do without having the attendees need a followup session.  </p>\n\n<p>The basic layout of the session is:</p>\n\n<h3>Introduction</h3>\n\n<ul><li><strong>10 Min:</strong>  Introduction and discussion of the effects of good and bad builds on developer efficiency, and its second-order effects on things like test execution frequency, fearless refactoring, sufficiency of unit testing, frequency of SCM commits (batching), etc.</li>\n</ul><h3>Part 1 - Maven 2</h3>\n\n<ul><li><p><strong>15 Min:</strong>  Basic introduction to Maven 2, including Maven lifecycle, the plugin approach, and one or two simple Maven stand-alone projects.  Also covers artifact concept and unique ID (groupId, artifactId, version), as well as packaging type and classifiers and maven repositories.</p></li>\n<li><p><strong>15 Min:</strong>  Covers dependency management through metadata, pure-metadata Maven projects (metadata inheritence), multi-project builds through modules, and build order.  Actions include specifying custom repositories, adding sub-projects to build, a re-factoring of a project into two sub-projects.</p></li>\n<li><p><strong>10 Min:</strong>  Covers several approaches to Maven 2 project layout and adds in more types.  Also shows how to lock down build environment</p>\n\n<p>At this point, a full maven multi-module and multi-type project should be up and buildable.</p></li>\n<li><p><strong>5 Min:</strong>  Q&amp;A</p></li>\n<li><p><strong>10 Min:</strong>  Break</p></li>\n</ul><h3>Part 2 - Maven 2 reports</h3>\n\n<ul><li><p><strong>15 Min:</strong> Introduction to Maven 2 “site” plugin, including the basic approach to automatically generating site documentation, configuring basic reports.</p></li>\n<li><p><strong>15 Min:</strong> Configuring additional reports and plugins, adding custom documentation (Almost Plain Text and XDoc) and resources. </p></li>\n<li><p><strong>5 Min:</strong>  Q&amp;A</p></li>\n<li><p><strong>10 Min:</strong>  Break</p></li>\n</ul><h3>Part 3 - Continuum 1.1</h3>\n\n<ul><li><p><strong>5 Min:</strong>  Introduction to Continuum</p></li>\n<li><p><strong>10 Min:</strong>  Setup of Continuum, including key basic tips to a default install and adding users.</p></li>\n<li><p><strong>10 Min:</strong>  Adding Maven 2 projects to continuum.  Examine build order and dependency evaluation.  Setting basic schedules and build definitions for continuous integration.</p></li>\n<li><p><strong>15 Min:</strong>  More advanced config.  This includes setting alternate schedules for nightly builds, or documentation builds, etc.  Also includes some user management and environment management. </p>\n\n<p>This period can be shortened or omitted if other sections go over-time.</p></li>\n<li><p><strong>5 Min:</strong>  Q&amp;A</p></li>\n</ul><h3>Part 4 - Advanced Topics</h3>\n\n<ul><li><strong>25 Min:</strong>  Advanced topics can be discussed here, or general questions and answers.  Topics can may include expansions on any topic above, or issues like non-java build plugins (Flex and native C are ready examples).  Also, using the maven ant plugins to script a build with ant, but still use the maven dependency and repository capabilities.</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Tutorial	2008
20083337	Critical Chain AND Agile - best of friends	(No description)	Tools for Agility	Tutorial	2008
20080280	Tools, Frameworks and Libraries: the Devil's work or Manna from Heaven?	<div class="content">\n    <p>What happens when you put together a team of Agile folks and get them to decide which tools, frameworks and libraries they’ll need to do the job? Will we get (a) a happy consensus reached by rational argument, or (b) a never-ending irrational argument about which automated testing frameworks to use? We’re not sure, but in this workshop we’ll try to find out. We look forward to hearing about your own experience and what you think is most important.</p>\n\n<!-- break -->\n\n<p>In this session, we want the attendees to argue amongst themselves (in small groups) about what’s important to consider when choosing tools, frameworks and libraries for a fictitious greenfield project. We want attendees to share their own experience, and listen and learn from others.</p>\n\n<p>We want to delve into questions about the tools we use:</p>\n\n<ul><li>What’s most important to avoid?  </li>\n<li>What’s important to look for?  </li>\n<li>What’s not important at all?</li>\n</ul><p>And, for Agile, iterative projects:  </p>\n\n<ul><li>When is it simpler to use an additional tool/framework/library?  </li>\n<li>When is it appropriate to choose to use a framework today because it will probably be useful in the future?</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li><p>Get attendees to write their “index card CV”</p></li>\n<li><p>Brainstorm what tools, frameworks and libraries have you used or been forced to use in the past year. Get people to write up on coloured sticky notes post onto a large wall. (15 mins). During the remainder of the session whilst attendees are working in teams, the presenter(s) will affinity-group the sticky notes ready for the final plenary section.</p></li>\n<li><p>Divide people into teams (based on their CVs). Teams will be assigned an application to build (with the session leaders acting as the customer), e.g. Web 2.0 social networking site, or 50-user business GUI application etc. (5 mins)</p></li>\n<li><p>Groups brainstorm the set of tools, frameworks and libraries that they want to consider using for their project. (20 mins)</p></li>\n<li><p>Groups further narrow down their choices towards what’s most/least important (15 mins)</p></li>\n<li><p>Groups now reflect on the previous section. In cases where there was consensus, why was this? In cases where there was uncertainty or disagreement, why was this? (15 mins)</p></li>\n<li><p>As a whole, retrospect and review the affinity grouping (15 minutes) - what are the common features of the favourites? what are the common features of the least important? what disagreements did you have? why?</p></li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Workshop	2008
20080925	Drifting Toward Invisibility: the transition to the electronic task board	<div class="content">\n    <p>The task board, that seemingly innocuous artifact of the standup meeting, is perhaps one of the most important physical tools that the team has at its disposal. When teams make the transition to electronic tools, often many of these physical information radiators go away. This can cause unintended problems for teams. They are not insurmountable, but teams should be aware of the potential issues. For example:</p>\n\n<p>1) Team stand up meetings - often when the team switches to electronic tools, they no longer have the stories and tasks on a board in front of them during the meeting. As a result, they tend to lose focus during the meeting.</p>\n\n<p>2) A physical task board is a very useful information radiator - often that information is no longer displayed prominently when the team switches to electronics. The casual passer by loses their visibility into the team’s status.</p>\n\n<p>These are just some of the examples of teams losing transparency when they switch tools. In this experience report, The intent is to share the awareness of the problems teams can encounter with transparency if they do not manage the transition to electronic tools well.</p>\n\n<p>The implications for Agile development teams are discussed along with the strengths and weaknesses of the tools used. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Introduction - 5 minutes<br />\nThe argument for physical task boards - 5 minutes<br />\nMoving from physical to Electronic tools (Company #1) - 5 minutes<br />\nMoving back to physical tools (Company #2) - 5 minutes\nConclusion - 5 minutes<br />\nQ&amp;A - 5 minutes</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Experience report	2008
20081929	 Pushing the boundaries of testing and Continuous Integration	<div class="content">\n    <p>In this session, three representatives of an agile team will show how an automated build that executes robustness, scalability and performance tests helped them drastically improve the quality of their highly concurrent application server.  They will also show how the team configured such builds in their continuous integration environment as well as what performance and robustness metrics they monitored.  Finally, the team will show how valuable and effective this investment has been for capturing bugs and performance-related issues very early in their development process.</p>\n\n<p><strong>Intro</strong></p>\n\n<p>A small team, working in an agile group, discusses their experience on how they pushed <strong>continuous integration</strong> and <strong>automation</strong> for <strong>performance</strong>, <strong>scalability</strong> and <strong>robustness</strong> builds of their VoIP stack, the pros and cons of the approach taken to automated testing of the so called <em>non-functionals</em> and the benefits (and drawbacks) gained by automating such tests. They also discuss reasons why these tests have been written and automated early in the development process and consequently re-factored and improved over time to meet new customer needs.</p>\n\n<p><strong>Problem statement</strong></p>\n\n<p>Unit testing is often not enough to have confidence that the delivered software complies to the desired quality. More often than not, it is necessary to add multiple layers of testing. Needing to complete the user stories of scalability and performance measurement and improvement, the team built confidence through automated builds that tested robustness, performance and scalability. These automated builds currently run in an environment created using open source tools and custom built software.\nThe team is now able to deliver stories like:</p>\n\n<ul><li><p>When taking a VoIP stack from a single node server to multi-node server, repeatedly test the scalability over time.</p></li>\n<li><p>Test the robustness of the server product with likely scenario usage;</p></li>\n<li><p>Measure performance throughput over time using various persistence models.</p></li>\n<li><p>Automate such tests and continuously monitor the output as a measure of the quality of the product over time.</p></li>\n</ul><p><strong>Attending: who and why</strong></p>\n\n<p>Those interested in pushing their continuous integration environment further and automating as much as possible will benefit from the experience report of how this team achieved automated and continuous robustness and performance builds. Those with little to no experience of continuous builds may see the art of the possible and see how automating these processes allowed the team more time to complete their customer stories while continuing to monitor metrics in the background and to record performance history over time. It also allowed the team to discover early and often about bottlenecks and leaks that had been introduced and the effect of bug fixes on performance.</p>\n\n<p><strong>At the end</strong></p>\n\n<p>Q&amp;A will follow at the end of the presentation to conclude the session.</p>\n\n<p><strong>Presenters</strong></p>\n\n<p>Fabrizio Cannizzo, Raghav Ramesh, Robbie Clutton</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This presentation is an experience report and therefore has no workshop or tutorials attached.  We will describe the build system and the tools used to create it; what has been handcrafted, what type of tests we perform (robustness, performance, scalability) and how we automate them, what difficulties we encountered, what benefits we gained. We will have screen-shots of our build.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Experience report	2008
20083791	Migrating from SharePoint to a Better Scrum Tool	<div class="content">\n    <p>In 2007 Kelley Blue Book (KBB) decided to move to a more robust tool to promote agility while keeping up with increasingly challenging product release plans. KBB chose VersionOne to replace SharePoint as the enterprise Scrum Tool. With KBB sharing their experience of this common situation, other companies can learn about and adopt proven techniques to ensure a successful tool migration. This paper will cover KBB’s Scrum implementation, goals of tool migration, the selection process, migration approach, and results.</p>\n\n<p>This presentation will cover the:<br />\n Prior role of SharePoint with Scrum<br />\n Goals and approach to new tool selection, including:<br />\n - deficiencies with SharePoint for our Scrum implementation<br />\n - decision making process<br />\n - tools reviewed<br />\n Implementation approach<br />\n Initial results of migrating to an Agile Lifecycle tool<br />\n Future/next steps for continuous improvement  </p>\n\n<p>Some key questions answered during the presentation: What were our critical factors in selecting an Agile tool? What were the key benefits gained by moving beyond SharePoint? What were the biggest challenges and how were they overcome? How is SharePoint still being used alongside VersionOne?</p>\n\n<p>Audience: this presentation will be most useful for those looking to implement a more robust Scrum tool or those who are trying to determine if SharePoint will be sufficient for their organizational needs.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This experience report will be shared via a high-level PowerPoint deck and includes before and after examples (product/sprint backlogs, burndowns, etc.) from SharePoint and the Agile tool selected (VersionOne). As this is an experience report, no exercises will be presented. There will be a Q&amp;A session at the end of the presentation. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Experience report	2008
20082959	Itâ€™s Our Schedule, Letâ€™s Manage It! (Backlogs & Burndowns as tools for Agile Project Planning)	<div class="content">\n    <p>Who owns your project’s schedule? If you did not include “I do” as a part of your answer, perhaps you weren’t thinking of the layers of project planning, recognizing that everyone has ownership at some layer. Backlogs and Burndowns are effective tools for agile software teams to manage what they own. This Tutorial will explain Backlogs and Burndowns, showing how they work on real projects, helping manage real situations. This is a practical session for Developers, Testers, Team Leads, Coaches, and Project Managers who own Release and Iteration Planning.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The first half of the tutorial is PowerPoint presentation of the concept - lecture-style but open to questions and directions from the audience. The second half will be more dynamic and interactive as we go through a quick example of using a backlog and a burndown on a semi-realistic project. I gave a similar version of this tutorial at last-year’s Agile conference, and found, not surprisingly, that the flow of the second half was driven very much by the questions and comments coming from the crowd. This made it very real and applicable to the situations that were relevant to the audience.\nCan I put a sales-pitch here? This is the kind of session I wanted when I was getting started with Agile, because it provides something that can be used. It’s not just a theoretical presentation, but one that provides a set of tools and concepts that can be applied to real projects. From the feedback I received last year, the attendees seemed to agree.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Tutorial	2008
20084652	Using Agile engineering tools and practices to achieve Organizational Change	<div class="content">\n    <p>Organizational change is hard, and often teams attempt to implement Agile practices and processes without management support.  While a key factor in the success of Agile efforts is adequate process support from senior levels, often agile practices and processes can be used at the grass roots level to improve the culture, which can lead to management buy-in.   Areas such as build process, testing approaches, software design, and even IDEs and their configuration can determine aspects such as frequency of change submission, frequency of test execution, and even how projects are laid out and allocated among personnel.  These subtle variations can have a remarkable effect on development organization culture, on attitudes towards quality, on release management overhead and care.  By making simple changes in these areas, the subtle side-effects can be maximized.  This can, in turn, be made visible to help Management see the value in the overall agile approach, which can turn into appropriate organizational support for working in an Agile manner.</p>\n\n<p>Christian will examine these practices, their effects, and provide examples where such a grass-roots approach helped convince management to support or pilot fully agile approaches.  He will also provide counter-examples and anti-patterns which can often lead to such an effort being blocked.   Attendees should leave better armed to start practising “stealth agile” but with a mind to ultimately demonstrating its value and shifting the organization.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The presentation will largely be explanatory and visualized with presentation aids.  </p>\n\n<p>For example, looking at build processes, an overview would be given, starting from a description of a terrible (but realistic) example of a build process.  Key metrics about that process would be shown visually, such as a value-stream chart of the developer’s modify-build-execute_test-evaluate cycle, statistics on frequency of check-ins and test execution, impacts such as work-batching with proper reference to Poppendieck and others around queuing theory.  Then a more robust build process will be described, including tools to implement and an approach for gradual roll-out.  At each stage of modification, the implications will be examined, including (for this example) smaller sub-projects/modules, shorter builds, more frequent test execution, etc.  The cultural impacts will be described, taking anonymous real-world examples to illustrate.  Then means of presenting these improvements to management in order to best garner support for further change will be offered.</p>\n\n<p>Areas of focus will be on build process (per above), design for testability, organization of source code projects/repository, separation of types of testing (unit, functional,integration) and implementing separate lifecycles for each, continuous-integration/automated build scheduling, etc.  Given time, even areas such as platform selection and others can be examined.</p>\n\n<p>Lastly, there would be a Q&amp;A section.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Talk	2008
20080506	Evolution of the Tools and Practices of a Large Distributed Agile Team	<div class="content">\n    <p>Have you ever wanted to know which tools a big distributed team of successful software craftsman use to implement their user stories? How they configure them to support agile development based on XP and Scrum and deliver to the agreed plan? This session will answer these questions and more. Three representatives of this team will tell you what’s in their toolbox and how the toolbox supports four  core agile practices that the team adopts to succeed: maximum project status visibility, effective communication, immediate feedback and ruthless automation.</p>\n\n<p><strong>Intro</strong><br />\nThree members of a 50-strong distributed agile team will <strong>open their toolbox</strong> showing and discussing how they have been using well known free tools to support and facilitate their <strong>agile software development</strong> work.</p>\n\n<p><strong>Problem statement</strong><br />\nBased on the experience of the presenters, the session shows how the toolbox has been <em>evolving</em> to include non intrusive and highly configurable tools to address problems typically present in large and distributed teams working on a complex product. Such problems include, for example, not always knowing who is doing what, lack of automation, difficulties in communication between peers.</p>\n\n<p><strong>Tools and practices</strong><br />\nThe session explores how tools like Eclipse IDE (enhanced with plug-ins), Ant, Cruise Control, ScrumWorks, Selenium and Fitnesse can be <em>integrated</em> and <em>configured</em> to be effectively used by all the stakeholders (developers, scrum masters, product owners, customers, …) in order to maximise <strong>project status visibility</strong>, receive <strong>immediate feedback</strong> and implement <strong>complete automation</strong>  of as many steps of the the product development process as possible (practices put in place by the team - and supported by the tools in the toolbox - to overcome most issues described above).</p>\n\n<p>Attendees will also see why these tools have been chosen, what are their <em>pros and cons</em>, what configuration and integration techniques have been chosen and why they work for the team.  </p>\n\n<p><strong>Attending: who and why</strong><br />\nThe session is geared towards attendees with at least a minimal knowledge of concepts like <em>Iterative development</em>, <em>Continuous Integration</em>, <em>Acceptance Testing</em>, <em>Iteration and Release planning</em> (that is the basics of Scrum and XP). </p>\n\n<p>Beginners will benefit as they will be exposed to a concrete example an agile team in operation using free and popular tools: they may learn of new tools or of different usages of tools they’re already adopting. Experts will benefit as they will have a chance to  listen to the experience of a successful team, learn from the team’s success and failure stories and exchange experiences with the presenters; hence even if some of the described tools are not in their toolbox, they will still have the opportunity to see how the team has implemented the practices mentioned before.</p>\n\n<p><strong>At the end</strong><br />\nQ&amp;A will follow at the end of the presentation to conclude the session.</p>\n\n<p>This session is built on the one already presented and awarded at the London XPDay 2007.</p>\n\n<p><strong>Presenters</strong>\nFabrizio Cannizzo, Paul Moser, Gabriela Marcionetti</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We’re presenting this session, strong of the experience at XPDay, as an experience report. This means that this <strong>will not</strong> be a short tutorial on each of the discussed tools, but rather a discussion on how we (as a team) have used such tools stressing on how to achieve best results on three important agile principles (adopted, amongst others, to overcome the problems caused by the large and distributed nature of the team): <strong>visibility of the project status</strong>, <strong>immediate feedback</strong> and <strong>complete automation</strong>.</p>\n\n<p>The presentation runs for ~22 minutes, with ~6 mins for intro and conclusions, and ~4 mins for each tool discussed (mainly Eclipse IDE, Scrumworks, CruiseControl and Selenium - although we’re thinking of changing at least one of the tools). The rest of the time is for Q&amp;A - in fact, at XPDay 2007 we also had a poster with the toolbox and Q&amp;A and experiences exchange went on before the session and after at the poster area of the venue.</p>\n\n<p>We will drive the discussion using power point slides. What we noticed at XPDay is lack of “live action” so, rather than having snapshots of the tools embedded in a slide we will show live tools in action: tools will be preloaded in background and shown when needed.</p>\n\n<p>Each presenter discusses about a tool. The introduction is assigned to the presenter talking about the first tool and the conclusion to the presenter talking about the last tool.</p>\n\n<p>We’re more than happy to collect feedback and change the format if necessary to accommodate any request.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Experience report	2008
20082819	Adopting agile testing practices when legacy tools and practices rule !	<div class="content">\n    <p>Adopting agile practices such as TDD or functional testing with Fit/FitNesse in an organization without saying the word “agile” is challenging. \nWe will report in this presentation how we implemented agile practices such as continuous integration, test-driven development with a strong focus on productivity and reliability. </p>\n\n<p>To adopt agile testing practices, we consider the Mike Cohn pyramid as a target to help teams to organize tests development (unit tests, fitnesse/functional tests, acceptance/graphical tests). We also introduced the <a href="http://www.testing.com/cgi-bin/blog/2003/08/21#agile-testing-project-1" title="Brian Marick matrix">Brian Marick matrix</a> from his paper <a href="http://www.testing.com/cgi-bin/blog/2004/05/26#directions-toc">Agile testing directions</a> to do the difference between acceptance testing involving end-users and the functional testing involving functional APIs of applications.</p>\n\n<p>We will report the main steps we followed :</p>\n\n<ul><li>migrating applications “build” under Maven to improve dependencies management</li>\n<li>adopting Cruisecontrol to improve feedbacks during development and deployment phases</li>\n<li>configuring code review reports using Checkstyle, PMD, Findbugs and AspectJ (design policies enforcement) Maven plugins</li>\n<li>adopting an agile testing strategy based on Fit/FitNesse, xUnit (JUnit, JSUnit, …), JMockit, MockObjects, …</li>\n<li>developping a DSL to run Selenium from FitNesse</li>\n<li>adding FitNesse tests reports to Cruisecontrol dashboards</li>\n<li>taking into account legacy products such as IBM Rational Clearcase or HP Quality Center </li>\n</ul><p>Since we continue to evaluate solutions such as GreenPepper or Rally Dev, we may add more entries in our talk.</p>\n\n<p>Our final goal will be to report how we adopt agile practices and how we adapt them  to existing legacy systems (mainframe) and legacy tools (HP Quality Center).  We are in the process to evaluate Rally Dev solution as a bridge between agile and legacy project management practices.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We may run our session with slides, screen recorder (to avoid installations of heavy tools) and demonstrations (in case of opensource/web solutions).</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Talk	2008
20080276	JDemo - lightweight exploratory developer testing	<div class="content">\n    <p>Abstract: </p>\n\n<p>When test-driving a GUI component, some aspects are best checked by manual, exploratory testing.\nJDemo, inspired by JUnit and in extensive use and refinement since 2003, eases bringing the component onto the screen in the desired state and thereby allows the developer to concentrate on the task at hand and rapidly iterate through different versions of the component.\nThe session will give an introduction to the framework, and by means of a live example show how it can be used to effectively integrate exploratory testing into the TDD cycle.</p>\n\n<hr /><p>When test-driving a GUI component - such as a dialog, a wizard, a widget or similar - there are still some important aspects that, in my experience, are best checked by manual, exploratory testing: layout, look and feel, usability etc.</p>\n\n<p>To test these aspects manually, you need to get the component under test on the screen in the desired state. In the simplest case, you just start an application the component is used in. More often, though, you need to prepare an appropriate scenario and click through some screens to get to the component, which can consume a lot of time. It is then beneficial to write small code snippets that automatically bring the component onto the screen in the desired state, so that the developer can concentrate on the task at hand and rapidly iterate through different versions of the component.</p>\n\n<p>Out of the desire to ease the creation, organization and reuse of such code snippets, in 2003 one of our developers created the JDemo open source framework (<a href="http://www.jdemo.de/" title="http://www.jdemo.de/">http://www.jdemo.de/</a>). Inspired by the JUnit framework, JDemo provides utility methods to more easily write those code snippets (called demos), to organize them into suites and to run selected demos. Since then, the framework has been in extensive use and refinement by our development team.</p>\n\n<p>The session will give a short introduction to the framework (developers familiar with JUnit 3 should feel comfortable quite quickly), and by means of a live example show how it can be used to effectively integrate exploratory testing into the TDD cycle. A short presentation of the experienced advantages and disadvantages of this style of working from using the framework in an GUI intensive project will complete the session.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Part 1: a short introduction, contrasting JDemo to the JUnit framework</p>\n\n<p>Part 2: a demonstration on an example problem, showing how to incorporate exploratory testing into the TDD cycle using JDemo. I plan to organize a pairing partner that is new to JDemo.</p>\n\n<p>Part 3: a short presentation on our observations of pros and cons from using JDemo on GUI-heavy application development for the last five years</p>\n\n<p>Part 4: answering questions from the audience</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Talk	2008
20083435	JTestMe - improving test feedback and reducing build times with dynamically defined optimised smoke tests	<div class="content">\n    <p>JTestMe dynamically defines optimised smoke test suites for Java applications - dramatically improving the continuous integration cycle time. It is an Open Source project by ThoughtWorks, hosted on the Codehaus.</p>\n\n<p>Using an embarrassingly small amount of AspectJ, your test suites are instrumented to record which application code is executed during the test (similar to code coverage). When a test runs, any application classes which are executed are recorded into a repository. Super-classes and classes that are not directly called by tests are also included.</p>\n\n<p>When you change any application code, the repository is inspected to determine which tests should be run. These tests can then be run whenever you save a file, as an automatic pre-commit build test suite, or as an automatic smoke test suite for a Continuous Integration tool like CruiseControl.</p>\n\n<p>The benefit is that rather than running the whole test suite, or manually pre-defined test suites, only the tests that need to be run to exercise the changed code are the ones that are run, dramatically reducing the feedback cycle for most applications.</p>\n\n<p>Once the smoke test suite has passed, the full unit, integration, and functional test suites would be executed as is current practice, in order to fully assure the behaviour of the application (as some changes are beyond the view of the executing code).</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ul><li>Set the stage: some real-world examples of the long pre-commit test issue and long build times [5 mins]</li>\n<li>Overview of JTestMe: basic approach and how we use AspectJ [5 mins]</li>\n<li>Demonstration: taking a code base that has a 10 minute+ “fast” build time, apply JTestMe to reduce to a couple of seconds for pre-commit and smoke test builds (including unit, integration, and functional tests) so the impact of changes is seen “immediately” by developers [20 mins]</li>\n<li>Q&amp;A [throughout]</li>\n<li>Beers and karaoke [6 hours]</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Demonstration	2008
20084350	Workshop on build/test grids and selective testing tools	<div class="content">\n    <p>Agile developers love — and some actually need — to be in a state of flow. For them fast feedback from unit tests and continuous integration tools is not an option. In practice, fast unit tests often lack in coverage and many valuable tests run slow. This may be due to legacy code or the nature of the tests or just the sheer size of the application. Whatever the reason, getting feedback many hours after they submitted the code and the mental model has been blurred is a major impediment to developer’s productivity. To mitigate these issues a variety of strategies and tools have emerged. They primarily fall into three areas:</p>\n\n<ol><li>Distributed and incremental compilation and code generation grids.</li>\n<li>Distributed test execution grids.</li>\n<li>Selective testing tools that can dynamically construct an appropriate smoke test suite.</li>\n</ol><p>The goal of the workshop is to inventory current techniques and tools and to actively imagine promising future directions and features.</p>\n\n<p>An example of this approach may look like the following:\nWe have a cluster of 10 test servers and we assume that an incremental compilation, if any, takes only few minutes.\nIn a typical continuous integration cycle 100 lines of code are modified.\nFrom code coverage information we know what tests are related to those lines of code.\nWe also know the historical runtime of each test.\nWe choose 200 minutes worth of most relevant tests and get an overall result in roughly 20 minutes.</p>\n\n<p>Furthermore, we can merge the code and run the tests before they are committed to the repository, thus greatly reducing the risk of a broken build.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Workshop wiki: <a href="http://sites.google.com/a/itarra.com/test-grids/" title="http://sites.google.com/a/itarra.com/test-grids/">http://sites.google.com/a/itarra.com/test-grids/</a></p>\n\n<p>(10 min) Introductions.</p>\n\n<p>(40 min) Mini experience reports (max time per speaker is 5 min). The facilitator will choose the speakers with the intention to cover as much of the space as possible. Folks who have experience using these techniques and tools will share their stories. If you are a tools vendor, please prepare an experience report from an actual customer implementation.</p>\n\n<p>(40 min) We conduct a round-table type discussion focusing on the challenges to widespread adoption of this approach focusing on issues relevant to both implementers and tool developers.</p>\n\n<p>Whenever possible we will capture important data on the easel and later transcribe it to the wiki.</p>\n\n<p>Materials: One easel and large format self-adhesive paper.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Workshop	2008
20083218	Collaboration Explained--Tools for Facilitating Real Agile Teams	<div class="content">\n    <p>Very often, Agile initiatives begin with a concentration on either engineering practices or an executive edict. Somewhere in the middle, the Agile team is left to figure out how to absorb these practices and edicts. That means resolving what tools to use to consistently and reliably create and sustain the close interactions, participatory decision-making, and consensus driven results that support the success of the Agile initiative. In my experiences with Agile teams worldwide, I’ve discovered that teams lack fundamental tools for building these truly collaborative cultures.</p>\n\n<p>In this 90-minute tutorial, I offer a very specific set of tools (agendas, brainstorming approaches, consensus-building, inspection, action planning, etc.) for use by Agile team leaders and their teams to not only jump start their self-organization; these tools support practices that ensure a continued and growing collaborative Agile team. In presentation and exercises, I will guide participants in:</p>\n\n<p>A. What is a collaborative versus command-and-control culture for Agile? (This will include a brainstorming exercise to teach several fundamental components of good brainstorming: how to set up the brainstorming; what tools to bring to the brainstorming; how to timebox a brainstorming; what to do with the data from a brainstorming; what NOT to do in a brainstorming)</p>\n\n<p>B. What specific tools guide the focus of Agile team events? (This introduces basic tools around timeboxing, information radiators, action plans, parking lots, decision boards, communication plans, team agreements, agendas, purpose statements.)</p>\n\n<p>C. What tools help teams focus on their decisions and in their iterations? (This concentrates on the Daily Standup: how to have very effective focused standups and how to manage dysfunctional standups; what to do with the information and decisions that emerge from standups. How to use action planning and daily commitments in the Standups.)</p>\n\n<p>D. What specific tools can we use to get the greatest wisdom of the team in any team meetings? (Here, I concentrate on participatory decision-making tools: brainstorming, listing, grouping, prioritizing, and gaining consensus. This will be a quick listing of tools.)</p>\n\n<p>E. What specific agendas can guide our release planning, iteration planning, daily meetings, and review meetings? (This is an exercise where groups of participants work on creating an agenda for one of the four types of meetings listed. We will debrief about the results and I will provide my own standard set of agendas I use as a starting point for any of these Agile staple meetings.)</p>\n\n<p>F. How do we inspect and adapt our tool set? (I will close the tutorial by adding a fifth agenda, the Retrospective meeting and will then actually conduct a retrospective on the tutorial with the entire group to provide an example of a quick, objective retrospective.)</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>My agenda gives the complete layout of what I will present as well as the exercises. Because of the time limit (90 minutes), I will probably only do 2 full exercises with participants working in small teams, and a 3rd exercise with all of us together.  Based on feedback from reviewers, I have scaled back my topics, concentrated on specific material and ensured that I will have the 3 exercises.</p>\n\n<p>I am passionate about this topic and its value because of the many teams I have seen struggle with Agile.  Simple items like putting a meeting agenda on the wall has made a huge difference in helping these teams be more focused and more collaborative. Engaging in real brainstorming and in consensus-building has also been an eye opener for teams I have work with that are trying to be self-organizing. My goal in this 90-minutes is to have participants walk out of the tutorial with an explicit set of tools they can take back to their teams.  Each agenda item has specifics about team work, team decision making, and team focus in all the planning and work that must occur collaboratively in Agile software development. </p>\n\n<p>Don’t be fooled! This is not fluffy stuff! This is real tools!  Also, to be clear, I am not selling any software tools or promoting any software solutions as tools for collaboration. My collaboration tool set is around information radiators, agendas, sticky notes, dialogues, flipcharts, and good facilitation techniques.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Tutorial	2008
20083070	Test-Driven Ajax	<div class="content">\n    <p>Ajaxified web applications bring new challenges to the field of test-driven development: JavaScript, dom manipulation, drag N drop, distribution, asynchronous commmunication, mash-ups, browser-incompatibilities, framework creep and more. How far do you get with proven tools and methods? Where do the known techniques still work? Where do we have to introduce new tools and methods? Will there still be some holes in our “web” of unit and acceptance tests?</p>\n\n<p>I’ll present the topic from a Java developer’s point of view showing a working example with many testing problems tackled and even a few solved.</p>\n\n<p>Topics covered in the talk:</p>\n\n<ul><li>How much unit testing makes sense for the JavaScript client and what tools are available for that?</li>\n<li>How can you mock away the asynchronous communication via XMLHttpRequest?</li>\n<li>How can you deal with the dependency on other frameworks like Google Maps (tm)?</li>\n<li>What’s a suitable way to decouple client from server in order to facilitate testing?</li>\n<li>What are your options for running repeatable integration and acceptance tests?</li>\n</ul><p>Most techniques will be shown in a working example that builds on Prototype, Scriptaculous, Google Maps (tm) and others. </p>\n\n<p>Tools shown and used are: Scriptaculous Testing Framework, JsMock, JsTester, JUnit, Fit, HtmlUnit, Selenium, WebTest. </p>\n\n<p>Participants should know the basics of TDD and Ajax.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>It’s going to be an old-fashioned talk. Demos and Q&amp;A included. Code on the slides. Working code being run.</p>\n\n<p>I probably coud strip it down to 60 minutes - if there will be 60-minute-slots.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Talk	2008
20085043	Mastering Selenium	<div class="content">\n    <p>Getting Selenium Core up and running is fairly easy. Making it hum in a real-world XP/Agile project requires experience and a heap of tips and tricks. In this tutorial, participants will learn from our hard-earned experience in the trenches, and see code and tests from Industrial Logic’s shipping product. I will describe specific Selenium problems we’ve encountered, technique(s) we employed to solve those problems and what our final test scripts looked like. </p>\n\n<p>In Part I of this tutorial, I’ll cover such issues as:</p>\n\n<ul><li>what to do when you get false negatives (failing tests that should pass)</li>\n<li>managing setup and teardown effectively and efficiently</li>\n<li>dealing with t-t-t-timing problems</li>\n<li>testing Ajax calls</li>\n<li>forcing a web session timeout without changing application code</li>\n<li>using Selenium Grid to run continuous tests on multiple browsers</li>\n</ul><p>In Part II of this tutorial, I’ll touch on how we create Selenium test scripts that are easy to read, that share code, are well structured and resilient to changes in the UI.</p>\n\n<p>In Part III of this tutorial, I’ll demonstrate how we do Storytest-Driven Development using Selenium and the tips and tricks we’ve learned.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This tutorial is an interactive presentation, complete with lots of stories from the trenches, plenty of demonstrations of shipping code and tests.   I’ll answer questions all along the way, while keeping a good pace to get through all of these important concepts.  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Tutorial	2008
20084491	Open source performance testing tools for the web	<div class="content">\n    <p><strong>Abstract</strong></p>\n\n<p>Performance testing our applications is either neglected or we use expensive and time consuming to learn commercial tools that often produce so many metrics and raw data that it can be difficult to derive meaningful information to improve application performance. What can agile teach us about doing performance analysis? This talk provides an overview of available open source performance testing tools and discusses minimalistic approaches to testing web sites and web services using tools including JMeter, Grinder, WebTest, SoapUI and a Groovy DSL.</p>\n\n<p><strong>The Pitch</strong></p>\n\n<p>An often neglected area of testing our applications is performance testing. Some very expensive and time consuming to learn commercial tools are available but they often produce so many metrics and so much raw data that it sometimes seems difficult to derive any meaningful information that can be used to improve the application. What can agile teach us about doing performance analysis? If we apply <a href="http://en.wikipedia.org/wiki/You_Ain't_Gonna_Need_It">YAGNI</a> to performance testing, we should limit the metrics we gather to the very basics.</p>\n\n<p>This talk provides an overview of available open source performance testing tools and then takes a minimalistic approach to testing a web site and a web service using a selection of tools.</p>\n\n<p>Tools with examples include <a href="http://jakarta.apache.org/jmeter/">JMeter</a>, <a href="http://grinder.sourceforge.net/">Grinder</a>, <a href="http://webtest.canoo.com">WebTest</a>’s <a href="http://mguillem.wordpress.com/2008/02/04/boost-your-webtests-50-faster-or-more/">performance extensions</a>, <a href="http://soapui.org/">SoapUI</a>’s <a href="http://www.soapui.org/userguide/loadtest/index.html">load testing</a> extensions and a <a href="http://groovy.codehaus.org/Testing+Guide">Groovy</a> <a href="http://martinfowler.com/bliki/DomainSpecificLanguage.html">DSL</a> for writing performance tests.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The talk will be example rich. A web site will be available for attendees to download any example code shown in the talk.</p>\n\n<p><strong>About the attached slides (for the CD)</strong></p>\n\n<p>I have recently starting looking at Selenium Grid and hope to include some details of that in the talk by the time of the conference. If this is the case, the slides my look a little different to what you see attached. I will try to make any revised slides available here if I can.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Talk	2008
20084713	Boosting your testing productivity with Groovy	(No description)	Tools for Agility	Tutorial	2008
20084746	Narrative Testing: Tools for Story Test Driven Development	<div class="content">\n    <p>Narrative Testing leverages script-based testing tools and DSTLs to express Story Tests in the user’s own language. Developers and customers cooperate to create customer-readable scripts based on User Stories, which are executed interactively against the application UI.  Through Narrative Testing, customers are able to view the executing test, and to experientially tie steps in the test to changes in the application state, increasing customer confidence in testing. We will share practical tips and real-world experiences for the interactive creation of executable Narrative Tests with the user.</p>\n\n<p>Story Test Driven Development (STDD) extends the benefits of Test Driven Development from the Unit Test level to the Acceptance Test level. Narrative Testing tools implement test scripts that execute an entire User Story, rather than capturing calculations at a single point in the User Story in tabular form. This allows developers to write story tests directly into executable test scripts, and have customer-readable Narrative Tests created directly with and by our customers. This session will present the difference between tabular test tools like FIT and narrative test tools like Watir, Selenium and STIQ. We will explore the natural extraction of customer requirements and knowledge via User Stories, and how these stories can be directly, even interactively, translated into executable Narrative Tests in a narrative testing tool. Finally, we will discuss some of our practical experiences with STDD, and the lessons we have learned that facilitate interactive creation of executable User Story Tests with the customer.</p>\n\n<p>This session was previously presented at Agile 2007, and was standing-room-only.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Attendee reviews from Agile 2007 were very positive, so we’re intending to use the same format this year: a high-level overview of Story Testing and Narrative Testing, a few short demos using several different Narrative Testing Tools, an in-depth look into the motivations for doing Narrative Testing as a sub-category of Story Testing, and a practical discussion of how to use Narrative Testing in the context of Agile iterations.  After an opportunity for questions and clarification, we’ll wrap up the presentation with an in-depth demo of using Narrative Testing to drive refactoring, extend an existing User Story, and implement a new User Story.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Tutorial	2008
20081232	Executable User Stories with RSpec and BDD	<div class="content">\n    <h2>Story: Understand how BDD User Stories can be executable functional tests</h2>\n\n<pre><code>As a developer\nI want to just execute a prose User Story as is\nSo that the little diabolic details don't get lost in translation to code\n\nScenario: Aslak inspires someone to try this out\n    Given Paul attends Aslak's session\n    And he has suffered the pain of deciphering requirements\n    When the demonstration is over\n    Then Paul should feel motivated to try this technique\n\nScenario: Aslak fails to convince anyone\n    Given Patty attends Aslak's session\n    And she has never suffered the pain of deciphering requirements\n    When the demonstration is over\n    Then Patty should feel like she should have attended a different session\n</code></pre>\n\n<h2>The text above is executable!</h2>\n\n<p>This demonstration will introduce you to the core principles and practices beind Behaviour Driven Development (BDD).\nYou’ll see how the RSpec Story Runner (a BDD tool in Ruby) can be used to execute stories on the above format against\na real system. It’s similar to FIT, but the format is prose instead of tables.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>3 parts, each will be about 30 minutes.</p>\n\n<ol><li>Give a 1 minute teaser-demo of the Story runner to whet appetite. Introduce BDD and its benefits and goals.</li>\n<li>Group exercise where everybody gets to write some stories on the BDD format - on paper</li>\n<li>With help from the audience I’ll show the steps of making the stories executable on my laptop/projector</li>\n</ol><p>Thoughts and tools used:</p>\n\n<ul><li><a href="http://behaviour-driven.org/" title="http://behaviour-driven.org/">http://behaviour-driven.org/</a></li>\n<li><a href="http://rspec.info/" title="http://rspec.info/">http://rspec.info/</a></li>\n</ul><p>This will blow your socks off!</p>\n\n<p>P.S. Je peux aussi donner cette présentation en Français - sous les chansons françaises. Plusieurs personnes m’ont demandés comment on peut supporter d’autres langues dans cet outil, et j’aimerais en discuter avec des francophones.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Demonstration	2008
20081702	Text-based Acceptance Testing using TextTest	<div class="content">\n    <p>Testing a program by comparing text files written by the current run with those from previous runs is an old idea, but one which has fallen out of fashion. This session aims to rehabilitate it as an agile technique and present a suitable tool, TextTest. We aim to show that there are applications where testing in this way has major advantages, and examine the advantages and disadvantages in a more general setting. We will include a practical demonstration showcasing Behaviour-Driven Development, but not as you know it, with TextTest.</p>\n\n<p>The above paragraph is for the program: the original description follows.</p>\n\n<p>Testing a program by running it and comparing its output against a “gold standard” version of that output is an old idea, but one which has fallen out of fashion in recent years. This can, however, be an extremely effective technique in some circumstances, given comprehensible output and good tool support. Developing against such tests leads to a very “behaviour-driven” development style where the tests are entirely focussed on how the program is called and how it behaves in response, both in terms of actual output and logged information.</p>\n\n<p>The currently favoured approaches to testing involve calling into the system via some sort of test API, and making assertions about returned values. Acceptance test tools generally keep this model and add an abstraction layer above the API calls to aid non-technical people in writing tests. But there are situations where the text-based paradigm has major advantages over this paradigm, such as:</p>\n\n<ul><li>Small UNIX-style command-line scripts (e.g. build scripts). The command line is their natural environment anyway and creating APIs is overkill.</li>\n<li>Legacy systems. Improving the logging in a system is far lower-risk to do without tests than creating a test API.</li>\n<li>Unusual or older languages. Code-level tools need translating for every new language, and the translations are often far worse than the original tool. A command-line tool works for every language past, present and future with no changes.</li>\n</ul><p>There are even generic advantages to the setup on more general systems, especially in the context of an agile process, such as:</p>\n\n<ul><li>Doesn’t require hardcoding a “correct behaviour”. Many things are interesting to test but have no clear “objectively” correct behaviour. One of the assumptions of Agile processes is that the correct behaviour of the system will change over time, and this approach makes it easy to do this.</li>\n<li>Independence from internal design makes major structural refactoring easier, as it cannot break any tests</li>\n<li>Can use the same technique and tests for all levels of detail, from customer-relevant “external behaviour” down to developer-relevant code behaviour. Leads to a single test suite which the whole team can own.</li>\n</ul><p>Naturally there are disadvantages too, which will also be discussed, along with how to mitigate them:</p>\n\n<ul><li>The “Expert Reads Output” antipattern, where people get so used to correct behaviour changes that they stop checking them properly before accepting them.</li>\n<li>Potential performance overhead of logging, even when disabled.</li>\n</ul><p>We will present these ideas along with the tool TextTest (<a href="http://www.texttest.org" title="http://www.texttest.org">http://www.texttest.org</a>), which is an open source tool that tests in this way. This is a stable, feature-rich tool that has been around for over five years, and is used heavily within our organisations and a few others besides. Features include:</p>\n\n<ul><li>regexp-based filtering of output pre comparison</li>\n<li>parallel testing on grids, by interfacing with grid engines like Sun Grid Engine and LSF</li>\n<li>advanced “mocking” capabilities, by intercepting at the command-line or network-traffic level without changing the system code </li>\n<li>test management and test data management</li>\n<li>various interpretation tools to associate textual patterns with behaviour descriptions or bugs in bug systems</li>\n<li>HTML reports that track behaviour of nightly test runs over time</li>\n<li>Built-in performance testing</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The basic breakdown will be along the lines of</p>\n\n<ol><li>Present textual testing as an idea, when to do it, when not to do it, the advantages and disadvantages, mainly assuming an agile process as backdrop (30 minutes)</li>\n<li>Introduce and briefly demo the TextTest tool. (15 minutes)</li>\n<li>Run a “code kata” to develop a simple program from scratch, using TDD (or more accurately BDD) with TextTest. Prove that it is possible to do this without undue fuss, writing\nany test code other than log statements, or taking any larger steps than you would with xUnit / rspec. We will do this as a prepared kata (having done it as a \nrandori at XP2007) because the audience are probably unfamiliar with the techniques and tools. We will however encourage input and participation from the audience,\nbut we intend to hold onto the keyboard! (45 minutes)</li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Demonstration	2008
20084855	Domain Specific Testing Languages	<div class="content">\n    <p>Domain Specific Testing Languages (DSTLs) express customer requirements as tests with the scope, granularity, and transparency you need. Dynamically extensible DSTLs help you keep the core testing tool simple while creating automated test scripts the customer can easily read, verify, and use as requirements documents.  In this session, you’ll get practical tips to foster test code re-use and reduce test maintenance costs, especially on large and long-running projects. Learn to use “refactor into abstraction” and “intentional testing” as two complementary paradigms for making stronger, more expressive, more maintainable tests.</p>\n\n<p>Script-based automated testing tools suffer from challenges in scope, granularity, transparency, and customer comprehensibility.  Domain Specific Testing Languages (DSTLs) allow developers and customers to express tests in customer language and at appropriate granularities of abstraction.  Support for dynamic extension of DSTLs facilitates both bottom-up abstraction (refactoring tests for maintainability and emergent order) and top-down abstraction (“intentional testing”, by analogy to intentional programming).  </p>\n\n<p>Automated tests written in dynamically extensible DSTLs are easily readable by the business people that help to specify them, since they are written in the customer’s business terms.  Subject matter experts can assist in verifying the test content (process flow and expected outcomes), and can use the test script as a requirements document, in addition to its use as executable requirements for the developers.</p>\n\n<p>No out-of-the-box testing tool can support all levels of abstraction, the terms of art for all domains, and the specific nuances of meaning that vary between customers.  By providing configurable and extensible support for domain-specific testing languages, testing tools projects can keep the core testing tool simple and yet provide this level of power to all users of the testing tool.</p>\n\n<p>A preliminary version of this session was presented at Agile2007, and an updated version will be presented in March at SD West 2008.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>In response to feedback from last year’s session, we are broadening the set of script-based automated testing tools from which we draw our examples, and adding sections covering test abstraction, “intentional testing”, and practical tips for bottom-up abstraction (which augments test code re-use and reduces test maintenance costs, especially on large and long-running projects).  We will begin with a discussion of what a DSL is, and thus what a DSTL is.  We will look at how abstraction granularity presents a challenge to test writers, and how dynamically extensible DSTLs provide a solution.  We will offer some examples (drawn from real-world experience) of reducing test complexity and increasing customer visibility into the semantics of tests.  We will then introduce “refactor into abstraction” and “intentional testing” as two complementary paradigms for making stronger, more expressive, more maintainable tests, and will show how support for dynamic DSTL definition facilitates both types of abstraction.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Tutorial	2008
20080446	FitNesse Demo	<div class="content">\n    <p>FitNesse out of the box does not seem to work for teams! In this demo I’ll show how to set up FitNesse so that development teams can do the following:</p>\n\n<ul><li>Organize their Stories, Acceptance Criteria and Acceptance Test better</li>\n<li>Create different levels of test suites to give feedback at different levels</li>\n<li>Version control the FitNesse wiki with their source code</li>\n<li>Inline editing of their FitNesse pages, with out having to worry about Wiki syntax</li>\n<li>Integrate FitNesse with their builds, so that they can run their acceptance tests as part of their Continuous Integration loops</li>\n<li>Integrate FitNesse with CruiseControl or other CI servers to that the team can see the acceptance test results from the build</li>\n<li>Execute their acceptance tests against the server side components in a web/app server</li>\n<li>Demo DBFit, a standard library of fixtures for basic DB operations. Mostly used for set-up and tear-down sets of acceptance tests</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Interactive demo about these features of FitNesse from my laptop. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Tutorial	2008
20080400	Effective test-driven database development	<div class="content">\n    <p>Test-driven development is now considered common sense in the OO world, but it is often not applied to database code. This session looks at the reasons why teams struggle with database test coverage and presents solutions and best practices for test-driven database development, from unit-testing stored procedures to Java/.NET integration tests that involve a database. We also present DbFit, an extension to FIT/FitNesse that makes database TDD easy, and discuss a case study of migrating database testing to this model at Edfinancial Services, a student loan servicing company.</p>\n\n<p>(break here for the program guide)</p>\n\n<p>Part I: Technical challenges and best practices for Database TDD (30 mins)</p>\n\n<ul><li>Why database TDD is hard</li>\n<li>What can we do to make it easier</li>\n<li>Best practices for stored procedure unit testing</li>\n<li>Best practices for Java/.NET integration tests that involve a database</li>\n</ul><p>Part II: DbFit technical demo (25 mins)</p>\n\n<ul><li>Why DbFit succeeded where x-Unit style tools have failed</li>\n<li>Effectively testing stored procedures</li>\n<li>managing relational data during a test</li>\n<li>Using DbFit to prepare data or verify the test results for Java/.NET integration tests</li>\n<li>Covering legacy code with tests</li>\n</ul><p>Part III: Database testing case study - migrating to DbFit in EdFinancial (25 mins)</p>\n\n<ul><li>Problem we needed to solve</li>\n<li>Examples of bad integration tests</li>\n<li>How DbFit helped </li>\n<li>Best Practices and lessons learned\n<ul><li>Creating and Organizing Integration Tests </li>\n<li>Coordinating work for multiple teams</li>\n<li>Running tests on various test/staging servers</li>\n<li>Frequent database changes </li></ul></li>\n</ul><p>Part IV: Q &amp; A (10 mins)</p>\n\n<p>The session will be presented by Gojko Adzic from Neuri Ltd and Marisa Seal from EdFinancial. Gojko is the author of DbFit. Marisa is one of the most active members of the DbFit community.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>interactive presentation</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Demonstration	2008
20082615	Test Driven Development for Data Management projects using FIT4Data	<div class="content">\n    <p>The tools and techniques needed to do Test Driven Development are extremely well documented for Object Oriented languages, but how do we do TDD data management and business intelligence projects using 4th generation ETL languages like Ab Initio?</p>\n\n<p>In this talk, I will show you how to do TDD when transforming data is the sole aim of the project. The talk will be divided into two parts. First, the theory of TDD in data management applications and, second, the application of the practices using FIT4Data.</p>\n\n<p>FIT4Data is a testing framework for data management applications built on the Java implementation of FIT.  It allows developers to write FIT-like tests using the programming language of their choice.  This is essential in the ETL domain where the key technical skills are UNIX scripting and the ETL language used on the project and most developers do not know Java (or any other OO language) so they are not equipped to write fixtures in the usual fashion.  Furthermore, FIT4Data provides direct support for common ETL tasks like integrating with a UNIX shell environment and maintaining reusable data sets.  </p>\n\n<p>FIT4Data is available to download at it’s home on Google Code - <a href="http://code.google.com/p/fit4data" title="http://code.google.com/p/fit4data">http://code.google.com/p/fit4data</a></p>\n\n<p>In the first part, I explain how to break a typical set of customer requirements an business rules down into chunks suitable for TDD and then how to define testable scenarios around them.  In the second part, I will show how to use FIT4Data to build and run the tests and build the application using TDD using practical examples.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Presenter-led demonstration.  The theory section will take around half an hour and the practical section around 40 minutes leaving 20 minutes for questions and discussion.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Tools for Agility	Demonstration	2008
20080065	A Model for Questioning Agile	<div class="content">\n    <p>Program Guide Summary:</p>\n\n<p>As a trainer and consultant, I regularly encounter teams and individuals with significant misconceptions about what being Agile means. Some who have embraced the principles behind the Agile Manifesto, but are criticized as not being Agile because they don’t follow publicized Agile practices; some known as exemplars of Agile, but have implemented Agile concepts in a non-agile fashion; some who exemplify Agile principles, but reject being Agile because they don’t comply with published Agile processes.</p>\n\n<p>This session will poses the question “What does it mean to be Agile?”</p>\n\n<p>Full Summary:</p>\n\n<p>I am an avid supporter of the Agile Manifesto and the principles behind it.  As a trainer and consultant, I am almost continually faced with\nteams and individuals who have (in my opinion) significant misconceptions about what being Agile means.  I encounter teams and organizations who have (in my assessment) embraced the principles behind the Agile Manifesto, yet are criticized as not <em>being</em> Agile because they don’t follow commonly referenced Agile practices and/or processes (i.e. XP, SCRUM, etc.).  I also encounter teams and organizations that are externally referenced as being exemplars of Agile, but upon deeper inspection appear (to me) to have implemented Agile practices and/or processes in a non-Agile fashion.  Further, I encounter teams and organizations who (to my eye) have embraced the principles behind the Agile Manifesto, but reject the notion of being Agile because they don’t believe that they comply sufficiently with commonly referenced Agile practices and/or processes.</p>\n\n<p>This session will pose the following questions:</p>\n\n<ul><li>What qualifies a team or organization to be recognized as being Agilewithin the Agile community?\n<ul><li>Is it sufficient to embrace the principles behind the AgileManifesto to be recognized as an Agile team or organization?</li>\n<li>Is it necessary to implement practices and/or processes commonlyassociated with Agile to be recognized as an Agile team or organization?</li>\n<li>Is it some combination of the two?</li>\n<li>Is it something else?</li></ul></li>\n</ul><p>Goals of this session:</p>\n\n<ul><li>Pose the question “What does it mean to be “Agile”?</li>\n<li>Kick off this new and innovative stage with a question intended to spark challenging discourse leading (hopefully) to positive enhancements\nin the Agile message.</li>\n<li>Model the approach this stage will use to manage professionaldiscourse/debate between session attendees.</li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The process will be totally manual, hosted by me and another person who I’ll enlist in my master plan.  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Talk	2008
20084363	Trying to save a Scrum implementation using Lean Principles and Artifacts	<div class="content">\n    <p>After three and a half years of using Scrum and still providing inconsistent quality and not getting better, we are embarking on an attempt to improve by using Lean ideas and modifying our Scrum implementation.  For some time now, our attempts to make Scrum work for us have mostly failed.  Scrum out of the box, in a company with over 100 developers and testers, was not working as expected.  This presentation is a report of our efforts to improve our Agile approach by using Lean and other ideas.</p>\n\n<p>We started by re-training all our teams and discussing with them the Lean principles and implementing several changes:</p>\n\n<ol><li>Move product owners to a separate department and get them closer to the customers.</li>\n<li>Moving away from a Task centric point of view to a Business Value point of view.  Stop talking about tasks and tell me about the stories.</li>\n<li>No more weekly Scrum of Scrums, lets bring all Scrum Masters to meet every day for 30 minutes, so we can discuss our impediments every day.</li>\n<li>Agile Retrospectives do not work.  Let’s do a Lean retrospective instead.  Create a backlog of impediments and put it in priority order.  Use value stream mapping to find the biggest impediment (wait).  Use 5 Whys to find the real root cause.  Use Demming Cycle (or Wheel) PDCA to remove one impediment at the time.</li>\n<li>Stop the Top-Down management approach and make your teams really self-managed.</li>\n</ol><p>How are we doing?  Come to the presentation and find out.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This will be a typical powerpoint presentation where we will go over the history of our Scrum implementation.  We will answer questions and show some data and examples of the work.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Talk	2008
20084331	Big Ball of Mud	<div class="content">\n    <p>Over ten years ago, Joe Yoder and I opined that, while much attention had been focused on high-level software architectural patterns, what was effect, the de-facto standard software architecture had seldom been discussed: the Big Ball of Mud (<a href="http://www.laputan.org/mud/mud.html" title="http://www.laputan.org/mud/mud.html">http://www.laputan.org/mud/mud.html</a>). </p>\n\n<p>It has become, God help us, our best known work. And, somewhat to our amazement, since then, no one has ever undertaken to dispute this premise.</p>\n\n<p>A Ball of Mud  is a haphazardly structured, sprawling, sloppy, duct-tape and bailing wire, spaghetti code jungle . We’ve all seen them. These systems show unmistakable signs of unregulated growth, and repeated, expedient repair. Information is shared promiscuously among distant elements of the system, often to the point where nearly all the important information becomes global or duplicated. The overall structure of the system may never have been well defined. If it was, it may have eroded beyond recognition. Programmers with a shred of architectural sensibility shun these quagmires. Only those who are unconcerned about architecture, and, perhaps, are comfortable with the inertia of the day-to-day chore of patching the holes in these failing dikes, are content to work on such systems. </p>\n\n<p>Still, this approach endures and thrives. Why is this architecture so popular? Is it as bad as it seems, or might it serve as a way-station on the road to more enduring, elegant artifacts? What forces drive good programmers to build ugly systems? Can we avoid this? Should we? How can we make such systems better? </p>\n\n<p>This “Ball of Mud” conjecture was born during the first flowering of what became the Agile movement during the late nineties, and held out the hope that these notions might offer one way to escape these swamps.</p>\n\n<p>Does agility offer a way out, or does it instead lead to a blitzkrieg sprint to the edge our ability to cope with complexity that ends in the muddy trenches? Is sustainable code cultivation possible, or desirable? Or are slash-and-burn practices the once-and-future state of the art?</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I’ve given two earlier talks with this same title, the latest being an invited talk at OOPSLA 2007. I expect that this talk will bear only a superficial resemblance to that one.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Talk	2008
20083853	Scale Back: Small is Beautiful	<div class="content">\n    <p>There is so much focus these days, and at Agile2008 especially, on “scaling Agile”, and it bothers me.  There is something about that term that leaves a bad taste in my mouth.  Why does everything always have to get bigger?  Isn’t the giant distributed team phenomena (and adding more and more people) the thing that caused the need for Agile approaches in the first place?</p>\n\n<p>Going back a few years people just built software products on their own… Lotus 1-2-3 for example, pfs:Write, original Linux, or in pairs… the DOS operating system, most early Mac software.  And even more recently there are some great examples of one-person projects, <a href="http://en.wikipedia.org/wiki/Orkut">Orkut</a> the social networking tool comes to mind.  My contention is that bloated teams create bloated software, Agile or Waterfall, it’ll be the same problem.</p>\n\n<p>I want to counter-balance this desire to be huge with at least one session at Agile2008 dedicated to exploring how to make Agile smaller.  I imagine people attending this session will have the same concerns as me, so I’d run this as a 30-minute interactive exercise to produce something like “The Proclamation of Small Ideas” </p>\n\n<p>Clearly, this is a tongue-in-cheek approach but the underlying discussion will be very real and very valuable.  The real output of this session will be a renewed focus on the value of keeping teams and projects small and avoiding yet another journey to Bloatsville.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I’ll use a combination of games and breakout exercises to help craft the Proclamation (or whatever we choose to call it).  It will be an iterative process and will allow participants to work in pairs and small groups as well as engage in whole group discussion.  By the end we’ll have a sheet of flip chart paper with some words on it.</p>\n\n<p>I’m choosing to restrict this to 30 minutes to  make it fast and furious.  It is also the smallest (shortest) slot, which seems appropriate given the subject.</p>\n\n<p>Note: I have chosen the Questioning Agile stage as this session particularly questions the trend towards Agile in the Large.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Workshop	2008
20084891	Agile is Groovy, Testing is Square	<div class="content">\n    <p>In the playground world of software development, Agility has cool shoes and the latest gadgets. Testing has asthma and sticking plaster on his glasses. </p>\n\n<p>Does testing have anything desirable at all to bring to the party? This discussion-based track proposes that testers bring something at odds with Agile approaches; disbelief, cynicism, pessimism. It is by defeating these that the software shows that it is genuinely ready to meet the real world. </p>\n\n<p>Can one truly be an ‘agile tester’? Would that be a good thing?</p>\n\n<p>** End of 90-word summary **</p>\n\n<p>In the playground world of software development, Agility has cool shoes and the latest gadgets. Testing has asthma and sticking plaster on his glasses. Does testing have anything desirable at all to bring to the party?</p>\n\n<p>I believe that testers do have something special, and that special something is at odds with Agile approaches. Indeed, I believe that it is special <em>because</em> it is at odds. Testers bring disbelief, cynicism, pessimism - and it is by defeating these that the software shows that it is, genuinely, ready to run full tilt from the supportive arms of its creators and into the real world. </p>\n\n<p>However, this disparity can easily become toxic on real projects, building a barrier around the designers and coders that looks suspiciously like a disguised waterfall to this journeyman test strategist. Using real-life examples, I will attempt to give a flavour of what it is like to bring a test perspective into an agile project - and what it is like to be on an agile project that has a sudden need for testing skills. We’ll look at the characteristic effects of agile practices on the work of a tester, and the ways that common practices - within the letter of agile principles, and with the best intentions of all concerned - can build up to a ‘testing debt’ that leaves a project teetering on the brink of disaster.</p>\n\n<p>Struggling from the morass of mixed metaphor, I will ask (and seek answers for) the following questions:</p>\n\n<p>Can a tester fit into an agile team and still offer the best of his or her skills and insight? Can one make - or become - an ‘agile tester’? Would that be a good thing?</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I’ll strive to keep this talk short, and provocative, in the hope that it will trigger a discussion that moves out from the room and into the halls and bars of the venue.</p>\n\n<p>This is based on a longer, less provocative talk supported with a 7500 word paper. Longer talk delivered at Ordina’s Agile Testing day in Utrecht, Oct 2007, and the London SIGiST March 2008.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Talk	2008
20081336	Constituencies and Concerns, Reactions and Aspirations in Developing a Software System - Rev 0.5	<div class="content">\n    <p>This is a “talk with exercises”, “questioning agile” in terms of the constituencies involved in developing significant systems, their diverse concerns, and the reactions &amp; aspirations that follow from having their concerns met, or not. Framing “Agile” or methods and tools in general this way, what can we learn? Questions like:</p>\n\n<ul><li>If “waterfall” is bad, yet “waterfall” persists, why is that? Do we really have that many masochists in the world, or does it maybe appeal to a need?</li>\n<li>What the heck is the attraction of a PERT Chart? Of having a CCB?</li>\n<li>Why is it so often that the QA people &amp; practices are labeled as “not getting it” about “Agile”.</li>\n<li>Automated unit testing is a Beautiful Thing(tm), and an even harder sell to non-programmers than to programmers? Why is that?</li>\n</ul><p>Key ideas:\nThere’s a simple frame of thought that accounts for the invention of methods and tools in developing software, “Agile” and otherwise, that the people involved are trying to get what they want from the hideous cost, risk and disruption of making software.\n- All significant software systems have multiple constituencies, with unique concerns &amp; etc. that overlap perhaps only by involving the system being built.\n- Any technique, tool or policy is invented or adopted to take care of somebody’s problem, but might not be so good for somebody else.</p>\n\n<p>Since I’m not an authority on what “Agile” is (That’s a rant for another time.) the presentation will be stories of techniques - “Agile” and otherwise - used in practice, exploring consequences for different constituencies. Examples will be sought from the group, with several opportunities for group work by the attendees interwoven, thus a presentation of type “Other.” Some stories will be selected from from the “Agile” literature, looking for constituencies under or over-served by the position or tool.</p>\n\n<p>“Agile” practitioners might come away with a better understanding of the “resistance” they sometimes encounter, and possibly some additional tools for working with other groups while developing software.\n- Concerns, reactions and aspirations from all perspectives are valid - simply because someone involved with the system has them.\n- Seemingly nonsensical behaviors of others are rooted in some kind of “sense” from their perspective. Indeed, they may be right.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a “talk with exercises” - switching between exposition and exercises for everyone there.</p>\n\n<p>Introduction - Anybody ever had to deal with ‘those people” who “Just Don’t Get It(tm)?” My story of recovering Router-co, taking a rigid mess “Agile.”</p>\n\n<p>Exercise - Small groups, tell each other your stories of changing how you do things, or of having change inflicted on you. Each group pick one to tell the rest of us.</p>\n\n<p>Brief-out - Let’s note sticking points &amp; constituencies in the stories.</p>\n\n<p>Talk - “Constituencies &amp; Concerns, Reactions &amp; Aspirations.” A couple stories of working with constituencies &amp; etc. - half and half from my experience &amp; pulled from the “Agile” literature. (Example - Clarke Ching’s story of working with a QA organization to the benefit of all by understanding their agenda vs. dismissing them out of hand.) Work through a couple sticking points (“The CCB is an impediment sent by the devil.’) to demonstrate using this POV to illuminate others’ concerns and suggest ways of working with them.</p>\n\n<p>Exercise - Back to the groups, look at the story you picked in these terms. Come up with some ways to satisfy everyone.</p>\n\n<p>Brief-out - What happened?</p>\n\n<p>Talk - How do specific “Agile” techniques serve all of the constituencies we’ve encountered? Open to a round-table, while fleshing out a list of constituencies &amp; etc. noting ways to adapt the techniques that have come up to their concerns. Finish - “Here’s a paper / article to go with what we just did, which you can read any time.”</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Other	2008
20084462	The State of IT - Is Agile a symptom of an industry in a midlife crisis? 	<div class="content">\n    <p>When do you choose to do Agile software development? Why do you think you’ll be more successful using Agile than other methodologies?\nWe believe the IT industry is in the middle of a midlife crisis and Agile is its symptom. Strangely enough, the IT community is operating on a very limited set of historic information which may lead us to solving the wrong problems. Perhaps it’s time to admit that Agile is similar to a 45 year olds’ brand new red convertible that proves he is still alive.</p>\n\n<p>We believe the IT industry is in the middle of a midlife crisis and agile is a symptom of this. We are operating on a very limited set of information and this may lead us to solving the wrong problems. IT has changed in the last 65 years, but are things really better or just different? Isn’t agile just the 40-yearold’s brand new red convertible to prove he is still alive?</p>\n\n<p>Many presentations advocating agile either reference the Chaos Report or mention it briefly. The Chaos Report describes the number of projects that have been successful in the past. One fundamental problem with the Chaos Report is it’s definition of success. It used to be whether or not the project has finished within time and budget and later on changed into whether the original assignment was accomplished.<br />\nIs a project that invalidates the business case of the project within 6 weeks a success? Shouldn’t anything that provides business value to the business be considered a success? If that is true, than how valuable are the Chaos studies?</p>\n\n<p>While this in itself maybe very interesting as a session, we think these issues are just a tip of the iceberg of the real problem.  </p>\n\n<p>This session is intended to facilitate an axiomatic discussion on the position of agile. What are the underlying axioms of agile? Is there any real proof of agile other than personal accounts?<br />\nSome of the axioms that are very popular in agile are:<br />\n* Agile is good<br />\n* Non-agile is bad<br />\n* Spreading the word of agile is good</p>\n\n<p>These axioms are central in all communication. And anyone proclaiming them is doing that for the greater good; agile has become a noble cause. While this leads to a tighter community, at the same time this excludes any discussion on the roots of the movement. Questioning agile becomes hard and creates dogma that could block real progress.</p>\n\n<p>In order to resolve current and future problem we need to face the truth and admit we are in a midlife crisis and that we first needs to (re)assess reality and our true meaning and value in the world before proceeding.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Talk	2008
20081157	Agile in Practice: What is ACTUALLY Going On Out There	<div class="content">\n    <p>For the past three years I have conducted surveys via Dr. Dobb’s Journal (<a href="http://www.ddj.com" title="www.ddj.com">www.ddj.com</a>) into various aspects of agile software development. I’ve explored issues such as the adoption rate of agile, the effectiveness of agile approaches, the effectiveness of various techniques, the effectiveness of combining agile with CMMI, amongst others. I’ve discovered that what occurs in many organizations isn’t always what you hear about on some of the mailing lists or read about in articles and books. This presentation presents the critical survey findings and explores several interesting trends.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Lecture driven by a Powerpoint presentation consisting of a heck of a lot of pie charts, histograms, and maybe even a line chart or two.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Talk	2008
20084264	Why Business Isn't Agile	<div class="content">\n    <p>Most discussions about Agile begin and end with debates over whether it’s the best way to build software.  The bedrock principles of Agile explicitly subsume all other priorities to the production of working code. </p>\n\n<p>However, when we’re discussing software development in the context of custom business applications, the reality is that most businesses aren’t interested in being world-class software development shops. Business users tend to view IT as a cost centre, not as a source of competitive advantage. The goal of many businesses is to reduce the time and money invested in information technology. They don’t value working code. While they value the flexibility Agile promises, Agile brings with it many negatives from the business perceptive—the requirement for extensive user involvement, the challenge of implementing rapid decision-making, decentralization of authority, difficulties with long-term planning, and a tendency to emphasize the short-term over the long view.</p>\n\n<p>Many of the principles Agile embraces are ones that have been advocated in the business world for decades, but businesses aren’t Agile and many of them never will be. By understanding what the pressures are that have kept businesses from adopting an Agile worldview, Agile practitioners can better understand why business stakeholders might actively or passively resist Agile, and potentially find ways to help Agile development work better in a non-Agile world.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Talk	2008
20084904	When Agile Estimating is not Sufficient - Five Collaborative Techniques to use for Estimating Software Projects Up Front	<div class="content">\n    <p>Agile evangelists frequently skip the realities of the world. This is especially true when it comes to estimation. It often appears as if authors and presenters live in a world in which the customer is always a deep-pocketed in-house resource, with an abundance of confidence in the development team. </p>\n\n<p>The realities, however, is that whether doing in-house development or contracting, the customer expects estimates for the development work. Potential benefits have to be weighed against estimated costs. </p>\n\n<p>This talk deals with why estimation is crucial also in an Agile world. </p>\n\n<p>Agile projects are hardly immune to overruns, delays and bad business decisions based on poor estimates.  Before one can sit down and use “Planning Poker” or similar techniques for estimating sprints or releases, it is often necessary to provide a relative accurate estimate of total project delivery schedule and costs. </p>\n\n<p>The talk presents five collaborative techniques to use for estimating software projects up front:</p>\n\n<ol><li><p>Delphi</p></li>\n<li><p>Wideband Delphi</p></li>\n<li><p>Unstructured groups </p></li>\n<li><p>Statistical groups</p></li>\n<li><p>Decision markets</p></li>\n</ol><p>All techniques have various strengths and weaknesses. They have been detailed to a great extent in the literature, but actual experiences and scientific results for use in Agile projects are scarce. </p>\n\n<p>Combination techniques also supplement each other, and may be appropriate to use at different stages of a project. I.e. some techniques are more suitable for estimating projects up front (e.g. in bidding), some are good for release planning, and some are good for more detailed sprint planning.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The talk is suitable for customers, contractors, managers, team-members and anybody else frustrated with the frequent recurrence of unwanted overtime at the end of too many sprints, releases and projects. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Talk	2008
20083903	Calling All Agile Skeptics, The Curious, and Die-Hard non-Agile	<div class="content">\n    <p>Not convinced about Agile? Attending because you were sent? Do you feel like a fish out of water? Curious, but it just doesn’t make any sense at all? Does it feel like Agile goes against everything your experience tells you is the right thing to do? Convinced of some aspects but skeptical of others? This session will be a facilitated open forum to discuss your objections, doubts, counter-examples and horror-stories. </p>\n\n<p>Also, if you are interested in helping to answer the objections, then bring your answers, conviction, and positive examples.</p>\n\n<p>In either case, please bring an open mind, a sense of humor, and at least one anecdote. Participants will be expected to share the floor and help to keep the atmosphere fun and relaxed.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>To focus the discussion, we will spend 5 minutes at the beginning to brainstorm on particular topics to discuss, rank them, and then start the discussion on the top topic. As that runs out of steam we will go to the next topic on the list and so on.</p>\n\n<p>I enjoy facilitating discussions. I find that it is a great way (for all) to learn a lot about a topic very fast.</p>\n\n<p>I talk to a wide variety of companies on a regular basis and mostly they are non-Agile, so most of the time I’m an Agile fish swimming in the shark-infested waters of traditional development thinking, and have a lot of experience managing the objections to Agile. I will spend a few minutes to use anecdotes from this experience to seed the discussion, but then move into a 100% facilitator role after that, encouraging members of the audience to provide good answers to thorny questions while keeping things light and fun.</p>\n\n<p>I’m not sure of the best method at the moment, perhaps flip charts or a volunteer to take notes, but I will make sure there is a good recording of this session and write it up and make the write-up available. Perhaps other participants will volunteer to write-up their perspective on the results as well.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Workshop	2008
20083144	That's Not Agile! Removing Religion From Software Development	<div class="content">\n    <p>As an organization adopts Agile, the temptation grows to convert process into ‘religion’. “We can’t write documents, that’s not Agile!”  What may start as genuine excitement can become religious dogma when those involved in the process lose sight of why they do what they do.</p>\n\n<p>The label “Agile” isn’t what helps us know if one thing is better than another.  How do we decide a practice is “Agile?” Does it even matter if a practice is called “Agile?”</p>\n\n<p>This interactive workshop will explore these questions with presentations, activities and discussions.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Workshop	2008
20084058	Why So Little Questioning?  Skeptical Humanist Seeks Same for Discrete Afternoon Encounters	<div class="content">\n    <p>Since I’m a tester, things to do with questioning appeal to me.  As one of Jerry’s (Weinberg) Kids, I’m remind myself frequently that no matter how much it looks like a technology problem, it’s always a people problem.</p>\n\n<p>I’ve been observing the submissions system.  I’ve done a few little tiny research experiments.  I’ve looked at the submissions for each stage.  Almost all the stages (in English) have lists of submissions longer than a single page.  Live Aid, Examples, and Questioning Agile are the notable exceptions.  They’re all less than a page long.  I’ve done searches on words like “people”, “individuals”, “interactions”, and “psychology”.  I get very few hits.  When I do searches on “tools”, “frameworks”, “process” and “processes”, I get more hits.  A lot more.  And that’s just the keywords; when I read the text for the submissions, talk about tools and frameworks and process overwhelmingly dominates talk about people.  (Jim McCarthy’s proposal looks like a terrific exception to this pattern, and I was delighted to see it.)  Talks about collaboration are usually about… collaboration tools.</p>\n\n<p>For a long time, I’ve been observing a similar trend on the Agile Testing mailing list.  Discussions about testing in that forum seem mostly to be questions about test <em>automation</em>.  There are discussions about processes and tools, too—but few about individuals and interactions, customers, usability, defending value, and so on. </p>\n\n<p>What fascinated me about agile from the outset was the idea of individuals and interactions over processes and tools; customer collaboration over negotiated contracts; responding to change vs. following a plan; working software over comprehensive documentation.  These principles struck me as highly humanist—but I observe that our fixation on processes and tools and contracts seems to be hard to drop.  We say we value the things on the left, but we seem not to talk about them much.</p>\n\n<p>I think the agile principles are wonderful things, but I’m gaining respect for the post-agilists.  My questions include:  to what extent are the agile principles really being applied?  To what extent are they being explored?   Are we hitting the right notes?  Is the agile conversation focused enough on  humanist elements?  When CompuWare and Microsoft claim that they’re coming out with tools to support agility, do they recognize the humanist part, or are they just marketing again?  Are we submitting agile itself to challenging questions and tests?  Or are we into cargo cult mode, using some swell tools that we like and convincing ourselves that standup meetings more fun <em>merely because they’re shorter</em>?</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I may have said enough already.  On the other hand, here’s an idea:</p>\n\n<p>1) A short meeting on Monday or Tuesday (I can’t make it on Monday, but others could carry the ball), with a brief discussion on these issues.  Develop a some ideas on how to collect the data.</p>\n\n<p>2) Have the participants, for the sessions that they attend for the rest of the week, track the emphasis that hear on the left side of the Manifesto vs. the right side.  Also have them report on challenges that they’ve heard to the doctrine, and how those challenges got addressed or ignored.  Use the ideas developed in (1) above so that we can organize the data.  Counts would be potentially interesting; notes and stories would be much better.</p>\n\n<p>3) Regroup on Friday, tabulate the results, and discuss.</p>\n\n<p>4) Report to the community somehow.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Other	2008
20083513	How much compromise is too much â€“ when is Agile no longer agile?	<div class="content">\n    <p>If you don’t pair program, have a distributed team, or your iteration is 5 weeks long, are you Agile?  In this session we will debate both sides of this issue as we seek to answer the questions –“how much compromise is too much?” and “when is Agile no longer agile?”   Do you give up on the concept of Agile Development altogether because you are not adopting the whole methodology or do you look for ways to use as much as possible even if your environment is not ideal?</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The session will start with participants dividing into four groups:</p>\n\n<ul><li>Those who believe Agile Development cannot be adopted in pieces – it is all or nothing,   </li>\n<li>Those who believe that Agile Development can be adopted piecemeal – taking the pieces that make the most sense in the specific environment,   </li>\n<li>Those who aren’t sure one way or the other, and  </li>\n<li>An audience group. </li>\n</ul><p>An identical scenario involving an Agile Development adoption effort will be presented to each group for analysis and discussion. Each group will propose rationale to whether or not the agile adoption effort in the given scenario can succeed. Spokespersons from each group will present their viewpoints in a mock debate setting. The audience will participate by deciding which group made the best case for the particular scenario. Dependent upon number of participants, members of the audience may have the option of switching roles with debate group members before a new scenario is presented.  </p>\n\n<p>Possible Session Schedule:</p>\n\n<ul><li><em>Introduction and Group Identification</em> (15 minutes) - Introduce topic and select volunteers for each group.</li>\n<li><em>Scenario 1</em> (20 minutes) - Groups evaluate scenario and produces a statement supporting their group’s position.  One member of each group will present the statement to the audience.  First group to speak is decided by a coin toss.  The audience group will then evaluate which group had the most effective presentation.</li>\n<li><em>Scenario 2</em> (20 minutes) - Depending on attendance, volunteers will be solicited to swap places between audience and debate groups.  Same process as Scenario1 but the group that went second during the Scenario 1 debate goes first during this debate. </li>\n<li><em>Scenario 3</em> (20 minutes) - Depending on attendance, volunteers will be solicited to swap places between audience and debate groups.  Same process as Scenario 1 and 2.  We will determine debate order based on performance in the previous two scenarios.</li>\n<li><em>Retrospective</em> (15 minutes) A discussion of what we heard and the implications will be facilitated, with the goal of generating a set of criteria for participants to use in determining “how much compromise is acceptable” during Agile adoption efforts.</li>\n</ul><p>Depending on time, up to three scenarios could be examined during the session. The session retrospective will summarize what was learned during the discussions and propose a set of guidelines to help participants evaluate their own environments and decide if Agile adoption is possible within their organization or if the adoption of Agile within the current environment would require too much compromise to the Agile principles be worth the effort.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Workshop	2008
20083292	Successful Open Source, with little or no Agile	<div class="content">\n    <p>Abstract :   </p>\n\n<p>Agile adoption in the Open Source community ranges from some to none for most successful teams.    </p>\n\n<ul><li>Can these communities learn anything from each other? </li>\n<li>Are these two communities one in the same?  </li>\n<li>Do Open Source projects and Agile projects succeed or fail for the same reasons?  </li>\n</ul><p>The panelists, <a href="http://notdennisbyrne.blogspot.com/">Dennis Byrne</a>, <a href="http://www.riehle.org/">Dirk Riehle</a>, <a href="http://www.async.com.br/~kiko/">Christian Robottom Reis</a> and <a href="http://agilefaqs.com/nareshjain.html">Naresh Jain</a>, will use their collective experience to answer these and many other questions. We’ll also have one empty chair for anyone from the audience to be a part of the panel temporarily.   </p>\n\n<hr /><p>Agile adoption in the Open Source community ranges from some to none for most successful teams.  Can these communities learn anything from each other? Are these two communities one in the same?  Do Open Source projects and Agile projects succeed or fail for the same reasons?  The panelists will use their collective experience to answer these questions.</p>\n\n<p>This session will compare and contrast Open Source projects with Agile projects along many key dimensions.  These dimensions include team size, co-location, communication, feedback loops, risk management, testing, time to market, and leadership structure.  Drivers for project success and failure will be discussed.</p>\n\n<p>Many successful Open Source software projects take advantage of a subset of tools and practices found within Agile methodologies: continuous integration, tight feedback loops, lightweight processes, high visibility, collective code ownership and a tendency to “release soon, release often”.</p>\n\n<p>There is also a handful of Agile tools and practices that are almost never used on Open Source projects.  This includes pair programming and daily stand up meetings.  Many successful Open Source projects have a top down leadership structure; some have been successful without test driven development or face to face communication.</p>\n\n<p>The Panel consists of <a href="http://notdennisbyrne.blogspot.com/">Dennis Byrne</a>, <a href="http://www.riehle.org/">Dirk Riehle</a>, <a href="http://www.async.com.br/~kiko/">Christian Robottom Reis</a> and <a href="http://agilefaqs.com/nareshjain.html">Naresh Jain</a>.</p>\n\n<p>This panel will use the following as a conceptual starting point of what Agile is.  </p>\n\n<ul><li>Thinking\nPair Programming, Energized Work, Informative Workspace, Root cause analysis, Retrospective</li>\n<li>Collaborating\nTrust, Sit together, Real Customer Involvement, Ubiquitous Language, Stand-up meeting, Coding Standards, Iteration Demo, Reporting</li>\n<li>Releasing\nDone Done, No Bugs, Version Control – Single Code Base, 10 min build, Continuous Integration, Collective Code Ownership, Documentation</li>\n<li>Planning\nVision, Release Planning, Deployments, Planning Game (Prioritization), Risk Management, Iteration Planning, Slack, Stories, Estimating</li>\n<li>Developing\nIncremental Requirements, Customer tests, Test Driven Development, Refactoring, Simple Design, Incremental Design and Architecture, Spike Solutions, Performance optimization, Exploratory testing</li>\n</ul><p>The panel will use the following set of questions to gauge various open source teams.</p>\n\n<ul><li>How do developers share knowledge? In Agile we use Pair Programming as an effective way to share knowledge between the team members.</li>\n<li>What tools and techniques are used to keep everyone in the project on the same page? How do team members share statues? On Agile Teams  we use Informative Workspace and Standup meetings.</li>\n<li>Do they conduct regular Retrospectives?</li>\n<li>Do the team have a common Coding Standards? How are standards like code format, architectural styles/guidelines, etc communicated across the team? When someone violates these guidelines or standards, how and when do they get the feedback?</li>\n<li>How are new features demonstrated to the rest of the team and to potential customers?</li>\n<li>What kind of metrics and reports are used by the team to communicate progress and status of the team?</li>\n<li>When a feature is considered done or accepted? Is there any acceptance criteria layout before development starts?</li>\n<li>What version control system do you use? Do you maintain a Single Code Base or a distributed code base?</li>\n<li>Do you have an automated build system? And how long does it take?</li>\n<li>Do you practice Continuous Integration?</li>\n<li>How is Collective Code Ownership handled?</li>\n<li>What kind of Documents are written and maintained for development?</li>\n<li>Does everyone on the project have the same Vision for the project? If so, how do you manage that?</li>\n<li>Is there any kind of Release Plan or Milestones setup for the project? If yes, how do you go about putting it into place?</li>\n<li>What are the type of deployment environments are setup by your project? Do you have different staging environment for testing?</li>\n<li>Who prioritizes the features?</li>\n<li>How requirements are captures? In Agile we use Stories to capture them and then use the same for planning and tracking. How is it managed on your project?</li>\n<li>Do your requirements have any form of estimates on them? If yes, who estimates them and how?</li>\n<li>What types of tests do you write? Unit tests, Integration Tests, Acceptance tests, UI tests, etc?</li>\n<li>Do you follow the practice of Test Driven Development?</li>\n<li>As the project goes on, the code base must be getting complicated. Is there any technique used by the team to keep the code/design simple? In agile we use the practice of Refactoring and Simple Design to do the same.</li>\n<li>Who and how is the design and architecture of the project decided? Is it done upfront or do you believe in Incremental Design and Architecture</li>\n<li>Who and when is performance optimization done? What tools and techniques are used for the same?</li>\n<li>What kind of testing do you do on the project before you make a release or before the code is checked in?</li>\n<li>What is the structure of the team? Is it flat or hierarchal? Do you have lead developers to whom junior developers report?</li>\n<li>How is release management handled on the project? Who makes the releases? Is there any process around configuration management? </li>\n</ul><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Panel	2008
20084160	Questioning the Perception of Agile	<div class="content">\n    <p>Tired of the misperceptions and misconceptions of Agile? Let’s do something about it! This session will discuss the commonly held misperceptions and misconceptions of Agile along with some suggestions for enhancing our message to minimize this issue and stop the continued propogation of misinformation.</p>\n\n<p>Following a short initial presentation, there will be a facilitated discussion where participants can share their experiences and discuss possible courses of action. Please bring examples along with the responses that you find work best to combat misconceptions and your ideas for improving our messaging.</p>\n\n<p>The results will be written up and shared with the community.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>As above.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Questioning Agile	Workshop	2008
20083569	The Tester Who Came In From the Cold: Helping Testers Make an Agile Transition	<div class="content">\n    <p>Testers often get left out in the cold when their development team transition to agile. We’ll look at “the wall” of challenges they face, and explore the support testers need to break through it. The goal is to get testers and QA teams get traction understanding agile development. We’ll poll participants for problems, and explore what they need to know and where to find it.  Training, physical logistics, new roles as agile testers and QA managers, adapting traditional testing activities such as audit requirements are just a few of the areas we’ll touch on. Through role-playing exercises, we’ll explore potential solutions to common problems.</p>\n\n<p>When traditional software development organizations decide to “go agile”, testers, “QA teams” and test managers often get left out in the cold. Developers learn TDD, CI, refactoring, and how to pair. Project managers go to ScrumMaster certification. What do testers get? Too often, they’re left to fend for themselves, and the transition to agile looks as forbidding to them as the Berlin Wall. They’re looking for answers to questions like these:  </p>\n\n<p>• How does testing “keep up” with two-week iterations?<br />\n• I’m a QA manager, what is my role on the new agile team?<br />\n• Where does user acceptance testing fit now?<br />\n• What about those audit requirements?<br />\n• Am I supposed to go talk to the customers now? Or do they have to write tests themselves?<br />\n• Whom can I trust to help me cross to freedom?<br />\nThis tutorial will tear down that wall, bring testers and their managers in from the cold, and help them integrate successfully with the agile development team to produce the best possible software.</p>\n\n<p>Our audience includes QA/Test managers and testers who are struggling to integrate themselves and their teams into agile development projects; Project Managers and Customers who want to know how to interact with the test team in an agile project; Developers or development managers who have been “saddled” with a team of testers, who may or may not have expected technical skills.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We’ll use hands-on exercises, examples and lecture/discussion to help testers understand their role working on mainstream agile projects. Participants will learn how to transfer their existing skills to an agile environment, and how to collaborate with developers and other team members to succeed with testing and get all stories “done”.   The session will be tailored as much as possible to the needs of the actual attendees by means of polling them at the start and adjusting the content and focus accordingly. Participants will also learn from each others’ experiences through discussions.</p>\n\n<p><strong>Content Outline and Approximate Timeline:</strong><br />\nThe tutorial includes group exercises and discussions, which are integrated into the content as appropriate.<br /><em>Introduction</em> – 10 minutes<br />\n• Identifying goals.  Tutorial content will be tailored to the outcome of this.<br /><em>Organizational Challenges</em> – 15 minutes<br />\n• How to mix separate testing and development teams into combined, small agile teams<br />\n• Addressing conformance to audit requirements<br />\n• How are ‘traditional’ QA processes followed? – Ex. Defect tracking, tracking test results, sign-offs.<br />\n• Coordinating with related projects and systems<br /><em>Agile Testing Transitions</em> – 50 minutes<br />\n• How are the roles different than in a traditional test team? \n• How can we test without a requirements document?<br />\n• Is the fast turnaround feasible?<br />\n• Is there a place for Test Plans?<br />\n• Who does integration testing, system testing, other types of testing?<br />\n• What about exploratory testing?  Can customers help?<br />\n• How do agile teams handle User Acceptance Testing?<br />\n• How can a regression test cycle fit into an iteration?<br />\n• Is automation absolutely necessary?<br />\n• What do we do to help the customer team?<br /><em>Successful Delivery</em> – 15 minutes<br />\n• Achieving continual improvement<br />\n• How do we know if we delivered the minimum value?<br />\n• Resources for further information</p>\n\n<p><strong>Format:</strong><br />\nThe presentation will include problems that QA teams face and then offer specific techniques or solutions to try to overcome them. Exercises or demos will be used where needed to clarify techniques or concepts. </p>\n\n<p><strong>Background:</strong><br />\nDuring a CWAC session we facilitated last year, we heard from a lot of different people about the problems their testers had, or the problems they had with their testers. “Our testers all quit”, “We keep inviting the testers to pair, but they refuse”. We learned that often, testers get no training or support. This tutorial hopes to address that.\nSome material we will probably use in this tutorial is from our tutorial last year, which received excellent evaluations.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Tutorial	2008
20080306	Build Analysis: Questions Answered, Questions Raised	(No description)	Committing to Quality	Talk	2008
20084953	Software is a Princess, Another Mattress Won't Help - Why Small Things Matter in Agile	<div class="content">\n    <p>Why does Agile adoption fail?  Why do projects doing “textbook” Agile sometimes fail.  There is of course no one right answer to these questions.  But we suggest the answer can often be gleaned by considering the small things. It’s quite common for projects to follow a “textbook” Agile methodology in the large, while undermining basic Agile principles in the small.  We don’t suggest that allowing small problems to flourish is willful neglect.  Rather, small, easily ignored nuisances or compromises in the quality of the process and product can become debilitating in size and number.</p>\n\n<p>In this talk we identify two basic classes of “small things”: Termites and Baby Alligators.  Termites are small things that accumulate over time.  When a critical mass of Termites infest a project, structural integrity completely erodes and the project collapses under its own weight.    Baby Alligators are things that start small and seem inconsequential at first, but eventually they grow up, and when they do… well it’s hard to ignore an adult alligator in the room.</p>\n\n<p>Our talk identifies a number of “small things”, both Termites and Baby Alligators, that we’ve seen in the wild.  Sometimes recognition and a renewed focus on quality is enough to make a problem go away.  At other times we suggest a more active approach.  The field where problems can lie is large, so we intend on covering a lot of ground.  We touch on pure development issues like “failing to refactor tests and test names” and “missing or meaningless commit messages.”  We also cover production readiness issues, like “non-representative QA datasets”, “deployment scripts as second class code”, and “network issues ain’t my problem”  Software is a creative human process, and addressing the small problems that may exist in the physical environment is also critical.  We’ll cover issues like “Project Managers by the far wall” and “nowhere to write.”</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Our session will be conducted as a ping pong talk between two speakers.  Who covers what, and who jumps in when is driven by both a desire to effectively communicate content to the audience, and to create an entertaining and enjoyable show.  Similarly we’ll use copious slides, but slides are primarily visual stimulus, used to provide focus, crystalize concepts, and amuse the audience.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Talk	2008
20084297	Agile Deployment:  Lean Configuration Management and Deployment Strategies for the Agile SaaS Enterprise	<div class="content">\n    <p>As the Software as a Service (SaaS) model becomes a more widely accepted method of software delivery, traditional software lifecycle methodologies have struggled to keep up.  What does it take to do frequent, seamless rollouts of software on a massive scale with minimal capital and staff while also achieving the maximum number of ‘9s’ of service availability?   How can the SaaS model become a real competitive advantage that, when combined with Agile and Lean methods, creates better products and more efficient and collaborative organizations?</p>\n\n<p>Robert Benefield is the Director of Platform Infrastructure at Yahoo!.  Yahoo! has one of the largest enterprise Agile rollouts in the world with over 200 Agile teams spread throughout the world.  Robert will discuss some of the strategies that have been used for managing and maintaining large-scale services for enterprise software companies.  He has created innovative solutions that have dramatically reduced deployment time, increased visibility throughout the project lifecycle and allowed on demand configuration.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>hour presentation</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Talk	2008
20084937	Fast & Predictable â€“ A Lightweight Release Framework Promotes Agility through Rhythm and Flow	<div class="content">\n    <p>To support an agile methodology effectively on an enterprise scale, a lightweight release framework is highly useful in empowering small self-organizing teams while “optimizing the whole” of the product you are focused on delivering. Interestingly enough, we found that the absence of one can actually inhibit agility and avoidable ambiguity, in an environment where there is a high degree of unavoidable ambiguity. Find out how we created a lightweight release framework and enabled even greater agility in the organization! </p>\n\n<p>Who needs Release Management in a self-organizing environment? Sounds like an oxymoron…. think again!  Release Management is a crucial function that provides a very valuable service in an Enterprise-wide, scalable agile operation. The Release Manager role enables the organization to deliver effectively by maintaining visibility across the release (and all scrum teams) at the highest level.  The role is a key to salesforce.com’s success in delivering on-time, high qualilty releases fast &amp; predictably. </p>\n\n<p>During the Salesforce.com large scale agile transformation the Technology organization increased the frequency of delivery from one major release per year to 3-4 major releases per year. In this transition, we identified early on that in order for us to successfully deliver our high quality releases (on-time) across a large number of product lines (30+ scrum teams) we required a Release Manager to manage and guide the release from inception to deployment. </p>\n\n<p>Having a Release Manager initially created role and responsibility conflicts with individual ScrumMasters and Scrum of Scrum team members.  However, through our transition we discovered an effective way to allow teams (and product lines) to be self-organized while at the same time optimizing the coordination of the entire enterprise working in a single codeline on a single release.  This experience report looks at how to manage releases in a way that works hand-in-hand with the agile development methodologies used throughout the enterprise. Highlights of innovation include: </p>\n\n<ol><li><p>Release Manager engagement in release from inception through deployment (in the SaaS model); no “hand-offs”</p></li>\n<li><p>Promotion of visibility &amp; transparency throughout the release - release plan kickoff; daily visibility into key release qualifying metrics; weekly visibility of trends across releases; monthly reporting on “potentially releasable status”; schedule visibility throughout development work space</p></li>\n<li><p>Release Management promotion of frequent, consistent delivery valued over defined scope; all releases are scope negotiable (as the dates are not)</p></li>\n<li><p>Release Manager role focuses on protecting the release and on resolving organizational obstacles for the release (not to be confused with local scrum team obstacles addressed by ScrumMasters)</p></li>\n<li><p>Balance of agility and discipline with a lightweight release process framework</p></li>\n<li><p>Decision-making “push” down to the scrum team level as much as possible </p></li>\n</ol><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We’ll cover a brief background of the agile transformation at salesforce.com.  In addition, we’ll discuss what led to the realization of the need for the Release Manager role and how that helped us deliver 4 on-time, high quality major releases since our transformation to an agile development methodology.</p>\n\n<p>We’ll also highlight some of the innovative elements we see in this role in an agile organization and why this role is so important in enabling agility at the enterprise level. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Experience report	2008
20082550	XUnit Test Patterns and Smells: Improving Test Code and Testability Through Refactoring	(No description)	Committing to Quality	Tutorial	2008
20082646	Skills for the Agile Designer	<div class="content">\n    <p>Summary: What makes an agile developer effective? Agile designers need to quickly see the essence of a problem, shape reasonable solutions, and communicate complex ideas. When things don’t go according to plan, they readjust their thinking and try again. This tutorial introduces several techniques and some vocabulary for articulating the nature of design problems and their solutions: Problem frames identify the “typical structure” of software tasks. Framing questions that help you get to the essence of the problem. Design stories set the stage for collaborative design. Role stereotypes are useful for assigning or assessing object behaviors. Control styles can help characterize and communicate control center designs. Trust regions can aid in spotting places where “defensive” programming is needed.</p>\n\n<p>Seasoned designers strike a balance. They know the difference between core and revealing design tasks and plan accordingly. When unanticipated difficulties crop, they adapt their work rhythms.</p>\n\n<p>Audience:  Developers can benefit from learning how to characterize problems and solutions. Participants should be familiar with programming, agile development and be looking for ways of seeing problems, shaping and describing solutions, and sorting and prioritizing design efforts.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Format:\nThe tutorial will be a combination of short presentations introducing new concepts and techniques (guided by PowerPoint slides) interspersed with four exercises. In addition to tutorial slides, attendees will receive tutorial notes describing each technique, concept, or practice.</p>\n\n<p>Outline:<br />\nIntroduction-what makes a designer agile? How can you become more agile? (5 mins)</p>\n\n<ol><li><p>Tools for Seeing<br />\na. Problem Frames: a tool for seeing typical patterns of software tasks (25 minutes)<br />\nWorkpieces, information, transformation, control, and required behavior frames<br />\nFraming with an agile attitude<br /><em>Exercise:</em> Find frames and ask framing questions<br />\nb. A design story: a tool for seeing/communicating what’s important (25 minutes)<br /><em>Exercise:</em> Write a design story<br />\nc. Object Role Stereotypes: a tool for seeing object behaviors (25 minutes)<br />\nIntroducing: information holder, structurer, service provider, controller, coordinator and interfacer<br />\nExamples of applying stereotypes<br /><em>Exercise:</em>  Stereotype some candidate objects  </p></li>\n<li><p>Tools for Shaping<br />\na.Control centers and collaboration styles: a tool for shaping collaborations (15 minutes)<br />\nIntroducing centralized, delegated and dispersed styles<br />\nCharacteristics of unbalanced/balance styles<br />\nb.Trust Regions: a tool for seeing where “defensive” behavior is needed (25 minutes)<br />\nImplications of trust<br />\nHandling requests from untrusted sources, testing and trust<br />\nDiscussion: Identifying trust regions<br /><em>Exercise:</em> Sketch trust region boundaries  </p></li>\n<li><p>Tools for Design Collaboration<br />\nDesign problem types: A tool for balancing design priorities (25 minutes)<br />\nCore, revealing, and the rest<br />\nWicked problems: what they’re like, how they can be tackled<br />\nDiscussion: Sorting and sprints<br /><em>Exercise:</em>Sort release stories  </p></li>\n</ol><p>Benefits:<br />\nLearn about problem frames (types) and how they can be used to focus design attention and help question product owners<br />\nAcquire vocabulary useful for communicating and characterizing aspects of your design<br />\nLearn how to sort through designs tasks and identify their project impact<br />\nRecognize when a wicked  or revealing problems crop up and how they affect project flow  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Tutorial	2008
20080568	Using TDD with Concurrent Applications	<div class="content">\n    <p><strong>Synopsis</strong></p>\n\n<p>Testing concurrent code is hard. Very hard. The number of things that can go wrong increases dramatically simply going from one thread to two. There is an additional increase going from two to more than two, but generally not so much as simply going from one to two. Knowing what is safe and not safe, while important, is not enough. Understanding the theory behind concurrent programs and traditional algorithms, such as producer-consumer, readers-writes and the dining philosophers, while important, is still not enough. You need to know how to approach testing so that you have a better chance of finding concurrency issues before you release to production.</p>\n\n<p><strong>Content</strong></p>\n\n<p>This tutorial begins with some not-so-basic, basics. We first discuss two seemingly simple examples of a badly written class - in both cases we’re only looking at one line of Java Code. We tear apart the code and look at the byte-code to get a better understanding of how this can break at a fundamental level. From this, we derive the beginning of an atomic operation from the perspective of the Java Virtual Machine.</p>\n\n<p>Now that we know the code is broken, the next step is to demonstrate that it can/will/does break. How can we go about doing that? This leads us into a discussion of testing threaded code and, time permitting, we develop a test to demonstrate that the code fails. If time does not permit, we’ll work with one such test. Invariably, writing such tests is not only difficult, but building reliable tests that demonstrate failures in a “reasonable” amount of time is a very hard problem - without a little help. After attempting to increase the percentage of time we are able to detect failures, we’ll use a tool to make detection both fast and reliable.</p>\n\n<p>Our next task will be to take a single-threaded solution that takes too long and improve its performance using concurrent programming. To do so, we’ll test our way from a working, single-threaded solution to a working, multi-threaded solution. Along the way, we’ll apply what we just learned to make sure we did not introduce any threading issues. The particular problem involves redesign based on contention. We will predict what we should get in terms of a performance improvement. When we fail at meeting that performance goal, we will analyze the contention, remove it and move towards our predicted performance gain.</p>\n\n<p>We conclude with a traditional dead-lock problem. We’ll review hand-coded tests written to be able to reliably demonstrate deadlock situations. We’ll then look at the tool we used to and see how it could help us to detect deadlock situations.</p>\n\n<p>If time permits, we’ll spend some time reviewing some of the new features introduced into Java 5, not because we want to learn the library but because there are designs in the library that take advantage of modern processors. Specifically, we’ll look at developing non-blocking, thread-safe solutions as well as thread-safe collections.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Methodology:</strong></p>\n\n<p>The development of the exercises uses experiential learning (<a href="http://schuchert.wikispaces.com/ExperientialLearningNotes" title="http://schuchert.wikispaces.com/ExperientialLearningNotes">http://schuchert.wikispaces.com/ExperientialLearningNotes</a>) as the primary vehicle for delivery of all materials. Everything we do will begin with a question or an exercise. Through a series of learning cycles (<a href="http://reviewing.co.uk/research/learning.cycles.htm" title="http://reviewing.co.uk/research/learning.cycles.htm">http://reviewing.co.uk/research/learning.cycles.htm</a>), we will develop a deeper understanding of how concurrent systems can fail and how we can better write tests to find those failures.</p>\n\n<p><strong>Target Audience</strong></p>\n\n<p>At the very least, audience members should be comfortable programming in some high-level language that has support for concurrent programming. The tutorial will use Java, however, most of the material that we’ll discuss applies to other languages as well.</p>\n\n<p>This is an intermediate tutorial.</p>\n\n<p><strong>Value</strong></p>\n\n<ul><li>A deep understanding of how/why concurrent programs can fail</li>\n<li>How to write tests that have the potential to expose concurrency-related defects</li>\n<li>Tools you can use to improve your chances of finding such defects</li>\n</ul><p><strong>Proposed Agenda</strong></p>\n\n<p>The mix of assignment/discussion work will depend on the format. Half-day formats will involve less coding. A full day tutorial will include the same discussions and also reserve more time for coding.</p>\n\n<ul><li><p>A First Simple Example: (provide code)</p>\n\n<ul><li>Question 1: This code is broken, how?</li>\n<li>Assignment/Discussion: Write a test that demonstrates it is broken.\n<ul><li>How long does your test take to demonstrate the failure?</li>\n<li>How reliable is it at demonstrating the failure?</li>\n<li>What happens when your test runs in other environments?</li>\n<li>In what ways does your test allow for execution in different configurations?</li>\n<li>What suggestions/conclusions can you offer from your experience writing this test?</li></ul></li>\n<li>Improving reliability:\n<ul><li>Discussion - how can we improve the reliability of this test?</li>\n<li>What tools might we use to do this?</li></ul></li>\n<li>Demonstration:\n<ul><li>Use ConTest to improve reliability AND to speed up fault detection.</li></ul></li></ul></li>\n<li><p>Improving Performance Using Concurrent Programming (provide code)</p>\n\n<ul><li>Evaluate the performance of this system.</li>\n<li>Predict the speedup to be gained from a rewrite using concurrent programming techniques</li>\n<li>Write a concurrent version</li>\n<li>Questions\n<ul><li>Did you write it correctly?</li>\n<li>How can you write tests to verify it is correct using multiple threads?</li></ul></li>\n<li>Review discussion and improve testing approach.</li>\n<li>Analyze performance - where’s the contention</li></ul></li>\n<li><p>Deadlock Detection - provide an application that can experience deadlock</p>\n\n<ul><li>Evaluate the system</li>\n<li>Write tests to verify whether or not it can exhibit deadlock</li>\n<li>(Assuming at least one person/group is successful) Discuss your approach. If not, I’ll have one prepared</li>\n<li>Lessons learned.</li></ul></li>\n<li><p>Non-blocking approaches and modern processors.</p></li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Workshop	2008
20081659	What Is Your Unit Testing Philosophy?	<div class="content">\n    <p>Do you have a preferred way to write unit tests?</p>\n\n<p>Could you describe it to your pairing partner? Could you describe it to your team? Could you intentionally adjust it to suit a particular testing context?</p>\n\n<p>If your team does not have a shared, explicit unit testing philosophy you’re not getting full value from your testing efforts.</p>\n\n<p>In this tutorial you will learn a simple, powerful technique to describe your unit test philosophy.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>DESCRIPTION</strong></p>\n\n<p>In the first part of the tutorial you will learn a simple, powerful technique to describe your unit test philosophy. You will learn how to use the same simple technique to adjust your testing philosophy according to context.</p>\n\n<p>In the second part of the tutorial you will see how a pair applies an explicit and shared testing philosophy during a programming episode. You will be able to jump in anytime during the programming episode by asking questions, making solution suggestions, or even typing in some code. Watch and you will learn useful pairing techniques such as: Test Ping-Pong, Interaction Testing using <a href="http://www.jmock.org/">jMock</a>, Test-First Programming, and Navigator Keeps A List.</p>\n\n<p>Our simple, powerful technique for creating and describing a unit testing philosophy is to imagine a mixing desk with sliders that let you adjust the “mix” on these six “channels”:</p>\n\n<ul><li>Test First or Test After?</li>\n<li>Tests or Examples?</li>\n<li>Test-by-Test or All-At-Once?</li>\n<li>Outside-In or Inside-Out?</li>\n<li>State or Behavior Verification?</li>\n<li>Fixture Design Up Front or Test-by-Test?</li>\n</ul><p>In our experience, this metaphor makes it easier to see that we don’t need to make either-or choices. Instead, anyone can create a nuanced, context sensitive unit testing philosophy by first understanding what each channel does and by then adjusting each of the sliders. The metaphor also makes it very clear that the resulting unit testing philosophy is adjustable.</p>\n\n<p>Note: The choice of channels and their definition is from <a href="http://xunitpatterns.com/">xUnit Patterns</a> by Gerard Meszaros.</p>\n\n<p><strong>PROCESS/MECHANICS</strong></p>\n\n<p>During the first 30 minutes we present our metaphor for creating a unit test philosophy and share stories that illustrate the importance of a shared, explicit unit testing philosophy for team alignment and performance. </p>\n\n<p>For the remaining 60 minutes:</p>\n\n<ol><li>We describe our own unit testing philosophy.</li>\n<li>Introduce a simple but realistic programming task.</li>\n<li>Complete a programming episode as a pair.</li>\n</ol><p>We expect these 60 minutes to very interactive. We have presented this tutorial twice. At our <a href="http://www.xptoronto.com/previousPresentations.jsp">last presentation</a> the audience was very engaged: asking lots of questions, demanding clarifications, making solution suggestions, and sharing their own stories.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Tutorial	2008
20082795	Measuring the Effect of TDD	<div class="content">\n    <p>I’ve been told that “everyone knows” that code written TDD is simpler than code written otherwise. But is that really true? And how could we tell? And what would it really mean anyway? I’ve found a metric, intimately related to complexity, that correlates very well with whether or not code comes with automated unit tests. It also looks a lot as if it correlates somehow with the degree of TDD-ness applied. Come see it in action, learn how it works, and contribute to the on-going investigation!</p>\n\n<p>An updated and improved version of this session from last year (also exhibited at <a href="http://www.spaconference.org/spa2007/sessions/session71.html">Spa</a> and <a href="http://xpday.org/node/97">XPDay</a>).</p>\n\n<p>In this session attendees will learn about these reuslts, see the tool and apply it to code, to see what clues about the TDD process and maybe how to do it better can be obtained.</p>\n\n<p>The distribution of complexity as measured by McCabe’s metric, per method, in a range of open-source Java codebases seems to be goverened by a power-law (or at least, a power-law can be closely fit through it). The “shape” parameter of this distribution is observed to be 2 or more for code that comes with comprehensive suites of automated unti tests, and less than 2 for code that doesn’t. Being published with unit tests seems a reaonable proxy for having been written TDD: I don’t believe that anyone is writing code any old how then retrofitting such tests. Some people do believe that, and the topic is under active investigation.</p>\n\n<p>Anecdotal evidence from poeple who have applied this metric on their own code suggests that refactoring exercises aimed at improving internal quality can be seen to drive the shape parameter to larger values. Code that we might think of as exemplary TDD code (eg the jMock framework) has a higher value of the shape parameter than code that might be imagied to have neen less rigorously TDD’d</p>\n\n<p>No such pattern has been found when, for exmaple, the distribution of literal <em>size</em> for methods is modelled. Also, code that is of manifestly high quality can still have a low shape parameter if it was not TDD’d.</p>\n\n<p>So, it looks a lot as if TDD does somehting to your design, and its something to do with preferring less complex methods over more complex ones. We will explore what that might be, and what it might mean. If <a href="http://www.enerjy.com/blog/?p=241">this</a> is anything to go by, it might just mean fewer defects, on average.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li>A brief presentation describing the discovery and development of these ideas (as described <a href="http://peripateticaxiom.blogspot.com/search/label/test-first%20complexity">here</a>)</li>\n<li>A explanation of the tool and the visualizations is produces</li>\n<li>exploration of some code</li>\n<li>pondering of implications</li>\n</ol><p>In past sessions there have been problems with conference venues hosting IT conferences having deeply, deeply inadequate infrastructure. For this one I will provide a CD with the tool and some example codebases to run it upon.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Workshop	2008
20082109	Effective Pairing: The Good, the Bad, and the Ugly	<div class="content">\n    <p>There’s no shortage of sessions at this conference to show us how to do various agile practices <em>right</em>. What is sorely lacking is the opportunity to learn how to do the practices <em>wrong</em>. After all, in most environments that is the way work is usually done. Many organizations have carefully crafted software development standards based on that principle. How can we be expected to bring agile into an organization successfully without mastery of that key skill?</p>\n\n<p>One of the most powerful and controversial agile practices is <em>pair programming</em>, or more generally, <em>pairing</em>. It isn’t controversial because its value is in question. We all know pairing, done effectively, reduces defects (by up to 86%, according to the <a href="http://collaboration.csc.ncsu.edu/laurie/Papers/XPSardinia.PDF">2000 University of Utah study</a>), improves productivity (up to three-fold, according to the <a href="http://www.stsc.hill.af.mil/crosstalk/1996/07/manageme.asp">1975 US Army study</a>), facilitates career development along the lines of the <a href="http://www.agilemodeling.com/essays/generalizingSpecialists.htm">generalizing specialist</a>, brings new team members and junior developers up to speed quickly, spreads domain knowledge across the team and raises the team’s <a href="http://c2.com/cgi/wiki?BusNumber">bus number</a>. We all know pairing shortens time-to-market by reducing the time required for after-the-fact bug fixing. We can all relate to the old “two heads are better than one” phenomenon. No, that’s not why pairing is controversial. It’s controversial because a lot of people would just rather not do it. In the software development profession, that is a time-honored reason not to use proven good practices. Indeed, it is among our most venerated traditions.</p>\n\n<p>Reluctance to pair is understandable, and there are many compelling agruments against the practice. For one thing, it creates impediments to high-priority work activities. How, for example, can we enjoy music on our headphones if we’re constantly engaged in design discussions with our partner? Another strong argument is a natural extension of the relative importance of <em>processes and tools</em> over <em>people and their interactions</em>. The reasoning goes something like this: DSDM and Crystal Clear don’t explicitly require pairing, and they are recognized, published agile methodologies. Therefore, pairing is not necessary. Ever. And we can still call ourselves “agile.” <a href="http://www.urbandictionary.com/define.php?term=Neener-neener">Neener neener!</a> (<em>Whew!</em> What a relief. Now, where did I put my headphones?) </p>\n\n<p>It’s hard to argue with that sort of logic. That’s why we aren’t going to. Instead, we’re going to focus on what’s really important: Bad pairing.</p>\n\n<h3>Who can we blame for this, eh?</h3>\n\n<p>The Four Hoarse Men are (in alphabetical order by surname):</p>\n\n<ul><li><a href="http://submissions.agile2008.org/user/413">Ryan Hoegg</a></li>\n<li><a href="http://submissions.agile2008.org/user/349">Lasse Koskela</a></li>\n<li><a href="http://submissions.agile2008.org/user/419">Dave Nicolette</a></li>\n<li><a href="http://submissions.agile2008.org/user/275">Brett Schuchert</a></li>\n</ul><p>There are so many reasons not to listen to these guys it’s hard to know where to begin. For one thing, they’re all consultants. That in itself is reason enough to run screaming from this session with one hand over your wallet. But there’s more: They’ve all been guilty of the bad pairing behaviors they’re going to demonstrate during the session. Yeah, okay, I guess you could call that “good experience” for this.</p>\n\n<p>On the bright side: The group combines the wit, humor, and gregariousness of the Finns with the sophistication, charm, and cultural sensitivity of the Americans. I ask you: Where else ya gonna see that?</p>\n\n<h3>Can we be serious for a moment?</h3>\n\n<p>If you insist. But only for a moment! </p>\n\n<p>Pairing can be a highly effective practice that adds significant value to a project, or it can be a disaster whose cost far exceeds managers’ fears that they are just paying two people to do the work of one. In the worst case, you won’t get the work of one out of the two. They might even do damage that others have to clean up later. The challenge lies in the fact that working as a pair demands a level of attentiveness, collaboration, and continuous focus that working solo just doesn’t require. We want to demonstrate some of the behaviors that can undermine the value of pairing, solicit audience feedback about their own experiences and observations, and explain how and why pairing works or doesn’t work.</p>\n\n<p>A few variations on pairing have become popular. Two general styles of pairing have emerged: The conventional driver/navigator style, and the so-called “ping-pong” style. There are also different ways to manage switching the members of pairs. Some teams switch frequently, others only on completion of whole stories. The <a href="http://brainmoda.wordpress.com/2008/01/31/programming-with-underwear-inside-out">pomodoro technique</a> is another popular way to manage the timing of pair switching and to facilitate pairs getting into a <a href="http://www.fastcompany.com/magazine/97/art-of-work.html">state of flow</a>. Some teams try to have the most-qualified team member handle each task, while others <a href="http://exceptionz.wordpress.com/2005/08/30/promiscuous-pairing-and-beginners-mind-embrace-inexperience">intentionally do the opposite</a>. </p>\n\n<p>Pairing originated as <em>pair programming</em>, which is the development of code by two programmers working together. As agile practices evolved over the years, pairing became more generalized and is now practiced across and between professional disciplines as a way of eliminating hand-offs and work-in-process inventories on agile teams. In terms of human factors, this sort of pairing is even more demanding than pair programming, since both partners must have some understanding of the other’s area of specialization in order to communicate effectively. Unsurprisingly, it is very easy to exhibit behaviors that confuse or frustrate your partner in a situation like that.</p>\n\n<p>Each of these variations solves particular problems and introduces particular risks. If team members aren’t mindful of the strengths and weaknesses of the techniques they’re using, they may engage in behaviors that reduce or reverse the value of pairing. We hope participants will come away with a good understanding of what to do when pairing, and (the fun part) what not to do. More importantly, we hope they will have a better understanding of <em>why</em> certain behaviors are to be avoided, and how to recognize those behaviors as “process smells” when they observe them on teams.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The presenters will act out various pair programming scenarios while playing the roles of familiar archetypical personalities, including (but not limited to):</p>\n\n<ul><li>Superman. He refuses to be impaired by a slow partner. He will hog the keyboard and save the world all on his own.</li>\n<li>Absent-Mind Ed. He’s distracted, sleepy, or preoccupied with other things besides the task at hand. </li>\n<li>The Back-Seat Driver. As navigator, he breaks the driver’s train of thought with a non-stop stream of trivial comments.</li>\n<li>The King of Shortcuts. As navigator, he mentions every keyboard shortcut the driver fails to use, but doesn’t make practical or meaningful observations.</li>\n<li>The Anti-Mentor. As navigator, this senior developer leaves his junior partner without guidance.</li>\n<li>Fearful Freddie. He refuses to refactor code he didn’t personally write.</li>\n<li>The Defactorator. He reverses refactorings others have done to make the code consistent with his personal preferences.</li>\n<li>The Soloist. He works solo as much as possible, and has a large repertoire of excuses not to pair.</li>\n</ul><p>They will also act out scenarios in general pairing, including (but not limited to):</p>\n\n<ul><li>A pair cherry-picks interesting stories instead of taking the next card in priority order</li>\n<li>Neither member of a pair knows what to do, and they don’t ask for help. The rest of the team sees this, and doesn’t offer help. The ScrumMaster or team coach also sees it, and doesn’t intervene. </li>\n<li>Technical team member doesn’t know how to interact effectively with business customers or BAs</li>\n<li>BAs resist the idea of writing executable tests</li>\n<li>Testers resist the idea of pairing with developers to write test scripts</li>\n<li>Developers only want to “sling code” and resist pairing with team members in other roles or contributing to other tasks</li>\n</ul><p>In addition to demonstrating unhelpful behaviors of archetypes, the presenters will also act out pitfalls in different styles of pairing, including (but not limited to):</p>\n\n<ul><li>Ping-pong pairing pitfall #1: Disengagement. The one who isn’t coding at the moment doesn’t do anything useful at all. He might even leave the room.</li>\n<li>Ping-pong pairing pitfall #2: Balkanization. Individual team members fall into a rut of always writing tests or always writing production code.</li>\n</ul><p>Throughout the session, the presenters will act out a scenario to demonstrate the effects of bad pairing behaviors in an amusing and engaging way (they hope). Through humor and exaggeration (but mostly exaggeration), they hope the counter-examples will stick in participants’ minds.</p>\n\n<p>After each demonstration, participants will engage in an open-ended discussion to share their observations, ideas, experiences, and suggestions pertaining to the scenario.</p>\n\n<p>Finally, the presenters will repeat the scenario to demonstrate effective pairing behaviors.</p>\n\n<p>The session consists of a repetition of this cycle to explore as many scenarios as will fit in the allotted time. There is no lecture or slide show. The presenters just start misbehaving immediately. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Demonstration	2008
20082107	Paving the way for Agile Testing	<div class="content">\n    <p>Achieving quality in Agile projects starts with a clear Definition of Done, listing all of the quality criteria that the team wishes to satisfy. It is not easy however, to integrate testing in such a way that the Definition of Done can also be met in later iterations. The natural progression of the required amount of testing effort is to spike sharply at the end of each iteration, and to increase overall in later iterations. This talk is about highlighting the problem areas in maintaining one’s Definition of Done, and about teamwork in testing. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>In this talk, I intend to do the following:</p>\n\n<p>Show how the intended quality can and should be made explicit in the Definition of Done.<br />\nNote how difficult it can be for a team, to write down their Definition of Done, and implement it in a uniform fashion.<br />\nHighlight the amount of testing activities in a good Definition of Done.<br />\nAdvocate the need for specialized testers in a team.<br />\nGive examples on the required openness and communication. (Involve the audience by asking a few questions.)  <br />\nArgue that the complexity and (tiered) structure of today’s applications has increased the need for unit testing.<br />\nSummarize the Agile development and testing process into the same four keywords: Teamwork, Feedback, Flexibility, and Simplicity. <br />\nGive recommendations and examples that involve those four keywords.  (Not merely a list of DO’s and DON’Ts; also some actual situations to make it more real, less theoretical.)<br />\nEnable non-specialized testers (such as developers and end users) to apply test techniques in a simplified format.<br />\nSuggest how the tester should behave on an Agile team. <br />\nExplain the testing spikes each iteration, and how to cope with them.  <also addressing="" the="" likely="" friction="" in="" team="" here="" decisions="" may="" be="" made="" that="" developers="" dislike="" and="" testers="" love.=""><br />\nStress the importance of test automation to meet the testing demands in later iterations. <br />\nConclude by showing how the suggestions given will help the team to achieve their quality goals.    </also></p>\n\n<p>Answer questions from the audience. </p>\n\n<hr /><p>I intend to give substance to the four keywords I mentioned, by adding several examples and suggestions.<br />\nFor instance, during the daily stand-up meeting, team members give updates on their progress. This includes requests for feedback. For testers, the requests are often implicit: the fact that a feature has been added to the project should alert them that their feedback is \nwanted. In fact, a tester that is flexible enough to switch testing to the new functionality  at a moment’s notice, will be highly valued as a team player. Sure, a tester who switches tasks will lose a bit of focus. The fact that he is <em>giving feedback where it is wanted the most</em> should outweigh that, any time of the day.<br />\nAbout the testing spikes, the explanation of their natural occurrence is simple: the time-box is a deadline that is shared by all of the stories in a sprint. In the ideal situation, that is no problem: assuming that enough testing can be done in parallel with development, and stories are ‘burned down’ as Done early on. Some of the suggestions aim to stay close to the ideal burndown line. For example, story granularity. Splitting stories may create overhead, and introduce dependencies. It also yields focus, and enables getting things Done quickly. The latter argument should be stronger, most of the time.<br />\nA general concern is that much of the testing in a typical iteration, is performed by non-specialized testers, such as developers, and end users. Ideally, one would want those non-specialized testers to apply test techniques to derive test cases, same as regular testers do. (Why? Well, let’s say that not all developers in a team use the same methods to draw up their unit tests. It follows that there will be differences in the quality of the tests. It could be said that not all team members are following the same Definition of Done.) Rather than formal training in testing techniques, I’d want to suggest providing some tools: <em>one-page reference cards</em>, explaining a testing technique, or a simplified version thereof. It’s usually okay to simplify a technique somewhat, if the resulting test cases are like 90% the same: \ngood is good enough.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Talk	2008
20083717	Agile Teams Require Agile QA: How we made it work.	<div class="content">\n    <p>It is challenging to successfully integrate QA within the agile process. Not only is expanding the XP process to include other disciplines difficult but XP teams typically reject traditional QA practices. Integrating QA into your XP team does not have to be painful. It can be achieved by building an agile QA process through tackling small goals using the XP principles.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session will run as a presentation outlining the steps needed to create QA in an Agile environment, by sharing what we have a accomplished in our organization.</p>\n\n<ol><li>Recognize that quality assurance is needed in an eXtreme programming environment.  (See attached RecognizeQAisNeeded.pdf)<br /><ul><li>Unit tests do not replace QA (See attached UnderstandQArole.pdf)  </li>\n<li>Seek team and customer buy-in  </li></ul></li>\n<li>Understand the Role of QA</li>\n<li>What we have seen happen when no one is directly responsible for QA\n<ul><li>Can developers do QA?</li>\n<li>Can the High Tech Anthropologists (HTA<sup>TM</sup>) do QA?</li>\n<li>What if we make the client responsible for QA?</li></ul></li>\n<li>Start Simple<br /><ul><li>Listen and learn<br /><ul><li>Ask lots of questions  </li>\n<li>Attend meetings  </li>\n<li>Talk to the team  </li></ul></li>\n<li>Learn about the customer’s needs<br /><ul><li>Attend the planning game  </li></ul></li>\n<li>Go bug hunting<br /><ul><li>Use exploratory testing  </li>\n<li>Write bug cards  </li></ul></li>\n<li>Write QA task cards  </li></ul></li>\n<li>Add QA into the XP process<br /><ul><li>Participate in the iteration kick-off meetings<br /><ul><li>Tell the team what’s in store for QA this iteration  </li></ul></li>\n<li>Help customer prioritize bugs<br /><ul><li>Create a bug board (See attached BugBoard.pdf)  </li>\n<li>Incorporate bugs into the planning game  </li></ul></li>\n<li>Participate in green dotting process<br /><ul><li>What is green dotting?  </li>\n<li>Who green dots a card?     </li></ul></li>\n<li>Formalize verifying the build<br /><ul><li>Create high-level checklist of items to test  </li>\n<li>Test all cards that had work done from the iteration  </li></ul></li>\n<li>Iterate the QA process<br /><ul><li>Change what doesn’t work  </li>\n<li>Try something new  </li></ul></li></ul></li>\n<li>Incorporate more formalized QA testing<br /><ul><li>Build a regression test suite<br /><ul><li>FitNesse as an example  </li></ul></li></ul></li>\n<li>Lessons Learned / What will we try next?   </li>\n<li>Conclusion    </li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Experience report	2008
20080375	Robust Performance of Complex Systems	<div class="content">\n    <p>Software is one of the most complex products in the world - it cannot be seen, it’s theoretically easy to change, and over time it grows brittle and breaks easily. When you couple software to an already complex system - a failure-inducing one - you have a system in great need of robust performance. And yet, we have spent little time understanding what truly robust performance really means and how to achieve it. We are satisfied with systems that fail, even essential systems, because we think there is no alternative.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>A brief introduction will be followed by two group creative exercises.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Workshop	2008
20082306	Use-Case Recording: Testing a rich client UI by recording in a domain-specific language	<div class="content">\n    <p>There are two main approaches to testing a UI: “record-playback” through the user interface and “data-driven” bypassing it. The former are visual and user-friendly but have a reputation for being unmaintainable, so the Agile community has largely embraced the latter. But could we recover the advantages of record-playback without sacrificing maintainibility? This would mean moving beyond recording screen mechanics or GUI toolkit mechanics and actually trying to record the intent behind them. The approach presented achieves this via manually maintaining a mapping of UI actions to domain language statements.</p>\n\n<p>The above paragraph is for the program: below follows the originally submitted description.</p>\n\n<p>How do you test a user interface automatically? If you ask agilists that question the answers will vary, but a fairly frequent one is “you don’t, it’s too hard”. Standard approaches to GUI testing are deemed too brittle to work in an iterative manner over a long period of time. This is a shame, because there are clear advantages to having acceptance tests operate through the user interface ;</p>\n\n<ul><li>Full system behaviour is tested and observed. A green box in a table can tell you that some rule is correct but it can’t tell you that you have anything approaching a usable system.</li>\n<li>Writing test scripts is pretty like programming - however much syntactic sugar you put in between the user and the actual code called. This raises the technical bar for being able to write tests.</li>\n<li>Tests through the UI can function as system demos and help with documentation of how to use the system. </li>\n<li>Writing tests by recording GUI usage can create a lot of tests pretty fast.</li>\n</ul><p>Which is all very well, but how can we get around the brittleness that has plagued automated UI tests in the past? A key is to address the form in which the tests are recorded - how they identify what is being done with the GUI. Once upon a time this was the screen mechanics - click on pixel 124,21 - and the tests broke as soon as you ran with different monitor settings. Now it’s usually the GUI toolkit mechanics - find this JTable and click in the third cell of the second row. But what if we ended up recording intent instead of mechanics - in a domain language? Then our test script might look like this:</p>\n\n<p>wait for table to be loaded<br />\nselect flight RA983<br />\nproceed to book<br />\nset customer name Geoff<br />\nset number of seats 2<br />\nconfirm booking<br />\nquit  </p>\n\n<p>Then we can have our cake and eat it. We can write that as a test sketch without the system existing yet. We can record it (or some of it) if the system already exists. If we want to create a similar variant of it we probably won’t need to re-record it. It is essentially a description of a use case.</p>\n\n<p>How does this work? Not by magic of course. It requires a specific effort to go through your GUI and map the controls to domain language statements. But once there you have the largest possible freedom to move the GUI around in the future. As an additional bonus we can handle multi-threading also, by identifying the point in the code where the table is loaded, we can ensure that when recording passes that point a wait is recorded, and when replaying gets to such a line in the script, it suspends until the same call is made.</p>\n\n<p>Note the absence of assertions. The script doesn’t check anything about the state of the GUI at any point. This keeps it super-simple and stops it needing any concepts of variables, assertions etc, without which it would be more a script than a usecase. We verify behaviour by comparing plain text log files (see my other submitted session!). </p>\n\n<p>We’ve done this with separate libraries for both PyGTK GUIs and Java Swing GUIs (“PyUseCase” and “JUseCase”). But we feel the ideas are more important than these tools, although either of these would be a decent starting point for anyone wanting to test another GUI with those toolkits.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>I will basically talk along the above lines. I could easily go on longer than half an hour - there is a lot of material - but I thought 90 minutes might be a bit much without involving the audience. \nI will also include a quick (max 5 min) demonstration of JUseCase or PyUseCase (just to prove I’m not making it up!) Would be great if there was a possibility to do 45 or 60 minutes.\nReviewers could maybe indicate what kind of timescale they think is appropriate of the options.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Talk	2008
20084414	Maintain High Quality Web Applications with a Green Web Acceptance Build that Runs Under 10 minutes	<div class="content">\n    <p>In the Web 2.0 age, end-to-end web testing provides tremendous feedback on the quality of your Web application. However this feedback cycle is typically quite long and comes at a high maintenance price. This talk shares our <strong>field experience in establishing web acceptance test suites with high return on investment (ROI) for Web applications</strong>. As ThoughtWorks consultants, we successfully transformed a 3 hours web testing suite that despite high maintenance efforts was always red,  into a passing sub-15 minutes build that provides quick and accurate feedback while requiring minimal maintenance. <strong>This session covers best practices and tools  that you can put in place to achieve your own success story</strong>. </p>\n\n<p>In our experience, attaining high value from traditional acceptance web testing is hard to accomplish mainly because:</p>\n\n<ul><li><p><em>Tests are brittle</em>: In other words they keep failing and require a lot of maintenance over the course of the \niterations — even when your application has no new defects! </p></li>\n<li><p><em>Testing is slow</em>: Web acceptance testing involves a full application stack and a flurry of network chats between \nbrowsers, web servers, databases and other processes. Not surprisingly this comes with a lot of performance overhead \nand the environment requires a non-trivial set up. Consequently a web acceptance build typically takes hours to run \nand accounts for a tremendous delay in development feedback.</p></li>\n<li><p><em>It is difficult to assess the exact impact of current failures</em> in terms of actual application functionality: \nA single UI change in a “hub-page” (say the login page) can cause most of the test suite to fail while from the \nuser’s perspective, the application is working just fine.</p></li>\n<li><p><em>Some application states are hard, if not impossible, to reach</em> solely from the UI. The traditional approach here \nhas been either to avoid testing these cases or to write tests that rely on large, complex and well-known data \nsets, which become increasingly harder to maintain and comprehend. </p></li>\n</ul><p>We discuss how to address these issues by leveraging tools such as <a href="http://openqa.org/selenium-grid">Selenium Grid</a>, while implementing innovative best practices such as:</p>\n\n<ul><li>Keeping the build blazing fast by leveraging cheap hardware and aggressively parallelizing test runs. </li>\n<li>Implementing aggressive test isolation.</li>\n<li>Putting the Web acceptance tests in total control of the application state.</li>\n<li>Keeping the tests razor sharp.</li>\n</ul><p>We explain the rationale of each best practice in detail, describe how to implement it and provide concrete code examples.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>We explain the rationale of each best practice in detail, describe how to implement it and provide concrete code examples. I am submitting this as a jointly-presented talk and my co-presenter will register shortly. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Talk	2008
20083776	Automated Functional Testing on the TransCanada Alberta Gas Accounting Program of Projects	<div class="content">\n    <p>This experience report will talk to Automated Functional Testing on the TransCanada Pipelines Alberta Gas Accounting program of projects. We feel that the story around Functional Testing is a compelling one to an audience of agile practitioners: 621 FIT Functional Tests scripts produced in the last module (over 23 months), Business is sold on the benefits of the approach to Automated Functional Testing; All future projects include automated functional testing; Business Analysts (not Developers, not Quality Assurance) write the FIT test scripts.</p>\n\n<p>Other highlights:\n• Only a handful of functional defects found post production, none of which are major.\n• All of a story’s Automated Functional Tests must pass (run green) for a story to be Development Complete.\n• All FIT functional tests are part of the CC.NET continuous build process that runs in less than 15 minutes.\n• The FIT Functional Tests live on post production and are an important tool for the team that supports the system.\n• The FIT Functional tests do such a good job of a functional regression test that it allows testers to spend most of their time exploratory testing. NCover test coverage reports show automated functional test coverage to be over 70%.</p>\n\n<p>The presentation will include live demonstrations of working automated testing project artefacts including FIT functional tests and test fixtures.</p>\n\n<p>This will be a paired presentation. The presenters will be Stephen Marsh of TransCanada Pipelines and Stelios Pantazopoulos of ThoughtWorks. Stephen Marsh’s role on the project is that of Architect, Stelios’ is Quality Management Lead.</p>\n\n<p>Parts of this presentation have been delivered to the Calgary Agile Methods Users Group (CAMUG Dec 2007 Meeting) and to the 2007 Alberta Microsoft Architect Forum (‘Architecting for Testability’).</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This paired presentation will follow the outline below. About half of the presentation will involve demonstrations of actual project artefacts including requirements documents,working Excel-compatible FIT tests, test fixture source code and quality metrics like test coverage. Attached to this proposal is an abstract for the presentation.</p>\n\n<p>1) Business Context<br />\n• TransCanada’s Alberta Pipeline<br />\n• Aging legacy application<br />\n• Adoption of a new technology platform  </p>\n\n<p>2) Organizational Context<br />\n• Previous quality assurance methodology  </p>\n\n<p>3) The Need</p>\n\n<p>4) Automated Functional Testing on AGA<br />\n• Underlying Goal of Automated Functional Test<br />\n• What needs to happen in order to realize the goal?<br />\n• What needs to happen on the ground to realize this goal  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Experience report	2008
20084463	Technical lessons learned turning the agile dials to eleven!	<div class="content">\n    <p>This experience report outlines technical lessons learned over a several year period across several projects within an organisation which aggressively applied most of the agile practices with much success. The success, however, was not been achieved without challenges and lessons learned along the way. This paper outlines the interesting observations we made while trying to turn the agile dials to eleven. Our starting assumption when we began this journey several years ago was that productivity and quality were opposing forces; you had to trade one off against the other. However, after turning the dials to eleven, we now believe that you can much more of both than we previously thought possible. In fact, we believe that applying the practices outlined in this experience report allow both much higher quality and higher productivity than traditional development.</p>\n\n<h1>Background</h1>\n\n<p>The financial organisation running the projects discussed in this report has been doing agile for more than 4 years across many projects. This report however is focussed on the experience of about 30 developers across several projects over the last several years. The code-base across these projects includes 10’s of thousands of tests and 100’s of thousands of lines of code.</p>\n\n<h1>Setting the ‘Quality’ bar high</h1>\n\n<p>Each project maintains 100% coverage of all production code with no duplication and stringent metrics across the whole code-base. At times these goals were hard to achieve but with tool support enhancements and practice, these goals are now not only attainable but are attainable with repeatable and reasonably high velocity.</p>\n\n<h1>Code Coverage</h1>\n\n<p>Each project has a coverage build which runs several times a day which breaks if coverage is not at 100%.</p>\n\n<h1>TDD and Pair Programming</h1>\n\n<p>All production code is pair programmed using TDD. Some tasks such as build and tool enhancements are not paired. These practices have been extremely useful in producing a large consistent code base.</p>\n\n<h1>Test code size</h1>\n\n<p>Each project has an evolved agile framework which reduces the amount of test code which must be written. In the early stages of writing tests the ratio of test code to production code was between 1.5 to 2 lines of test code for each line of production code. With the current test framework, the ratio is approximately 1:1.</p>\n\n<h1>Auto Stubbing, Auto Instance Providing and Mock Facilitation</h1>\n\n<p>When creating tests, test fixtures can be auto-supplied from Spring wiring, using auto stubs, auto mocks or domain instances. In addition, a range of helper classes for producing unique instances (of Strings, Integers etc.) allow test triangulation to be carried out without explicitly creating different test cases. This functionality is provided by a smart base test case class. It reduces code size and greatly increases productivity when creating tests. It supports both state-based and interaction-based testing styles. IDE support also exists for automatically converting between the expectations the mocking framework expects and code which the IDE can understand.</p>\n\n<h1>Auto Components</h1>\n\n<p>IDE support is used to create components which include interfaces, concrete classes and their tests; test classes are pre-initialised with code that checks class properties.</p>\n\n<h1>Code Size Metrics</h1>\n\n<p>Method size is limited to 10 lines, class complexity limited to 5 and the number of parameters to any method is limited to 5. The excellent refactoring support in IntelliJ allows these requirements to be met with minimal reduction in productivity.</p>\n\n<h1>Auto null checking and class property checking</h1>\n\n<p>Facilities are in place to automatically check that nulls are not used in the code and that classes meet certain requirements. Different class properties are required and checked for different types of classes, e.g. domain data objects, components, immutable objects etc.</p>\n\n<h1>No Duplication</h1>\n\n<p>The Simian duplication detection tool is used to detect duplication and has a threshold level set to 4 lines of duplication. Any duplication breaks the build.</p>\n\n<h1>Auto-Boundaries</h1>\n\n<p>Because of the stringent metrics that have been adopted and the use of unchecked exceptions, sometimes third party packages are difficult to interface with. An auto-boundary mechanism is deployed to automatically convert a class from a third party into one that behaves nicely in respect of checked exceptions.</p>\n\n<h1>Refactoring</h1>\n\n<p>IDE support has been added into the IntelliJ IDE that knows about many of the conventions used within the project and automatically supplies refactoring and quick assist style mechanisms to convert non-conforming code into conforming code.</p>\n\n<h1>Successes</h1>\n\n<p>Some of the successes of the project that can be attributed to the agile technical practices include:</p>\n\n<ul><li>Low number of defects detected throughout development cycle</li>\n<li>Deployed to Production within expected timeframes and budget</li>\n<li>Large code base retains a consistent quality over time</li>\n<li>Velocity is relatively high given the metrics targets</li>\n</ul><h1>Conclusions</h1>\n\n<p>Aggressive agile developer practices can be successfully applied to a large project over a reasonable length of time, however good IDE support is needed to maintain high team velocity.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The talk will highlight the novel lessons learned including providing some metrics derived from the project. The paper will give some additional details and examples of applying the techniques.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Experience report	2008
20084627	Leading Manual Test Efforts with Agile Methods	<div class="content">\n    <p>Despite the advances in both developer and customer automated testing, there remains a great deal of anecdotal evidence and testing thought leadership that suggests degrees of manual testing is still required for software-intensive projects, especially at the traditional, higher test levels such as user acceptance testing.  We have come to believe that this doesn’t mean agile techniques do not stay in the picture for the duration of manual testing.  We have found that using Scrum-like management techniques are highly effective in planning, tracking, leading and organizing manual testing efforts, especially in the context of experienced testers that know both the system under test and the business domain that it supports.</p>\n\n<p>Our classical example is an enterprise system upgrade that affected over 4000 business users and involved upgrading business-critical processes such as finance, human resources (less payroll), and logistics, among other business functions.  For the manual testing phases that were on the critical path, each testing sub-team was encouraged to devise a testing backlog that consisted of ‘test targets’ - that is, a list of items that were to be tested.  We have found that focusing on ‘test targets’ instead of ‘test cases’ improves communication because we can get feedback quicker.  Part of the cost of testing is finalizing the test cases, test scripts, and test data - however, if the targets of the test can be listed first, discussed, posted publicly, all without the effort to craft the scripts or test data, then we have adequately encapsulated a proxy for the ‘size’ of the test effort, very quickly.  This proved valuable in validating the project schedule.</p>\n\n<p>Each testing backlog was prioritized and ordered by the sub-teams and then stored in the project’s repository.  When the testing began, the teams were asked to update their testing backlog directly in the repository so that the project’s test coordinator could use some worksheet-linking magic to create a combined burn-down chart that illustrated actual progress against expected progress.  One flaw in the process that we acknowledged but didn’t bother to do anything about was that each of the test targets was assumed to be of the same complexity and require approximately the same effort to test - in reality, we knew this wasn’t true.  Things tended to balance out in the end anyway, and the backlogs/burn-down combination proved to be highly effective in communicating testing progress and potential trouble spots.  Although we tried daily scrums to support the testers, as the pressure increased on the project, the meetings were increasingly influenced by the project managers and they became ‘estimated time to complete’ meetings and not very good scrums.  In the future we propose to exclude project managers from attending the daily testing scrums.  In this particular context, the sub-team leaders were already co-located and were communicating effectively without the scrums, having worked for many years together and having already been through a similar upgrade together several years earlier.</p>\n\n<p>To accommodate the audit and control requirements associated with the project, the testing backlogs were designed to include links to evidence that the tests were completed and that the expected results were achieved.  At times this was an internal system document identifier, and at other times this was a worksheet that contained a log of the test run, complete with screen shots and analysis that supported the test result.  The test environment (application and data) was backed up and stored at the conclusion of the test effort in order to support the requirement of reproducing test results if requested by internal or external auditors.  Some of the test targets were considered critical enough that formal test scripts were devised.</p>\n\n<p>In summary, we have devised a test management scheme that is based on agile principles and methods and that is highly effective for manual test efforts such as user acceptance testing.  There are benefits from identifying the targets of the testing, prioritizing the targets, and communicating them to other members of the team.  The testing planning effort was ultimately more public than it would have been without the testing backlogs.  The idea of a ‘test target’ that could be identified, prioritized, and communicated without a huge expenditure of effort contributed to that effectiveness.  During testing, the backlog and associated burn-down charts were extremely useful in tracking the test effort non-invasively, that is, without asking awkward estimated-time-to-complete questions.  Further, we observed that the same testing backlogs supported both scripted and non-scripted (exploratory) testing methods - and that they proved to provide just enough context for making the scripted/non-scripted decision early on in the project.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This would be a talk.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Committing to Quality	Experience report	2008
20083149	"Dear XP" -- a song at the banquet party	<div class="content">\n    <p>A Japanese band would like to sing a song about Agile at the banquet party. The song is called “Dear XP” and quite well-known in Japanese XP and Agile communities.</p>\n\n<p>Watch this 3-minute movie! <a href="http://www.youtube.com/watch?v=zpw8h4OGNxg" title="http://www.youtube.com/watch?v=zpw8h4OGNxg">http://www.youtube.com/watch?v=zpw8h4OGNxg</a></p>\n\n<p></p><hr /><b><big>Dear XP</big></b> — song and lyric by <i>Samurai Katamaris</i>\n\n<p>I realized for the first time\nthe true strength of human collaboration.\nTwo chairs next to each other\nbut one computer together\nwatching flowing clouds\nand the source code</p>\n\n<p>XP Dear XP\nOn the wall\nwe remember the task cards\nthe team strugled with in the summer days</p>\n\n<p>XP Dear XP\nWant to talk with you\nwant to share with you\nefforts and pleasures more and more</p>\n\n<p>To live a life\nis to make yourself better\nYes, beyond the strong defense of yourself\ntoward the courage of changing yourself.\nhaving hope in your heart\nand look at the future together.</p>\n\n<p>XP Dear XP\nYour friends are waiting for you\nSometimes go on the spree\nbut put a smile on the smiley calendar</p>\n\n<p>XP Dear XP\nWant to talk with you\nwant to share with you\nefforts and pleasures more and more\nFor the tomrrow’s you and me.\n</p><hr /><div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Give us five minutes in the banquet.</p>\n\n<p>We prepare a DVD of the video, and with the back video,\nYuki, a Japanese girl vocalist will sing the song in English (with an air guitar band).</p>\n\n<p>Just to be a good ice breaker of the party !</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Other	2008
20084178	Introduction to Lean Software Development	<div class="content">\n    <p>As the popularity of agile development spreads, more and more companies are discovering that simply breaking down projects into small iterations is not sufficient. Agile methods require changes in management, analysis, architecture, design, testing, quality assurance as well as project management. Given the large adjustments required, where can a team or enterprise look for guidance in its transition? The principles of Lean Software Development provide such guidance.</p>\n\n<p>Join Alan Shalloway as he describes how the Lean principles of optimizing the whole, eliminating waste, deferring commitment, building quality in and others provide the guidance needed by enterprises and teams making the transition to Agile methods.  Lean principles can guide Agile practitioners when faced with the unique situations most teams find themselves in.  Lean emerges as more than a tool for Agile teams, but rather a way to guide Enterprises in creating the most value for their customers with the resources they have available. Alan also provides a case study using Lean Value Stream Mapping which helped a company identify their problem and greatly improve their software development process without changing the team’s methods – illustrating that Agile methods are not always the solution.</p>\n\n<p>Participants will learn:</p>\n\n<p>• The Essence of Lean Software Development<br />\n • How Lean can enhance Agile practices<br />\n • An understanding of Value Stream maps and why they are useful  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session is an interactive tutorial.  The talk is very well-refined, however.  I have given it in the past and it deals with many issues people have about agile and lean.  I answer questions as they are raised.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Tutorial	2008
20082549	Agile by any other name does NOT smell as sweet!	<div class="content">\n    <p>“This Agile stuff sounds like what I’ve always done. It’s just been re-packaged and given a special name.”  I shudder when I hear this sentiment, because I’ve observed that when people think it’s the same old thing, they’ll continue to do things the same old way. “We’re Agile” becomes the punch line for many process deficiencies. Yes, Agile practices do sound familiar.  However, in reality the individual practices are subtly different; the collection of practices create a profoundly different experience. This talk highlights these subtle differences, and illustrates the synergy.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><ol><li>Opening simulation (observation &amp; change) - 10 minutes</li>\n<li>Presentation: explaining the subtle differences of various key practices - 20 minutes\n<ul><li>iterative &amp; incremental development: there are many different ways to slice and dice the software development life cycle … story-driven “micro-slicing” is very different.</li>\n<li>Stories vs use cases vs features</li>\n<li>Tests as requirements vs test scripts </li>\n<li>etc.</li></ul></li>\n<li>Simulation: experience the difference (Slice &amp; Dice) - 20 minutes</li>\n<li>Presentation: The Blind Manager and the Elephant - 20 minutes\n<ul><li>what’s different about each team role</li>\n<li>the danger of not understanding / enabling the changes for other roles</li></ul></li>\n<li>Discussion &amp; Questions</li>\n</ol></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20081817	Embrace Uncertainty, why in Agile development knowing what you want may be an impediment to getting it	<div class="content">\n    <p>When Kent Beck first published Extreme Programming Explained in 2000 he invited us to embrace change. Certainly XP’s and Agile Software Development’s value system and practices support that. However, succeeding in Agile processes now requires more. We’ve come to value the successful delivery of the outcome of our work. It’s the value our “user stories” bring to business and end users that use the software that matter most. If user stories are a means to an end, then it’s the end that matters most.  And, while it helps to embrace change, embracing the uncertainty of not knowing exactly what you’ll get is more important. </p>\n\n<p>In this talk I’ll explore the common misconceptions about incremental and iterative development that lead Agile practitioners to focus more on building required scope on time, and less on the value they’re delivering.  I’ll then offer strategies to help Agile projects both finish on time and shift emphasis to the successful delivery of value.  I’ll offer advice by leveraging wisdom from famous thinkers such as John Lennon, Pete Townsend, Roger Waters, Paul Simon, and John Lydon.  The talk is fun, fast paced, and filled with strong visuals and music clips. </p>\n\n<p>This talk was first given at XP Day 2007.  The talk will be updated and revised a bit, but deliver essentially the same messages.  Blog responses to the talk can be found here: </p>\n\n<ul><li><a href="http://gojko.net/2007/12/04/waterfall-trap/" title="http://gojko.net/2007/12/04/waterfall-trap/">http://gojko.net/2007/12/04/waterfall-trap/</a></li>\n<li><a href="http://blog.nayima.be/2007/11/27/xp-days-london-2007-day-1/" title="http://blog.nayima.be/2007/11/27/xp-days-london-2007-day-1/">http://blog.nayima.be/2007/11/27/xp-days-london-2007-day-1/</a> </li>\n<li><a href="http://www.think-box.co.uk/blog/2007/11/xpday7-embrace-uncertainty.html" title="http://www.think-box.co.uk/blog/2007/11/xpday7-embrace-uncertainty.html">http://www.think-box.co.uk/blog/2007/11/xpday7-embrace-uncertainty.html</a></li>\n</ul><p><a href="http://www.agileproductdesign.com/blog/dont_know_what_i_want.html">my blog entry on the subject</a></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>60 minute talk followed by questions</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20084049	10 ways to screw up with Scrum and XP	<div class="content">\n    <p>Scrum &amp; XP may sound deceptively simple. But once you get down to the everyday practical stuff there are many subtle traps hiding about. Common mistakes that are easy to make and hard to detect, mistakes that cancel out many of the benefits that Agile methods were supposed to give. In this talk I’ll go through some of these traps, how to detect them, what the effect is, and what can be done about them.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a high-paced talk. Depending on group size I might hand out red &amp; yellow &amp; green ballots and ask people to rate their current project with respect to each pitfall (by waving ballots). Near the end I’ll ask participants to share their own favorite ways to fail.</p>\n\n<p><strong>Target audience</strong></p>\n\n<ul><li>People who are about to go agile and want to avoid the most common pitfalls</li>\n<li>Agile coaches who want to learn &amp; share their experiences.</li>\n<li>People who have started going agile but are still struggling a bit with it. Will probably recognize many of these pitfalls and learn some tips &amp; tricks.</li>\n</ul><p><strong>Sample content</strong></p>\n\n<p>I’ll be talking about things such as:</p>\n\n<ul><li>Velocity and how to misuse it</li>\n<li>Mergophobia (the fear of merging code)</li>\n<li>Technical debt</li>\n<li>Taskboard misuse</li>\n<li>Teams that aren’t teams (“well at least I finished <em>my</em> stuff”)</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20081661	Typical Pitfalls in Agile Software Development 	<div class="content">\n    <p>Many teams, projects, and even entire organizations are adopting agile processes. However, not always successful. Looking behind the scenes, you’ll see that although agile practices like pair-programming and test-driven development are being used properly, the comprehensive agile value system has not been adopted. </p>\n\n<p>In this session I’ll highlight recurring common pitfalls teams often fall into when applying an agile approach. Additionally, I’ll give recommendations how to uncover, avoid and get out of these traps. This will make smells transparent, help to prevent failure and to set up teams for success.</p>\n\n<p><strong>Value Statement</strong><br />\nThis session will raise the audience’s awareness of typical obstacles that prevent a successful implementation of agile.</p>\n\n<p><strong>Tests</strong><br />\nParticipants will be able to recognize common pitfalls when applying agility. They will walk away with concrete techniques that help them to recognize, avoid and get out of these typical traps.</p>\n\n<p><strong>Abstract</strong><br />\nMany teams, projects, and even entire organizations are adopting agile processes. However, they are not always successful. If you look behind the scenes, you will find that although agile practices such as pair-programming and test-driven development are being used properly, the comprehensive agile value system has not been adopted. It is important to understand that the practices support agility, but they can not establish agility. As a participants you will recognize that agility is:<br />\n     …not a specific methodology only, but a value system<br />\n     …neither chaos nor dogmatism, but a culture of change<br />\n     …not defined by practices, but by continuous learning  </p>\n\n<p>With her experience in helping projects all over the world to establish the agile value system, Jutta wants to highlight recurring common pitfalls teams often fall into when applying an agile approach. Additionally, she will point out recommendations how to uncover, avoid and get out of these traps. This will make smells transparent, help to prevent failure and to set up teams for success.</p>\n\n<p><strong>Performance Style</strong><br />\nLecture style including active participation through intense discussions, taking the individual experiences of the audience into account.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20083526	Don't Sell Buzzwords to Business Leaders, Learn How to Describe and Demonstrate Real Value	<div class="content">\n    <p>Rich will answer business leadership questions such as…<br />\n * “Why should I pay for two to do the job of one?”<br />\n * “Why should I pay for unit testing?  Get it right the first time!”<br />\n * “We paid for the cubes and now you want me to take them down?”<br />\n * “Why do we have to visit weekly, didn’t you read our requirements document?”<br />\n * “How could people work in a loud environment like yours?”<br />\n * “If you use paired programming, how can you tell who the best programmers are?”<br /></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>An energetic lecture style presentation sharing vignettes from real conversations.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20082240	Scaling Software Agility: Best Practices for Large Enterprises	<div class="content">\n    <p>Dean Leffingwell describes how agile methods are being successfully applied to enterprise-class development.\n• Part I describes best practices that natively scale to the enterprise level—structuring agile component teams, mastering the iteration, two levels of planning, concurrent testing and continuous integration.\n• Part II describes capabilities necessary to achieve enterprise-scale agility—intentional architecture, lean requirements, multi-level release planning and managing highly distributed development.\nThis presentation is based on the book by Addison-Wesley and Mr. Leffingwell’s continuing experiences in applying enterprise-scale agility to some of the world’s larger software organizations.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Tutorial	2008
20083512	Future Directions for Agile	<div class="content">\n    <p>What does it mean to be agile? What is lean and how does it relate to agile? How does our definition of agile evolve? How do we learn and adapt as a community and as an organization (the Agile Alliance)? What about these new ideas: Behavior-driven development, Kanban, Real Option Theory, and others? Are they agile or not? What about older ideas like Evo and Spiral? Do we measure agile and agility by the observed practices or do we look to values, principles and underlying paradigms that agile (and Lean) have sought to change?</p>\n\n<p>The agile community has a choice. Do we seek a homogeneous definition of agile around an agreed set of practices or do we continue to challenge each other and innovate new ideas and concepts and new practices? How do we evolve that underlying model of agile and when do we know whether a new idea fits with our agile values? and how do we discuss the extension and modification of those values?</p>\n\n<p>The agile community wastes a lot of energy arguing about what is agile or not? Petty squabbling about whether lean is agile or not, and whether its compatible or not, waste energy and de-focus the community from the true goal of finding better ways of delivering better software, of higher value more often and more repeatably.</p>\n\n<p>In this presentation I will discuss these issues and provide my vision for the future direction of agile and the agile community. I will discuss the underlying paradigms behind the agile manifesto and lean thinking and discuss newer ideas like Kanban, Real Options and Behavior-driven development and some older ideas like CMMI and evaluate how we think of them against our agile values and objectives of our community and movement.</p>\n\n<p>The threat of the agile community breaking in to disparate factions is real. I will propose a mechanism for how we grow a healthy community that can learn and evolve our values and practices without losing sight of our mission, goals and objectives.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This will be a lecture format power point presentation.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20085130	Measuring Agile in the Enterprise: 5 Success Factors for Large-Scale Agile Adoption 	<div class="content">\n    <p>BMC is a global provider of enterprise management solutions that empower companies to automate and align IT with the needs of the business. It also has one of the largest deployments of distributed Agile development with 95 people on 7 teams spread across 4 locations. </p>\n\n<p>In a landmark study, BMC opened its doors to allow QSM Associates, a consultancy for software development measurement, estimation,  and planning (<a href="http://www.qsma.com" title="www.qsma.com">www.qsma.com</a>), to evaluate its Agile deployment and measure/quantify the benefits of agility. The QSM Associates’ study concluded that: </p>\n\n<ul><li>BMC’s time-to-market was in the 90th+ percentile. Specifically, its build iterations phase was just 4 to 5 months as compared to more than one year for the rest of the industry. </li>\n<li>BMC scaled Agile to a very large team - 7 SCRUM teams distributed across 4 locations, to speed time-to-market.</li>\n<li>Despite this, defects were lower than industry. [In contrast, waterfall projects typically experience 400%+ defects.]</li>\n</ul><p>This study assessed two major BMC releases with schedules ranging from four and a half to five months, 90 – 95 full-time employees delivering approximately 1,450 story cards, comprised of about 1.4 million lines of new and modified code. Both teams use Agile/Scrum practices they put in place at BMC in 2005, as well as coaching and tools from Rally. </p>\n\n<p>The good news is that any team with the right motivation, training and tools can implement Agile and scale it to these levels.  The less good news is that there isn’t a “one size fits all” approach to Agile adoption. This presentation will present, in detail, the complete findings of the QSM Associates’ study as well as outline 5 critical factors for success with large-scale Agile adoption based on BMC’s three-year Agile rollout to its entire development organization. </p>\n\n<p>Outline: \n-   Complete Survey Findings \n-   The 5 Success Factors of Large-Scale Agile \n-   Buy-In \n-   Ready to Ship \n-   Dusk to Dawn Teamwork \n-   The Backlog \n-   Holding Back the Waterfall \n-   Q&amp;A</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Keynote address. Michael Mah is Cutter Consortium’s Benchmarking Practice Director and a Managing Partner at QSM Associates. He is a well-known, dynamic and highly-rated speaker in the world of software development, providing keynotes, track sessions &amp; workshops at events like Better Software (in June, ‘06 and also keynoting this June ‘08), SEPG, SPIN chapters, SD Best Practices, SPI Ireland and Agile Development Practices 2007.</p>\n\n<p>Michael uses a combination of his many years’ experience collecting and analyzing real world data along with a provocative and informative presentation of “what the numbers say,” the “story” behind productivity levels and the implications for Agile development looking toward the future. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20086055	The Economics of Agile: The competitive advantage of developing commercial software with Agile methods.	<div class="content">\n    <p>For the last several years, a number of companies have begun to position themselves as users of Agile. The real question, of course, is why? Is there preliminary data that substantiates the considerable investment involved in making this transition? Are the risks warranted? Also, will Agile methods work for some of the very large scale projects that are characteristic of commercial software projects? In this presentation, Sue McKinney will discuss how Agile methods and practices are emerging as essential to commercial software development.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session will take the form of a presentation with numerous examples, and will offer the opportunity for questions as appropriate.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20082029	Expanding Agile Horizons:  The Five Dimensions of Systems	<div class="content">\n    <p>Now that agile software development has crossed the chasm, it’s time to look around and ask ourselves, “What do we want to do when we grow up?”  It’s time to look at the whole system we find ourselves in and expand our thinking to take in the new landscape.  After all, a processes that does not change over time becomes rigid and eventually fade away.  We look at five dimensions of systems and consider how to expand agile horizons along each one.</p>\n\n<p>.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20081105	Agile Estimating and Planning	<div class="content">\n    <p>Planning is important for all projects, even agile ones. Unfortunately, we’ve all seen so many worthless plans that we’d like to throw planning out altogether. But let’s not give up yet. It is possible to create a project plan that looks forward six to nine months yet is accurate and useful. </p>\n\n<p>Too many teams view planning as something to be avoided and too many organizations view plans as something to hold against their development teams. In this session, you will learn how to break that cycle by acquiring new skills that will help you to create reliable plans for improved decision-making. You will leave with a solid understanding of and experience in agile planning. We will learn various approaches to estimating, including unit-less points and ideal time. You’ll also practice estimating with the popular Planning Poker technique. You’ll also see how these techniques work on fixed-price and fixed-scope projects. Together, we’ll explore techniques that dramatically increase a project’s chances of on-time completion.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Tutorial	2008
20082041	Natural Laws of Software Development - Deriving Agile Practices	<div class="content">\n    <p>We offer the beginning of a unified theory of software development, deriving the practices that are necessary in order to do software profitably and well.</p>\n\n<p>Starting from simple and commonly-held assumptions, we will explore the dynamic behavior of a software project, and will derive both management practices, and technical practices, as the inevitable consequences of iterative software delivery.</p>\n\n<p>Those who pay for our software development need benefits, profit, information, flexibility. To provide what the business side needs, Agile and XP practices are not just helpful: they are essentially mandatory.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The talk will be based around a growing series of graphs and pictures illustrating what happens on a software project. Relationships between practices — what we do — and what happens will be shown with both static and dynamic charts.</p>\n\n<p>As with all Jeffries / Hendrickson sessions, this one will be highly dynamic, and entertaining as well as enlightening. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20086798	Resistance as a Resource	<div class="content">\n    <p>When we try to improve our organizations, we inevitably meet resistance.  This session is about how to turn resistance from a frustration into a resource.  Whatever else it may be, resistance is information — about the people we are asking to change, about the environment in which the change will happen, about the changes we recommend, and about ourselves.  You will learn how to interpret people’s responses as valuable information, and how to translate that information into effective action to move your organization toward agility.</p>\n\n<p>Resistance gives us important information about the key factors that affect how people respond to our proposals.  First, resistance gives us information about the way we have communicated our ideas. If we communicate poorly, we cannot create a shared understanding with the people we are asking to change. Without a shared understanding, we are more likely to misunderstand each other’s words, actions, and intentions.</p>\n\n<p>Second, resistance also tells us about our relationships with those we are asking to change. Our relationships set the context in which we communicate. If we do not like, trust, and respect each other, we can not communicate effectively.</p>\n\n<p>Third, resistance provides information about the people we are asking to change. People’s responses come from their experiences, beliefs, and values. If our ideas for improvement do not fit those experiences, beliefs, and values, people will not change - at least not in the way we ask.</p>\n\n<p>Fourth, resistance gives us information about the environment in which we are asking people to change. If the environment does not support the change - with training, incentives, freedom to take risks, a sense of contribution, among other things - people will not be able to change in a sustainable way.</p>\n\n<p>Finally, and most importantly, our response to resistance tells us about ourselves. We see resistance when people respond in ways we don’t want or don’t expect. So resistance is information about our values and about expectations for how change happens.</p>\n\n<p>This paper describes ways to tap into that information, to turn resistance from a frustration to a resource. Once that information is available, we can adjust the environment to support our changes, or adjust our changes to fit the environment. We can create more trust in our relationships with people, and communicate more clearly and accurately. We can understand what people care about, so we can make our changes more appealing. Most importantly, we can change our own beliefs, expectations, and behaviors so that our responses to resistance are more appropriate and effective.</p>\n\n<p>By treating people’s responses as a valuable resource, we can translate resistance to change into energy for lasting improvement.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20081637	Who Do You Trust?	<div class="content">\n    <p>Cognitive scientists say we are more productive and happier when our behavior matches our hardwiring. That is, when what we do and why we do it matches the way we have evolved to survive over tens of thousands of years. One disturbing behavior we are hardwired to perform is to decide instantly who we trust. It is a particularly interesting characteristic of this behavior that we aren’t aware of what we are doing or why we are doing it. This hardwired evaluation often prevents us from working well with others.</p>\n\n<p>Agile development may not have had this problem on the list of things to address to create effective teams, but it’s nonetheless a part of the way agile teams work to build trust. Pairing, the daily stand-up, close communication with the customer and others inside and outside the team go a long way to build trust. When we have a better understanding of both the mechanism of our own behavior and what agile can do to help us, we are even more likely to have success as an outcome.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20081598	Ancient Philosophers & Blowhard Jamborees	<div class="content">\n    <p>It turns out that ancient philosophers knew a lot about software — did you know that Plato defined object-oriented programming? This keynote applies old lessons to new problems and old problems to new lessons. Galileo already figured out everything you need to know about SOA. This talk explores the software development world today, spanning technologies, methodologies, the 2nd wave of outsourcing (the rise of Chindia), and pretty much every topic under the sun with an even remote connection to software development in the 3rd century BC and the 21st century AD.</p>\n\n<p>This is a keynote-style talk that discusses how developers and managers deal with the problems encountered in traditional “enterprise” development. It turns out that most common sense has leaked out of these discussions; I hope to plug the hole. The idea behind this talk is to use ancient philosophers as a departure point to talk about all the things that are broken in the development world today.</p>\n\n<p>Little or no code, but issues that developers face on a daily basis, and some solutions to flawed thinking and attitudes.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20081945	My First, Shortest, and, Most Recent Agile Testing Frameworks	(No description)	Main Stage	Talk	2008
20082787	From High-performing to Hyper-performing Agile teams	<div class="content">\n    <p>This submission is to share the success of three successful Agile implementations that are both unique in their implementation while sharing many commonalities that have created high performance teams.  Each presenter will give a fifteen minute overview of their Agile implementation then join a facilitated panel discussion and Q&amp;A with the audience. </p>\n\n<p>NEW UPDATE: All three presenters were chosen as they have both been hands-on as well as overseeing their Agile projects for more than two years.  They have used Agile methods at multiple companies and it is interesting to see how they have applied their lessons learnt to getting their current organizations to new heights.  Jeff Sutherland is the CTO Of PatientKeeper and the person who kicked off Scrum and has been constantly evolving the process to get the team to new heights. Rob Mee from Pivotal has been hands-on both coaching and coding to setup his company as well as working closely with clients and is constantly involved with his teams. Jason Titus was the Director then VP for Yahoo mail and has been a driving force through their inception at a managerial level to remove roadblocks and help the teams perform effectively.</p>\n\n<p>Information on the speakers and topics:\nJeff Sutherland is CTO of PatientKeeper. They build a software platform for all physician applications and connect any frontend device (smartphone, PDA, Blackberry, webtop) to any backend clinical system in large hospital networks including HCA which has over 170 hospitals. PatientKeeper’s Type C Scrum was documented in a paper presented at Agile 2005 where they multithread sprints through multiple teams for extreme performance. They consistently ran ten times as fast as their carefully selected outsourced waterfall team in India until the Board terminated all outsourcing. In 2007, PatientKeeper’s Scrum implementation produced a hyperproductive revenue state and they quadrupled revenue in one year.</p>\n\n<p>Rob Mee is the CEO of Pivotal Labs in San Francisco. Rob runs a consulting firm of more than 50 developers  focused on building applications for start-ups  and investor groups, primarily using Ruby on Rails. Rob will share Pivotal’s techniques for working with many and varied clients simultaneously:  how to maintain consistent and predictable velocity,  how to scale teams without losing efficiency,and how to move developers fluidly between multiple teams and\nmultiple products.</p>\n\n<p>Jason Titus is the VP of Engineering for Yahoo! mail, the largest web mail provider in the world. Yahoo! Mail uses Scrum across large-scale infrastructure projects to build some of the largest storage and metadata systems and has seen over 200% productivity increases some pre to post Agile adoption.  Jason will share how they used Scrum to rebuild the backend of Yahoo! mail and mass storage, and how you apply iterative and incremental thinking to large-scale infrastructure.</p>\n\n<p>Facilitator bio:\nGabrielle Benefield is a Certified Scrum Trainer and was Senior Director of Agile Development at Yahoo! leading Yahoo!’s large-scale corporate adoption of Scrum, which now encompasses more than 200 teams projects and over 1500 employees in the US, India, Europe, and Asia.  She is co-author of The Scrum Primer (<a href="http://www.scrumprimer.com" title="www.scrumprimer.com">www.scrumprimer.com</a>).</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Three 15 minute presentations of each case study. These will follow the same format and dig into how each person has approached core practices and techniques. The next 45 minutes will be a facillitated panel discussion with audience questions as well as pre-prepared questions on specific topics if there are gaps.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Panel	2008
20085069	"We suck less!" Isn't mediocrity great?	<div class="content">\n    <p>Agile methods, and Scrum in particular, are enjoying a surge in popularity. Forrester Research’s “The Truth About Agile Processes” states that 17% of North American and European companies are now using Agile. Yet Forrester tells us that “many of these shops (companies adopting Agile) aren’t completely clear about what Agile adoption really entails” (2). Introducing Agile, a better process, causes an immediate improvement in productivity of 30 to 100%. This improvement is seen as a major win for the projects. Unfortunately, this is often where the adoption stops.</p>\n\n<p>There are two fundamental problems with the current state of Agile adoption: </p>\n\n<p>1: Companies suck less than we did before and that is acceptable \n2: Most companies are blind to the game changing benefits of pursuing excellence in Agile organization </p>\n\n<p>Agile methods, and Scrum in particular, are enjoying a surge in popularity. Forrester Research’s “The Truth About Agile Processes” (Schwaber 2007) states that 17% of North American and European companies are now using Agile. Scott Ambler, IBM’s Agile Practice Leader, conducted a survey in 2007 of organizations using Agile that prompted him to state that it is now mainstream (1). Yet Forrester tells us that “many of these shops (companies adopting Agile) aren’t completely clear about what Agile adoption really entails” (2). Introducing Agile, a better process, causes an immediate improvement in productivity of 30 to 100%. This improvement is seen as a major win for the projects. Unfortunately, this is often where the adoption stops.</p>\n\n<p>Most of companies who adopt Agile profess to have made ‘significant’ improvements in their software delivery process. We do not dispute this. We believe this to be a given considering the superiority of the Agile delivery methodology over phased. Adopting Agile, even poorly, will tend to give organizations a boost in productivity. Despite the excitement and the obvious successes to date, we are worried that Agile adoption is and will continue to be mediocre and fail in its promise to deliver anything more than 2x productivity gains. Agile methods like Scrum, XP, and Crystal, amongst others, were designed to drive significantly higher levels of productivity. Jeff Sutherland, PhD, the co-inventor of Scrum, has claimed 10x improvement in productivity at Patient Keeper. Yet his example and the few others like it are certain to remain significant aberrations unless we recognize and do something about the challenges to becoming excellent at Agile.</p>\n\n<p>Can the organization become Agile?</p>\n\n<p>Agile organization adoption is not an easy process for many organizations because they are designed for a different method of delivery. The structures, values, and behaviors were formed based on non-agile processes. Agile and Lean call for a different structure. When Toyota took over the NUMI plant from GM, they eliminated over 100 job descriptions from the floor, replacing them with 5 roles. How many organizations adopting Agile have eliminated roles, silo departments, or functional management? How many organizations using Agile deliver multi-platform projects without using waterfall estimation and planning and integration testing iterations? Our experience is that adopting a simple process like Scrum at the team level is relatively easy, and the fundamental shift in organizational structure is beyond the control of the teams and manager’s influence. In this presentation we will show data and case studies that show how “good enough” leads to backsliding and dysfunction in the organization. </p>\n\n<p>Can the organization become Lean? </p>\n\n<p>Lean adoption has significantly more history than Agile adoption and may therefore be prophetic in understanding where Agile is heading without our intentional action. James Womack of Lean.org and co-author of the landmark book, The Machine that Changed the World, posted the following summary of the past 10 years of lean adoption across the world:</p>\n\n<p>“In fact, the amount of change in management practice and organizational performance over the past ten years has been modest. There is still only one Toyota. And I worry whether Toyota will continue to be Toyota as its growth rate seemingly outpaces its ability to grow lean managers. (What an irony if Toyota becomes more and more like General Motors even as it surpasses General Motors in sales!).” \nWomack, James (October 2007 e-newsletter) <a href="http://www.lean.org/Community/Registered/ShowEmail.cfm?JimsEmailId=74" title="http://www.lean.org/Community/Registered/ShowEmail.cfm?JimsEmailId=74">http://www.lean.org/Community/Registered/ShowEmail.cfm?JimsEmailId=74</a> </p>\n\n<p>It is interesting how Agilists are excited about leveraging Lean with Agile without recognizing that most companies practicing lean still do not do it well. Do we possess the required skills and experiences to really understand how to incorporate an incredibly simple yet powerful way of thinking into the way we deliver software when very few others with a lot more experience have failed to create Lean organizations? The Agile community needs to listen closely to why Lean is failing to live up to its promise outside of Toyota or risk the same fate for Agile. </p>\n\n<p>We began to have these trepidations during the course of the single largest rollout of Agile in the financial services industry. This three year conversion continues to receive accolades in the market for its ‘successful’ Agile adoption. The time to market numbers dropped by over 50% and product quality improved, but many dysfunctions have appeared because of the failure to reshape the organization. The trap most fall into is settling for good enough. And good enough eventually erodes into quasi-Agile. In reality, the organization settled on a better result than it had previously and was not prepared to take the more difficult steps required to achieve breakthrough performance. </p>\n\n<p>(1) <a href="http://searchsoftwarequality.techtarget.com/news/interview/0,289202,sid92_gci1284787,00.html" title="http://searchsoftwarequality.techtarget.com/news/interview/0,289202,sid92_gci1284787,00.html">http://searchsoftwarequality.techtarget.com/news/interview/0,289202,sid9...</a> </p>\n\n<p>(2) Schwaber, Carey (2007). “The Truth About Agile Processes”. Forrester Research. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>60 Minute Talk</p>\n\n<p>This discussion is based on our direct experience consulting with over 10 organizations adopting Agile and over 150 projects. We supplemented our analysis with community polling we have done and continue to do with many other organizations outside of our direct purvue. The 1 hour discussion will be primarily lecture-based with opportunity for question and answer during the final 15 minutes. The data we have gathered provides the basis for a compelling story about the mediocre state of Agile adoption world-wide and the key issues that are preventing outsized gains. It is one that contrasts with the more optimistic stories we have come to accept. As such, the session is purposefully direct and critical in its delivery…intending to keep the audience aware of the responsibilities they have but may not be aware of and the actions they need to be taking to avoid regression to the mean.</p>\n\n<p>45 minutes - Lecture and presentation of data from various companies and projects adopting Agile (including some of the largest implementations to date)</p>\n\n<p>15 minutes - Question and answers</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20084303	What Haven't You Noticed Lately: Achieving awareness in a complex world	<div class="content">\n    <p>WHAT HAVEN’T you noticed lately? Like a magician’s audience, we are distracted by what we are directed to see, and relatively unaware of much else, including the way we think. In 1964, Marshall McLuhan predicted the world of 1994, including everything from telecommuting to the reshaping of education, politics, and economics. Join Mark Federman as he uses McLuhan’s thinking tools on everything from cartoon characters to online services. Learn to see hidden effects of the world we actively create, gaining new awareness of the everyday things seen, and mostly ignored.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>WHAT HAVEN’T you noticed lately? Most of us experience our complex, interconnected world by paying acute attention to what we are presented through the grand entertainment spectacles of news, sports, business and politics. Like a magician’s audience, we are distracted by what we are directed to see, and relatively unaware of the ways in which the things we conceive and create are restructuring everything from the pillars of culture and society, to the way we think. In 1964, media icon and guru Marshall McLuhan predicted the world of 1994, including such things as online shopping, telecommuting, and the reshaping of our fundamental institutions of education, politics, and economics. Join Mark Federman as he uses McLuhan’s awareness-creating thinking tools on everything from Pinky and the Brain to Google and mobile devices, to The Matrix and what he describes as “the most profound cultural contribution of our time.” Learn to see the hidden effects of the world we are actively creating, and gain a new awareness of the things you see – and mostly ignore – everyday.</p>\n\n<p>The session will be comprised of approximately 60 minutes of standup, with an embedded section of approximately 15 minutes demonstrating example playshop using one of the main awareness-creating techniques, namely, McLuhan’s laws of media tetrad. The remaining time will be used to address questions and conversation after the more formal part of the program. The formal part of the presentation uses projected slides; the embedded part typically uses a flipchart and markers.</p>\n\n<p>This presentation will be of interest to anyone who is challenged to make sense out of continual change, and must anticipate the otherwise unpredictable effects of the things we conceive and create.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20083753	Lightning talks	<div class="content">\n    <p>The usual format: everyone gets a strict 5 minutes maximum to talk about a point of interest. People with something to say write up their topics during the conference. People who want to listen mark the topics they’re most interested in and we’ll pick as many as we have time for.  </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Other	2008
20083091	Agility and SOA - Experiences with System Landscapes under Maintenance	<div class="content">\n    <p>The world is growing together and more and more we have the task to realize business processes distributed over multiple teams,  companies, locations, and domains.\nFor example, mobile phone companies these day exchange data with banks and insurances, logistics companies (to ship mobile phones), phone vendors, airlines (to offer business customers both special rates and lounge access), and so on.\nBut, of course, we still have to be agile.\nWe have to deliver new or modified distributed business processes as soon as possible with the best quality we can provide.</p>\n\n<p>SOA is an approach that tries to deal with this requirement.\nAnd it has a pretty similar meta story behind.\nIn essence, it is a value systems that takes the next revolutionary step for appropriate software development of large systems.\nJust like agility changes a lot by accepting that requirements change, SOA changes a lot by accepting that systems and solutions are heterogeneous.\nThe problem is, however, that due to the size of the systems the common practices have to change to keep the agile value\nsystem alive.</p>\n\n<p>In this talk I will present and discuss my experiences and lessons learned by trying to apply agile principles while maintaining large system landscapes with plenty of systems and hundreds or even thousands of developers.</p>\n\n<p>Topics will include:</p>\n\n<ul><li> Where do traditional agile practices not scale?\n</li><li> Why are systems under maintenance different?\n</li><li> How to refactor distributed systems?\n</li><li> What kind of organizational structure and culture is\n  necessary and appropriate for distributed development?\n</li><li> How to deal with distributed system tests?\n</li></ul><p>The value of this talk will be to get a consolidated first class experience report about the problems and possible solutions to\nbe agile in our modern world of continuous development and modification of system landscapes that are getting larger and larger.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>mainly lecture based but presented in a way that\nI tell interesting stories and lessons learned instead\nof dry and boring power point marketing slides</p>\n\n<p><strong>Please note: \n As in this conference all session proposals are open to the public, \n I have to write that this proposal falls under copyright 2008 of Nicolai Josuttis, IT-communication.com. \n You are not allowed to use this proposal and parts of it in any way without getting explicit permission.</strong></p>\n\n<p><font color="FF0000">Please if you have significant feedback or\neven have something where you need a reaction by me, please send me an email\nto: <a href="mailto:solutions@josuttis.de">solutions@josuttis.de</a>.\nI won’t be able to track reviews.</font></p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20083367	Open Source Businesses and Developer Careers	<div class="content">\n    <p>Open source is changing how software is built and how money is made. This talk discusses the economics of open source software from the start-up firm, the system integrator, and the software developer perspective. The talk provides a strategy framework and discusses its implementation using the dual-license strategy. It explains how system integrators use open source in the share-of-wallet wars. Finally, open source defines a new developer career. This talk explains this new career and argues that it creates economic value for some while it makes life harder for others. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item">\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20080836	Ten Terrific Transition Tips	<div class="content">\n    <p><strong>Value Statement:</strong></p>\n\n<p>The community will learn 10 valuable tips that have been distilled from a decade of helping people transition to agile methods.  </p>\n\n<p><strong>Abstract:</strong></p>\n\n<p>In this talk I will share ten valuable insights distilled from a decade of helping people successfully and unsuccessfully transitions to XP/Agile methods at organizations large, small and distributed. Expect to hear and see LOTS of content in one hour (I was raised in New York City, so I do talk fast!). You’ll learn how to create thriving, long-lasting agile transitions, common obstacles to avoid, useful transition strategies, ways to sell agility to the rest of your organization and findings from real-world agile metrics.  You’ll come away from this talk with a deeper understanding of how to evolve an \nagile (not “fragile”) software development processes. Expect lots of stories, images, videos and other highly-sticky pieces of knowledge that will serve you well in your own transition work.</p>\n\n<p><strong>Tests:</strong></p>\n\n<p>People will leave knowing about the importance of readiness assessments, the benefits of combining managerial and technical practices, different transition strategies, agile myths, agile metrics and results from real projects, the importance of project community, why failing fast is so important and much more.</p>\n\n<p><strong>Performance Style:</strong></p>\n\n<p>This talk is a lecture (with Q+A at then end).  I use lots of images, stories and videos to help make the knowledge sticky.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a high energy talk with some time for questions and answers at the end.  I intend to engage the audience via high impact images, stories and videos.   </p>\n\n<p>I have now given this talk at 2 conferences and will continue to give it prior to presenting at Agile 2008.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20082429	Trouble with component teams and an alternative	<div class="content">\n    <p>Traditionally, large products have been organized around the architecture. This was first observed by Mel Conway in 1968. Though he stated that this is not necessarily a good idea.</p>\n\n<p>After de-constructing the component team approach, an alternative way of organizing will be presented, organizing teams around large end-user features (feature teams). This is not a new technique at all, though it’s rarely implemented on large product development. I will go over all the drawbacks of feature teams and look at agile tools for overcoming these drawbacks. Also how to go over 100+ developers.</p>\n\n<p>This talk is a summary of one of the chapters of the upcoming book by Craig Larman and Bas Vodde called “Scaling Lean &amp; Agile Development: Successful Large, Multisite &amp; Offshore Products with Large-Scale Scrum”</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This is a presentation/talk which will be done completely with the usage of flipcharts. Using flipcharts, I’ll gradually build up the component team structure and point to the common problems, then I’ll gradually build up the alternative and make a visual comparison between them.</p>\n\n<p>Agenda:</p>\n\n<ul><li>Short introduction</li>\n<li>Component teams problems</li>\n<li>Feature teams</li>\n<li>Requirement areas</li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20084614	Stop Thinking So Small with Agile	<div class="content">\n    <p>In February of 2002 in Snowbird Utah, the Agile Manifesto was written. It was intended to be provocative, to cause upheaval in an entrenched system of thinking. It targeted the brave and few mavericks willing to let go of a myriad of software development security blankets and instead create value through new dynamics. It is now August 2008 in Toronto Ontario. Are we holding onto too constricted views of that 2002 statement in a way that could be holding us back from continued systems innovation? Are we stagnating and unnaturally suffocating the transformations that must naturally occur in order for a system to sustain itself? Are we thinking too small with Agile and are we afraid to allow and support the natural progression Agile’s usefulness and sustainability?</p>\n\n<p>Value:  For audience members, this talk provides a view of Agile as an ever transforming dynamic system. We intend to embrace this systems view to help push the envelope with regard to what next steps are out there on the road of Agility. We will present a very familiar system, Earth, as an example of what occurs with systems dynamics and how a system goes through virtuous and vicious cycles of transformation. With Earth as a model, we will then present our shared experiences from the field of virtuous and vicious cycles in Agile systems adoption.  We will then propose three important next steps for/with Agile, steps that heed Earth’s warnings and encourage us to stop thinking so small with Agile and to welcome natural and useful systems transformation. </p>\n\n<p>— Shorten feedback loops through faster throughput using Agile principles and practices\n— Apply these practices in Software as a Service versus large packaged product releases\n— Stop the tendency to overshoot the market/supply/demand by instead becoming deeply involved in Community, viral, networked marketing for uncovering the right components and functions to which you apply your scarce, valuable system resources</p>\n\n<p>Our three proposed next steps will be justified in examples, system thinking models and parallel trend analysis.  As a result, Agilists will be able to feel confident pushing the Agile system beyond its current perceived usefulness, taking away a well defined playbook for implementing these three next steps.</p>\n\n<p>Tests: \n-   You will understand the fundamentals of systems dynamics as we see them played out in the system Earth (what naturally occurring cycles of growth and waste do we see and how do the cycles impact one another) \n-   You will understand how this model is useful in evaluating our use of Agile in software development (the sources of wastes and the opportunity for growth in the Software and IT industry)\n-   You will understand three practices for attacking those wastes and the potential efficiencies resulting from steadily working to slay these wastes by applying Agile in a larger scale\n-   You will understand a proven model for working through these types of naturally occurring systems </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>Jean and Ryan will continue their duet and work together to present their ongoing passion in getting software companies to get on the expert curve of agility.  The talk will leverage their experiences from the field of scaling software agility and their research into the system dynamics of the high technology industry.  We hope to drive your passion and ambitions for agility up while providing tools to sell, scale and counter-balance the immune system responses to large scale agility (also know as visibility, responsibility, transparency, and discipline)  We also hope to change your perspective on the role agility plays in evolving the high technology industry toward true sustainability.</p>\n\n<p>Agenda/Process:\n1.  Exponential Growth, Systems Dynamics and Long Feedback Loops\n2.  The Long Feedback Loops of Information Technology Industry\n3.  Three Solutions to Shortening IT/Software Feedback Loops\n4.  How to Expose and Sell through the FUD</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20084880	Driving Agile Transformation from the Top Down	<div class="content">\n    <p>90 Word Summary:\nPete Morowski, senior vice president of R&amp;D for Borland Software, will draw on his experiences leading an established development organization through an agile transformation to explore practical answers to questions that IT executives and dev managers from established enterprise organizations with multiple teams and projects may be asking themselves as they consider transitioning to agile.  It will seek to add a new chapter to the existing body of agile knowledge, providing insights into how to translate agile principles from theory into practice for existing enterprises, enabling more mainstream application of agile principles.  </p>\n\n<p>Full Description:\nWhile agile practices are starting to make their way into large enterprises, in most instances this has been a “bottom up” up movement driven through grassroots efforts.  But as agile success stories draw mainstream attention to the benefits of agile practices, an increasing number of executives are considering making an organization-wide agile transition.  It is an attractive proposition.  But, what does an agile transition look like when it comes as a mandate from the top?  How do the “rules” of agile apply to a large, established development organization?  How do you scale agile principles from a single team to an enterprise with multiple teams working on multiple projects?  </p>\n\n<p>When I joined Borland Software 18 months ago, we had 325 engineers, working on a broad portfolio of development projects from 13 different locations around the world.  We made the executive decision to transition the organization to agile as part of an effort to reduce our development costs, boost our efficiency and quality, and introduce more operational oversight.  Today, Borland is in “the thick” of its transformation – close to 40% of our teams are agile.  </p>\n\n<p>In embarking on this transformation, I found that many of the books and resources available on agile didn’t quite fit our situation.  They were written for “pure” implementations and focused on how to empower self-directing teams.  They didn’t provide guidance on how to manage a portfolio – a software development business – in an agile manner.  They didn’t provide perspective on how to manage a transformation as a business initiative; to apply agile principles to a complex organization. We found ourselves in some uncharted territory.   I’d like to draw on my experiences leading an established, multi-project development organization in an agile transformation – one that was “top down” – to map out some of this territory for other IT executives that may seek to make the journey.  </p>\n\n<p>Value statement:\nThis talk will explore practical answers to the questions that IT executives and dev managers from large, established software organizations with multiple teams and projects may be asking themselves as they consider transitioning to agile.  It will seek to add a new chapter to the existing body of agile knowledge, providing insights into how to translate agile principles from theory into practice for existing enterprises, enabling more mainstream application of agile principles.  </p>\n\n<p>Attendees will walk away with:</p>\n\n<p>• An understanding of the role of management in creating an agile environment </p>\n\n<p>• Insights into how to transition traditional development team roles – managers, chief programmers, product managers – to the agile model </p>\n\n<p>• Suggestions on how to adapt agile practices to a multi-team, multi-project enterprise development organization – some guidance on what rules are immutable and where flexibility is crucial    </p>\n\n<p>• Guidance on how to manage a gradual shift to agile, and perhaps bridge “two worlds” indefinitely</p>\n\n<p>• Real-world examples of how the benefits outweigh the investments in an enterprise agile transition</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>The format of the session is a talk (presentation) and a Q&amp;A/discussion.  The talk/presentation will run 40 minutes, answering the questions through examples, illustrations, best-practices and stories from my real-world experience transitioning an enterprise software organization to agile.\nTalk: 40 minutes\nDiscussion/Q&amp;A: 20 minutes </p>\n\n<p>Please note:  We submitted this twice — as a 60 minute talk to both the Agile &amp; Organizational Culture and Main stages.  We’d also be open to shortening it into a 30 minute experience report, or developing it for another stage should that be a more suitable option for the topic.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20083419	Pressure and Performance: The CTO's Dilemma	<div class="content">\n    <p><strong>The Agile movement has largely ignored the experiences of CTOs and senior leaders in an Agile enterprise. In this session, we move toward a pattern language of CTO-level Agile practices and underlying principles, with supporting or constraining forces. Presenters will explain survey data and a CTO panel will contribute their stories. Taking our cues from panel and audience members, we’ll consider further topics including: demonstrating, assessing, and improving performance; tensions between long and short term results; control and influence; and creating an organization where Agile teams thrive and produce.</strong></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p><strong>Value Statement</strong></p>\n\n<p>Through this session, we intend to provide value to the agile conference community by: </p>\n\n<ul><li>sparking discussion about executives’ role in Agile development;</li>\n<li>providing ideas that will help organizations support Agile in the enterprise; and </li>\n<li>enabling non-CTOs to understand their executives’ world.</li>\n</ul><p><strong>Abstract</strong></p>\n\n<p>Much has been said about the role of project and functional managers in Agile environments. We want to explore the experience of a group that has been largely ignored: the CTOs and other senior leaders in an Agile enterprise. We will share stories collected from CTOs we’ve worked with, and we will include a panel of CTOs in our session to tell their own stories. We will also engage the audience with exercises they can complete in their seats.</p>\n\n<p>In this way, we wish to move towards a pattern language of CTO-level Agile practices. During the session, we’ll explore the principles behind the practices we have found, as well as the forces that support or constrain the use of individual practices.</p>\n\n<p>We will present prepared material and respond to the needs and experiences of our panel and audience. Topics we expect to explore include: control and influence; serving the business; demonstrating, assessing, and improving performance; tensions between long and short term results; feeding and starving organizational behaviors; and creating an organization within which Agile teams thrive and produce. </p>\n\n<p><strong>Tests</strong> </p>\n\n<p><em>Our session will be successful when:</em> </p>\n\n<ul><li>CTOs think, “I recognize my situation in what the presenters said.”</li>\n<li>Non-CTOs think, “I have a better understanding of senior management’s world – their pressures, issues, hopes, aspirations and dilemmas.”</li>\n<li>Most attendees think, “I’m walking away with at least one idea that made my time in the session worthwhile.”</li>\n<li>Most attendees think, “This session kept my attention throughout and made me think.”</li>\n<li>During the rest of the conference, we hear (or hear about) conversations related to our session topic. \nThis is an interactive session that will accommodate an audience of hundreds. We’ll use in-chair activities for individuals as well as pairs and triads of people sitting near one another. </li>\n</ul><p>The interplay between the presenters and among the presenters and CTO panel members will create an entertaining, fun and playful session while providing solid, original content to participants. </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20082990	Coaches Are Producers	<div class="content">\n    <p>In the recording industry, producers help guide production by balancing creativity with costs, quality, and schedules. The great producers value and nurture the uniqueness of each project. The producer helps the players (and others) complete the project while providing a time and space for improvisation.</p>\n\n<p>Agile coaches face similar challenges while helping communities deliver (produce) software. Sustainable agility often starts with an agile coach helping a community find its unique groove. Like the music producer, the coach needs to help the individuals as well as the community innovate and deliver.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This talk will compare producing music to producing software as a way to start people thinking about their coaching style and what untapped experiences they might have to use in future coaching.</p>\n\n<p>The talk will cover techniques for bonding communities in a way that helps establish sustainable agile eco-systems. From finding a groove (in the first few iterations) to keeping the band together (past the first release), the talk will present a collection of coaching ideas and practices.</p>\n\n<p>Some of the areas that will be covered are:<br />\n- Having enough organization to allow for improvisation<br />\n- Creating a creative work space<br />\n- Helping to create collective ownership of the product<br />\n- Getting people talking and collaborating<br />\n- Fostering principles and values<br />\n- Drawing on existing strengths in the community<br />\n- Blending agile styles to meet the needs of the existing culture<br />\n- Raising awareness with meaningful metrics and information radiators<br />\n- Connecting with the difficult or uninterested players<br />\n- Growing coaches within the community  </p>\n\n<p>The session will be mostly presentation, but there may be exercises if possible (space and audience size dependent). </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20082715	Leading Agile Teams 	<div class="content">\n    <p>Agile projects require shared leadership and collaboration to be successful, yet many organizations try to use outdated command-and-control approaches.</p>\n\n<p>“We manage property and lead people. If you try to manage people they feel like property”.</p>\n\n<p>This 90 minute presentation exposes the weaknesses of trying to use formal project management on emergent endeavours and outlines the leadership and collaboration based alternatives. </p>\n\n<p>Using humour, analogy, and case studies the limitations of a command-and-control management along with carrot-and-stick motivation approaches for software projects are examined and leadership / empowered teams based options introduced. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>An image and graph rich presentation covering:</p>\n\n<p>State of the art PM – 80 years of embellishing a model flawed for knowledge workers<br />\nSoftware Projects – the unique project management challenges<br />\nWorker motivation – carrot and stick vs intrinsic<br />\nLeadership techniques:<br />\n* Modeling desired behaviour<br />\n* Creating and communicating a common vision<br />\n* Enabling others to act<br />\n* Willingness to challenge the status-quo<br />\n* Encouraging each other<br />\nAgile projects, empowered teams and shared leadership<br />\nRecommendations and useful resources</p>\n\n<p>Rather than replacing the project management role with a single project leader role, the emphasis is on empowered teams and shared leadership. Using video clips of Canada Geese flying in V formation the presentation ends with the concepts of: shared goals, mutual support, the role of encouragement, sharing hard tasks, and the hope that life has more geese than turkeys!</p>\n\n<p>Presenter Background:<br />\nI hold PMP and PRINCE2 traditional PM qualifications and teach for the PMI. I helped write portions of the current “PMBOK v3 Guide” and believe it should not be used on agile projects. There are many worthy applications for structured project management, yet the average software project is not one of them.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20082054	New arrows for the Agile quiver: Now that the team's head is in the game, how do you get their heart in?	<div class="content">\n    <p>Great software comes from getting the best ideas into the product. Jim McCarthy, who led the legendary turnaround of the Visual C++ group at Microsoft, left Microsoft in 1996 to create a team dynamics laboratory to figure out how to always create a create a high performace team. His lab has focused on this challenge, and has produced 11 protocols for making unanimous decisions, supporting quality thinking, strengthening design iterations, and incorporating feedback, emotions, nobility, and passion into products.   Learn about an entirely new class of tools.</p>\n\n<p>•Do you notice too much discussion and arguing and would prefer the best ideas would just get implemented now? –Learn about the Decider Protocol which guarantees unanimous team decisions with accountability and moves the team forward with a bias toward action.</p>\n\n<p>•Do you accept that it is vitally important that you get the opinions of others about the quality of work products but notice that it is consistently painful to give and receive feedback? – Learn about the Perfection Protocol which solves all the problems associated with criticism.</p>\n\n<p>•Do you notice that dumb things consistently happen on your team and everyone seems to lack self-awareness to some degree, including you? – Learn about the Core Commitments which provide a team constitution about commitment and accountability to the team. And learn about the Personal Alignment Protocol which allows each team member to address self-awareness around courage, integrity, passion and other virtuous behaviors.</p>\n\n<p>Jim McCarthy’s keynotes at dozens of conferences all over the world are repeatedly considered the “Best of Show.” He wrote the classic 57 rules-of-thumb in, “The Dynamics of Software Development,” as well as the book, “Software For Your Head: Core Protocols for Creating and Maintaining Shared Vision.” <a href="http://www.mccarthyshow.com" title="www.mccarthyshow.com">www.mccarthyshow.com</a></p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>How the time will be used:\nJim uses interaction with the audience in his talks so that people can participate with what he is saying. For instance he will do an exercise that makes each audience member consider the quality of team interactions of teams he or she has been on and how accountable we each are for creating that quality.  Jim has lots of experience with audience attention and will take a break if needed or shorten or make the session more lively if needed depending on the feedback from the audience. Interaction will be encouraged throughout the talk.  If the talk reaches its goals before 90 minutes, it will end early.</p>\n\n<p>We are very flexible to the wants of the customer. If the conference coordinators would like something different than what is proposed here, we welcome the input.  We want the conference coordinators and the attendees to walk away thinking this talk exceeded expectations.</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20084259	Good Virus / Bad Virus: How Organization Culture Impacts Agile Adoptions (and Vice Versa)	<div class="content">\n    <p>Research shows culture is the single most important factor in organizational success. Four culture types have been identified: Control, Collaboration, Competence, and Cultivation. This session explores how Agile fits within each, including when it synergizes with the culture’s natural tendencies, and when like a virus it spreads unwanted “germs”, undermining the natural balance. With this context, we explore how Agile can change cultures, when it is advisable to try to do so, and how to make the best of the corporate culture you find yourself in.</p>\n\n<hr /><p>Agile might just be the world’s favorite new development method, but how does it fit with different organizational culture types? And when that fit is less than ideal, should we attempt to employ Agile anyway? Can Agile change those cultures? And if it can, is that actually a good idea?</p>\n\n<p>There is a prevailing view within the Agile community that “command and control” is anything from an antiquated, to a dysfunctional, to a downright evil form of organizational environment. Yet arguably more organziations tend in the control direction than any other of the four culture types (Control, Collaboration, Competence and Cultivation). Control cultures—like various Myers-Briggs types—can be well functioning or not, but there is nothing inherently good or bad about a given culture type.</p>\n\n<p>Given a definitive body of research showing that organizational culture—and its alignment with strategy and leadership—is the <strong>single</strong> most important factor in achieving organizational success, we see that well functioning cultures of any type (including Control) can be expected to perform for stakeholders, stockholders, customers and employees. The presentation will outline this research and present in detail the four culture typology (it’s rather like a Myers-Briggs for organizations).</p>\n\n<p>We will then examine the specific cultures which easily accommodate Agile (Collaboration and Cultivation) and those where it will likely strain prevailing attitudes, beliefs and practices (Control and Competence). My experience is that Agile can either work like a good virus (a nutrient), working with and reinforcing the culture’s natural tendencies, or like a bad virus, spreading an unwanted germ that undermines the natural balance. (Note that I am not talking about Agile bringing to light organizational dysfunctions—such as pretending we can meet dates that are impossible—but rather when it actually works counter to an organization’s DNA, rather like insisting that an Introvert go on a marathon program of public speaking because it will make them a “better person”.)</p>\n\n<p>Particular focus will be placed on the implications of implementing Agile in cultures where it does not easily fit, such as Control cultures. In such cultures, there is an inherent conflict between the cultural perspective and the Agile frame of reference. Yet Control cultures pervade much of government, the defense industry, practically all utility companies, McDonalds and other fast food restaurants, many standard manufacturing companies, etc. Should we therefore forgoe implementing Agile there? Or perhaps we should ride in like missionaries of old and “save” the heathens? Can Agile be implemented in a way that honors the needs of Agile teams, while not undermining what may be an effective organizational culture (albeit one that we Agilstas would not normally choose or prefer).</p>\n\n<p>Prepare to have your thinking challenged, to be exposed to a robust and rich conception of organizational cultures (revealing dynamics you have sensed, but did not have the language to articulate), and to leave with several new ideas for harmonizing Agile implementation and culture.</p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>[<strong>Author’s Note</strong>: this presentation would clearly fit on the Organization &amp; Culture stage. I decided to submit it to the Main Stage because of the reaction I received from other audiences: great relief, insight and a deep resonance. Because of this, I thought it bore consideration for a wider audience, but am willing to move it to the Culture Stage if requested.]</p>\n\n<p>The typology referred to is that of William Schneider, who wrote The Reengineering Alternative, and who designed the online organization culture assessment called CultureTek (<a href="http://cdg-corp.com/products.html#organizational" title="http://cdg-corp.com/products.html#organizational">http://cdg-corp.com/products.html#organizational</a>) and the corresponding individual leadership typology called Leadership CultureLink. The talk will highlight the research of Schneider, other culture researchers, and my own research on culture issues specific to large scale Agile rollouts.  </p>\n\n<p>The presenter’s style is always highly interactive and thought provoking, even in a so called “talk.” I am hopeful that this new perspective has the potential to preserve the sanity of some change agents attempting to roll out Agile across their enterprise, and perhaps of a few of their unwitting “change targets”.</p>\n\n<p><strong>Outline</strong><br />\nIntroduction<br />\nResearch on Organization Culture &amp; Business Effectiveness<br />\nThe CultureTek Culture Typology<br />\nAnalysis of Agile using the CultureTek Lens<br />\nAgile Adoptions in Control &amp; Competence Cultures<br />\nImplications for Adoption Strategy &amp; Implementation<br />\nConclusion  </p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20084343	Agile and Beyond - The power of aspirational teams!	<div class="content">\n    <p>Agile is now on most CV’s, so beyond the hype what is the future? This session explores a journey of agile techniques, unusually mixing appreciative inquiry to show examples of thinking beyond simple agile. Far from being dictatorial, frameworks like XP are misunderstood – they are aspirational. Combining true stories, audience participation (project pictures and natural appreciation) I also cover: Mock Objects, Role Play, Gold Cards, Practicing Happiness, Retrospectives and Appreciation. While the range is varied, it’s a common journey encountered by many teams as they grapple with achieving optimal results. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This session has a rich set of examples that form a basis for describing experiences from working with many agile teams. The audience will be asked to try out some of the exercises described, like project pictures and giving natural appreciation (it won’t just be about sitting and listening). Topics visited in the journey of related and unfolding topcs are: Testing, Mock Objects, CRC Cards, Role Play, The Power of Groups and socializing ideas, Gold Cards, Story Cards, Happiness, Retrospectives and Appreciation. While the range is quite varied, this is a common journey encountered by many agile teams as they grapple with how to achieve results in an optimal manner. The topics demonstrate practicing reactions to varied problems and treating them as opportunities to find new solutions that can lead to what is possible. The ideas in this journey might be known (some published) however the session also provides a unique incite into what the presenter and teams were thinking when they encountered them and how they turned challenges into incremental achievements. Attendees will definitely leave this session with some concrete ideas they can try on their projects too.</p>\n\n<p>Tim Mackinnon is an early pioneer of agile development. His contributions include many well recognized techniques:  Mock Objects, Gold Cards, Heartbeat retrospectives and Futurespectives as well as starting the Extreme Tuesday Club. He has worked with numerous organisations, developing, teaching and mentoring teams in effective agile methods. Tim is also the founder of Iterex Ltd, a company specialising in team excellence and the creator of the Iterex Planning Cards software (<a href="http://www.iterex.co.uk" title="http://www.iterex.co.uk">http://www.iterex.co.uk</a>).</p>\n</div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20081909	Do the Right Things: Adapting Requirements Practices for Agile Projects	<div class="content">\n    <p>Agile projects compel you to reconsider and redefine traditional requirements practices. There are agile benefits to leverage and pitfalls to avoid. In this talk, learn what to consider—including team and product factors—when you adapting your approach. You’ll discover agile requirements practices that promote and enhance of trust, what practices to calibrate, and the business analysis work needed by your project. Join us to explore ways to adapt and leverage your requirements practices to increase product quality and trust—while delivering business value on your agile project.</p>\n\n<p>In this talk, Ellen will present a gradient of requirements practices ranging from traditional to agile. Based on real-world stories about teams that have used these practices, you’ll learn what you should consider when adapting (or abandoning) them on your project. You’ll learn about requirements practices that build and sustain three types of trust: contractual, communication, and competency.</p>\n\n<p>If you’re from a traditional environment, you’ll gain a new understanding of the context for adapting your requirements practices to agile projects. If you’re an agile practitioner, you’ll hear new ideas for ways you can lighten, tighten or incorporate a subset of traditional practices to mitigate the risks of missing, erroneous or conflicting requirements. Either way, you’ll learn ways to adapt requirements practices to fit various agile project situations so that you can do the right things for your project. </p>\n&#13;\n<div class="field field-type-text field-field-processmechanics">&#13;\n  <div class="field-label">Process/Mechanics</div>&#13;\n  <div class="field-items">&#13;\n      <div class="field-item"><p>This talk will use a combination of lecture and discussion, welcoming question related to content as we go. We will have a final Q&amp;A for the last 10 minutes.</p>\n\n<p>Topics will include:</p>\n\n<ul><li><p>Define requirements and introduce the gradient of practices</p></li>\n<li><p>Describe common agile requirements practices</p></li>\n<li><p>Enumerate several factors to consider when deciding what practices to alter</p></li>\n<li><p>Understand the essential role trust plays in requirements work and how these practices build and sustain trust</p></li>\n<li><p>Identify key requirements good practices to draw upon when determining your agile project’s requirements practices</p></li>\n<li><p>Describe key roles and requirements activities on agile projects</p></li>\n</ul></div>&#13;\n  </div>&#13;\n</div>&#13;\n&#13;\n  </div>	Main Stage	Talk	2008
20092258	Clean Code Clinic: Refactoring Fest	**Intent**\n\nProvide the participants with a hands-on-experience of real world refactoring by taking an open source project and refactoring it.\n\n**Summary** \n\nRefactoring is a very well established practice not just in the Agile Community, but outside as well. \n\nThis session is an attempt to help the development community understand refactoring a little better. It will provide a hands-on opportunity for developers to explore these concepts in action. This session will try to amplify the participantâ€™s learning process by pairing them with other practitioners and peers.	Developer Jam	Clinic	2009
20092591	Test Driven Development on the iPhone	Currently, the iPhone is the hottest platform for mobile development, with everyone wanting to develop on it.  Test Driven Development is a proven technique for developing high-quality software, but isn't encouraged by the iPhone development platform.  Open Source developers have stepped in, creating Unit Test Libraries for the iPhone.  We'll show you how to get started, run your first tests, put tests in your build, and touch on advanced techniques like mock objects and dependency injection.  Perfect for the Agile Developer looking to get started on iPhone.	Developer Jam	Clinic	2009
20090089	Implementing Scrum/XP Practices using Team Foundation Server	This demonstration will show how the Scrum process and many XP/Agile practices can be implemented using Visual Studio Team System, Team Foundation Server, and the Conchango Scrum Process Template in a .NET development environment. The demonstration will follow a User Story from being added to the Product Backlog, through development during a Sprint, to deployment to production, and back again via a reported defect; covering the entire lifecycle cradle to grave.	Tools for Agility	Demonstration	2009
20090091	Applying modern software development techniques to automating the web UI	In today's Agile development environment, UI testing is still very much done the old way.  We still see long scripts that are easily broken and impossible to maintain.  By applying modern software development techniques like test first development, refactoring, and pair programming we can seek to make better tests that are less fragile and more likely to discover defects in code.  In this session we will demonstrate the techniques listed above and discuss how they can be applied to UI testing.  The demonstration will use a combination of fitnesse and SWAT (an open source web UI testing tool).	Testing	Demonstration	2009
20090104	Transition Testing: Cornerstone of Database Agility	In this session, you will learn one thing: how to enable emergent design in a database.  The reality is that databases development is different from application code development.  They are similar, but databases bring about some forces that we havenâ€™t given much thought.\n\nThis session challenges traditional, foundational database development techniques and proposes a new framework into which Agile processes, as well techniques such as TDD or refactoring, can better fit.\n	Testing	Demonstration	2009
20090161	Continuous Integration: Your New Best Friend	Continuous Integration means different things to different people.  This workshop will demonstrate a set of best practices that allow a software delivery team to derive the most value out of their software development dollars, by adhering to the Agile Manifesto principle that states â€œWorking software is the primary measure of progress.â€  That is, we will see how software can be delivered that allows rapid change, monitors that the changes do not adversely affect quality, and delivers potentially shippable code from easy to implement open source tools available to the community at large.\n	Tools for Agility	Demonstration	2009
20090399	Automated deployment with Maven and friends - going the whole nine yards	Automating your build process with Continuous Integration is certainly a great idea, but why stop there? Why not go the whole nine yards and automate the deployment process as well? Staging and production deployments are typically more complicated and more involved than a simple development deployment, but doing them by hand can be time-consuming, tricky and error-prone. Indeed, turning your staging and production deployments into a one-click affair has a lot going for it.	Tools for Agility	Demonstration	2009
20090482	Java Power Tools - getting it all together	There are plenty of good tools out there - the trick is to get them all to play together well. In this session, we will go through the full process of setting up an automated software development infrastructure, from code changes and version control right through to automated deployment to staging and production. We will go through the key steps involved in automating a typical Java project using Maven, Hudson and a large cast of other supporting tools. We will see not only how to automate the build itself, but also how to improve code quality, manage releases, and improve team communication.	Tools for Agility	Demonstration	2009
20090572	CI vendor cage-fight!	In this session, we invite CI tool vendors to give a short demonstration of the best features of their tool. Each vendor will be given 10min to show off the best features of their software, with a further 5min of questions. \n\nThis will allow CI users to quickly get a good grasp on the plethora of CI tools on the market, to help them find out about useful features of various tools that may help their CI implementation, and to learn about the practices that each tool encourages. \n\nIt also helps CI tool vendors gauge the market, and improve the standards and features of all CI products.	Tools for Agility	Demonstration	2009
20090641	Acceptance Test Driven Development (ATDD) in Practice	Agile teams practicing Acceptance Test Driven Development (ATDD) define acceptance tests collaboratively while discussing each story. This practice helps uncover assumptions and confirm that everyone has a shared understanding of "Done". During implementation, the technical team automates the natural-language Acceptance Tests by writing code to wire them to the emerging software. In this way, ATDD tests become executable requirements. This session is a demo of the full ATDD workflow from initial discussions to distilling tests into an automatable format to implementing code to the final demo.	Main Stage	Demonstration	2009
20090712	Continuous Testing Evolved	Continuous Testing (CT) is a developer practice that shortens the feedback loop established by Test Driven Development. It gives you near instant feedback about the correctness of your code, and helps you find bugs as quickly as syntax errors. This session will cover how CT has evolved in the last year, it's current capabilities, and limitations.  The presenters will also show several demos of the practice using freely available continuous testing tools, and examine how these tools can be integrated with existing infrastructure to bring the benefits of CT to a wider audience. 	Tools for Agility	Demonstration	2009
20090713	Test Driven Development in Java: Live and Uncensored	One of the barriers to wider adoption of TDD is that it is best taught from within a team, and the technical challenges of writing tests frequently thwart those looking to teach themselves. This session will be a live demonstration of Test Driven Development in Java, using Eclipse and JUnit, aimed at those new to TDD and looking to learn. Audience members will be encouraged to follow along on their own laptops as we walk through common scenarios that frequently discourage new TDDers, and demonstrate some techniques for overcoming them in a live coding session.	New to Agile	Demonstration	2009
20090967	Ineffective Pairing, How To	Most sessions show us how to do various agile practices right. What is sorely lacking is the opportunity to learn how to do the practices wrong. How can we be expected to bring agile into an organization successfully without mastery of that key skill?\n\nPairing isn't controversial, done effectively it:\n* reduces defects (by up to 86%, according to the 2000 University of Utah study), \n* improves productivity (up to three-fold, according to the 1975 US Army study)\n\nHowever, learning by doing wrong is actually an effective learning technique, and that's what you'll see here. 	New to Agile	Demonstration	2009
20091101	Agile testers toolkit	This session will introduce and demonstrate some of the free or near free tools available for a functional tester (or developer) to assist with test planning, execution, analysis and test support.  We'll look at mind mapping tools, portable applications, firefox extensions, and various other tools including an amazing test data generator.  These tools will help organize ideas, look "under the hood", verify compliance to various standards, record test results and assist in breaking software from a functional and security point of view.  We''ll also look at some general tools as well.	Tools for Agility	Demonstration	2009
20091125	Continuous Integration of the World	Ok, maybe we exaggerated a bit. CI deployments focus on the testing and deployment of the application. The 'world' (OS, Application & DB server) within a CI doesnâ€™t change that much. But what if you could define your applications environment from a kind of â€˜sourceâ€™ and build and unit test it? f.i. Test security patches by using unit tests of your application?\n\nUsing the concept of a pipeline we will show how to use existing tools/concepts for a Continuous Build for your Infrastructure allowing you to better integrate your production environment. Your sysadmin might even get interested?	Tools for Agility	Demonstration	2009
20091247	Agile Lightweight Project Management with Google Docs	Using Google Docs you can create your own lightweight project management tools and through simple and powerful visual management provide the people involved with shared information that will give transparency into progress and problems\n\nCompared to most commercial project management tools using Google Docs is very flexible. That way the tools can be adapted to how the processes of the project continuously improve. And not the other way around.\n\nThe demonstration is based on more than 2 years of experience using Google Docs for Agile processes in a distributed development context.	Tools for Agility	Demonstration	2009
20092506	Color Modeling Improv	Peter Coad's Color Modeling method is a simple, effective technique for building robust, elegant object models.  One of the best ways to learn the Color Modeling approach is through an interactive demonstration.  In this session, Daniel Vacanti and David Anderson will solicit examples from the audience and--with no preparation and using the Color Modeling approach--build a real, working model for each selected problem domain in the short time given.  Both David and Daniel have used this demonstration technique with great success at previous conferences, tutorials, and commercial engagements.	Customers & Business Value	Demonstration	2009
20092902	The Ogre and The Wimp: Clever Influencing Tricks - Help the Most Reluctant Teams	What happens when the CIO decides the dev team needs to adopt agile practices and the dev team nods their heads but don't plan on doing zilch? \nIt is time to leverage those fancy shmancy influencing skills we agilists are so famous for.  We'll cover new fun tactics that have not yet been explored in some of the prevalent literature.  All fresh information from the field.	Agile Adoption	Demonstration	2009
20093201	Deep Democracy: A Radical Approach to Hearing from Every Voice	This session is an explanation and demonstration of Deep Democracy, primarily aimed at coaches interested in learning new techniques. Deep Democracy--originated by Arnold Mindell--maintains that a well functioning group is dependent on all the voices, positions and views in the group being heard and valued. We will start with the definition, origins and applications of Deep Democracy, then conduct a Large Group Process in which all can directly experience the power of this approach. In our debrief, we will harvest the wisdom of the group, and explore practical uses in Agile team situations.	Coaching	Demonstration	2009
20090111	History of a Large Test Automation Project using Selenium	There is much information available about how to *begin* automated UI testing projects. There is little information available about how to *maintain* successful, effective, long-term, large-scale UI testing projects.\n\nOver the course of more than two years, my company Socialtext was able to grow a test automation project from a proof of concept of 400 test steps, run on demand, to nearly 10,000 test steps run automatically 24 hours a day, 7 days a week.  This talk will cover test design, test architecture, test creation, test maintenance, and the project's future steps.	Testing	Experience report	2009
20090145	The Covert Agilist	Engaged as a software consultant at a financial services company, we brought up the topic of Agile early on and were told, â€œNo!â€    A Vice President at the company said that Agile had been tried there and failed, so the management decided that Agile was a waste of time and money and would be prohibited.   Despite this edict, our team cleverly succeeded at covertly injecting â€œThe approach that shall not be namedâ€ into a couple key projects.  Our success caused management to reverse its firm anti-Agile stance, and the whole organization is now moving in that direction.	Agile Adoption	Experience report	2009
20090189	Scrum in Church: Saving the World One Team at a Time	During 2005-2009 Scrum teams were formed in churches in Massachusetts, Connecticut, Florida, Delaware, and Virginia.  This experience report will show how Scrum broke out of the IT silo into finance, marketing, operations, and senior management teams. Churches have to solve difficult impediments â€“ part-time and volunteer workers, narrow specialization, little experience with project teams, and political problems that started in 1692. Their unique contribution has been to successfully address the larger question of continuous process improvement for the whole organization.	Manifesting Agility	Experience report	2009
20090284	Accidental Adoption - The Story of Scrum at Amazon.com	This report describes how scrum was adopted by more than half of the software developers at Amazon.com (and counting).  The adoption was due largely to the efforts, both accidental and purposeful, of an internal employee. Amazon's corporate and development cultures played important roles, both positive and negative. With no executive sponsorship, adoption occurred primarily a team at a time. The wide range of success across teams and organizations leads to a number of important lessons learned with regard to enterprise scrum adoption. The lesson: you can cause this to happen.\n\n	Agile Adoption	Experience report	2009
20090406	Enabling Agile Testing through Continuous Integration	A Continuous Integration system is often considered one of the key elements involved in supporting an agile software development and testing environment. As a traditional software tester transitioning to agile environment, it became clear that we would need to make several changes to make the transition to agile testing possible. This experience report discusses a continuous integration implementation I lead last year. The initial motivations, technical specifics of the implementation, perceived benefits to the team, and a retrospective are all discussed.	Testing	Experience report	2009
20090434	Leveraging Maven 2 for Agility	We struggled with long-running, complex builds and difficulty in sharing code across multiple projects. We started using Maven to simplify our builds. This lead to many more benefits that we didn't expect. It also minimized the overhead costs of extracting, introducing and maintaining new modules. This provided a path for us to move away from a few monolithic slow builds to many small, lightweight fast builds.  Using conventions improved cross-team communication.  Managing dependencies, versions and performing releases have all become trivial. Maven is a wonderful tool for enhancing agility.	Tools for Agility	Experience report	2009
20090522	Prudent proactivity leads to reflexive agility in reaction to change	This session covers a successful transition to a new business model in a limited time span. Typically, Iowa Student Loan (ISL) sells bonds to fund the creation of private student loans. As financial markets deteriorated in 2008, the potential of successful bond sales diminished to the point of nonexistence. Heretofore, our systems assumed ISL as the only lender.  Collaborative bank relationships changed this assumption to one of multiple lenders. A redesign of the loan program/loan type structure of our software followed to make the funding model very configurable.\n\n	Customers & Business Value	Experience report	2009
20090524	Shock Therapy: How to Bootstrap a Hyperproductive Team	The design goal for Scrum teams is 5 to 10 times waterfall performance yet the majority of Scrum teams never achieve this goal. A pattern is emerging at MySpace in Beverly Hills and Jayway in Sweden, for bootstrapping high performance Scrum teams. Rigorous implementation by an experienced coach creates a total immersion experience akin to Shock Therapy. Unfortunately, management disrupts hyperproductive teams by removing key resources. Velocity data is provided on five teams at MySpace and one team at Jayway where management repeatedly â€œkilled the golden goose.â€	Agile & Organizational Culture	Experience report	2009
20090545	Scrum and CMMI: from Good to Great - are you ready-ready to be done-done	The introduction of Scrum at a CMMI Level 5 company doubled productivity and cut defects by 40% compared to waterfall projects in 2006 by focusing on early testing and time to fix builds. Systematic institutionalized Scrum across all projects and used data driven tools like story efficiency to surface Product Backlog impediments . This allowed them to systematically develop a strategy for a second doubling in productivity. Two teams have achieved a sustainable quadrupling of productivity compared to waterfall projects. We discuss here the strategy to bring the entire company to that level. \n	Manifesting Agility	Experience report	2009
20090551	Transitioning from Agile Development to Enterprise Product Management Agility	By now, your company has made the transition to Agile. "Sprints", "backlogs", and "retrospectives" are everyday words, but youâ€™re also discovering the serious challenges that software agility brings to product management. The Product Owners, who have been scattered across multiple teams, are not cohesively aligned around the same prioritized set of corporate initiatives and strategies. In addition, there are cross-product dependencies that are not being effectively recognized and addressed. My company's solution was to build a single, enterprise level, Unified Backlog.	Agile Product Management	Experience report	2009
20090658	Agile won't Work: Implementing Agility in Non-Standard Teams	When most people think of the phrase "Agile won't work here" they think of resistance to adopting agile. There are teams and situations, however, that are truly challenging even to the most dedicated agile adherents. During this sharing experience, I plan to take you on a "cook's tour" of a dozen or so teams that had difficulty adopting agile, even after the team was sold on the benefits. Filled with humorous stories, how these teams succeed (or failed) is an object lesson for us all.	Manifesting Agility	Experience report	2009
20090736	Strategies for replacing systems in agile projects	In replacement projects one of the biggest questions is what strategy to use in replacing the old system. The simplest strategy is to wait until the new system is "at least as good as the old one" before switching. Although this strategy sounds compelling it has many serious drawbacks. An alternative strategy is based on what I call a "Minimal deployable entity". Switch systems when you have just enough to be able to survive with the new system. The concept is similar to "Minimal Marketable Feature" but more focused on deployment strategy. But how do you identify the Minimal deployable entity?	Agile Product Management	Experience report	2009
20090806	Herding Cats: Managing Large Test Suites	This report will focus on challenges we faced maintaining hundreds of builds that encompass tens of thousands of assertions.  Over the past five years our development team, at Iowa Student Loan (ISL), leveraged TDD and Continuous Integration to develop software.  Tests and builds quickly accumulate and maintaining them can be like herding cats.  We were often tempted to neglect these tests in the pursuit of developing new functionality.  We would like to share strategies that helped us maintain our automated test investments.	Testing	Experience report	2009
20090811	The Amazing Team Race â€“ A Team-Based Agile Adoption	An experience report (and video!) on the successful adoption and scaling of Agile practices within an IT organization through a year-long, innovative, and exciting campaign â€“ the Amazing Team Race.  This report shares successful strategies, some failed approaches, and finally how we created a culture of enthusiasm surrounding the adoption of Agile.  It also demonstrates how widespread Agile adoption can be successful even in non-collocated team environments.   The make-up of the IT organization consists of distributed teams with half of whom are outsourced contractors.\n	Agile Adoption	Experience report	2009
20090859	Experiments with Agile Contracts in the Real World	How do you sell an agile project? \nMost customers expect to buy software by time-and-material or by fixed-price-fixed-scope contracts based on detailed requirements.  These models can not create a fertile environment for collaboration between customer and supplier.  In this presentation, we will report on our experiments with commercial contracts  that supports an agile development process, based on concrete examples of  win-win contract types. We will outline the different aspects of these contracts, as well as experiences creating and delivering software solutions under these contracts. 	Agile Frontier	Experience report	2009
20090873	Scrum 911!  Using Scrum to Overhaul a Support Organization	This report shares the successful adoption of agile practices in redefining the support group in our IT Organization.  The report includes a unique organization of a collaborative, team-based approach to handling support requests, benefits achieved, lessons learned, and the next steps towards continual improvements for the customer experience and excellence in software development & support.  We describe how an organization can use an innovative approach to transform the culture and the effectiveness of the support organization from an operational cost center to a value-added thought partner.	Agile & Organizational Culture	Experience report	2009
20090969	Iterating a Team in Flux	Imagine yourself with a team that flies in from AU, the UK, and US in bi-weekly shifts to work with a telecommunications giant. Mix in inexperience, a shared resource model, bad behaviours, and a mandated intro to Agile in a silo-ed non-agile environment. Couple this with a capability driven / satellite team who's focus is to assist other teams to drive out SOA: and you have a recipe for a Team in Flux. Working to find a system that worked for this team was a long and arduous journey full of misdirection, poor choices, and learning around structure, Agile methodologies, and people in general.	Leadership & Teams	Experience report	2009
20091080	Agile Practices at Home: Iterating with Children	Many facets of Agile apply to simple principles of human nature. Because Agile is so effective in the workplace, I began applying Agile principles (after pleading with my wife) to managing the chaos of our family. For over 2 years now, my wife, 4 children, and I have been using Agile practices to manage our own home life.\n\nThe evolved methodology in our home has been discovered over two years of modification using Lean principles while working on weekly iterations.\n\nThis is a fun topic with actual learning points for managers learning to accommodate unique personalities in the workplace.	Manifesting Agility	Experience report	2009
20091081	An Executive Scrum Team	Could an executive team be happy using Scrum? Yes, itâ€™s possible! Picture the scene: executives of strategic departments (financial, HR, IT, sales & marketing, production, etc.) being part of a cross-functional executive teamâ€¦an executive Product Owner prioritizing an Executive Product Backlog  that helps the team to follow the companyâ€™s vision. What are the main challenges of an executive ScrumMaster?  In this session I will show a real case of a Brazilian company that uses Scrum in their executive team. 	Agile Adoption	Experience report	2009
20091082	The Failure of the Offshore Experiment	The off-shore model for IT services is held up as the most cost effective delivery model. As companies gain experience with the out-sourced model, it is becoming clear that there are serious flaws even using Agile methodologies.  \nThe presenter will directly compare the productivity metrics of off-shore distributed Agile teams with co-located Agile Teams.  Co-located teams are far more productive and cost effective even accounting for the relative lower resource cost.  Companies should be rediscovering co-located project teams as the paradigm for delivering real value for their IT projects.\n	Agile Adoption	Experience report	2009
20091098	Take No Prisoners: How a Venture Capital Group Does Scrum	In 2007, OpenView Venture Partners decided to adopt Scrum as best practice in software development in its portfolio companies and Scrum as the standard practice in all internal operations. The OpenView Scrum teams aggressively remove all impediments (take no prisoners). Attached is a reference model that  supports best practices in management, sales, marketing, finance, development, and customer support in OpenView portfolio companies. After over 52 weekly Sprints, OpenView is the first non-software Scrum to provide a working manual on how to do Scrum outside of software development.	Customers & Business Value	Experience report	2009
20091230	Adopting Agile in an FDA Regulated Environment	This session will focus on the unique challenges companies face when using agile on projects that involve FDA governance: large company conservative culture, regulatory documentation, requirements tracing, and a bias towards waterfall development.\n\nSkeptics argue that agile is best suited to small- and medium-sized companies and wrongly perceive agile as a limited, negating its use in the highly regulated corporate world.\n\nIn reality we will show you how weâ€™ve successfully implemented agile in large sized companies operating in a highly regulated world.	Main Stage	Experience report	2009
20091275	Creating Habitable Code: Lessons in Longevity from CruiseControl	A major challenge for software organizations is creating software that can continue to adapt and change over time, a code base the team can live with. This session reviews the lessons learned from CruiseControl, a popular tool for continuous integration. CruiseControl is an open source success story not only because it has had over 400,000 downloads but also because it has successfully contributed to by over 200 different people. For practitioners who are tired of brittle code that must be discarded and rewritten CruiseControl provides valuable lessons.	Agile Adoption	Experience report	2009
20091335	Covert Agile:  Development at the Speed ofâ€¦Government?	It is the late-80â€™s and the U.S. Department of Defense is rolling out a new state-of-the-art system for scheduling satellite tracking stations that uses a text-driven display and communication over serial lines.  Now 15 years, 3 failed replacements and over 20 million tax payer dollars later a final attempt at replacing the crippled system gets underwayâ€¦using Agile.  This experience report will cover the challenges faced developing a critical application in iterations while satisfying the customers requirement that deliverables be made using the traditional waterfall lifecycle.	Developer Jam	Experience report	2009
20091407	Fully Distributed Scrum: Linear Scalability of Production Between SFO and India	The authors previously showed Scrum teams using XP practices achieved distributed velocity equal to local velocity with multiple distributed teams. Local velocity equaled distributed velocity and production increased linearly as teams scaled up to over 50 developers. Here we show a similar pattern for extreme time zone differences between San Francisco and India. Local velocity was established at five times industry average waterfall velocity. When team members were added in india, production scaled linearly. Detailed data on team process and performance will help others achieve the same goal.	Agile & Organizational Culture	Experience report	2009
20091528	Improving Obama Campaign Software: Learning from Users	Admit it. You've always wanted to know how people are actually using that product you spent so much time developing. That can be done more quickly than you've seen before and it can improve your product a lot. If we can include some UX activities into the kind of under-pressure operation that the Obama For America campaign ran, there is hope for any Agile project. \n\nWe traveled to Obama offices in swing states studying the campaign's operation to help inform the redesign of campaign software. With pictures and video, we will present what we learned, and how you can apply it to your projects.	Distributed Agile	Experience report	2009
20091539	Influence of Large-Scale Organization Structures on Leadership Behaviors	In a large agile organization (more than three teams or 30 team members) with self-organized empowered teams, R&D leadership roles still exist to support these teams through topics including resource management and strategic vision. This talk will highlight these R&D leadership roles, describe several example R&D organization structures, and then describe the behaviors (good and bad) stimulated by these structures, the challenges, and their impact on the teams. The talk concludes by describing the key attributes of leaders who will thrive in a large agile organization.	User Experience	Experience report	2009
20091564	The Inkubook experience: A tale of five processes	Inkubook.com came into existence in March 2008 when an existing software development and marketing organization received a new CEO and was immediately tasked with building an entirely different product. This report discusses the evolution from the existing Scrum process through four major changes as the team's process shifted to meet the team's goals and management's demands.  Focus will be given to the barriers benefits that the team perceived with each stage. Where possible, a discussion of the unintended consequences of the team's actions will be explored with specific examples.	Leadership & Teams	Experience report	2009
20091594	From Cowboys to Agilists - Organizational Change at Overstock.com	In 2005, software development at Overstock.com was in crisis. Cowboy programmers, cheapskate attitude, a highly publicized ERP death march, and a 4Q meltdown forced a rethinking of how we develop software. New management, new culture, and a commitment to agile development initiated a four year (and counting) organizational change. This talk covers our adoption of agile methods, bottom-up, and top-down. Topics include, unit testing, CI, the test organization, hiring, organizational principles and values, business relationships, and scrum adoption. We highlight both successes and challenges.	Agile Adoption	Experience report	2009
20091704	An Agile Development Teamâ€™s Quest for CMMI Maturity Level 5	Pragmatics is an agile development shop rated at CMMI Maturity Level (CML) 4 and striving to achieve CML 5. By maturing our agile disciplines, we feel we will not only improve the performance of our agile teams, which will ultimately benefit our agile development practices regardless of our appraisal rating, but will also lead to our being appraised at CML 5. We feel that a mature, highly disciplined agile development company rated at CML 5 will be very intriguing to potential customers looking for contractors that can deliver on time quality products. That is, we feel they will flock to us.\n	Agile Frontier	Experience report	2009
20091866	Exploring Synergistic Impact Through Adventures In Group Pairing	As Agile practitioners, a great deal of our time is focused on having targeted, directed impact.  But sometimes we miss opportunities to repurpose our efforts into syngergistic, many-pronged effects.  Not multi-tasking -- multi-EFFECTing, from one piece of effort.  This talk will explore this topic, both in theory and in practice.  We will examine a particular client case-study, where two disparate 6-person developer teams, with minimal pairing and TDD experience, were developed into highly-productive "gelled" teams, through "Group Pair Programming" -- 6 individuals, 1 workstation.	Developer Jam	Experience report	2009
20091914	A peek into an Agile infected Culture  	What happens when your organization practices Agile software development for many years? \nWell, you get pretty good at Agile: you are able to apply Agile with reducing effort on challenging projects. But there is another interesting side-effect which is that your people internalize Agile values, so much so that Agile becomes second-nature to everyone! \n\nIn this photo tour, come see how a culture is infected with Agile thinking, you will see how we apply Agile to many activities like training- sessions, recruitment, staffing, office reforms, strategic decisions and more.\n	Agile & Organizational Culture	Experience report	2009
20092021	25% Ahead of Schedule and just at â€œStep 2â€ of the SAMI	This experience report is about a professional services company in Egypt that was able to deliver a project 25% ahead of schedule after the team had adopted agile. The interesting part about this experience report is this company is using the SAMI Roadmap to adopt agile. The SAMI roadmap is a 5-step value based roadmap to help companies adopt agile. In this experience report we want to present the SAMI and show the agile community the real tangible business benefits (early delivery) realized from using this roadmap to adopt agile.	Agile Adoption	Experience report	2009
20092080	We Didn't Quite Get It	What do you get when two developers try to implement agile without having experienced it? A 90 minute session on all the mistakes that were made. \n\nWhat can you do to avoid the same fate? We needed an agile coach, but want to help you do without. We'll present techniques you can use immediately.\n\nIn this session, we examine the problems created by implementing an agile process incompletely and describe solutions to those problems. We offer the perspective of developers who learned what commitment really means and that there's more to agile than TDD and small releases.	Developer Jam	Experience report	2009
20092232	Kanban adoption at Software Engineering Professionals (SEP)	In 2004, SEP tried adopting Agile practices.  However, Agile failed to have the desired lasting impact across the entire organization.  Things changed in 2007, when SEP implemented Kanban for the first time.  We will explore how Kanban teams at SEP matured through the lens of the Dreyfus Model for Skill Acquisition.  We will examine what this pattern has meant for institutionalization of Lean in the organization. We will discuss a counterintuitive technique for higher success and adoption rates of new methodologies.   Finally, we will review common pitfalls teams encountered adopting Kanban.\n	Agile Adoption	Experience report	2009
20092236	From CMMI and isolation to Scrum, Agile, Lean and collaboration	This is a journey starting in 2005 when establishing a new software company in Bangladesh 7000 km away from Denmark. Hiring 20 people in one week in Bangladesh and start using CMMI processes to integrate development in Denmark and Bangladesh. After some challenging time aborting the CMMI project and switching back to agile and lean techniques to make it work. Experience from implementing global big bang Scrum and building a kaizen culture. From long running projects, technical dept and integration nightmares to small batches, continuous integration and faster delivery of business value.	Distributed Agile	Experience report	2009
20092272	Enterprise Agile Transformation:  The Two Year Wall	As Agile is adopted by large enterprises, the number of transformation success stories has grown.  But, transformation is an ongoing process, and maintaining organizational change is difficult. So, what happens after the success stories?  What can IT leaders expect once the honeymoon is over?  In this talk, Chuck Maples, SVP of R&D at Borland, will address these questions head-on, sharing his experiences in Borlandâ€™s Agile transformation. Heâ€™ll  discuss the challenges that can emerge after the initial phases of transformation give way a new stage in the journey.   \n\n\n\n	Agile & Organizational Culture	Experience report	2009
20092419	Growing PMI using Agile	What happens when you get Agilists together to build an organization within one of the most ill-reputed bureaucracies in the world? \n\nWhen the Project Management Institute chartered the PMI Agile Forum, it was a huge announcement. However, now the team had to deliver a fully functioning organization to support the Agile-minded members within PMI's membership...and do so on schedule and under budget. How do we build a business plan? How do we execute a marketing effort? How do we plan a launch event? Come see how this all-volunteer distributed virtual team extended PMI's reach using Agile.	Manifesting Agility	Experience report	2009
20092424	The Bold, New Extreme Programming Experiment - Now In Its Ninth Year	In 2001, Follett Software Company (FSC) began work on the next generation of its library software. Many options were considered, including sending the effort off shore. In April 2001, members of the Destiny team attended a C-SPIN meeting where Martin Fowler spoke about Extreme Programming (XP). In what was considered a bold experiment at the time, the team chose to adopt an XP process "the most well-known and controversial" of the new agile processes.\n\nThis experience report will tell of a "do-it-yourself" Agile success story, with changes, challenges and lessons learned along the way.\n	Agile Adoption	Experience report	2009
20092433	Marriott's Agile Turnaround	When Marriott began to build its brand management intranet, the tech vendor ran into several problems that jeapardized the whole program.  The introduction of Agile began a long recovery process: When should you be be covert/overt with Agile practices? How do you convince stakeholders a daily concall is more efficient than a weekly concall? Why would you pay for the tech vendor's Agile training? How do you structure Firm Fixed pricing to be Agile?  \n  \nThis is the story of how applying Agile techniques, first covertly, then out in the open, slowly steered the ship on course.\n	Agile Product Management	Experience report	2009
20092575	Hook, Line and Sinker - the role of line management in relation to Agile teams	Agile project teams in any large corporation are put together by drawing resources from various organisational silos where they report to line management. Whatâ€™s the role of this line management in relation to the Agile project teams? **Who is ultimately responsible for delivery?**\n\nThis talk is based on the two year Agile journey in a large financial services organization in Australia and will outline the challenges, pitfalls and experiences of positioning line management to add value to Agile teams.  *What leadership role do they play and are they the bane or boon of Agile teams.*	Leadership & Teams	Experience report	2009
20092592	Use of Agile Methods in Software Engineering Education	Dr. Rico will provide an experience report introducing agile methods to a master's degree program in software engineering at a large online university. He will describe the goals, objectives, strategy, and implementation plan for transitioning the program from traditional to agile methods. He will describe the adoption challenges he faced from both the faculty and students who were steeped in traditional methods. He will describe how three teams of 15 students in four time zones successfully built three fully functional e-commerce websites, lived to tell about it, and became agile converts.	Agile Adoption	Experience report	2009
20092614	Organically Growing Internal Coaches	An Intuit process â€œAgile Done Rightâ€ (ADR) was created to ensure agile is used properly to maximize business results & minimize process problems.  It requires an agile coach like those used in Intuitâ€™s successful SEIâ€™s Team Software Process (TSP).  Coaches ensure the process is â€œdone rightâ€ & help fix any problems.\n\nInternal coach training was created to develop project-embedded coaches & to raise the overall level of agile maturity.  We look at that training program including the agile syllabus, brief ADR overview, coachâ€™s â€œdirty dozenâ€ meetings, learning methods, etc.\n	Coaching	Experience report	2009
20092702	How the FBI learned to catch bad guys one iteration at a time	Because the FBI never stops evolving, High Performance Technologies, Inc (HPTi) found themselves struggling to keep up with the changes and maintain their CMMI III certification.  Developers were complaining, clients were getting anxious, releases were slipping; but what was the problem? Was it CMMI? Was it the environment? Was it HPTi?  Through a disciplined approach to agile development, we found the answers to our questions above. When youâ€™re dealing with a client who is historically challenged with a continuously changing environment, you better be on your toes.	Agile & Organizational Culture	Experience report	2009
20092712	Adopting an Agile Culture	Success in adopting an Agile culture depends on the team's ability to adapt, while establishing common objectives/principles across the team. This case-study observes this theme via the lens of a project team at Liquidnet. The project's concept was actually originated by the UX team. Eventually, with an interdisciplinary team of 30, the vision became a reality. It wasn't until a major change in scope occurred when Liquidnet decided to bring an agile coach to facilitate process change. This experience report documents the team's experience integrating the Agile culture into their very own.	User Experience	Experience report	2009
20092738	How Agile has changed our Human Resources	When we adopted agile we were not looking to reinvent our human resource policies, but our organization changed in fundamental ways that we did not predict.  Peers routinely provide feedback to each other on performance.  Team members schedule their own reviews.  Everyone on the team has an opportunity to work with clients.  Vacation schedules are submitted without regard to project delivery dates.  We have programmers who job share, and mothers bring their infants to work.  Come hear how adopting agile helped us become a three time winner of the Alfred P Sloan Award for Workforce Flexibility.	Agile & Organizational Culture	Experience report	2009
20092765	5 Users Every Friday: A Case Study in Applied Research	In 2007 a large consumer electronics retailer faced significant business challenges. In pursuit of new modes of strategic flexibility and fast execution, the e-commerce division transformed its culture around Agile principles and the user experience team adapted its practices to the new paradigm. How would increased velocity affect the quality of the functionality produced? How would time-intensive activities like usability research be affected? This paper presents a case study describing successes and failures while integrating continuous research into Agile projects.\n\n\n\n\n	User Experience	Experience report	2009
20092844	Weaponized Scrum	You championed Agile adoption in your organization. Interest grew as your projects become predictable. You led a group of agilists who helped spread the word to more groups.\nLife was good.\nThen senior management took notice of the improvements and decided to mandate adoption of Agile. Theyâ€™ve skimmed some of the books, but donâ€™t have any practical experience.\nYour agile adoption has just reached a critical stage as it moves from grass-roots effort to management directive.\nYouâ€™re about to lose control of your baby.\nYouâ€™re about to learn that youâ€™ve created a monster.\n	Agile & Organizational Culture	Experience report	2009
20092859	Agile @ Yahoo! from the Trenches	We are going to traverse the long and winding history of Agile at Yahoo! â€“ beginning with the period just prior to the introduction of Agile over 5 years ago, to its current (and unfinished) state â€“ all from the viewpoint of the Agilista in the trenches. Whether the adoption is driven from the top down or bottom up, progress hasn't always been in a straight path. We hope that the experiences we share will provide valuable insight for others in their roll-out of Agile in the enterprise, and how the DNA of Agile can survive and even thrive in both supportive and challenging circumstances.	Main Stage	Experience report	2009
20092884	From Cradle to Sprint:  Creating a Full-Lifecycle Request Pipeline at Nationwide	Learn how the Corporate Internet Solutions group at Nationwide Insurance found creative ways to manage the competing and vague priorities of corporate silos by incorporating ideation into the portfolio pipeline.   As the connection point between otherwise disconnected corporate entities, the Product Owner team adapted the Scrum process to better manage 17 dependent projects, reluctant internal business partners, and suspicious methodologists, by articulating clear Pre-Discovery activities,  RITE usability testing,  scenario planning, and kanban in the quest for continuous flow.  	Agile Product Management	Experience report	2009
20092898	Experiences Applying Agile Practices to Large Systems Development	Can my large, geographically distributed, systems program benefit from agile development methods?  Absolutely.  This talk presents real-world experiences applying agile practices to large, systems projects with a high degree of governance.  The practices discussed are technical (continuous integration, test-driven development, user stories) and non-technical (communication, welcome changing requirements, frequent collaboration).  And it presents several challenges we experienced while scaling agile practices and changes we hope to make on future programs.	Distributed Agile	Experience report	2009
20093030	Descending from the Architect's Ivory Tower	This experience report, by a project's technical architect, details the adoption of agile methods across several teams after one high profile success. The organization had a long history of waterfall development and a clearly defined remit for technical architects. Years of refinement had led to a set of techniques which contradicted many of the ideals held by agile practitioners.\nThe author's challenge was to maintain agility and fulfill responsibilities inherited from waterfall processes without reverting to the conventional practices that ultimately lead to the architect's ivory tower.	Agile Adoption	Experience report	2009
20093032	Roadmap Transformation:  From Obstacle to Catalyst	When charting new territoryâ€“-enterprise-scale Agileâ€“-traditional roadmaps only take you so far.  When landscapes change in weeks, product management must find a way to reconcile sprint plans and backlogs from multiple teams with longer-term product direction.  David Wilby, SVP of Products at Borland, shares how his teams tackled the roadmap challenge during Borlandâ€™s Agile transformation.  Heâ€™ll cover how roadmaps became a barrier to scaling Agile, how his teams adopted Agile roadmapping, the challenges, and the impact the new practices have had on Borlandâ€™s Agile transformation. \n	Agile Product Management	Experience report	2009
20093043	Growing an Agile Culture from Value Seeds.	Values can be powerful forces when applied to a small company. From their seed can come personalized principles and practices. By starting with agile values, and then making them your own, you can instill a creative force for change and adaptation necessary for success. Traditional agile practices become personalized through iterative improvement measured against these values. Different teams can create new practices that are applicable to their discipline. Most important, they frame every conversation and decision, enabling rapid execution and shared vision.	Agile & Organizational Culture	Experience report	2009
20093060	Feature Teams - Collaboratively Building Products from READY to DONE	We will describe our journey from a process where design/planning work was performed away from development to one where small cross-functional Feature Teams self-organized to complete design, planning, and construction within the same sprint. Each team member is involved in getting READY, planning, executing and being DONE. The results we observed are an increase in team morale, more predictable results and accumulation of less debt, while maintaining a constant velocity. Our process is a deviation from the established approach where upfront work needs to be ready before starting a sprint. 	Leadership & Teams	Experience report	2009
20093123	We Are Naked Volunteers: How an Agile Users Group Rediscovered Itself	A splendid way to know if you will succeed at agile in the workplace is to  be guided by an agile experience in a volunteer setting, where little is masked. Volunteers became volunteers because, despite jobs, families and everything else in their lives, they see a unique reward from the donation of their time and efforts. The danger of the workplace is that, rather than keeping the eye on the prize, it is too easy for someone to replace the underlying motivational reward by the paycheck. This report shows how a volunteer organization was able to experience and learn the power of agile values.	Agile & Organizational Culture	Experience report	2009
20093132	Making an Enterprise Agile Transition Happen in the Face of Federal Bureaucracy	As agile coaches, we all face impediments when it comes to making agile transformations happen in an organization.  Dealing with corporate bureaucracy is most times the hardest part of the transition.  So, what about the federal government and all that red tape?  Learn how two coaches have made it happen, leading and coaching an enterprise agile adoption (principally Scrum and FDD) at two agencies within the federal government space.  Think youâ€™ve dealt with bureaucracy?  Come hear what itâ€™s like to deal with the ultimate in corporate bureaucracy!	Coaching	Experience report	2009
20093166	Killing the gatekeeper: introducing a continuous integration system	This is the story of how the Launchpad (https://launchpad.net) development team switched to a continuous integration system to increase several flows in their development process:\n\n* flow of changes on trunk;\n* flow of changes requiring database schema upgrade;\n* flow of deployed changes to end users.\n\nTo switch to a buildbot (http://buildbot.net) based system meant violating a very old company taboo: risking a trunk that doesn't pass its test suite.\nThe risk of a broken trunk was offset by allowing each developer to run the full test suite in the Amazon EC2 cloud.	Tools for Agility	Experience report	2009
20093223	Software Development for Disney Animated Feature Film Production 	This session will describe our experience in using the Scrum process of Software Development to create complex tools for use in animated movie production. Our process evolved out of the need to keep the task of UI design at least one sprint ahead of software development. Our products are designed for the creative in-house artists who use the tools for long hours over the course of movie production. We will also share ways to capture the complexity in the artists workflow and methods to break it down into reusable components both for graphical user interfaces and for software development. 	User Experience	Experience report	2009
20090656	Lets stop calling it "agile"	Agile development has grown a lot since its rebeleous 2001 start. In fact, it has grown to be the mainstream way of developing software.\n\nThe time has come to drop the word 'agile.' Agile development is just modern practices in software development. There is no need to explicitly mark practices as Agile. There is no need anymore for opposing camps. Keeping the word Agile and things like "the Agile conference" is holding the development of modern SW development practices back.\n\nThis session will be in debate form to discuss the above mentioned motion.\n	Agile Frontier	Other	2009
20090375	Panel: product owner or product manager or both?	Experienced product managers working with agile product teams for the first time are stuck between old methods and new ones. Developers are requesting new artifacts, advocating new meetings, and defining new roles. Old processes and artifacts that seemed to be working are not valued by agile teams. While developers are learning how to deliver working code faster, without agile product management the team might be building the wrong things. \nAgile product managers and product owners face issues focusing on the business, technical, marketing, and sales roles required for effective agile teams.	Agile Product Management	Panel	2009
20090512	What makes this Agile ours? A talk with previous Gordon Pask Award winners.	 The Agile Alliance states that "The Gordon Pask Award recognizes two people whose recent contributions to Agile Practice make them, in the opinion of the Award Committee, people others in the field should emulate." This panel brings together some of the previous winners so that they may share their contributions and help encourage others to participate in building the body of Agile knowledge. For the intermediate practitioner, it should reinforce the notion that as we practice Agile and learn how to adapt for the best outcome, sharing what we learn helps the whole community.	Leadership & Teams	Panel	2009
20090681	Agile in the Enterprise Corporation	We know why engineers use agile but should Executives fund it? Through this panel discussion learn the benefits of Agile 4 those that hold the checkbooks: \n\n*Why Executives should see Agile as a necessary change  \n*Benefits of Agile 2 an enterprise business, including non-engineers  \n*Justify funding 4 training, tools, etc  \n*Link Agile metrics 2 the balanced scorecard without compromising the principles of Agile  \n\nIndustry leaders Stephen Williams (HP), Laureen Knudsen (Qualcomm), and Israel Gat (BMC) tell how they use Agile 2 positively impact all areas of large, global, corporations	Agile & Organizational Culture	Panel	2009
20090986	Enhancing Diversity in Agile Software Development Environments	Panelists: \nYael Dubinsky, Amr Elssamadisy, David Hussman, Linda Rising \n\nModerator: Orit Hazzan\n\nDiversity can be expressed in different ways, such as, worldviews, minorities, cultures and skills. Studies tell us that diversity benefits with societies that foster it. Diversity is also perceived as a powerful management practice, and therefore, not surprisingly, diversity is introduced into agile environments.\nIn the panel the panelists present their views at diversity, specifying how diversity can be expressed and fostered.\n	Agile & Organizational Culture	Panel	2009
20090090	It's ALWAYS been the problem!	This talk will look at the product owner role on an Agile team from a Pragmatic product management perspective.  Many software development companies rely on their product management organizations to represent the needs of customers and the market.  Concentration on problems, the people who have them, and the circumstances under which they experience those problems is what makes the marriage of Pragmatic product management and Agile so valuable.  This presentation will describe how the Pragmatic approach to the MRD gives the Agile product owner a headstart and the entire Agile team an edge.	Agile Product Management	Talk	2009
20090123	Value or Velocity?	One of the most common questions asked of practicing Agile teams is:\n\n> How can we increase velocity?\n\nMany teams have had to answer this question, but is it the right question? Velocity is an excellent measurement for determining project timelines and progress towards them but doesn't give us any indication about the overall value of the features being delivered. All too often poor prioritization and solutioning are ignored because velocity is the KPI for the team. This session shows how to use value as a tool to ensure that you get more of the right things done.\n	Customers & Business Value	Talk	2009
20090162	Product Manager/Product Owner Dilemma	Traditional product managers have broad inbound and outbound responsibilities including segmentation, requirements, positioning and pricing - often shortchanging their teams.  Product owners are always available and own backlogs/stories - but often lack real market experience. Both roles have challenges. PO/PM discussions are short on context and clarity. \nHow can agile address the broader product mgmt challenge? How to agilize waterfall PMs?  Do technical POs need marketing/sales/pricing skills?  We'll look at roles and organizational models that work for commercial software companies.	Agile Product Management	Talk	2009
20090174	Learning: the best approaches for your brain	Do you mentor, coach, teach or just help other people? Do you wonder why after your greatest teaching moments people just don't get it?\nIn recent years neuroscience has started to provide us with a number\nof insights in what happens when we're teaching. These insights make it clear that learning is really\nabout building and reinforcing existing neural networks. Instead of\nproviding lots of new ideas out of the blue, we need to understand the\nlearners existing context and work with that. Instead of focusing on\nmistakes and errors, we need to focus on what good solutions look\nlike.	Manifesting Agility	Talk	2009
20090177	What (Else) Agile Can Learn from Complexity	Agile development has taken a number of concepts and principles from the study of [complex adaptive systems](http://en.wikipedia.org/wiki/Complex_adaptive_system). But since the birth of the [Agile Manifesto](http://agilemanifesto.org/), the study of complexity has not stopped. In this talk I give a number of ideas copied from complexity experts, and I will review what [fitness landscapes](http://en.wikipedia.org/wiki/Fitness_landscape), adaptive walks and [evolutionary stable strategies](http://en.wikipedia.org/wiki/Evolutionarily_stable_strategy) could mean for agile software development.	Agile Frontier	Talk	2009
20090231	Introduction to Scrum	So what is Scrum anyway? And what is Scrum not? How do I apply Scrum in practice? \n\nScrum seems to be the most popular agile method at the moment and Scrum jargon is used everywhere. This session is for those of you who have perhaps heard the word Scrum, but never really received a proper introduction to what it actually is. Hopefully you'll feel less alienated afterwords :o)	New to Agile	Talk	2009
20090236	Bob and Ted's Excellent Adventure (The Biologist's Tale of Risk and Uncertainty)	Bob Scoble Esq. and Ted "Theodore" Logan are about to embark on a new technology start-up venture when a mystical figure with a fondness for beagles and the Galapagos Islands appears before them, promising great prospects for their new business if they first agree to accompany him on a unique adventure. They accept. Spotting a theme common across the many amazing conversations they have subsequently, Bob and Ted decide to follow the XP principle of doing extreme amounts of the practices that work: they implement the world's first completely Darwinian complex systems risk management program.   	Agile Frontier	Talk	2009
20090248	Agile Metrics	The software development industry has a poor track record with metrics. Many metrics are tangential to development's goal of delivering business value, and are thus ill-regarded by agile developers. However, good metrics are important to management, in order to understand the status and progress of their teams, and to make projections into the future. \n\nIn this class we discuss velocity, burndown graphs, EVM metrics (CPI and SPI), and earned business value, including methods for calculation, why they're important, and how they enforce (or fight against) agile values.	Agile Product Management	Talk	2009
20090263	Agile by the Numbers: What People Are Really Doing in Practice	This talk summarizes the results of 4 years of industry surveys concerning the adoption and effectiveness of agile techniques.  Very often the reality is significantly different than the rhetoric presented in mailing lists, in articles, and even in books.  How effective are agile approaches compared to traditional approaches?  To iterative approaches?  Are people modeling?  Writing documentation?  Doing TDD?  How much co-location is actually going on?  How many organizations are really doing agile?  To what extent?  Come and find out answers to these questions and more.	Agile Adoption	Talk	2009
20090286	It Takes Two to Tango; Four to Square Dance	Do you understand why your team behaves the way it does? In this session, youâ€™ll leave with ways to unlock the true potential of your team through better and more productive communication. You will learn how to identify behavioral profiles, and how to capitalize on the diverse behaviors found on typical teams. A highly interactive, fun, and refreshing look at the human element with actionable techniques that target **individuals** and their **interactions**. Topics range from enhancing interpersonal communication (Tango) to effectively leveraging the anatomy of your team (Square Dance).	Leadership & Teams	Talk	2009
20090333	The Agile PMP: Teaching an Old Dog New Tricks	Agile methods put a great deal of emphasis on trust, empowerment, and collaboration. Agile moves us away from command and control project management toward an approach designed to harness the passion, creativity, and enthusiasm of the team. Mike will tackle the assumptions behind traditional project management and explore a more agile approach to managing time, cost, and scope. He will address the PMI Processes and Knowledge areas and explore how to adapt them to agile projects. Participants will leave with practical tips they can implement today to begin building a culture of agility.\n\n\n	Coaching	Talk	2009
20090346	Reducing Test Maintenance â€“ A Picture is Worth 1000 Tests	Spending more time maintaining your tests than your code? Started to write tests only to be discouraged by the complexity involved?  Imagine if you could implement robust automated testing on even your most complex projects by simply writing one extra line of codeâ€¦  Now you can!  Regardless of which testing framework you use, Approval Tests allow you to painlessly capture tested output in a visible, verifiable, and automated way.  Particularly useful in the context of writing tests for legacy code, GUIs, databases and web pages, this open source solution is as pretty as a picture! 	Tools for Agility	Talk	2009
20090408	Agile: placebo or real solution?	The power of the placebo is based on our brain's belief system. Because we believe\nthe medication can work it does. I wonder if there is some of that placebo effect in\nour successes with agile? Could it be that all our successes are really a matter of\nproper expectation? \n\nIt often seems that the software industry is seeking one magic potion after another.\nWe embrace the latest and greatest and hope it will cure our ills. Is agile just the\nlatest elixir? 	Agile & Organizational Culture	Talk	2009
20090415	Executable requirements: BDD with easyb and JDave	Behavior-Driven Development, or BDD, is an excellent development strategy that can help bridge the traditional gap between requirements and implementation. This talk will go discuss the basic principles of Behavior Driven Development, and look at how it builds on and differs from "traditional" Test-Driven Development. This session will demo two BDD tools: JDave, an open source framework that incorporates BDD concepts into JUnit, and easyb, a DSL-based behavior driven development framework for Java that uses Groovy to let you pretty much write tests that document themselves.	Tools for Agility	Talk	2009
20090431	The Beer Game with Agile Teams - MIT Game Theory in Agile Project Management	This presentation illustrates, using an animated Agile Story Card Wall, the concepts of Lean's Work in Progress, Drumâ€“Bufferâ€“Rope from Theory of Constraints and Systemic Thinking from Peter Sengeâ€™s The Fifth Discipline. \nThe presentation, originally inspired by the MIT Beer Game, uses Flash animation to show the flow of story cards across a Story Card Wall over 10 iterations, demonstrating the effects on the teamâ€™s throughput as a result of a staffing decision made during the project.  The presentation also includes an Excel spreadsheet to do â€˜What Ifâ€™ scenarios.	Leadership & Teams	Talk	2009
20090432	Back to Basics - Writing Expressive Tests Without All The Wizardry	There are quite a few good tools available for developers who are interested in writing more expressive tests.  These cover a broad spectrum from unit testing and mocking frameworks to executable requirements platforms.  But sometimes in our excitement for learning new tools we overlook the most useful tool of all...the language features of our chosen programming language.  In this session we will get back to basics by exploring how you can write more expressive tests using the language features of Java, the framework features of JUnit, and the practice of Behavior Driven Development.	Tools for Agility	Talk	2009
20090444	Eight Guiding Values	Even teams with good skills, appropriate technologies, and posters of the Agile Manifesto on the wall can have trouble. Giving into temptation is often the cause. Guiding values are what keep us on the straight and narrow path in the face of temptation. Teams that have strong internalized values will stick to or invent good Agile practices while teams without them will drift into the ditch.\n\nIn this talk, I'll present what I think of as the most important guiding values:\n\n* courage\n* working software\n* ease\n* being reactive\n* fast feedback\n* naivetÃ©\n* visibility\n* joy	Manifesting Agility	Talk	2009
20090445	Top ten secret weapons for performance testing in an agile environment	In the battle of YAGNI and the performance testers, who wins out on an agile project? Join us as we walk through a historical account of what happens when you need to meet heavy performance targets on an agile project. Find out what was at stake, and the dire consequences if either side annihilated the other. We'll focus on technical detail, planning and management techniques that led to the only outcome, collaborative success! Finally, discover the impact this battle had in the war agile wages to align the needs of end customers, the business, and IT, to see how it all worked out. 	Testing	Talk	2009
20090447	Distributed Agile Development: Experiments at Microsoft patterns & practices	Most agile methodologies tend to assume that the team is co-located in a single team room. They give little guidance as to how to address team distribution although proven practices are starting to emerge within the community. The Microsoft patterns & practices team has been experimenting with distributed teams for several years, mining proven practices from the community and experimenting them out on numerous agile projects. This talk summarizes those learnings and proven practices and gives examples of their application - both good and bad - within our teams.	Distributed Agile	Talk	2009
20090468	The Elephant in the Room: Using Brain Science to Enhance Working Relationships 	Increasing gender intelligence strengthens our ability to maximize the contributions of all members of the team while maintaining both equity and uniqueness. New research from neurobiology sheds light on the real differences in male and female brain structure, chemistry, and blood flow. This data underlies the emerging science of gender intelligence, providing a new vision of gender relationships. Gender-intelligent supervision, employee coaching/mentoring and negotiation and conflict management leads to a competitive edge in the toolkit of forward-looking companies. 	Coaching	Talk	2009
20090469	Working with large backlogs	When my Scrum-style backlog grows up, it wants to be an FDD feature list ... or is it the other way round?' Why does Feature-Driven Development (FDD) organize its feature lists into a hierarchy? Why does FDD use a specific template to name the items in a feature list? While a Scrum-style backlog for a single team may never grow to more than a couple hundred items, backlogs serving multiple teams may easily do so and become hard to work with. We compare Scrum-style backlogs and FDD-style feature lists, and consider the relative merits of different ways of working with large backlogs.	Agile Frontier	Talk	2009
20090494	Applying Agile Development Practices to Atypical Technologies	This talk discusses techniques that can be used to apply Agile practices to atypical technologies, and presents case studies on how to apply Agile practices to projects built with technologies including Teradata (Database), and MicroStrategy (BI). <!--break-->Most of the discussion around Agile is focused on traditional object-oriented development using technologies such as .NET, Java, and Ruby. It is important to realize, however, that the Agile practices are not technology specific, and many opportunities exist to apply these practices to projects that use other technologies as well.	Developer Jam	Talk	2009
20090526	Deliberate Practice in Software Development	In the nature vs. nurture debate, researchers have declared nurture the winner. People who excel are the ones who work the hardest; it takes ten+ years of deliberate practice to become an expert. Deliberate practice is not about putting in hours, itâ€™s about working to improve performance. It does not mean doing what you are good at; it means challenging yourself under the guidance of a teacher. Unfortunately, our organizations are not set up to develop experts, nor do agile practices encourage them. So how will we develop the experts we need to improve?  Maria is a software development manager at a company that manufactures steel. Her job is to guide the professional development of a hundred people while reorganizing the way software is developed in her organization. How should she organize, what practices should she use, how can she help her company stay strong?	Manifesting Agility	Talk	2009
20090532	Workflow is Orthogonal to Schedule	Scheduling should be done independent of and orthogonal to workflow. In fact, you donâ€™t have to create a schedule for a flow system. It will flow all by itself, and work will flow much faster and much more reliably than it could possibly follow a schedule. But take a closer look at that workflow: Just when you thought it was obsolete, the V model reappears. This talk will step through systems design, approval processes, and scheduling, development workflow, depolyment, from a completely different angle. 	Customers & Business Value	Talk	2009
20090553	An introduction to Agile Through the Theory of Constraints	Agile has all these weird, expensive-looking practices: pair programming, test-driven development, regular planning meetings, moving the programmers and business people closer together, focusing people on a single project, multi-disciplinary teams. We can't afford to go agile!\n\nIn this session, J. B. Rainsberger introduces agile practices by relating them to core business matters: compounding early earned value and reducing unnecessary costs. Learn why practice and learning are really profit centers. Maybe you can't afford not to go agile!\n 	New to Agile	Talk	2009
20090560	Introducing Agile in the Very Large: Microsoft Developer Divisionâ€™s Journey	In 2005, Microsoftâ€™s DevDiv (with 2000 participants and 40 million lines of code) overhauled its engineering practices to improve agility, quality, and customer satisfaction. Four years into the journey, *customer satisfaction has increased dramatically. Product quality improved 10x. Velocity improved 2x, with schedule time for major releases was cut by eighteen months and quarterly releases of â€œpower toolsâ€ allowed incremental delivery to external customers.* Practices that change include planning, org, quality gates, branching, testing, tooling, reporting, backlogs, transparency.	Agile & Organizational Culture	Talk	2009
20090649	Diagrams for understanding and improving Agile practice	This talk focuses around a series of diagrams that help explain how various practices work.\n\nMany practices work to different degrees of success depending on exactly how they're implemented. We'll discuss why this is so, with examples of multiple ways to do pair programming, testing, and planning. Along the way, we'll show some new work: how to get a better plan by not estimating, models to identify which practices to experiment on, and how to find what to vary.\n\nEach concept will be explained with diagrams that get to the gist of the practice - and methods of thinking about variations.	Agile & Organizational Culture	Talk	2009
20090650	XP: My Greatest Misses 2000-2009	Any successful recording artist eventually submits to releasing a â€œGreatest Hitsâ€ album. This is the opposite: a beat-up XP coach putting his biggest and furthest-reaching mistakes in a neat package and releasing them to the public. This talk could also be named â€œTen ways to guarantee your Agile transition is a total failureâ€, or â€œApologies of an XP coachâ€; however Iâ€™m sure Iâ€™ll mention more than ten mistakes and I make no apology for them.	Coaching	Talk	2009
20090715	Scaling Scrum with Feature Teams	How do you scale Scrum to hundreds of people? This presentation will explain a way of organizing your development so that it scales up well. It involves breaking the link between architecture and organization, breaking code ownership and organize the development in a more customer centric way. This has its drawbacks too! These are explained and some techniques for overcoming these drawbacks are discussed. This talk is based on the "feature teams" and "requirement areas" chapters in the recently published "Scaling Agile & Lean Development" by Bas Vodde and Craig Larman.	Agile & Organizational Culture	Talk	2009
20090800	What Nature Can Teach Us About Building Great Teams	Animal behaviors such as Swarming, Flocking & Shoaling provide intriguing insights into how groups spontaneously form and interact. The natural world is full of rules, both simple and complex that enable groups of animals to function extremely efficiently. Looking at these examples, we can draw interesting parallels with the behavior of groups of people - and we can learn interesting things about the rules that we use when we work in teams. This presentation draws on extensive research on groups, both human and animal, and provides useful insights into how we can best organize ourselves.	Leadership & Teams	Talk	2009
20090862	Overcoming Cultural Differences by Focusing on Similarities	One of the challenges global teams are facing, is overcoming cultural differences. Yet, these differences have their origin not only in geography and language, but also in strategies, politics, values and history. A company, no less than the broader society, shapes a culture that influences its employees behavior. A distributed team needs to leverage this and jointly develop a project culture and keep the project history alive for emphasizing the common culture. This session points out techniques that have helped to create a common culture in different global projects I have been working on.	Distributed Agile	Talk	2009
20090864	Test Driven Development: Ten Years Later	Over the last ten years, Test-Driven Development has grown from something exotic, that only a handful of people knew about, to near- commodity. So there's nothing left to say, right? We don't think so.\n\nIn this talk, we'll review some of the landmarks in the history of Test-Driven Development and what they tell us about how to develop software; the ideas, techniques, objections, and misunderstandings.\n\nWe'll talk about our experiences of discovering TDD and what we've learned about how to do it well, how to adopt it, and how to bring it into existing code.	Main Stage	Talk	2009
20090972	How we stopped worrying and learned to love Agile versioning	One of the biggest problems when managing Agile projects is to decide when and how to integrate a story. Traditional versioning tools offer poor support to branching and merging so it's hard to select specific stories at the end of a sprint. In this talk, we present Git--a modern, distributed version control system--and an Agile versioning process using it that will help Agile Developers to solve those issues, offering a way to have a continuously releasable branch and also minimizing merging problems.\n	Tools for Agility	Talk	2009
20091029	Pragmatically "Crossing the Chasm" from Project-level to Enterprise Adoption 	This stimulating talk starts by exploring the popular Technology Adoption Lifecycle, and how it relates to agile adoption. Next Ahmed illustrates how to practically â€œcross the chasmâ€ between project-level and enterprise-wide agile adoption initiatives using a value-based roadmap. The roadmap, which consists of five steps (Collaborative, Evolutionary, Integrated, Adaptive, & Encompassing), is a result of 4 years of research and industry experience. Participants will see how to create their own value-based agile roadmaps as well as discuss key concepts related to enterprise agile adoption.	Agile Adoption	Talk	2009
20091141	Role of the Agile Leader in Reconfiguring the Business 	This presentation applies Agile thinking to critical aspects of strategy and execution at a time of uncertainty and disruption. The essential point is simple and logical: Agile values and principles are indivisible. To succeed, they must be applied not just to R&D, but also to customer and company, simultaneously. This requires reconfiguration of customer relationships, employee policy, software development, and the relationship that binds the three. The resulting paradigm shift could lower the cost of software and produce prosperity similar to the one induced by ultra-cheap oil in the 50â€™s.	Main Stage	Talk	2009
20091146	Emergent Design & Evolutionary Architecture	Most of the software world has realized that BDUF (Big Design Up Front) doesn't work well in software. But lots of developers struggle with this notion when it applies to architecture and design. Surely you can't just start coding, right? You need some level of understanding before you can start work. This session describes the current thinking about emergent architecture & design. This philosophy allows you to specify only the critical items up front and allow the important architecture and design criteria emerge once you understand the problem better.	Developer Jam	Talk	2009
20091194	10 Temptations of an Agile Coach (new or experienced)	Regardless of your coaching experience, there are a wide variety of temptations you can fall into that affect the quality of your coaching.  This presentation will describe: each of the 10 temptations, such as pride or impatience; the negative effects on you and/or your team for each temptation; and strategies to avoid falling into and overcoming each of the 10 temptations.  There will discussion opportunties for people to learn from the more experienced coaches in the audience.  Whether a new or experienced coach, this presentation will have information to improve your coaching.	Coaching	Talk	2009
20091209	When it just *has* to work: Agile Development in Safety-Critical Environments	Traditional thinking holds that the more critical the application, the more tightly its development must be planned, staged, and controlled. \nThe truth is that a flexible culture is stronger, safer, and more robust. FDA regulatory standards are designed to support a learning organization â€“ fully compatible with Agile! This session gives you practical tips for moving your customers and auditors to a flexible agile approach to planning, team interactions, and risk management. When the culture shifts, the result is not just that teams achieve their goals sooner, but safety is greatly enhanced.	Agile & Organizational Culture	Talk	2009
20091211	Agile AJAX: The Google Web Toolkit Experience	Many an agile developer has gotten stuck in the AJAX mud when trying to develop Web 2.0 applications.  Google Web Toolkit (GWT) applications are written in Java and compiled to JavaScript.  This helps developers stay unstuck by leveraging the power of well-established Java tools and techniques.  Learn how GWT works with refactoring Java IDEs, supports Test-Driven Development with JUnit, and handles all the cross-browser JavaScript for you.	Developer Jam	Talk	2009
20091307	Scala: Object-Oriented and Functional Programming for the JVM	Many Java teams want a more modern language that preserves their investment in Java technology. This talk looks at Scala, a new JVM language that fixes many of the limitations of Java. I'll show why Scala is an ideal "upgrade" language for most Java teams.\n\nUsing examples, we'll see that Scala is statically-typed, yet it has a succinct and flexible syntax. Scala _traits_ add _mixin composition_ to Java's object model. Scala fully supports _functional programming_, which is the best approach for robust concurrent applications. All these qualities improve our agility.\n\n	Developer Jam	Talk	2009
20091326	Agile's Too Slow: Developing a Facebook App For the Obama Campaign	Priorities shifted twice a week. My favorite lightweight practices were all too heavy. Facebook thinks I might be a spammer. On November 5, the code became totally worthless. It was the best project I've been on!\n\nCome and hear about a project that was too strange for normal, comfortable agile methods. I hope you can learn from my experience, and make sure you are bringing the right tools and processes to your next project. Focus on the principles of agile (communication, simplicity, feedback, courage) instead of the practices (CI, pairing, iterations, etc).\n	Agile Frontier	Talk	2009
20091394	What's the Right Level of Testing?	I've been on teams with way too little and (heresy) way too much testing.  There have been lots of talks about how you should test more, but I'm going to dare to talk about when you should test less.  Too much testing can lead to backlash, gridlock, morale problems, and poor velocity.  Of course lack of testing can lead to bad design, gridlock, morale problems, and poor velocity.  The level of testing a team can support depends on many factors including:  team size, developer buy in, managerial approval, company size, IT support, and testing experience.	Testing	Talk	2009
20091521	Agile Attitudes Necessary for Business Survival in Todayâ€™s Economy	In these turbulent times, businesses need people with specific characteristics and attitudes to enable survival and success.  It turns out these attitudes and are very similar to what is needed on an Agile project team.  This talk examines what attitudes and perspectives team members need to be successful on Agile projects, how these can contribute to overall organisational success and how to encourage and instil these attitudes in a team.	Leadership & Teams	Talk	2009
20091574	Metrics in an Agile World	James Shore (coauthor of The Art of Agile Development) and Rob Myers of Agile Institute help you examine the role of metrics on Agile teams.  We take a broad survey of metrics being used on Agile projects, both traditional and innovative, and look at the value and dangers to the success of the team.  We look at how the simple act of measuring, itself, can be harmful, and when it is well-justified.  Metrics at every level of the Agile organization will receive scrutiny:  Measuring value, team performance, progress, quality, and even code design attributes will be taken into consideration.	Leadership & Teams	Talk	2009
20091606	How to run 4.5 Million tests per day ... and why!	Given the size and scope of Google's code base, and speed of development, typical off-the-shelf continuous integration are unable to meet our needs.  So, we decided to create a continuous integration and testing system as a centralized service on an unprecedented scale.  When fully completed and operational, it will probably be the world's largest continuous integration and testing system, running millions of tests every single day.\n\nIn this talk, we will report on our experience running such a program in an agile manner and will also describe the basic design and features of the CI system.	Main Stage	Talk	2009
20091708	Malleable Code:  How Tests Improve Production Code	Surprisingly, Test Driven Development is not about the tests.  TDD veterans know that this practice helps you fall into better design for your production code.  So, how exactly does TDD improve the design?  By helping the developer notice design principles.\n\nLiskov Substitution Principle and the Dependency Inversion Principle are just two of the principles that are easily learned through TDD.  Through test-first development, these principles and more are moved from abstract concepts to concrete needs.  With specific examples in Java, I will show how writing tests first yields better design.	New to Agile	Talk	2009
20091835	Starting Agile implementation half way through the critical project	Changing methodology in the midst of the high-risk project is a risky proposition.  At the University of Michigan we had several options:  spoon feed and implement as you go, make immediate and drastic changes, plan carefully to implement confidently and thoroughly.  \n\n	Agile Adoption	Talk	2009
20091922	Tips and Techniques For Implementing An Agile Program Across Distributed Teams	This tutorial focuses on lessons learned from our experiences in implementing Agile in teams across different time zones  in large companies. We will share the pleasure and the pain, ideas that worked as well as ideas that didnâ€™t.  We will share what we feel are the critical success factors in making program level implementations successful and sustaining. This is more than an experience report - we share templates, pictures, lessons learned for leveraging technology, managing multiple time zones, recommendations for metrics and reporting, and ideas for future program level success.	Distributed Agile	Talk	2009
20092004	Leading Agile in an Economic Downturn - "The IBM Transformation Story"	Transitioning 25,000 developers to agile development processes is a challenge on its ownâ€”and making the transition during a global recession is even more ambitious. Join Sue McKinney as she discusses her experiences leading the move to agile at IBM, how their agile teams often struggled, and ways leaders provided support and understanding at many levels. As the global recession set in, Sue looked for tools leaders could use to increase productivityâ€”even after cost cuttingâ€”and unleash the talent and innovation agile teams need to continue succeeding. 	Leadership & Teams	Talk	2009
20092014	Become a Better Agile Practitioner: Learn from other sources	Want to improve your team? Take a drama class! \nWant to measure how your agile adoption is going, take a business course!! \nThis session explores the often overlooked practices in other industries for inspiration on improving agile practice in software development. From waste management and lean manufacturing to understanding motivational and sustainable development with NLP, I want to help people begin to look at things differently and perhaps find their own fixes from the rich variety of disciplines in everyday life that they can apply to agile software development.	Agile Adoption	Talk	2009
20092024	Scaling Up by Scaling Down: A (re)Focus on Individual Skills	Agile adoption initiatives succeed and fail.  There is no agreement on why they do so.  The current focus for scaling Agile seems to be on modifying existing Agile practices, adding new ones, and getting the right toolset installed.  Iâ€™ve come to believe that the main reason for the success of any Agile adoption effort are the individuals, their skills and their personalities.  All other aspects of Agile are of secondary importance.\n\nIn this talk I will share several individual skills and mental models that are necessary for successful scaling.\n\n	Leadership & Teams	Talk	2009
20092125	How Product Management Must Change to Enable the Agile Enterprise	As more development teams adopt agile, product managers must change the way they work to keep up with faster development cycles and shorter customer feedback loops. Product managers new to agile soon realize that agile processes require more involvement from their group. Given that most product managers are already overworked, how can they manage these new activities to derive more value from software projects and products? I will share my experience transitioning to Agile, pitfalls to avoid and propose solutions to the new challenges that arise.	Agile Product Management	Talk	2009
20092151	Agile Infrastructure	Deploying to servers has replaced shrinkwrapping CDs for delivering software. In the internet enabled era, the application is the infrastructure.\n\nThe basis of all Agile engineering practices is reproducibly building from source code. If software is delivered on servers, and those servers can't be reproducibly deployed from bare metal to working services, how Agile can you be?\n\nContinuous Integration is great, but what about Continuous Delivery! What are you waiting for?\n\nThis talk will outline innovations in tools, process, planning and culture emerging at the front lines.	Agile Frontier	Talk	2009
20092153	Boundary, Authority, Role and Task : BART Analysis Applied 	Clear definitions of Role, Task and Authority are essential when people assemble to do work. \n\nUnclear definitions of these items leads to all sorts of waste. \n\nScrum's very clear Roles and associated Tasks and Authority are a big part of what makes actually Scrum 'tick'. \n\nA Boundaries 'collection' is an attribute of the Role, Task and Authority 'objects'.  This session deconstructs Role, Task & Authority in terms of associated Boundaries. Note that boundaries can come in many forms, including: boundaries of time, boundaries in terms of access to resources, etc. \n\n\n\n\n	Manifesting Agility	Talk	2009
20092154	Group Relations & Social Systems	The study of Group Relations is important to the development of Agile practice. Software development is performed by groups of individuals. When individuals become a members of a group, behavior changes. The group becomes focal & the individuals become background. The group behaves as a system and exhibits system-level behavior. Groups as a system exhibit very primitive emotional behaviors that can derail the group from its stated primary task.\n\nGroup relations theory says that a group behaves as a system, and that the primary task of the group is......	Agile Frontier	Talk	2009
20092224	Top Ten Tips for Agile Coaches	We've spent the past year writing a book about Agile Coaching and that's given us a great opportunity to reflect on what we do as agile coaches.\nIn this talk, we'll present our top ten tips for agile coaches. We'll present this like those TV shows that do a countdown to the Number One tip and illustrate each with a personal coaching story. We also want to hear from people in the audience what their coaching tips are.\n	Coaching	Talk	2009
20092270	Irrational Loss Aversion	It is human nature to avoid loss. We make rational decisions to improve our situation and respond to circumstances. But are we always rational? Whether it be the tendency of people to hold stocks that have lost value or teams that continue a death march, this irrational fear of acknowledging a loss can cause people to keep investing in a poor undertaking. This discussion is a brief exploration of how our desire to avoid loss can cause us to irrationally make our situation worse in the hopes of somehow breaking even as well as some techniques to identify and avoid these situations.	Manifesting Agility	Talk	2009
20092344	Developing Agile Leaders and Teams: A Developmental/Transformational Path	According to research almost 85% of todayâ€™s leaders are constrained by narrow, analytical and habitual thinking.  Typically, they are still struggling with ways of thinking that make them defensive, controlling and self-centered which deeply affect performance and teamwork.  We know that agile leaders at post-heroic stages are much more capable of working in collaboration.  So, what differentiate these leaders?  What transformative process can be used to develop Catalyst leaders and teams?  This presentation will show you a proven and powerful path to develop post-heroic leaders and teams.  	Leadership & Teams	Talk	2009
20092349	Agility Night Live - TV Sketches and Project Stories	A glimpse behind the scenes of the production of a weekly show like Saturday Night Live offers an incredible example of a team of people who have agility in their DNA. Writers, actors, set designers, producers, studio execs, etc. all have a single-minded focus on delivering an exceptional quality show every single week. Slipping the schedule is not an option. Customer satisfaction (viewer ratings) are the central measure of success. The production team must collaborate and adapt to unexpected challenges every single week. This interactive session provides examples of highly adaptive behaviors.	Agile & Organizational Culture	Talk	2009
20092356	System Metaphor Revisited	System Metaphor was and is an elusive practice of the original XP.  It has largely been forgotten over time.\n\nYet in the past few years, my colleagues and I have discovered the stunning power of a genuine System Metaphor on our own shipping product.   This makes us wonder why System Metaphor ever went out of vogue.\n\nThis session will explore why Metaphor matters.  We'll examine how our own Music Metaphor reshaped our flagship\nproduct, even our company, and how the right metaphor can supply the driving beat that can turn your product into a hit.	Developer Jam	Talk	2009
20092368	Aristotle and the Art of Software Development	What can programmers learn from the thought of Aristotle, Kant, and Mill? More than you might think. Find out what three of the greatest minds in history think about things like craft, art, virtue, and happiness, and how they would run a software project.\n\nWe'll link philosophical ethics and ideas to the processes, tools, and methodologies of software development as we discuss a critical question: is successful development primarily a matter of finding the right rules, creating the right outcomes, or cultivating the right virtues?	Agile Frontier	Talk	2009
20092402	Learning is key to Agile success: Building a learning culture on your Agile team	*â€œTell me and I'll forget; show me and I may remember; involve me and I'll understand.â€* â€“ Chinese Proverb\n\nAgile teams that rapidly learn and apply new-found skills become increasingly adept at embracing change and delivering value. Team members feel more fulfilled, motivated and valued. And they have way more fun!\n\nIn this session you will learn about agile learning! Learn to recognize learning moments and put in place effective learning patterns tuned to your team and context. Learn how to build and sustain an effective learning culture on your agile team.	Agile & Organizational Culture	Talk	2009
20092416	The Science of the Art of Empowering Agile Team Learning	One quality of an effective agile team is its capacity for team learning.  Research shows that learning behavior is positively correlated to team effectiveness.  And though Agile processes provide powerful mechanisms for team learning, creating the right conditions in large bureaucratic organizations is not always straightforward.\n\nIn this session, we will leverage research in organizational behavior, as well as the presenterâ€™s years' experience coaching teams, to examine the organizational conditions which managers need to understand if they are to empower team learning behavior.	Leadership & Teams	Talk	2009
20092440	Set-Based Design: Anti-Agile or Agile's Future?	Set-based design (also known as set-based concurrent engineering) offers a paradoxical way to make Agile teams even more effective by actively exploring multiple options. In this back and forth conversation between the presenters, we'll talk about the relationship between Agile, Lean ideas, and the Toyota approach to product development. We'll describe the specific mechanics of how you can get started with set-based design, and the benefits you can see. Finally, we'll dispel the notion that this is just another form of analysis paralysis.	Agile Frontier	Talk	2009
20092470	Big Balls of Mud: Is This the Best that Agile Can Do?	It was back in '97 that these presenters first opined that: while much attention had been focused on high-level software architectural patterns, what is, in effect, the de-facto standard software architecture had seldom been discussed: the Big Ball of Mud. \n\nSomewhat to our astonishment, since then, no one has ever undertaken to dispute this premise.\n\nA Ball of Mud is, of course,  a haphazardly structured, sprawling, sloppy, duct-tape and bailing wire, spaghetti code jungle. \n\nIs Agility's utilitarian focus on process rather than design its secret weapon, or its Achilles heel?	Agile Frontier	Talk	2009
20092622	When Team Culture and Company Culture Does Not Mix: Social Deviance	**Summary for Event Guide**\n\nA high-performing agile team is tight knit. They have worked hard to become a cohesive unit and have developed a bond. This chemistry can be thrown off balance when someone is added to the team in the middle of a project. It does not matter how flexible, capable, or agile savvy the new team member is. If they have not been involved in the care and nurturing of the teamâ€™s culture and is not invested in the same way that the other team members are. When the new team member is not flexible, capable or agile savvy, the effect can be devastating.	Agile & Organizational Culture	Talk	2009
20092669	Executive Leadership Challenges for Agile Adoption	Agile Methodology has been widely accepted in the private sector for a number of years and has caught the attention of government program managers as a process for software development designed to make work more efficient. Chief Technology Officers (CTO) and Chief Architects of the Lockheed Martin programs will provide an overview of the challenges experienced by the programâ€™s leadership when balancing between Agile and traditional methodologies used on Government programs.	Leadership & Teams	Talk	2009
20092740	Don't Sell Buzzwords to Business Leaders, Learn How to Describe Real Value	As Development VP, Rich Sheridan transformed his organization by adopting radical co-location and XP practices. Rich will share the history of this transformation including the tactics he used in selling this idea to his peers, his CEO, the Directors, and ultimately his team members. Rich now runs a software design and development company that was built from the ground up with an Agile culture and Agile processes. As the CEO of this company, Rich routinely has to sell customer executives on why they will realize business value from practices such as unit testing and paired-programming.	Agile Adoption	Talk	2009
20092762	WANTED: Seeking Single Agile Knowledge Development Tool-set	Aren't code, backlog-items, tests, designs & documents all just different forms of system knowledge at different levels of detail? Why can't the same tools help refactor, browse, search, and provide build/test automation for _non-code_ forms of knowledge *without* requiring a separate tool/repository for each format? This talk is intended as a challenge to tool vendors/developers to see how this simple treatment of all non-code items as part of a single, unified project knowledge-base can be at once both immensely powerful, and imminently practical, without requiring too much added complexity.	Tools for Agility	Talk	2009
20092826	How to make your testing more Groovy	Testing can be a complex and thankless task. The technologies change so fast that your tools don't work as they should. Your tests become brittle and are hard to relate to customer requirements. This talk looks at the latest techniques and tools for easing some of these burdens.\n\nTopics include behavior driven development (BDD), domain specific testing languages (DSLs), scripting languages (Groovy) and a range of web, SOAP, database, Ajax and performance testing libraries (including EasyB, JUnit 4, WebTest, HtmlUnit, Tellarium, DbUnit, SoapUI, JMeter, AllPairs, model driven and others).	Tools for Agility	Talk	2009
20092837	Creating "Big Picture" Designs without Big Design	One of the toughest problems facing agile UX designers is keeping the big picture in mind while designing incrementally. This talk builds on prior work at Alias (now Autodesk) that described [successful agile adaptations](http://tiny.cc/agileUCD) of usability testing, contextual inquiry and iterative prototyping. \n\nI'll present a framework we used to create and implement multi-sprint designs for a complex product without violating the agile taboo against *big design*.	User Experience	Talk	2009
20092840	Agile Tool Hacking - Taking Your Agile Development Tools To The Next Level	Tools and practices as subscribed by the XP methodology are reasonably well known and used by the majority of agile project teams. As agile teams become more mature, so does their thirst for tools to push them to the next level of productivity. In this talk, we will walk through a number of project tools used by some teams we work with. In some cases, we will explain how we hacked tools that you may already be using to make them more efficient or useful. In other cases, we'll describe new tools designed by teams we have been working with who are trying to move to the next level. 	Tools for Agility	Talk	2009
20092869	How to sell a traditional client on an agile project plan	You're negotiating a project with a client or internal customer, but they balk when you don't present a fixed budget and a predefined list of requirements.  How do you convince them that the benefits of an Agile team outweigh a top heavy and fragile requirements document?  Based on Agile experience with government and commercial clients, we will discuss ways to make your customer feel comfortable with process changes that don't always result in the same set of documents they are used to.	Customers & Business Value	Talk	2009
20092871	Painless Iteration Planning	Plan an iteration - sounds pretty easy right? It can be easy using a well defined framework.\nThis sessions will cover the following:\n\n- Owner or facilitator of the meeting\n- When to hold the meeting\n- Whom to invite\n- Materials - please note that this session is not tool specific other than Sharpies and Sticky Notes! But the plan can be input into your tool of choice.\n- Purpose\n- Agenda\n- Planning Data - what to bring to the planning meeting\n- Output & Deliverables  -\nAll contribute to the iteration planning meeting\n\nA handout will be provided for future reference.\n\n	New to Agile	Talk	2009
20092911	Emergent User Experience Design Practices Workshop	Over the last several years, innovative UX practitioners working in agile environments have improvised and invented ways to include effective user experience practice inside agile projects.  This short talk describes many common emergent agile-ux practices.  Some of these practices are lighter weight versions of traditional techniques, while others are new inventions combining the best of UX rigor with a collaborative and pragmatic twist.   As a participant, youâ€™ll leave with a buffet of useful UX techniques to add to or adapt your agile process. 	User Experience	Talk	2009
20092961	Ruby Kata and Sparring	All respectable software craftsmen make efforts to keep their coding claws sharp.  And solely working 9-5 on business applications will dull one's whit.  In this session we will broaden your coding horizons with some Ruby Kata and test your skills will some Ruby Sparring.  \n\n	Developer Jam	Talk	2009
20093001	Performance without Appraisal:  What to Do About Performance Reviews	W. Edwards Deming identified performance appraisal as one of\nthe Seven Deadly Diseases of Management.\n\nBut annual appraisals are currently a fact of life in most organizations, in spite of their negative effects.  Many companies are reluctant to give them up, because they don't see what to do instead of the annual review.\n\nI'll walk through the assumptions behind performance evaluation and review, and share some of the recent research on the efficacy of annual reviews.  Then I'll offer alternatives that actually help people improve and build stronger relationships.	Main Stage	Talk	2009
20093027	Build and Test in the Cloud â€“ CI and Cloud Provisioning for Agile Teams	Todayâ€™s developers are quick to adopt leading-edge technologies that can accommodate project peaks and valleys, evolve and change, and support agile principles. Using the CollabNet platform, this session will demonstrate the agile best practice of continuous integration (CI) using cloud provisioning capabilities and the Hudson open source CI engine. Attendees will learn a framework that can be used in their environment, including an understanding of the components, tools, set up, and generalized use cases for development in both virtual private clouds and public clouds, like Amazon EC2.\n\n	Tools for Agility	Talk	2009
20093070	Effective code reviews in agile teams	This session describes a lightweight approach to code reviews used in co-located and geographically distributed agile teams. It covers lessons learned from several agile projects: real value, best practices and pitfalls of code reviews. The presentation explains how to make code reviews effective, relatively painless, and liked by the team. Moreover, it presents some interesting aspects of code reviews growing beyond their original intention.\nThe session includes a demo on how Atlassian Crucible integrated with leading IDEs via Atlassian IDE Connector facilitates the whole process.\n\n	Tools for Agility	Talk	2009
20093075	Multi-team sprint planning - how to do all the teams together	How do you do sprint planning meetings when you have, for example, 60 people and 8 teams working on the same product? One neat way is to get them all into the same room and do them together. This is a great way to stimulate collaboration and resolve dependencies - but there are some important practical aspects to take into consideration. Having done this with several different companies over the past few years I'd like to share some experiences and lessons learned.\n\nI will focus on the practical aspects of getting this to work, with photographs and examples from real cases. 	Leadership & Teams	Talk	2009
20093085	Leading an Agile Team in the Corporate World	Leading an agile development team; what is the role, whatâ€™s important, what to do, and how to lead. This is based on my experience in leading a large (600+ people) application development organization that has been practicing Agile since 2001. Over the past eight years Iâ€™ve observed, coached, and developed Agile leaders. In my talk Iâ€™ll cover the attributes of the successful Agile leader. I will use real life examples that illustrate and validate the attributes that can help or hinder the process of leading an Agile team. Leadership versus management will also be discussed.	Leadership & Teams	Talk	2009
20093098	Activity Theory for Manifesting Agile	Agile development means self-management, collaboration, and working towards shared goals. Agile practices support much of this, but we can still learn more, both to better understand current practices and to develop new ones. This session is an introduction to cultural-historical activity theory, a psychological framework for understand collaborative behaviour. The framework has shown the role of tools in cognition and collaboration, and understanding structural tension between different activity systems: it can also be used to understand and improve agile software development.	Manifesting Agility	Talk	2009
20093122	A comical approach to project smells	A series of cartoons depicts the terrible things that happen when agile practices aren't followed.  This session is valid for any persona, but especially for the product owner who will suffer when their product fails because they follow a process that isn't helping their team deliver!	Agile Adoption	Talk	2009
20093210	Mylyn: Redefining the "I" of the IDE	Not long ago the notion of a tool that hides more of the system than it shows sounded crazy. To some it still does. But hundreds of thousands of Mylyn users have made next big evolution of the IDE clear. Stories and tasks are more central than source code, focus is more important than features, and integration with the agile workflow is the biggest productivity boost since code completion. This talk will demonstrate the concepts of the task-focused interface and look ahead at how we are redefining the "I" of the IDE by personalizing the user experience around the agile process.	Tools for Agility	Talk	2009
20093231	ScrumMasters Considered Harmful - Where Did It Go Wrong?	With the popularity of Scrum, ScrumMaster has become a de facto role on many agile projects.\n\nIn this thought-provoking session, we'll explore the ScrumMaster role and its key challenges. We'll discuss why teams end up with dysfunctional ScrumMasters, and how that hurts agile projects. We'll explore common ScrumMaster anti-patterns, and why they occur. We'll challenge the ScrumMaster role, compare it to other models, and address if agile teams really need a ScrumMaster.\n\nThis promises to be a lively and interactive session that may change your views on how to structure a Scrum team.	Leadership & Teams	Talk	2009
20090096	New Approaches to Risk Management	For almost a decade our community has claimed that agile is a risk-driven approach. Yet there is very little published material on agile risk management. Traditional risk management is based on avoidance of external variations. While, traditional project scheduling treats tasks homogeneously from a risk perspective. Lean pull systems and Real Options Theory provide new means to manage overall business risk in technology projects. This tutorial describes 3 techniques that evolved in the kanban community that increase sophistication of risk management and provide improved business agility.\n	Agile Frontier	Tutorial	2009
20090140	Why (so many) Testers (still) hate Agile	A good QA is worth their weight in gold, but the reality is that the best QA often have trouble working in an Agile Environment. The shift to a quality centred approach surely must be every QA's dream but there are underlying issues that prevent this adoption. In this session we delve into the mind of a career tester, probe the pain points & explore strategies to communicate the value of agile testing to the classically trained. We look at personalities & what drives people to want to test & the benefits that QA provide to a project beyond rubber-stamping the 'done' column on the task board.	Testing	Tutorial	2009
20090166	Java and Ruby Tools for Code Quality	All projects beneï¬t from high quality code but achieving the full beneï¬ts of agile approaches demands higher-than-usual software quality. A Continuous Integration build provides an ideal platform for applying automated tools to issues of code quality. \n\nThis tutorial looks at automated code quality tools that can be used to enforce or monitor code quality in Java and Ruby, and how they can be used to check quality manifested by:\n\n* style enforcement \n* lines per method \n* methods per class \n* code duplication \n* npath and cyclomatic complexity \n* test coverage \n	Tools for Agility	Tutorial	2009
20090173	Handling Non-Functional Requirements on an Agile Project	When adjectives and adverbs appear in User Stories, they can be easily overlooked and seen as simple adornments to the story.  There are a couple schools of thought on how to handle non-functional requirements on Agile projects.  Mike Cohn recommends writing a User Story for each non-functional requirement, while others recommend creating task cards to drive out specification using Thomas Gilb's approach.  In this session, examples of various techniques for handling non-functional requirements will be demonstrated, with a discussion of pros and cons of each technique.\n\n	Agile Product Management	Tutorial	2009
20090201	Scaling Software Agility: Best Practices for Large Enterprises	 Dean Leffingwell describes how agile methods are being successfully applied to enterprise-class development.\nâ€¢\tPart I describes team practices that scale to the enterprise, including: structuring agile teams, mastering the iteration, concurrent testing and continuous integration.\nâ€¢\tPart II describes additional practices necessary to achieve full enterprise benefits. Topics include: intentionally emergent architectures, lean requirements at scale, coordinating releases with the agile release train, agile training and rollout strategies and measuring business performance.	Agile Adoption	Tutorial	2009
20090238	The Prisoner's Dilemma: Applying Game Theory to Agile Contracting	I propose that the larger issue with Agile Contracts is not that we don't know how to write them. After all we know how to deliver Agile projects, so a contract can simply describe that process. The problem is with making Agile Contract commercially competitive; against suppliers who are offering the promise of delivering the perfectly predicted dream - offering the certainty that people crave. This is a prisoners dilemma, with organisations driving themselves towards a sub optimal solution. Through game theory we will explore ways in which to improve the appeal of the agile offering.	Agile Frontier	Tutorial	2009
20090246	You say tomato, I say Pomodoro	The "pomodoro technique" is a simple tracking and feedback process where the unit of work is the "pomodoro", a time slot of 25 mins. In this tutorial I'll give you advanced practical advices on how to implement the daily pomodoro practice, common pitfalls, tools you may find useful and how to read and use pomodoro metrics and answer questions like: what did I do the last week, on which tasks I spent most of the time, how frequent is the context switching. Hopefully after this talk you'll be able to go back to your team and give pomodoros a try with all the practical information needed. 	Tools for Agility	Tutorial	2009
20090253	Mapping the Agile Enablement Battlefield	Most Agile initiatives focus on delivery while neglecting the impact that such a radical change may have on the project and organization. The Agile PM must protect the team and help influence the change effort when there is no formal change management.  Leveraging a military battle metaphor a lightweight technique can be used to map influences acting on a project.  Participants will learn how to identify potential risks and how and where to respond.  Spending minutes a day using this technique can mean the difference between an Agile change effort and the end of one Agile project.	Agile & Organizational Culture	Tutorial	2009
20090257	The Business Value Game: How to build and use a Business Value Model	We want to deliver maximum business value. Prioritising is easy if someone assigns business value to each story. How do you estimate business value? How should you prioritise between stories, projects or clients?\n\nThe aim of the game is to deliver maximum value. Your development team only has a finite capacity, so you're going to have to make some tough choices. We provide the clients and their requests. We suggest techniques for estimating business value. The rest is up to you.\n\nThe game teaches you how to build and use a Business Value Model to plan to deliver maximum value.	New to Agile	Tutorial	2009
20090323	Mission Possibleâ€”from user research to working prototype in 2 days.	You've done user research. Now what? Join us for this hands-on session to learn how to interpret research data, prioritize findings, and create actionable design research items. Learn about the task analysis grid, how to create data-driven personas, and what the persona DNA model is. \n\nFind out how to use actionable design research to inform your prototype. We'll discuss 8 guiding principles that will help you avoid common mistakes made during prototyping. And finally, we'll discuss a number of prototyping methods and give a number of tips and techniques for common prototyping tools.  	User Experience	Tutorial	2009
20090324	Rapid Sketching and Prototyping Design Studio	Participate in a hands-on workshop, where you'll learn how to use sketching and the design studio method for rapid design iteration. Find out how we've used methods borrowed from architecture and industrial design for faster better design. See how using the design studio method can help you generate several weeks worth of work in just one afternoon. Find out what the 6-8-5 method is. \n\nBut wait... there's more.\n\nThink paper is for making airplanes? Think again. We'll show you how to do things with paper prototyping you never imagined, including AJAX-style transitions and simulations. 	User Experience	Tutorial	2009
20090341	Agile Grows up: The Agile Business Analyst	The business analyst role seems conspicuously missing from most agile methods. Do agile methods make business analyst an obsolete role? Certainly not!  But how do you integrate what is sometimes portrayed as a plodding and documentation driven role into an agile project?  This tutorial provides participants practical guidance for how the business analyst integrates and collaborates with all members of the team. During this workshop the participant will learn how to construct and evolve an agile business analysis process that is appropriate for their specific project environment.	Customers & Business Value	Tutorial	2009
20090376	Ambassadors and Carrier Pigeons - A Model for Effective Distributed Agile Teams	As the world becomes increasingly â€œflatâ€, organizations are seeking out operational and cost efficiencies by leveraging distributed teams. These distributed teams are a common constraint on most technology projects today.  To continue wide-spread adoption, Agile projects must find ways to thrive in distributed environments. The Ambassador Model is a proven, effective approach to building highly productive distributed and off-shore agile teams.  Complementing this model are â€œcarrier pigeons,â€ a metaphor for tools (technology and practice) used to overcome the challenges of distance. 	Distributed Agile	Tutorial	2009
20090397	The Lean Lego Game	After revolutionizing the automobile industry, Lean principles have been applied to different knowledge areas, such as software development. However, many people haven't been introduced to the concepts that made Lean successful. In this interactive session, the participants will work in a small Lego production line, experiencing the problems and applying Lean practices to overcome them. 8 to 20 participants, divided in 4 teams, will learn about: systems thinking, push vs. pull systems, waste, etc. We will also compare the production line scenario with the software development industry.	New to Agile	Tutorial	2009
20090407	Introducing agile to an organization	Those who attend conferences or read books and articles discover new ideas they want to bring into their organizationsâ€”but they often struggle when trying to implement those changes. This session offers proven change management strategies to help you become a more successful agent of change in your organization. Learn how to plant effective seeds of change, and what forces in your organization drive or block change. Come and discuss your organizational and personal change challenges.	Agile Adoption	Tutorial	2009
20090409	Agile Project Managementâ€”Innovation in Action 	Agile Project Management (APM) addresses the challenges of embracing change, encouraging innovation, and delivering continuous customer value through a set of agile principles and practices. \n\nThe session will present the conceptual framework of agile methods, how agile processes are Envision-Evolve rather than Plan-Do, stories from agile projects both small and large (600 people) and from different domains such as software and medical instruments, and how the â€œflowâ€ of an agile project differs from more traditionally managed projects.\n\n	New to Agile	Tutorial	2009
20090410	Zen and the Art of Software Quality 	Traditional development emphasizes â€œfollowing a plan with minimal changes,â€ whereas agile stresses â€œadapting successfully to inevitable changes.â€ If agility is delivering customer value by being flexible, then how can measuring agile performance by adherence to schedule, cost, and scope be valid? We need to modify project success measures in order to build effective agile organizations. The session will build a case for changing performance measurement from the traditional Iron Triangle of cost, schedule, and scope to an Agile Triangle that focuses on value, quality, and constraints.\n	Main Stage	Tutorial	2009
20090411	Advances in Release Planning  	Lack of good release planning is endemic. Teams seem caught up in iteration-at-a-time development and not planning for releases. Even those who create initial release plans often fail to keep them current. This approach enables teams to resist request for â€œspuriousâ€ information such as â€œhow much is this project going to cost,â€ or â€œhow long is this project going to take?â€ \n\nThis session will address why release planning is so important and then cover a series of release planning topics such as value-driven planning and multi-level planning\n	Distributed Agile	Tutorial	2009
20090438	Agile Leadership: Building Shared Responsibility Teams	Of the many benefits of agility, none is more transforming than the power of self-organizing teams. Yet, building such teams remains one of the most elusive goals. This is due to the challenging transition functional managers must make to develop the right environment for them to mature. This session is for traditional managers who struggle with their role in self-organizing teams and confronted with the new and conflicting role of ScrumMaster. It will develop your agile leadership awareness and competencies to build committed, disciplined and self-organizing teams who share responsibility.	Main Stage	Tutorial	2009
20090440	Death by Scrum Meeting	There is no better way to gauge an organizationâ€™s culture than to watch its meetings - usually dull and lifeless. Meetings are often cited as one of the most wasteful activities in business - yet Scrum demands more meetings more often. Engineers find themselves micro-managed with little time left to get â€œrealâ€ work done. This session provides leaders a whole new perspective and techniques for Scrum Meetings in building high-performing disciplined teams through focused, active, engaged, visual and time-boxed facilitation techniques to take teams from DOING Scrum to OWNING Scrum!	Agile & Organizational Culture	Tutorial	2009
20090480	Using the Agile Testing Quadrants to Plan Your Testing Efforts	Different testing approaches are needed because quality has many aspects besides functional requirements, such as making sure the code is reliable and secure. How do you know youâ€™ve done the kinds of testing and quality processes are necessary for your product, especially on an agile project? \n\nThe Agile Testing Quadrants help you categorize tests and plan for different testing activities needed over the life of a project. It can be used by the team as a base for this common vocabulary about testing, and as a mechanism to start discussions and encourage collaboration.\n\n	Testing	Tutorial	2009
20090487	The Invisible Project Manager	An Exercise in Agile Facilitation - http://agilejournal.com/articles/columns/articles/1233-the-invisible-project\n\nThis session focuses on an approach taken by Agile Project Managers to develop empowered and effective teams using a series of techniques focused on trust, transparency, team dynamics, and agile facilitation.  More so, ensuring that the Project Manager does not end up as the central figure dominating the project is equally critical, highlighting that it takes an unselfish personality to create a truly self-organizing team.\n	Leadership & Teams	Tutorial	2009
20090503	The Bottleneck Game: Discover ToC, Agile, Lean and Real Options through play	To make lasting changes, we need to visualise the situation, understand the system, know how to improve it and work together. The Theory of Constraints tells us how to do all that.\n\nIn this game, we apply the "Five Focusing Steps" process improvement method from ToC. Step by step we use Agile, Lean and Real Options techniques to make our "work" more fun and productive.\n\nAfter the simulation game, you'll be able to apply these techniques to your work.\n\nYou'll be able to use the open source "Bottleneck Game" to share these techniques with others.	Agile Frontier	Tutorial	2009
20090508	Increase Your Capacity and Finish Projects: Manage the Project Portfolio	Have you ever been told to multitaskâ€“working on so many projects simultaneously you donâ€™t know where to start or what to do next? Or, have you ever felt so pressured by your organization that you asked your staff to multitask?\n\nMultitasking happens when leaders donâ€™t set direction for themselves and other people. When leaders decide which projects people work on in what orderâ€”the project portfolioâ€”they set the stage for success. But those decisions are not easy.\nWe will see what a portfolio is, what it is and isnâ€™t, and weâ€™ll explore how to make  collaborative decisions.\n	Leadership & Teams	Tutorial	2009
20090542	XUnit Test Patterns and Smells; Improving Test Code Through Refactoring	XUnit is the generic name given to the family of  tools/frameworks used by developers when developing automated unit tests. JUnit, NUnit, MsTest and CppUnit are some of the better known members of the family. High quality automated unit tests are one of the key development practices that enable incremental development and delivery of software. This tutorial provides the participants with a vocabulary of smells and patterns with which to reason about the quality of their test code and a set of reusable test code design patterns that can be used to eliminate the smells. 	Developer Jam	Tutorial	2009
20090543	From Concept to Product Backlog - What Happens Before Iteration 0?	Many agile methodologies assume a customer (or product owner) walks into the room with a swack of money and a pile of story cards and tells the development team to start building the functionality described on the top few cards. This tutorial provides an overview of what needs to go on â€œbehind the scenesâ€ between when a project is conceived and when development can start in earnest. It identifies the artifacts that may need to be produced, whether and when they should be produced, which activities can be used to produce them and who should be involved in those activities.	Agile Product Management	Tutorial	2009
20090573	â€œFlirtingâ€ With Your Customers	Flirting is about connecting. A German university now requires their IT engineers take a flirting classâ€”not to attract a partner, but to learn how to interact more effectively in the workplace. We will explore how flirting techniques translate to use in a business settingâ€”inspiring us to create stronger connections with our customers. Our 8 Steps to connecting with your customers will help teams better understand customer requirements and build business value. â€œFlirtingâ€ With Your Customers creates the connection that can make a significant difference in a projectâ€™s success.	Customers & Business Value	Tutorial	2009
20090622	Speed Up Your Testing With Acceptance Criteria Conversations	Why do testers on some agile teams find iterations productive and enjoyable, while other teams struggle to "keep up" with testing and get stories to "done done" within the iteration? Succeeding with agile testing is more than just automating tests or sitting with the developers. To create working software quickly, your whole team must be able to build a shared understanding of a feature - and do this rapidly, accurately, over and over again, every feature, every iteration. This hands-on tutorial teaches you how to use the agile technique of acceptance criteria to build shared understanding. 	Testing	Tutorial	2009
20090705	Creating Agile Simulations and Games for Coaches and Consultants	We find games and simulations incredibly valuable in our coaching and training. Given the number of times we've seen "Does anyone have a game or simulation to ... ?" on the mail lists, we know we're not alone. While there's leverage in using games that others create, it's even better to create your own games to address your specific teaching points. In this session, we will introduce some essential elements of game design and demonstrate a process for designing a game starting with a learning objective. Participants will then use materials we supply to create their own Agile games.	Manifesting Agility	Tutorial	2009
20090708	Integration Tests Are A Scam	Integration tests are a scam, a self-replicating virus that takes over your project and burdens you with long-running, fragile, hard-to-understand test suites. You're probably writing 2-5% of the integration tests you need to test thoroughly. You're probably duplicating unit tests all over the place. Your integration tests probably duplicate each other all over the place. When an integration test fails, who knows what's broken? When you refactor, you have to fix dozens of integration tests. Stop it. Learn the two-pronged attack that solves the problem: collaboration tests and contract tests.	Developer Jam	Tutorial	2009
20090727	Face culture or face failure	Are you thinking about trying agile approaches?  Do you have an agile transition underway?  Is your team or organization trying to become agile, but been less than successful thus far?  A foundational implication â€“ and the biggest potential roadblock â€“ of the agile manifesto is culture change.\n\nTherefore, to be successful with agile approaches and especially to scale them, you *must* go beyond agile technical practices and simultaneously tackle culture changes.  This session shows why this is so, introduces a simple culture model, and gives you an opportunity to try out a culture tool. 	Agile & Organizational Culture	Tutorial	2009
20090742	Beyond User Stories: Identifying Missing Links in Your Product Backlog	How do agile teams account for backlog items that do not fit the user story paradigm? Aside from user stories, what are ways you can represent product needs? Teams struggle with incorporating quality attributes (sometimes called â€œquality of serviceâ€ requirements), external interfaces, design and implementation constraints, and team or technical â€œstoriesâ€ into their backlogs. Without these items, you will not build the right product, or build it right. This tutorial will introduce you to ways that agile teams represent these nonfunctional requirements and other items in the backlog.   	Customers & Business Value	Tutorial	2009
20090747	Mock Objects in Action	How can mock objects help you design your system better? Want to know how mocking saved hours of work? We focus on establishing best practices based on examples with mock objects. We cover design of classes, using mock objects to understand and test interaction between objects of the system. By the end of the session it should become clear how mocking,when applied correctly helps with system design, improves testability by reducing cost of change. An explicit part of this session is dedicated to the Mocking top offenders. We talk with examples about bad usage of Mocks, and its consequences. 	Developer Jam	Tutorial	2009
20090768	A Business Value Focused Model for Story Identification & Prioritisation	This tutorial teaches how to use a simple 5 component model to identify and prioritise stories on a project.\nThe five elements to the model are:\n Business Objectives (value and goals)\n Business Actors (who does this)\n Business Events (when does this happen)\n Business Process (what needs to be done)\n Business Objects (what do we do it with - information and/or tools)\nThe tutorial introduces the model as a tool for understanding current ("as is") and future state ("to be"), identifying the stories for the future state and  teaches the participants how to use it on a mock project.\n\n	Customers & Business Value	Tutorial	2009
20090872	Removing Integration Delays with Collocated Whole Teams and Multi-stage CI	As individuals we work in transient isolation to reduce the impact of work in progress on each other. Organizations isolate WIP by using only official versions of 3pty sources and by producing official releases for customers.\n\nMulti-stage continuous integration (MSCI) scales CI to large distributed environments by isolating work in progress at the team level. Changes move from individual to team to mainline as fast as CI allows, but stop on failure.\n\nMSCI is particularly important in a distributed environment where fixes to problems exposed by CI can be delayed by a full day.\n	Distributed Agile	Tutorial	2009
20090878	TDD Clinic: C++	Test Driven Development is the core of the technical Agile practices. With TDD, programmers get instant feedback that their code does what they intend. This class shows the motivations and mechanics of TDD, but does not stop there. Attendees get first hand experience at TDD, writing well tested code in the challenging world of C++. Attendees see how TDD helps to prevent many bugs and memory leaks from ever making the bug list. CppUTest, an open source test harness, is used to collect, organize and automate C++ unit tests.\n	Developer Jam	Tutorial	2009
20090879	Playtesting in the Game Industry 	This tutorial introduces the concept of playtesting - a central component of software development processes in the game industry - which is the process through which players inform the ongoing evolution of a game's design. The importance of playtesting is derived from the fact that in the game industry, the quality of the software produced is measured in terms of the user's subjective experience of it. In the tutorial the participants explore the benefits, pitfalls and relevance of playtesting for their business, be it a game company or any other software development operation.	Testing	Tutorial	2009
20090908	Craftsmanship	What does it mean to be a professional software developer?  What rules do we follow?  What attitudes do we hold?  And how can we maintain our professionalism in the face of schedule pressure?  In this talk Robert C. Martin outlines the practices used by software craftsmen to maintain their professional ethics.  He resolves the dilemma of speed vs. quality, and mess vs schedule.  He provides a set of principles and simple Dos and Donâ€™ts for teams who want to be counted as professional craftsmen.	Main Stage	Tutorial	2009
20090909	Clean Code III: Functions	Dive deep into the topic of clean Java code by examining what makes a good function.  In this talk you will look at a lot of code; some good and some bad.  You will experience how such code is analyzed, critiqued, and eventually refactored.  You will understand the decisions made by an expert in the field as bad code is gradually transformed into good code.  How big should a function be?  How should it be named?  How should it be documented.  How many indent levels should it have?  How should it deal with exceptions, arguments, and return values.  	Developer Jam	Tutorial	2009
20090926	Risk and Risk Management â€“ Theory and Practice	Two industries that extensively deal with risk are Investment Banking and Oil Exploration. As seasoned veterans involved in developing software in these industries, Chris and Todd will introduce a number of theories, tools and practices surrounding risk and risk management. They will share their practical experience using these techniques and approaches, explaining what works and what does not based on their experience and that of their colleagues.\n	Leadership & Teams	Tutorial	2009
20090951	Prioritizing for Profit	This tutorial will provide you with a proven process for how to prioritize a backlog for profit. It will debunk the mistaken theory that you can prioritize a backlog for ROI and provide concrete examples of how to structure backlogs to meet the needs of key stakeholders, align your backlog to corporate strategy, and show how your release will drive profit. By following the process described in this tutorial, agile product managers / product owners can create backlogs that support the companyâ€™s longer-term goals as well as short-term development needs.	Customers & Business Value	Tutorial	2009
20090975	Esther and Diana's Excellent Retrospective Adventures	Join Esther and Diana, the authors of *Agile Retrospectives: Making Good Teams Great!*, on an interactive journey of __*Adventure*__. Follow the trail of a flexible framework for Retrospectives, a map for designing and leading Retrospectives. Retrospectives offer the greatest lever for project or process improvementâ€”based on the solid data of a teamâ€™s immediate past experience of success and failure. The Adventure lies in holding Retrospectives throughout the project--capturing, managing, and disseminating technical knowledge and process wisdom to improve current and future projects. \n	New to Agile	Tutorial	2009
20091099	Exploratory Testing (Framework) Experience	In this session, we'll test some real small to medium size applications for quality and bugs.   Through three main activities of collation, investigation and prediction, we'll move through our explorations understanding applications then experimenting with discovery and failure situations, utilizing tools when relevant.   While Erik will guide the session and explain the context, a large part of the testing will come from the audience, either as ideas or driving the keyboard.   While this is accessible as an introductory session, it will also show how to perform industrial strength ET.	Testing	Tutorial	2009
20091140	Skills for Agile Designers	Agile designers need to quickly see the essence of a problem and shape reasonable solutions. When things don't go according to plan, they must react, readjust their thinking, and try again. Seasoned agile designers strike a balance. They know the difference between core and revealing design tasks and plan accordingly. When unanticipated difficulties crop, they adapt their work rhythms. This tutorial introduces techniques and vocabulary for articulating design solutions and simple measures of technical debt and different kinds of development work. 	Developer Jam	Tutorial	2009
20091161	Closing the Feedback Loop With a Little Help From Your Friends	Integrating customer feedback into an agile process is a challenge. Iterations are short, and finding time for research, design & development means making sacrifices. In this session we'll talk about finding organizational allies who can become collaborators in customer feedback tasks, getting effective & timely results, & potential pitfalls. Enlisting your organization in these efforts builds a customer-centric culture and provides the team with critical input. Examples will be drawn from our experience at Viget Labs re-designing the international web presence of a global hotel chain.	User Experience	Tutorial	2009
20091179	The Pomodoro Technique: can you focus - really focus - for 25 minutes?	Three basic tools - pen, paper and a kitchen timer - will give you Agile values likeâ€¦  \n\n*  Constant feedback about your working habits  \n*  Dedicated decision points to respond to change  \n*  Opportunities on a day to day basis to improve your personal process  \n*  A sustainable pace even when the deadlines are getting closer  \n*  Improved quantitative and qualitative estimates  \n*  Strategy for coping with interruptions and task switching  \n*  Ability to regulate complexity  \n  \nThe Pomodoro Technique is a personal Time Management method and it fits perfectly inside Scrum and XP.	Main Stage	Tutorial	2009
20091217	Prioritizing Your Product Backlog	The biggest risk to most projects is building the wrong product. Regardless of how fast your agile team becomes, nothing matters if youâ€™re building the wrong product. \n\nIn this tutorial we will look at both non-financial ways of both prioritizing product backlog items and choosing among competing project ideas. Included are relative weighting, theme screening, theme scoring, and Kano analysis. You will leave with hands-on experience in very practical ways to prioritize a product backlog.\n	Agile Product Management	Tutorial	2009
20091220	User Stories for Agile Requirements	The technique of expressing requirements as user stories is one of the most widely applicable techniques introduced by the agile processes. User stories are an effective approach on all time constrained projects and are a great way to begin introducing a bit of agility to your projects.\n \nIn this session, we will look at how to identify and write good user stories. The class will describe the six attributes that good stories should exhibit and present thirteen guidelines for writing better stories. We will explore how user role modeling can help when gathering a projectâ€™s initial stories. 	Customers & Business Value	Tutorial	2009
20091223	An Introduction to Agile Estimating and Planning	Planning is important, even for agile projects. Too many teams view planning as something to be avoided and too many organizations view plans as something to hold against their development teams. In this session you will learn how to break that cycle by learning and practicing skills that will help create useful plans that lead to reliable decision-making. You will learn about story points, ideal days, and how to estimate with â€œPlanning Poker.â€  Both short-term iteration and long-term release planning will be covered. 	New to Agile	Tutorial	2009
20091232	Barely Sufficient Portfolio Management	Effective management of a software portfolio is a challenge that many companies ignore, avoid or fail to follow through because it is too hard. Many approaches to portfolio management get so complex that decisions fail to get made. In this hands-on tutorial we explore â€œbarely sufficientâ€ portfolio management and introduce a simulation game where participants make decisions about which investments a company makes.  Participants will learn about product, project, and portfolio management issues tying decisions to strategy and purpose in order to optimize overall return.\n	Agile Product Management	Tutorial	2009
20091236	"Done" - Are We There Yet?	One of the core values expressed in the agile manifesto is "working software over comprehensive documentation" because working software is what delivers value to our customers. Agile development requires a sofware development team have working software ready to deploy at the end of each iteration; but accomplishing this can be harder than it seems, especially when first starting with agile. In this highly interactive session you will understand how a team definition of "Done" is necessary to making agile delivery possible, and what you can do to make it happen while avoiding the pitfalls.	New to Agile	Tutorial	2009
20091276	Acceptance Testing Java Applications with Cucumber, RSpec, and JRuby	Cucumber is a new acceptance testing (AT) tool that works with RSpec. Already popular in the Ruby community, this tutorial shows you how to use Cucumber to test drive Java applications, when you combine Cucumber and RSpec with JRuby.\n\nWe'll also discuss Cucumber *vs.* FitNesse and using RSpec *vs.* JUnit. You'll learn tips for writing good acceptance tests. Half of the time will be devoted to a hands-on exercises, where you will test drive a simple Java application using Cucumber.\n\nBring your laptop (or a pair partner with one), with the latest Cucumber, RSpec, and JRuby installed. \n\n	Tools for Agility	Tutorial	2009
20091319	Producing Software Groove	Success with agile methods involve finding the right groove for your community. Producing this groove is often led by one or more people (coaches) providing guidance and support. If you are looking to help others produce value, this session will help you teach you how to produce sustainable groove in a respectful style. \n\nAs we will walk though the adoption and adaption of pragmatic agility, you will learn common and uncommon practices. To keep it real, we practice practices as we work with (and get to know) several communities with varying degrees of experience using agile methods.\n	Coaching	Tutorial	2009
20091377	Coaching Success: Getting People to Take Responsibility & Demonstrate Ownership	Field-tests about how personal responsibility works in the mind (i.e., how we avoid it and how we take it) now make it possible for coaches to understand and teach the mental processes, language, and keys to personal responsibility. Cool huh?\n\nDoing so inspires your charges to demonstrate far greater ownership behavior as individuals, teams, and even as entire enterprises. You add more value as your charges take ownership and learn, correct, and improve more easily, directly, and quickly. \n\nCome acquire the basic tools and practices for coaching success with personal responsibility.\n\n	Coaching	Tutorial	2009
20091417	SOA and Color Modeling	The method of Modeling in Color (MIC) has its foundation in object-oriented analysis and design; however, given today's modern service oriented architectures (SOA), the approach is more relevant than ever. In any SOA, MIC can provide answers to difficult questions like: How are services properly designed? What's the appropriate level of granularity for those services? Basic MIC techniques will be discussed and how to break a Color Model into discrete, loosely coupled components will be examined. How to convert the componentized model into XML schema and into XML web services will be explored.	Agile Frontier	Tutorial	2009
20091587	Logical Levels and Statistical Games: A Powerful Strategy for Agile Adoption	The use of metaphorical games as a strategy for adopting an agile culture has shown to be weak because most of trainers donâ€™t know the principles of changing beliefs and values of a human mind. The Neuro-Linguistic Programming (NLP) Logical Levels of Learning and Change (LLLC) is a powerful framework to be considered when we need to challenge skeptical and analytical minds in traditional software development environments. This tutorial presents the structure of the LLLC and a set of three statistical games that can be used as a seed for an agile training or a movement into the agile culture.	Coaching	Tutorial	2009
20091620	Product Vision and the Glass Wall	Setting a clear and engaging vision is challenging and critical for successful projects, so we have evolved an approach that allows teams to articulate the vision by telling the story of a customerâ€™s experience with your product.\n\nWe will show you how to map the journey, identifying areas for technology innovation and key features along the way that will help to create a product that people love to use.\n\nMany people can find empathy with a character and their story.  This helps in creating a compelling product vision and communicate benefits in order to secure funding.   \n	User Experience	Tutorial	2009
20091944	Release Planning (The Small Card Game): Discover What Works	This tutorial, the "small card game", is a simulation game introducing the concepts of Agile planning, story value, and story cost.  Learn to manage scope and optimize return on investment. The students practice planning a project with varying levels of information about the features needed, and experience how "nature" deals with their plan. Again, very appropriate for all team members, in-house customers, marketing, and management, to learn how the process works and what their part in it is.	Customers & Business Value	Tutorial	2009
20092039	Patterns of Agile Adoption Practices	This tutorial is a detailed look at several Agile practices and the HOWTO of Adopting each practice successfully. We will cover the business value delivered and the context where they are most effective.  For each practice you will learn what steps can be done to effectively get from "I want to do this practice" to "I'm doing it and getting obvious value" and, just as importantly, what happen when things go wrong and how you can diagnose these difficulties.\n\nA variety of practices will be covered including: Stand Up Meetings, Iterations, Demos, Automate Developer Tests, and Refactoring.	Agile Adoption	Tutorial	2009
20092234	Becoming Agile within real-world constraints  	How do you become agile with all the constraints surrounding you and your team?  This tutorial introduces a new way to approach agile adoption efforts. We will go through important and key concepts related to agile adoption such as adopting values not practices, the difference between education and training, readiness assessments, and the process of organizational change.\nOne of the tangible outcomes from this tutorial is a roadmap to agility that consists of five different\nlevels, or steps, along with the different practices that can help an organization achieve each level of\nthis roadmap.	Agile Adoption	Tutorial	2009
20092237	Agile Cross-Culture with Games	Agile software development means collaboration, and increasingly this collaboration will cross boundaries of organizational and national culture.  The session introduces models of culture and explores the impact of cultural differences on software development processes and methods, especially those involving the practices common in agile development. The session will be organized around two collaborative games that illustrate how cultural differences interact in the software development workplace. Our aim is better understanding of the issues and how to manage them.\n	Agile & Organizational Culture	Tutorial	2009
20092287	How to Develop Your Leadership Power Daily: An Agile Approach to Growth	Your mind offers two alternateâ€”and generally unconsciousâ€”responses when things go wrong. One response solves problems with snap judgment, hasty advice, and evident policy. The alternate response expands the problem space for new awareness and new-found truth. You are completely equipped for both. The first is fast and solves anxiety about the problem. The second is slower, produces learning and growth, and addresses the real problem. \n\nIn this session youâ€™ll explore a life-long practice developed from 20 years of field studies for choosing the appropriate leadership response.	Leadership & Teams	Tutorial	2009
20092318	A Day in the Life of a User Story	Jean Tabaka  passionately believes in highly interactive, collaborative conference experiences for helping people new to Agile embrace its practices. This Â½ day tutorial drives a quick-paced set of 8 exercises for attendees working in small groups. From unranked backlog items, to fully tasked out stories, each exercise builds on the work of the previous exercise. Through these series of activities, attendees learn to collaborate and create great user stories that turn into tasks, estimates, and commitments. The tutorial ends with a retrospective of how to apply these practices in real life.	New to Agile	Tutorial	2009
20092319	Agile Leadership: A Developmental and Integrative Approach	In this session, we offer a synthesis of several bodies of thought that address processes, people, technology, change and leadership within the context of a large agile transition.  While the competencies of agile development are well developed, the exploration and leveraging of other research on systemic change offers real insight to the complex organizational task of sustaining agile processes.  We intend to fuse such research with our own experiences leading substantial agile transformations, to help senior leaders gain powerful new tools for leading their own agile transitions.\n\n\n	Leadership & Teams	Tutorial	2009
20092320	Applying Systems Thinking for Organizations through Play	Agile teams and organizations need to embrace a "See the Whole" mentality as they adopt and adapt Agile practices. Systems thinking is a great guide in how to evaluate this whole from an external perspective. In this tutorial, we will conduct a series of games to help participants understand fundamentals of systems thinking with regard to delayed feedback loops, external pressures, and more, and see how these change our perspective on effective Agile practices. Our goal is to help participants bring guidance back that can improve their cultures.	Agile & Organizational Culture	Tutorial	2009
20092341	Team Start-up: one of the first Agile Adoption activities	Starting up an Agile team is one of the first things you might be asked to do when a company wants to "go Agile."  What do you need to know before starting up a team?  In the start-up, how much do teams need to know about Agile before they "go"?  What do they need to know about each other...what the project is all about...who they will become as a team?  These and other questions are answered as we walk through good ways to start-up Agile teams.  	Agile Adoption	Tutorial	2009
20092352	Just Enough Design: Modeling With Agility	Instead of a whole new set of modeling techniques, agile development requires a new way of applying good modeling methods like UML, ER, and UCD, in an incremental, iterative, and evolutionary (Agile) manner. This tutorial introduces an agile software modeling process that strikes the right sufficient-up-front and just-in-time balance. Participants are introduced to a blend of domain modeling, usability modeling, data modeling, and architectural design. We will utilize appropriate UML, ER, and UCD methods in an agile fashion to help limit technical debt, and increase design quality.	New to Agile	Tutorial	2009
20092522	Narrative Acceptance Tests - A Behaviour Driven Approach	Acceptance Tests elaborate a user story & are essentially behaviour specifications, expressing examples of how the application will actually be used. These should represent customer-intent in terms the customer understands.\n\nThis session shows developers and testers how to transcribe their understanding of customer intent in a way that makes sense to customers. Using the popular BDD Given/When/Then approach to acceptance tests, participants will learn how to leverage the popular Fit framework to replicate that approach. Alternatives to using Fit, including using code, will also be explored.	Testing	Tutorial	2009
20092751	Four Core Concepts for Fast User Feedback	Developers on an Agile project depend on fast, accurate user feedback to guarantee that you are solving the userâ€™s problem. But often Agile projects have to operate without real, current customers on the team and need to build up the design and research skills to get good user feedback.\n\nThis session is for anyone who has the job of getting user feedback. We'll teach best-practice techniques for working with users in the situations that matter to an Agile team: understanding customer needs, getting feedback on design concepts and testing baselevels, and we'll practice key skills.  \n	User Experience	Tutorial	2009
20092757	Agile Source Code Management using Stories, Agile Workflow, and CI	You create iterations from a backlog of user stories managed via a taskboard with a simple "workflow" from "todo" to "done." You use Continuous Integration. But in your source control system you've just got files and branches. You could create a branch for every story, but that's a lot of branches to manage! How can you ask the source control system which versions/files correspond to the stories that are done in order to build the "done" version and do exploratory testing? This session will show how to manage changes using stories and how to use branches to represent your workflow.	Tools for Agility	Tutorial	2009
20092763	How to Evolve a Product Backlog	Over the life of a product, Product Owners maintain an ever-evolving Product Backlog.  As features rise in rank, the PO breaks them down into stories, eventually sized small so the team can deliver increments of valuable functionality in an iteration.  In this  tutorial, we will explore examples of how to evolve a product backlog from vision to iteration acceptance. Participants will practice breaking stories down, with an emphasis on understanding the considerations that guide that process.  We will provide several examples from different types of projects/products. 	Agile Product Management	Tutorial	2009
20092804	GUIDe for Saving Face: Developing Killer GUIs with Agile Methods (90min)	Agile methods are frequently associated with iterations, incremental development, and adding one thin slice of functionality at a time. We have mantras such as YAGNI and â€œThe Simplest Thing That Could Possibly Work.â€ We promote refactoring. These concepts are, however, harder to apply to UI-intensive application code than faceless back end systems. In this tutorial, we will incorporate ideas from user-centered design, discussing how we approach user-facing agile application development at [Reaktor Innovations](http://www.ri.fi/en) through a mixture of presentations and hands-on exercise.	User Experience	Tutorial	2009
20092921	 How to identify and fix problems using Value Stream analysis and A3 thinking	Teams who have been practicing Agile, Lean and Scrum are finding that as they are maturing their practices, they appear to be Agile on the surface but never quite seem to get the benefits promised. This tutorial will teach attendees how to effectively analyze problems to find systemic fixes underlying the symptomatic causes, and grow into learning and problem solving organizations. Examples from many diverse industries will also be presented and discussed and breakout sessions will allow attendees to try their hand at creating a value stream and identifying issues. Tom Poppendieck presenting.	Main Stage	Tutorial	2009
20092957	Creating Your Enterprise Adoption Plan: A Seven Layer Framework	Leading an Agile adoption? This tutorial will give you guidance, fresh perspectives, and a real deliverable. Distilling 7 years' experience leading large-scale Agile implementations, we will examine patterns, anti-patterns, techniques and case histories from 7 different perspectives (or layers): Individual, Team, Management, Program, Business, Strategic, and Organizational. Using a template, your class team of 5 will help you create your adoption plan covering selection, sequence, sponsorship, culture, org change,  job change, role of customers & management, training, methodology and metrics.	Agile Adoption	Tutorial	2009
20093056	Coaching self-organizing teams	Self-organization of human beings is a tricky thing. Agile coaches are constantly challenged with how to motivate/persuade/trick their teams into  doing things, without telling them what to do, but there is very little information or training on this topic. Allowing a team to self-organize along the lines of â€œoh well, theyâ€™re all adults, theyâ€™ll figure it outâ€ is just as irresponsible as reverting to the command-and control school of management. This tutorial presents an approach utilizing leading-edge research and techniques from social complexity science and team dynamics.	Coaching	Tutorial	2009
20093088	Build me the Money, Honey!	Agile is taking off in the marketplace, and agile processes are the norm for helping IT departments deliver great software... but what about the business?  What about the product manager?  What about the software itself?  What can we do to ensure that we build the RIGHT software with the RIGHT features... the features that will make us the MONEY!  \nThis session will introduce the concepts of Business Value Metrics and Customer-Based Design a simple formula to help Business Stakeholders evaluate their application feature by feature to ensure they are building the MONEY (honey.)  \n	Agile Product Management	Tutorial	2009
20093110	Overcoming Agile ADHD	Fear of decision making often leads teams to exhibit one or more of the dysfunctional symptoms of Agile ADHD. This tutorial will help agile practitioners overcome the fear of decision making by first embracing that there are no right or wrong decisions. Agile development is ultimately driven by a series of decisions, all of which are made in the face of uncertainty. Tutorial participants will take away principles and practices that enable their team to embrace uncertainty and be proactive in making better decisions at the most responsible moment.	Leadership & Teams	Tutorial	2009
20093165	Can you hear me now? Good...	This tutorial focuses on the detailed specifics that will make distributed agile meetings effective. We will demonstrate several key agile meetings, run in a distributed fashion, so teams can immediately improve their projects. To do so, I will highlight specific tools available in the market place to facilitate each of these different kinds of discussions (retrospectives, planning meetings, stand ups). I'll demonstrate the processes to enable more effective communication between remote locations and describe the key roles required on a project to encourage the best exchange of information. 	Distributed Agile	Tutorial	2009
20093183	Mission Impossible: TDD and JavaScript	JavaScript has earned a special, dark place in most programmer's hearts as it is a necessary evil for making the web experience dynamic.  You are test-driving your JavaScript, aren't you?  If not, why not?  If the reason is that you don't know how, or haven't taken the time to learn the various testing frameworks, then this session is for you.  We will explore the various testing frameworks and test-drive a small bit of functionality using the presenter's favorite.	Developer Jam	Tutorial	2009
20093207	Selenium and JBehave : A surprisingly successful shotgun wedding	Selenium is the 800lb gorilla of open source web application testing.  For four years it has been steadily gaining a following and making a difference for corporations large and small.  Such tools have always been a trap for adept Agile teams though.  Too often teams rely on functional testing and skimp on the much more effective 'small' unit tests.  Now with JBehave steering Selenium, we're seeing test scripts emerge that engage formerly perplexed management and business folks.  The time has come for this type of tool pairing to be valued for its role in validating Agile in the enterprise\n\n	Tools for Agility	Tutorial	2009
20093229	Pragmatic Personas: Putting the user back into user stories	Persona put the user back into your user stories. \n\nWhile we understand that our users are important we may lack language for talking about them. If you already know about persona you may find your approach for performing research and representing user data as a user persona to be time consuming and, whatâ€™s more, the persona you create simply arenâ€™t being used.  In this short tutorial youâ€™ll learn to create simple _relevant_ persona for your agile project, how to communicate them to the team, and how to use them generate valuable feature ideas, and design imperatives for your product.	User Experience	Tutorial	2009
20095034	Guerilla Research Methods	This hands-on session will cover a number of low cost, yet powerful research methods, like the "burrito lunch" to help you make better data-driven design decisions. We'll provide a number of techniques for recruiting research participants, creating better research questions, and what to do with your data once you've conducted your research. \n\nWe'll provide hands-on demonstrations for how to conduct field research and interview participants. We'll even provide participants, yes, real people, for you to interview during the session. 	User Experience	Tutorial	2009
20090095	Agile Marketing for Tech Companies	Conversation around Agile Software Development Practices has reached deep into the organizations in which we work, and it's changing the way that software is built.  As dev teams become more reactive to the marketplace and end-users, where does this leave marketing folks?\nWith more flexible product roadmaps, more frequent releases, and greater demands on clear communication, the mktg dept is feeling the pressure of these methodologies.  The question is, can similar methodologies be applied in creative ways to help alleviate these problems and actually improve the performance of the mktg team?	Manifesting Agility	Workshop	2009
20090154	How to Say "No." (Without Destroying the Relationship)	Maintaining a good working relationship while also staying true to Agile principles can be extremely challenging at times.  Over the last two years we have been using William Ury's "Yes! No. Yes?" approach to confronting anti-Agile behavior to great success.  This workshop will train participants in the approach and go through several role playing examples to help practice the technique.	Coaching	Workshop	2009
20090185	Feature Injection A Gentle Introduction	Despite what you may have heard, analysis is still an important aspect of projects done in an agile manner.  Teams still need to understand what they are delivering in what order.  The trick is to how to utilize traditional analysis techniques without introducing the corresponding waste that can be experienced with those techniques.  In this session, we introduce Feature Injection and demonstrate how it combines traditional analysis techniques and the agile technique Behavior Driven Development to identify the business value delivered by a project without introducing analysis paralysis.\n	Customers & Business Value	Workshop	2009
20090401	The Distributed Agile Game	When it is achieved together, the combined benefits of both Agile and Offshore software development, can be multiples greater than either approach alone. During this interactive session, we will simulate a distributed project with some participants being onsite and the others offshore. With 4 teams of upto 8 people each, this game will draw out learning around the challenges of Distributed Agile and different methods to communicate successfully on such projects. The rules of the game help illustrate how to deal with travel, different timezones, delayed communication and other such hurdles.	Distributed Agile	Workshop	2009
20090402	Coding Dojo: Enhancing Legacy Code	Coding Dojos are sessions were participants are invited to participate in a programming challenge. They get the opportunity to practice Extreme Programming techniques such as Test-Driven Development, Simple Design and Pair Programming.\nIn this dojo, the audience will be asked to concentrate on adding features (while preserving existing functionalities) to a Java project that has not been written with testability in mind. In other words, we will work on legacy code. The Randori format will be used to let as many participants as possible do actual coding.	Developer Jam	Workshop	2009
20090448	The Scrum Bestiary: Pigs, Foxes, Chickens and Seagulls a behavioral taxonomy	Our ability to identify patterns of behavior and the likely reasons behind them helps when addressing team dynamics issues. The popular Scrum characters chicken and the pig turn out to be just two of many behaviors that comprise the [Scrum Bestiary](http://www.ademiller.com/blogs/tech/2008/10/scrum-bestiary/). Other examples include the seagull - who derails the team and leaves - and the fox - who is intent on stealing vital resources. This humorous workshop presents a taxonomy of some common behaviors on teams and looks at the drivers behind them and strategies for addressing them. 	Agile & Organizational Culture	Workshop	2009
20090471	Climbing the Dreyfus ladder of agile practices	Agile coaches often need to distinguish when people "do" an agile practice versus "really understand" that practice. This workshop will help coaches develop a tool, mapping agile practices, or more specifically, behaviours people exhibit when using an agile practice, to a learning model. The learning model of choice for this workshop is the Dreyfus Model of Skill Acquisition. We will also discuss how to apply this tool to better communicate and set goals with teams "going agile".	Coaching	Workshop	2009
20090476	The Agile Game: An Experiential Workshop	Youâ€™ve read about agile, heard about agile, and your company is probably using it in some form by now.  Hereâ€™s your opportunity to experience the rhythm of an agile project in action and learn first hand many of the practices.  Through participation in the Agile/XP Game, this experiential workshop introduces Agile/XP in a non-threatening, non-technical, and fun way.  Attendees will come away with an understanding of many of the best practices used to deliver high-quality software quickly. Experience how the various roles work together as on effective agile team.  	New to Agile	Workshop	2009
20090517	Giving and receiving effective feedback	Find out why we give personal feedback, how to provide effective feedback, what makes feedback ineffective and how to deal with poorly phrased feedback. Learning what makes feedback effective helps you to seek your own feedback and improve, whilst being able to support the people around you.\n\nThis is suitable for anyone who's nervous about giving or getting feedback. Coaches and other Agile Transformers may find this simple workshop helpful for their own teams.\n\n	Coaching	Workshop	2009
20090562	Facilitation Patterns and Antipatterns	Facilitation skills are essential for anyone. In fact, *everyone facilitates whether they know it or not*! Do you work on a team, manage an organization, or otherwise work with others? The opportunity to facilitate *will* come up.\n\nSteven "Doc" List will lead you to explore the common patterns & antipatterns that come up in facilitation, for the facilitator and the participants. We'll have some fun by taking on roles, and exploring the behaviors that work and that don't work. The session will include some time on specific activities and techniques that can be used for effective facilitation.	Leadership & Teams	Workshop	2009
20090776	Setting Agile-Centric Release Criteria	A huge quality-centered activity in Agile teams is defining **â€œdone-nessâ€** as it relates to end of iteration or sprint deliverables. How we frame our team work goals, and measure their outcomes,  plays an immense part in determining overall product quality and customer satisfaction. In this session, we examine the 4 levels of Done-ness when it comes to Agile Release Criteria:  \n\n\n1.\tTeam Craftsmanship Patterns  \n2.\tFeatures â€“ Complete  \n3.\tIteration â€“ Complete  \n4.\tRelease â€“ Ready  \n\n\nand share examples and stories of how Product Owners should interact with their teams.\n	Agile Product Management	Workshop	2009
20090882	Idea Factory	Ever heard a programmer say "I think the code's trying to tell us something"? A joke, right? A metaphor. There's a social world, where people tell people things, and there's a world of objects that, at most, exert passive pressure.\n\nBut what if we deny that the two worlds are separate? What if we treat everything as a moving mashup of objects, ideas, individuals, and groups? This workshop will present some recent perspectives from sociology on that question, and will ask participants the following: if you believed in one of those perspectives, what would you do differently on your project?	Agile Frontier	Workshop	2009
20090915	The Agile CTO	Agile fails without executive leadership. Although pockets of Agile can flourish for a while, only executives have the power to make an entire organization change.\n\nThe agile community has tried to sell executives on Agile rather than involve them. This workshop involves participants in discovering and documenting patterns for Agile executives to use. It builds on our previously-presented CTO research.\n\nThis session is appropriate for executives with Agile experience and for gurus who commonly work with executives. Others should wait for the results.\n	Agile Frontier	Workshop	2009
20090934	The 7 Deadly Sins of Almost Being Agile	Being nearly agile has caused a number of new words to enter our vocabulary. They include "mini-waterfaull", "Scrum-but", "XP'ish", "w-agile", "fr-agile" and a host of others. While agility cannot be defined by a particular set of principles or practices, going down a particular agile path only part-way is almost always a recipe for an eventual disaster. This session will focus on exposing the 7 deadly sins that may apply: lack of customer voice, manual testing, never integrating, no incremental deliveries, no feedback loop, silo'd teams and unrealistic deadlines. Learn why each is deadly!	Agile Adoption	Workshop	2009
20090970	The Kanban Game	This game is designed to teach/learn/experiment how to use Kanban.  In this session, everyone will play it and learn the way how Kanban works, effective use, and how to teach their colleagues "Kanban."\n\nI have designed this game to teach new members the Kanban.  Attendees form teams and will have a set of task cards. They will build a Kanban Board from the tasks and 'commence' on the project.  Using dice, the project might finish by the time or not, as in reality.  An important part of the game is how teams must face problems happening by accident.\n	New to Agile	Workshop	2009
20090998	Only Dead Agilists Donâ€™t Ask Questions	If youâ€™re a practicing Agilist who has tough questions about Agile methods, how they fit together, or how they can be more widely adopted in your organization, then this session is for you. This energy-filled workshop explores the central themes of Agile Project Leadership, why they work, when they donâ€™t and why. Delegates are expected to come with their difficult questions about Agile. Answers will be explored and shared in a fun and interactive way. 	Agile & Organizational Culture	Workshop	2009
20091010	Slow and Brittle: Replacing End-to-End Testing	End-to-end tests appear everywhere: test-driven development, story-test-driven development, acceptance testing, functional testing, and system testing. They're also slow, brittle, and expensive. In this expert-level workshop, we will discuss why end-to-end testing is used, examine where and why it breaks down, and generate more effective solutions. We will spark ideas for participants to explore further on their own.\n\nWe will not be debating the premise (that end-to-end tests are problematic). This is an expert-level workshop and attendees will be expected to participate fully.	Testing	Workshop	2009
20091206	Debugging Pair Programming	I think Pair Programming is vital to the success of a programming team, but every time I join a new team I seem to find I'm in a minority of people who feel that way, let alone have any experience of actually doing it.\n\nThis is not a session about convincing a manager that it's a good idea: let's assume he or she trusts you to do whatever is right for the project. This is about exploring, understanding and ultimately tackling the hidden influences which inhibit your peers from coming out of their caves and sharing their thoughts and ideas in regular, constructive, creative, pairing sessions.	Coaching	Workshop	2009
20091252	Hands-on Guerilla User Testing	Anyone who's seen a user trying to get to grips with their application knows what a humbling experience it can be. No matter your design experience there's no substitute for testing with actual users. But the whole user testing process can seem daunting & costly in terms of time, effort & materials. Seeing this Jakob Nielsen proposed a lightweight approach, 'Guerilla User Testing', in the mid-nineties. It emphasized what could be done on limited resources by a team committed to providing a decent user experience. Marc & Luke share over 20 years of experience applying this type of technique.	User Experience	Workshop	2009
20091270	Nonfunctional Agile Testing â€“How and Where to start?	Nonfunctional Testing has always been ignored and neglected because no one is sure what to do with it. Agile environments make Nonfunctional Testing more difficult as people try to invent ways to make it conform to whatever they are using. The goal of this workshop is to define methods to integrate and maneuver nonfunctional testing into agile environments. We will discuss the current concepts and determine the How, What and Why of Nonfunctional Testing. 	Testing	Workshop	2009
20091381	Leveraging Collaborative Tools with Distributed Customer Teams	One of the core values of the Agile Manifesto is favoring â€œCustomer collaboration over contract negotiationâ€. Unfortuntely, product companies with thousands (to millions!) of customers can find collaborating with their customers nearly impossible, as few tools exist to explicitly support meaningful customer collaboration. This workshop explores the advantages of including your customers as part of your distributed team and some of the tools that are emerging to enable agilists to better collaborate with their customers. Bring your laptop, as we may be trying out some of these tools.	Distributed Agile	Workshop	2009
20091431	Coach Aikido: Lessons and support for abused coaches in hostile environments.	A participatory workshop where coaches can share their experiences in coaching agile teams in hostile environments, what they did to avoid the pain, and how they turned toxic organizational inertia and attack against itself or circumvented the same to realize more agility.  The session will be facilitated and will be oriented around capturing tricks, tips, and techniques, but will also allow for some sobbing and frustration and ranting.  Epic fails are definitely welcome.   The most sought after stories and ideas will be those which use the opposition's own strength to advance the effort.	Coaching	Workshop	2009
20091650	Using Virtual Worlds for Distributed Agile	Participants will discuss the use of virtual worlds with agile teams. Examples will be interjected from an agile project at State Farm where a virtual world was used to collaborate with team members in multiple locations.  The session will end with a brief demo.\n\nThe discussion will include:  \n1. Necessary qualities for collaboration to occur\n2. Obstacles to achieving this on a distributed agile team \n3. Using a virtual world on an agile project\n4. Best practices for leveraging a virtual world\n5. State Farm's use of virtual world environments with agile teams\n	Distributed Agile	Workshop	2009
20091690	Blitz Planning	No, you don't get to skip project planning. Brooke needs to know approximate cost and delivery date, and poor Padma need to know when the good stuff will start showing up. You yourself need to know dependencies and delays.\n\nThis is the shortest, fastest, easiest way I know to create a project plan. It's full name is "Project Planning Jam Session", to indicate that all roles are present for the session, from sponsor to business person to designers and testers. Thanks to Jens Coldewey for first showing this to me in 1998 â€“ it instantly improved the way our teams developed project plans.	Tools for Agility	Workshop	2009
20091793	Courage 2.0 - "How to Coach Culture Change" (90 minutes) 	To enable the Agile Value â€œCourageâ€, we have to empower internal coaches, project managers, team leaders, and team members to change the organizations culture. \nOnly a coach (or a manager / executive in his/her role as coach) is in the position to initiate and keep this process alive. \nThus a coach has to be able to:\n\n* make human systems transparent\n* reduce or adjust complexity\n* enforce dialogues and solutions\n* set and enact clear goals\n* build trust in the team and in the customer collaboration\n* focus on sustainable decisions \n* clarify conflicts\n	Coaching	Workshop	2009
20091808	Build Your Teamâ€™s Collaboration Muscle	We talk about collaborating to get great results from Agile, yet so few teams do it well (if they even try it at all).  Sure, they cooperate, but collaborate? That's a different story. My teams couldnâ€™t collaborate, even when they explicitly tried.  This failure led to such an epidemic of mediocrity that I turned to a professional for help.  I turned to an actor.  Come to this session to learn what I learned from the world of theatre and to practice the exercises that helped my teams build their collaboration muscle so that you can do the same with yours. 	Coaching	Workshop	2009
20091809	What Does an Agile Coach Do?	Agile coaches attempt to influence teams in different ways. Our experience is that agile coaches typically work by instinct and intuition. This makes it very hard to explain what coaches do and difficult to teach people how to coach agile teams.\nRichard Hackman claims in his book "Leading Teams" that there a three basic types of coaching intervention: Motivational, Consultative, Educational. We want to test out that theory and explore about what Agile Coaches really do.\nWe aim to uncover specific coaching interventions that participants have tried and whether these interventions helped.	Coaching	Workshop	2009
20091841	Your Attention Please! How to Concentrate	No normal person can focus attention on a single object or idea for more than about 15 seconds. There's a practice, though, that you can learn so as to accommodate this fact. You can use this practice to get good at concentrating. When you can stay focused, you can work without distraction while not zoning out and losing track of your surroundings. When you can stay focused, you can work productively; when your team can stay focused, amazing things happen.	Main Stage	Workshop	2009
20091898	Visual Management for Agile Teams	Welcome to the world of Visual Management! Task boards, post-its, mind maps, burndown charts, kanban boards, lava lamps... information visualization techniques and the visual workplace play a fundamental role in creating visibility and helping build transparency and trust among Agile teams. Come to this workshop to experience in person the value of Visual Management, and help cooperatively come up with the ultimate task board!	Manifesting Agility	Workshop	2009
20091953	Treating Errorhandling as a  First Class Consideration in Design	It is unfortunate, but true: for many teams error handling is an afterthought.  They design the main flows of their system and then they\nthink about where they need exceptions and logging.  However, the error cases are extremely important.  When we consider them along with the\nnormal cases, we an often find ways to arrive at better design.  In this workshop, we will pursue design a series of solutions to the same problem with the error cases considered early and late. Then we will compare and contrast solutions and see how early consideration of cases can affect the growth of a design.	Developer Jam	Workshop	2009
20091989	Telling Your Stories: Why Stories are important for your team	This is a highly participative workshop for delegates to learn more about collaborative and organisational storytelling.  Personal stories will be told, retold and analysed, to investigate underlying values, through a series of collaborative story-games. Collaborative storytelling will be explored as an activity for team building, coordination and problem-understanding.  Attendees will participate in generating ideas for a set of story-cards that could be used to help teams explore their own values, beliefs and concerns through collaborative storytelling around software projects.	Manifesting Agility	Workshop	2009
20092001	The Agile Playground	Agility in Actionâ€¦ This session will introduce five interactive games that a facilitator can add to their toolkit for team and management training.  The games all illustrate the principles and dynamics that support Agility.  The rationale for this session is that people learn best by embodying the learning, rather than just receiving knowledge at a head level. All participants will be immersed in the games; there are no observers. At the end of the session the participants will have a set of games they can introduce into their own organization to enhance their own Agile adoption process.	Agile Adoption	Workshop	2009
20092018	When Agile Just Works - Exploring Group Coherence	Group Coherence (.com): Shared state allowing groups to perform tasks in rhythm and harmony with great energy to overcome obstacles. Evokes memories of fun, success, team bonding, desire to work together on future projects and improved group connection.\n\nGroup characteristics are invisible and have to be felt. We are not trained to detect them any more than we could detect radio waves without a radio.\n\nWe will Practice using group inquiry to:\n-Share your Agile GC experience\n-Identify GC ingredients and obstacles\n-Chart GC\n-Transform Agile practitioners to a coherent Agile group	Manifesting Agility	Workshop	2009
20092069	Nano-Incremental Development, or Elephant Carpaccio	In a quick survey, 17 of 20 programmers said they didn't know how to slice feature requests to the sub-day level. In contrast, top programmers easily take them to 15-30 minute programming episodes. What does it take for people to make the transition?\n\nIn this workshop, analysts and programmers will pair up, decompose an problem into initial requests, then the programmers will deliver those features in five 10-minute iterations, the analyst adjusting requests on the fly.\n\nThis workshop works well with experienced programmers. Programming language and environment don't matter.	New to Agile	Workshop	2009
20092257	Styles of TDD: First Tests	It's easy to speak of test-driven development as if it were a single method, but there are several ways to approach it. In our experience, different approaches lead to quite different solutions.\n\nIn this workshop, we're not trying to decide which approach is best. Rather, we'll use concrete examples to explore   \n \n * What goes into the moment of decision when a test is written?\n * How do you think about the problem you're trying to solve?\n * What strategies or techniques help you write the first few tests?\n\nThis workshop is targeted at TDD/BDD Practitioners. 	Developer Jam	Workshop	2009
20092399	Distributed Pair Programming with Tim Ottinger and Tim Gifford (The Tims).	Tim and Tim discuss tools and techniques and observations for remotely pair-programming.  Various remote desktop-sharing applications and services are discussed, dissed, and recommended along with pointers and practices for logistics. Learn the downside of distant partners. How do you have a flash architecture meeting?  How do you collaborate with the team? When do you take breaks? Is it really just like being there, without the smells?	Distributed Agile	Workshop	2009
20092444	Powerful Questions: Human-centric coaching	Human relationships are at the center of the Agile manifesto. Anything we do as coaches to allow humanity expression in our teams directly affects the individuals' ability to live the manifesto more fully. This immediately translates into better, more astonishing, creation-ability in teams, and a greater sense of accomplishment and fulfillment for the team members.  In this session, experienced coaches/trainers Lyssa Adkins and Tobias Mayer will introduce 'Powerful Questions' and share their personal experiences of coaching teams and individuals towards a more human-centric way of working.\n	Coaching	Workshop	2009
20092450	Help me to see... corporate culture	Changing the way individuals and teams work is one thing. Changing organizational culture is quite another, especially when so many of us (yes, even us at this conference) have little idea that the assumptions we make, the language we use, the structures we are bound by are the direct antithesis of Agile. Our thinking is locked by the patterns of years and needs to be unleashed in order to make inroads towards cultural change. Using a simple yet effective collaboration game from the Improv tradition this session will challenge our assumptions and open up new neural pathways. It is a beginning.	Agile & Organizational Culture	Workshop	2009
20092473	May the Forces Be With You, Exploring the Forces Driving and Restraining Agile	Understanding the forces driving and restraining the adoption of Agile in your organization is key to your success.  This audience participation workshop creates two teams, the Drivers and the Restrainers and has them present the forces at work in the most original and humorous way possible.\n\nThis results in a lot of fun and learning.\n\nThe workshop will be led by two experienced coaches to bring out the subtle details of the forces and lead the discussion on how to improve the success given the forces at work.	Agile Adoption	Workshop	2009
20092535	Designing on-the-fly: ideation & sketching for non-designers	Are you a developer or product manager working without a user experience specialist on your team? Would you like to learn how to quickly explore interaction design concepts? And guide your team in making good UX decisions? This hands-on workshop will teach you to use napkin sketches and whiteboard drawings to make real UX improvements. You'll walk away with experience designing on-the-fly using personas, scenarios and a few ideation and sketching techniques. No special skills required - if you've ever doodled you can learn to design on-the-fly. Be prepared to have fun and participate.\n\n\n	User Experience	Workshop	2009
20092562	Many paths to the top of the (mobile) mountain	As the internet proliferates beyond the PC to myriad devices - from iPhone to smart-phone - anyone delivering digital products deals with complexity: varying form factors, cultural differences and contexts of use. In this workshop we explore the implications of this complexity, discover through collaborative experience where the pain points lie, and identify strategies for dealing with them. We conclude that the unique challenges faced in the design and development of mobile applications benefit from agile software development and its ability to cope with such complexity.	User Experience	Workshop	2009
20092621	A Traditional Test Managers' Support Group for Adopting Agility	So much of moving traditional test teams towards agile methods & testing is focused towards the individual tester and testing techniques. As often is the case in agility--directors, managers, team leaders and test-centric project managers are sort of marginalized. But not in this session! Here we want to focus on agile testing from the perspective of the Test Leader. We'll pair off into groups and examine some of the greatest challenges when it comes to leading a testing team from traditional towards agile testing and emerge real-world strategies for surviving and thriving in agile testing. 	Testing	Workshop	2009
20092794	Improving the Quality of Your Dialogues 	The ability to engage in positive and productive dialogue is critical for team learning and agile team success.  Come join us for a lively discussion on how to improve the quality of dialogue in your workplace. We'll use a specific dialogue format called World CafÃ© to explore the many factors that influence dialogue quality. In World CafÃ©, small groups discuss specific questions and move around in a specific way to cross-pollinate ideas and synthesize collective wisdom. Topics will include the power of questions, levels of listening, and stages of dialogue.	Leadership & Teams	Workshop	2009
20092800	Creating a Culture of Trust: An Agile Leadersip Tool	In our business and personal lives, many of us know leaders who foster environments with incredible creativity, innovation, and ideasâ€”while other leaders try but fail. So, how do top leaders get it right? This session explores ways that leaders create cultures of trust that fosters the free flow of ideas. While we canâ€™t make people trust each other, a culture of trust gives empowerment and provides a safe place to explore and discover new and innovative solutions and new ways of implementing and reaching results. It also encourages healthy risk taking to fail early and correct faster.	Agile & Organizational Culture	Workshop	2009
20092817	Stepping Up and Stepping Back: The Leadership Tipping Point	Leaders can stifle progress when they unnecessarily interfere with team processes. However, as a leader, you donâ€™t want your project to go over the cliff and fail miserably or deliver the wrong results either. There are times when leaders should stand back and let the team work things out for themselvesâ€”and other times when leaders should step up and really lead. How do you know which is which? And what do you do to not stifle the teamâ€™s creativity, ownership, integrity, and problem solving ability? Come away with tools to both motivate and guide teams and organizations effectively.	Leadership & Teams	Workshop	2009
20092839	Do I Still Have a Job? Roles and Org Structure in an Agile Transition	As an organization becomes more agile, people often worry about the future of their jobs.  If detailed requirements documents aren't needed anymore, what happens to a business analyst?  If people aren't constantly shuffling from one project to another, what does a program manager do?  If testers are part of scrum teams, how can a QA lead increase quality?  In this workshop, participants will explore how different roles change during an agile transition, envision new roles for everyone, and discuss strategies for change that help address the fears that often prevent successful agile adoption.	Agile Adoption	Workshop	2009
20092989	First, Kill All The Metrics!	How well are we served by our current metrics? Do metrics such as developer and tester productivity, ROI, and on-time / on-budget help us improve results? Or, do such metrics drive us towards negative behaviors?\nIn this workshop, we describe the foundation for meaningful metrics. Workshop participants, via a series of exercises, translate this foundation into metrics that they can immediately use. \nThis workshop results from the response I received during my Agile 2008 presentation on the CIO and agile teams. There was a great deal of interest on the topic of aligned, meaningful metrics.\n\n	Main Stage	Workshop	2009
20093047	Beyond features: How to listen to your customers and learn what they really need	Successful software products deliver a set of features your customers' value and will pay for. To determine the correct priority and presentation of features, it's important to understand the different behaviors and attitudes that exist in the audience for your product. Ethnographic field research is very valuable, yet can be expensive, time consuming and require skilled researchers. In this hands-on workshop, you will learn how to use collaborative play with customers to discover how they think and what they value, and use this intelligence effectively with your agile teams. 	Agile Product Management	Workshop	2009
20093080	Why Is Testing So Slow?  	Why is testing so slow?  Why is testing taking so long?  We've done lots of things to speed up testing, but we still face this time crunch when we get to the end of the iteration; then we find out from the field that there are problems that we didn't anticipate.  In this workshop, we'll gather familiar patterns that slow down testing, and discover a few more in the process--and maybe we'll find that the slowest parts of testing have nothing to do with testing at all.  If you have problems that you'd like to solve or solutions that you'd like to offer, come along.	Testing	Workshop	2009
20093205	Where Does Developer Testing End and Tester Testing Begin?	This is a trick question, right? In agile, everyone works on the same items together, at the same time. Yet, the reality is weâ€™re not all interchangeable cogs. Developers and testers each bring their own, unique skills to the table. The key to effective agile is not minimizing our differences, but building upon the strengths each person brings to the team.  Join us for this hands-on simulation and retrospective as developers and testers explore how agile teams build quality into their process, how each member contributes to that quality, and how we can avoid traditional testing pitfalls.	Testing	Workshop	2009
20105271	Patterns for customer interaction	When agile practices are introduced in an organization, one of the challenges that can face a development team is to begin meaningful interaction with real customers. Often those of us with technical backgrounds have spent little time studying or appreciating the effort involved in improving our communication skills, especially with those who are not technical. In response to this dilemma, a set of patterns to enhance customer interaction has been written and published and will be presented in this session.	Leadership & Culture	Invited Tutorial	2010
20108589	Behaviour Driven Development with Cucumber	Cucumber is all the rage these days, but many teams struggle to understand how and when to use it. It is designed to be an Acceptance Testing tool in the context of Behaviour Driven Development (BDD), but that explanation tends to bring up even more questions.\n\nAslak Hellesøy, the author of Cucumber will help you to understand how to use Cucumber effectively. Attendees will learn BDD fundamentals and will develop a small application using Cucumber. They can choose between Java, Ruby and .NET.	Technical Edge-Development Praxis	Invited Tutorial	2010
20105387	Dance of the Tester, An Iteration-Length Performance	Ever wonder what a tester does on an agile team? It can be confusing for everyone on the  team trying to understand when there isn't a test phase or any formal documented requirements.\n\nIn this tutorial, we follow an agile tester. We start with how testers contribute during release and iteration planning. Then we follow a tester through a typical two-week iteration, from the start through to the end, to see what activities he does and how he adds value. Like a dance, everyone has a role in the finale, so we look at the agile tester's role in a successful release, including the end game.	Testing/Specification Practices	Invited Tutorial	2010
20108603	Improv: The Mechanics of Collaboration	As businesses delve into Agile practices dysfunctions arise that can not be eliminated using traditional operational processes.  A one-step-at-a-time approach is being replaced by leaps of whatever length necessary.  The complex, rapidly changing market demands are best met by teams for whom shifting paradigms feel like home.\n \nA study of improvisational theater is a pertinent supplement to the training of Agile practitioners.\n\nMatt Smith breaks the essence of collaboration into small, identifiable parts and leads  a series of exercises the way a strength coach might. 	Business Transformation	Invited Tutorial	2010
20105364	Mastering Dependencies in Your Product Backlog	Reduce risks and rework by mastering dependencies in your product backlog. Learn the differences between process flow and process dependencies, identify story dependencies via state transitions and pre and post-conditions, detect data dependencies using interaction matrices, and elicit dependent business rules. Visualize delivery and development options with a minimal marketable features (MMF) dependency graph. Analyze and manage your dependencies, identify core functionality and delivery options, and gain a vital perspective on what to build and when to build it.	Expressing User Needs	Invited Tutorial	2010
20105548	7 Tools for the Product Owner Interfacing with an Agile Development Team	How do you capture your thoughts about a product so you can answer the developer questions at the release and sprint planning meetings? What tools let you weigh unexpected new feature requests? \n\nThis tutorial introduces 7 connected thinking tools that take you from product purpose statement, through stakeholders'-motivations, in/out list, Kano's subjective product qualities, actors & goals and use cases to Jeff Patton's storymap, which serves as a 2-dimensional product backlog to the iteration/sprint planning meeting. 90 minutes is short, but should be sufficient to show the tools.	Expressing User Needs	Invited Tutorial	2010
20106139	How Agile Taught IBM about New Leadership Competencies	Join Sue McKinney as she discusses her experiences leading the move to agile at IBM, how their agile teams often struggled, and initiated an evolution in leadership skills.  Sue looked for tools leaders could use to increase productivity, even after cost cutting, unleash the talent and innovation agile teams need to continue succeeding. She talks about Agile adoption, the approach and challenges to getting new leadership tools to stick.  You will learn what was needed to inspire and motivate change in large organizations, identifying change agents, and give ownership to the teams.	Organization & Enterprises	Invited Tutorial	2010
20105677	Agility @ Scale - Experiences from the Trenches at IBM Rational	What happens when a team experienced with agile Open Source development (Eclipse) gets involved in product development at IBM Rational? Obviously the team wants to continue to be agile, but now some additional scaling factors come into play. How do you collaborate effectively with the business organization? How do you collaborate with a traditional system testing organization? How do you collaborate on features that span  product organizations? Three years into our journey, this talk reflects on our experiences scaling agile as we faced increased technical and organizational complexity.	Organization & Enterprises	Invited Tutorial	2010
20105202	The Agile Scaling Model (ASM): Be as Agile as You Need to Be	The Agile Scaling Model (ASM) provides the context and advice for effectively tailoring agile techniques to meet the real-world situation that you find yourself in.  First, how to extend the agile construction life cycle to become a disciplined agile delivery life cycle is described.  Next, how to tailor agile practices to address scaling factors such as team size, physical distribution, organizational distribution, regulatory compliance, organizational complexity, technical complexity, and enterprise disciplines is presented.  Finally, industry statistics around scaling are summarized. 	Organization & Enterprises	Invited Tutorial	2010
20105285	Beyond Scope, Schedule, and Cost: Optimizing Value   	Traditional development emphasizes "following the plan with minimal changes,"whereas agile stresses "adapting successfully to inevitable changes". Today's business challenges require us to leverage turbulence to generate value. Since agility is about delivering customer value by being flexible, how can we measure performance by adherence to schedule, cost, and scope? We need to modify success measures  to build effective agile organizations. This session will explores concepts & practices for performance measurement using the Agile Triangle of value, quality, and constraints.	Business Transformation	Invited Tutorial	2010
20108588	Large scale, distributed development simulation	Reading and hearing about agile practices is one thing, but actually doing it is completely different. This workshop puts you to work in an agile fashion, applying agile development practices. During this workshop, we're going to take a problem and iteratively develop the solution, using test-driven development, pair programming, retrospectives, pair rotation, and other agile management & development techniques.	Large Scale & Distributed Agile	Invited Tutorial	2010
20106008	The Agile Organization: Applying Visioning and Learning Models	Agile organizations require more than a change in management structure. They require new ways of creating and sharing knowledge. In this session, I will present a case study and lead exercises for a set of knowledge-creating models. These include Verne Harnisch's cross-functional Rocks; Lean models of A3s, value stream maps, and PDCA; Dennis's True North and Mother Strategies; ORIDs; and Senge's personal visioning. I will then provide an organizational structure and meeting cadence we use to apply and re-inform these models on a regular basis. This is what creates an innovative organization.	Leadership & Culture	Invited Tutorial	2010
20105298	Leader's Workshop: Making Change Happen and Making it Stick	Lean transformations are challenging - and sustaining a lean transformation over time is even more difficult. So how do you get started, and how do you keep on improving over time? This session will recommend a three-pronged approach to successful change:    \n(1) Get developers personally involved in improving customer outcomes. (We'll cover product champions and Cost Center Disease.)   \n(2) Create a script for improvement that generates immediate action. (We'll look at strategy deployment.)  \n(3) Rethink the environment (including the governance system).\n	Enterprise Improvement	Invited Tutorial	2010
20105245	Exploring Coaching From Multiple Dimensions and Levels	Have you ever brought in a coach to work at the team level, but the problems were at the management level? Or, have you been brought in to coach managers, but the team isn't delivering on its promises--and they don't know why? You may have discovered that you work at multiple levels: one-on-one with the team members, facilitating team work, one-on-one with a manager, facilitating a manager's work, helping the team or the manager work up and down the organization. Experienced coaches George Dinwiddie and Johanna Rothman will help you explore the multiple dimensions and levels of coaching.	Coaching Agile	Invited Tutorial	2010
20106344	Ride the Agile Rocket as it Scales to New Highs - Marble Movers	The Marble Mover game is designed for people new to Agile or skeptical about Agile.\nparticipants (up to 5 teams of 7+-2) join a start up intent on dominating the world's marble moving market.  Where you live the Agile dream scaling a small and hardy band into progressively large teams until you are already to take on the BIG DEAL!\nThe games is meant to be a fun experience that takes nothing seriously except delivering value to an emergent customer base.\n\n\n	Team-Room Agile	Invited Tutorial	2010
20105514	Better Story Testing through Programmer-Tester Pairing	You know how "Agile" works: programmers test drive their code via (A)TDD with testers automating much of the story tests.  But how does it really work?  Do testers and programmers work together (YES!)?  What does this interaction look like?  In this hands-on demonstration, we'll walk you through how to drive quality on your projects by pairing testers and programmers.  We'll use FitNesse to create effective story tests and keep them passing as the software evolves with each iteration.  Bring a laptop and spend some time as a paired dev/test team!	Testing/Specification Practices	Invited Tutorial	2010
20105213	Becoming Agile in an Imperfect World	Taking a big bang approach to Agile is not a viable option for most organizations. Most successful adoptions of Agile are tailored to the strengths and limitations of the organization. This workshop will show you how to design a tailored roadmap to becoming Agile, despite the constraints around you. The roadmap includes 3 phases; Getting Ready, Piloting and Spreading Agile. If you're just starting your agile transition or in a transition stage, this workshop will equip you with practical techniques and strategies to move from your existing process without starting from scratch.	Adoption	Invited Tutorial	2010
20105990	Agile's Ultimate Success Lies Outside The Development Team	A sign that Agile has gone mainstream is the expanding discussion of how it affects groups outside the development team. Since Agile seeks to improve both the creation and delivery of value, other groups (marketing, sales, executive management, etc.) are necessarily part of the Agile experiment. However, many Agile teams struggle with these "downstream" consequences.\n\nThis 180-minute session will take a workshop approach to this topic. Through a combination of discussion and exercises, we will identify, simulate, and address the core issues of Agile's effects beyond the development team.	Business Transformation	Invited Tutorial	2010
20108616	Clojure, up-front and personal: The Orbit Kata	In this three-hour session you will learn Clojure by following along with Uncle Bob, step by step, and test-case by test-case, as you build a simple Swing/Clojure orbital simulator app. Along the way youâ€™ll learn the value of Functional Programming, how (and why!) to design applications that use it, and why Clojure is the next important language that you should master.\n\nThis session will be extremely challenging! Plan on requiring an hour or so of down-time to allow your neuronal excitation to exponentially decay to safe levels. 	Technical Edge-Development Praxis	Invited Tutorial	2010
20105860	How We Do Things Around Here In Order to Succeed	The path an Agile roll-out should follow depends on the core culture of the corporation: control, competence, collaboration or cultivation. Irrespective of the specific culture, the Agile roll-out invariably tests cultural integration, wholeness and balance. It exposes inconsistencies between approach to customers versus approach toward other constituencies such as partners and employees. \n\nTo create and capture lasting value, the Agile initiative must be linked to a coherent corporate culture. This workshop holds the details you need to know about how to forge this critical link.\n	Adoption	Invited Tutorial	2010
20105302	Whither Agile? A Participant-Driven Round Table	When a breakthrough idea crosses the chasm it passes through a make-or-break stage of maturation. Without leadership, even the best ideas can evaporate into nothingness or ossify into dogmatism. Agile stands at just such a turning point now. The message has become fragmented, diluted, co-opted for profit, mischaracterized, abused, and attached as a label to just about anything. What can the community do to see that the proven value of agile principles and practices is not lost in the general chaos or surrendered to commercial interests that have a branded, packaged solution to sell?	Adoption	Invited Tutorial	2010
20106362	Scaling Up by Scaling Down: A (re)Focus on Individual Skills	Have you ever seen a successful pilot of agile techniques followed by miserable failure in wider adoption or scaling?\n\nThe current focus for scaling Agile seems to be on practices, process, and tools. I assert that the success of any Agile adoption effort depends first on the individuals, their interpersonal and self-leadership skills, and the organization's support of these skills. \n\nLast year's session on this topic is at: http://www.infoq.com/presentations/scaling-up-by-scaling-down.\nThis year's session has significant new material and exercises.	Building High Performance Teams	Invited Tutorial	2010
20105624	Software Craftsmanship Practices	How does one become a Master Craftsman?  Practice, practice, practice.  In this workshop we will get our hands dirty exploring some of the more common techniques for practicing the software craft.  We will perform code katas, working on sense of code smell, do some randori, and more.  Bring your laptop and prepare for a mental workout.  You will learn exercises that you can use to train yourself at home and teach your colleagues.\n\n	Technical Edge-Development Praxis	Invited Tutorial	2010
20105928	The Incentive Trap	In the majority of cases, Agile is introduced into an existing environment. The way in which projects are delivered starts to change, but often the successful realisation of the full benefits of Agile are impeded by causes that are not immediately obvious, or considered material.\n\nIn our experience, the manner by which an organisation chooses to reward and incentivise can have unexpected and unintended consequences.\n\nRather than preaching, or theorising we aim to allow attendees to experience for themselves the end results of different incentive schemes and draw their own conclusions.	Business Transformation	Invited Tutorial	2010
20106239	Blueprint for an Agile Enterprise: Plans, Tools&Tech to Build a Human Enterprise	Want your whole organization to be more like an Agile team? Starting teams is well understood; expanding Agile to the organization is definitely not. Using 8 years experience applying organization development to Agile, we'll unfold a 7 layer organizational architecture for building a human enterprise. Each level has an overall perspective, specific tools and key practices. Part tutorial, part demo, we'll create a change plan for one participant's organization, exploring culture, leadership, change, team performance, and management's role. You'll leave with a plan template and many ideas.	Organization & Enterprises	Invited Tutorial	2010
20108587	Evolutionary development for the web with ASP.NET MVC and TDD	This 3-hour course will teach you how to approach web development from an agile perspective. You will learn techniques for rapidly developing small, incremental vertical features in an application in order to deliver maximum value in a minimum amount of time. You will learn to start with the high level specifications for feature completeness, expressed in an automated acceptance test, and then implementing the logical functionality with Test-Driven Development.\n\nThe course will be taught using Visual Web Developer 2010, ASP.NET MVC 2, xUnit.net, and SpecFlow.	Technical Edge-Development Praxis	Invited Tutorial	2010
20105663	Continuous Delivery	Businesses need to deliver valuable new features to users as frequently as possible in order to make money. But they need to make sure releases are stable and well-tested. In this tutorial we discuss how to deliver features rapidly and reliably through an automated build, deploy, test and release pattern called the deployment pipeline. In this tutorial we take the unique approach of moving from release back through testing to development practices, analyzing at each stage how to improve collaboration and increase feedback so as to make the delivery process as fast and efficient as possible.	Team-Room Agile	Invited Tutorial	2010
20105963	Feeding the Agile Beast: Improving Business Value Delivered	Agile delivers improved fit, throughput, visibility and transparency, and collaboration. But the need within most organizations is not just improved software development - it is to improve the ability to deliver value. Software development organizations must focus on the initiatives where there is the greatest potential return.  This is an introduction to Capability Analysis - a proven method of maximizing economic outcomes by laser focusing development on delivery of business value. Unlike many Business Analysis techniques, it matches the cadence and needs of the Agile team.	Business Transformation	Invited Tutorial	2010
20106341	Help me see it: Using collaborative sketching to bring product ideas to life	Agile projects seem to start in a big rush. In trying to avoiding big design up front, teams miss the opportunity to imagine the great things their product could be.\n\nIn this action-packed hands-on tutorial you'll learn a simple practice for collaboratively identifying great product UI ideas. You'll learn several different ways to envision your user's experience. Then armed with only a product backlog, pencil and paper, you'll go to work sketching product ideas. After synthesizing your team's ideas, you'll see the real power of ideation in helping great product ideas emerge quickly.    \n	UX/UI	Invited Tutorial	2010
20105529	Agile Estimating & Planning: From Basics to Brain Stumpers	Planning is important yet many teams view planning as something to avoid and many companies use plans as weapons against their teams. In this session you'll learn how to break that cycle with skills that create useful plans that lead to reliable decisions. After mastering the basic concepts, we will progress quickly to planning under complex situations including how to estimate velocity without historical data, how to estimate velocity when team size is changing, and how to create confidence intervals so we can create plans we are 90% confident in, even on fixed-price or fixed-date contracts	Project Management	Invited Tutorial	2010
20108615	How to increase your effectiveness by using Lean, Kanban and Real Options	One of the newer approaches to emerge in the agile community is Kanban. Kanban is based on many of the same principles that are the foundation of Lean. By combining this with the ideas from Real Options a powerful way of dealing with decisions, uncertainty and risk management emerges. A framework that allows you to focus on effectiveness.\n\nThis session covers the basics of Lean, Kanban and Real Options, how and where to use them and why you would bother. Attending this session will change the way you view the world. It will never be the same again.	Organization & Enterprises	Invited Tutorial	2010
20105994	 A Non-Software Scrum Experience: Scrum-But or Context-Sensitive?	Nonstandard Scrum techniques have evolved in a non-software team at a manufacturing client preparing business process changes in Customer Care for a new product line. The team is operating successfully, but in some ways far from received wisdom of Scrum "best practices."\n\nA network of subteams of varying headcount, the team operates on partially overlapping backlogs. Yesterday's weather & next sprint's capacity are assessed down to the individual level because of persistent specialization among team members. \n\nDo we have Scrum-But (or worse!) or a set of defensible adaptations?	Business Transformation	Talk	2010
20106426	The Power of the Idea	The transformative power of the idea establishes purpose, creates energy, and focuses the creative and generative capacity of an organization to accomplish its goals.  What is this "idea"?  It is the core of what it is that the organization is about.  In addition to driving business, alignment with the idea guides successful adoption of new concepts such as Agile.  Organizations that know what their idea is can dominate their market.  This workshop helps participants identify their organization's idea and how to use this idea to successfully navigate the complex and competitive marketplace.	Business Transformation	Workshop	2010
20106370	Has Anything Changed?	Marketing talks about backlogs and product owners. Developers talk about CI, TDD, standup meetings, and user stories. Operations talks about lean. But has anything really changed across the business? Do we produce real value faster?\n\nThrough a series of group exercises, we will identify issues preventing progress in your organization, hear others' solutions to them, and explore how you can apply those solutions to your environment. Come to this session ready to collaborate. Bring your challenges. Most important, come prepared to work as if the solution depends entirely on you. \n	Business Transformation	Workshop	2010
20106415	Learning Agile at Harvard Pilgrim Healthcare, One Step at a Time	When Harvard Pilgrim started down the path to using Agile principles, their goal seemed so distant as to be unattainable. The plan called for simultaneously implementing a new process, replacing most of their core applications with systems, some entirely new to the market, and implementing a service oriented architecture. With so much to change at once, they began a series of incremental steps to achieve these outcomes. This experience report walks through several hard earned lessons regarding implementing Agile rapidly within a large organization.	Enterprise Improvement	Talk	2010
20105186	Agile Test Automaton Strategy for the Non-Technical	Agile leaders need to understand the critical role test automation plays in achieving agility. Do we really need automated unit tests? Why? And how about system / functional / story tests? What role do they play? Who should write them, and when? How do we earn back the cost of all this test automation? And how do we do it if we have a lot of legacy code?  This tutorial answers these questions in terminology the typical non-coding manager, architect or tester can understand. It also lays out several test automation strategies and points out their strengths and weaknesses.	Enterprise Improvement	Tutorial	2010
20106380	Mapping the Agile Enablement Battlefield	Most agile initiatives focus solely on delivery and execution while ignoring the impact that such a radical change will have on an organization.  It is the responsibility of the SM to shield the team from such distractions rather than leverage them as enablement tools.  Via a military metaphor, we use a simple technique of mapping influences acting on projects.  Mapping is used to analyze the organization to identify potential risks and decide where to exert influence to make the difference between the beginning of an agile transformation and the end of a single agile project.	Leadership & Culture	Tutorial	2010
20105952	Are We Done YET?!	Are we done yet?\nMany teams new to Agile struggle with how to know when their story or feature is complete. We introduce the importance of Acceptance Criteria and the Definition of Done. Why is it important to the Product Owner and the Delivery team? In this economy we want to make sure we are building the right thing!\nThe key concepts of the game are: \nVelocity \nDoneness - Definition of Done\nSelf Organizing Teams and Roles\nTime-boxed\nRetrospective\nThe game is a hands on stress free way to learn. There will be lots of laughing, come join the fun!\n	Expressing User Needs	Workshop	2010
20105516	Improving Customer Conversations	It's not easy to build the right product. People don't always know exactly what they need, want things that won't help, and don't imagine what's possible. Further, most people aren't born with the ability to speak naturally in user stories or concise requirements statements. So we must learn how to ask the right questions, draw out pertinent information and understand our customer's world.\n\nThis session explores how to make the most of questions:  different types of questions, when to use each, and signs that you need to probe deeper. 	Expressing User Needs	Other	2010
20105767	Life's not a Beach, it's a Game: Innovation GamesÂ® for Agile Teams	One of the most important decisions a team can make is deciding what features it wants to deliver, and when to deliver them. Delivering the wrong features too early can lead to failure and delivering them too late, or for the wrong market segment, can lead to a competitive disadvantage and lost sales. In this hands-on workshop, Cory and Luke will show you how to use collaborative play with customers to discover how they think and what they value, and use this information to effectively prioritize and release the features they want - when they want them.	Expressing User Needs	Tutorial	2010
20105680	Product Owner as Agile Leader - Oxymoron or Critical Success Factor	One of the more crucial roles in agile teams is that of XP Customer or Scrum Product Owner. These are pervasive roles, with aspects that are often debated. Are they part of the team or not? Does their neck get wrung or not? Are they outward focused or inward focused? Do they serve as a leadership voice within the team or not? In this presentation we'll explore the role of the Agile Product Owner from a role and responsibility (or focus) perspective with an eye towards leadership. Perhaps we'll find the true north between the titles two polar opposites.	Product Management	Talk	2010
20105530	The biggest bang for the buck! Strategies to organize & prioritize your backlog	Selecting and delivering the most important work is a critical success factor in Agile projects. But how do you know what is important? Unless you are psychic, some help would come in handy.\n\nGet a guided tour to a variety of strategies and tools to manage your backlog. Understand the benefits of each approach using a model that puts them in context; learn how to make informed decisions on which to use in your situation. E.g. Innovation GamesÂ®, Story Map, Software By Numbers, Kano Analysis.\n\nA series of hands-on exercises will help ground your understanding so come ready to play!	Product Management	Tutorial	2010
20106319	Product Management, Agile and Customer Development	The greatest cause of failure for new product introductions is not product development (i.e., the product), but in the development of customers and markets. \n\nCustomer Development is about discovering and learning who your customers are. It's a parallel process to Product Development only that it is customer and market centric.  \n\nSession participants can expect an introduction to Customer Development and how the essential roles of Product Management and Agile Development combine to minimize product/market risk. 	Product Management	Talk	2010
20106109	Building a More Accurate Burndown: Using Range Estimation in Scrum	Traditional Scrum burndowns are based on single point estimates of how long a task will take.  However, single point estimates are inherently faulty and inaccurate, and they encourage underestimation.  Learn how to incorporate range based estimation techniques into your Scrum burndown, and better communicate to your boss or clients what a project is really going to take.  Arin will back up this thesis with academic and industry research, real world examples, and an engaging presentation style.  Participants will leave with concrete tips & templates for using range estimates in their projects.	Project Management	Talk	2010
20105873	Scrum and Kanban - Like Chocolate and Peanut Butter	You may have heard that Scrum and Kanban are mutually exclusive or that Kanban isn't good for large software projects. In fact, much as Scrum and XP play well together, so do Scrum and Kanban.\n\nThis session is for folks that are already doing Scrum and are curious about Kanban. It will show how the Lean practice of "One Piece Flow"is the key to both, and look at how to mix and match Scrum and Kanban to fine tune a process that fits your circumstances. This will include: decoupling once-per iteration activities from the iteration, work-in-progress limits, and the concept of "pull."\n	Project Management	Workshop	2010
20105900	Fixed-Bid, Fixed-Feature, Fixed-Time Agile Development	Many people think that agile development is for open-ended, ambiguously-defined, projects - but not for fixed-price, fixed-time, fixed-feature ones. Nothing could be further from the truth! I have seen successful agile fixed-price contracts for over 25 years, and believe that agility is required for fixed-price to succeed. I have learned many lessons: some of them bad, most of them good. In this talk I present some guidance about how to do these projects successfully: how the organization works in an agile way; how to develop a strategy for the project; and how to monitor its progress.	Project Management	Talk	2010
20106287	Avoiding Mediocrity in Agile Adoptions	Understand why learning is the largest part of software development and why many Agile teams fail.  If your practices do not enhance individual and team learning you are probably cargo-culting Agile (going through the motions without receiving the intended value).  Agile is all about recognizing and responding to change effectively.  Unfortunately many of us recognize problems and respond ineffectively because it is painful to face the truth that we are part of the problem.\n\nAttend to learn to understand the magnitude of this problem, how to recognize it, and how to begin to address it.	Adoption	Tutorial	2010
20105907	The Lean Pyramid - The Equilibrium of Agile Forces 	The Lean Pyramid presents a concept to help companies start their agile adoption strategy effectively. Reliably delivering valuable working software frequently is much more than just creating, estimating and prioritizing a backlog and developing it iteratively. In order to succeed with agile you have to understand the needed equilibrium of forces among strategy, management and engineering efforts. Through a deep explanation of the fundamental Lean principles, you will learn how they translate to agile software development in order to create a strong and successful culture in your company. \n	Adoption	Tutorial	2010
20106368	Management for the Agile Age - Stewardship and Partnership for Agile Teams	Many enterprise agile transitions run into the same serious impediment - an inability to manage and govern in a way consistent with agile values. Many managers struggle to define their role in an agile organization. This thought-provoking session explores why conventional management approaches are fundamentally incompatible with self-organizing teams, and proposes specific steps for redefining the boss-worker relationship and evolving our organizational structures. We'll also tackle the issues of job classifications, performance evaluations and compensation in an agile environment.\n	Adoption	Talk	2010
20105153	How the Underdog Outperformed the Champ	We all want to be part of a team that is producing high quality software as fast as we can.  Technical knowledge and experience of the team can help but this experience can also hinder a team that wants to deliver each iteration.\n\nThis session will tell you about a large team divided into sub-teams and how the 2 teams with less technical experience produced more features each iteration faster.  These teams did this with better quality and less rework as well.  It was a phenomenon that surprised me at first.  The session will cover what the numbers showed and the behaviors that lead to them.	Building High Performance Teams	Experience report	2010
20105978	Improving Decision Making in Your Agile Team	In an agile environment, the development team is empowered to make most decisions, creating a "pluralist decision making environment."Team members are faced with decision tasks on a daily basis in a dynamic environment with rapidly changing requirements, expectations, and underlying data. Therefore, this workshop's participants will discuss key decisions an agile team makes; share best practices for decision strategies and methods of data presentation to support high quality decision making in agile IS projects; and provide an overview of contemporary mechanisms to evaluate decisions.	Building High Performance Teams	Workshop	2010
20105198	Retrospective for an agile coach	What does an agile coach actually do?\nHow does context affect what works and what doesn't?\n\nIn this session we reflect both on the big picture of a number of agile coaching assignments and on some of the detailed interventions including activities that relate to the team and those impacted such as managers and business stakeholders.\n\nIn the true spirit of retrospectives both success and failure are considered with the intention of looking for opportunities to improve.\n\nAttendees will be asked to consider how they might deal with particular scenarios and learn lessons from my mistakes.	Coaching Agile	Talk	2010
20105279	Effective questions for an agile coach	An agile coach is typically an experienced expert. He has a solution for everything. In many cases, good advices without client's ownership will not lead to real change. Sometimes it may be wiser to abstain from giving direct advice and ask questions instead.\nIn this workshop the participants will learn why use questions when coaching and how to make them effective.  We will practice making great questions that increase coachee's awareness and help him find solutions himself.\nWe will also present a clear model of how to proceed  from a problem to improvement using questions.\n\n	Coaching Agile	Workshop	2010
20105307	Behaviour Driven Development for Life	BDD is a Lean toolset that encompasses the whole software lifecycle. In BDD we define goals at varying levels of granularity, talk through the definition with stakeholders, explore contexts to produce different outcomes, and break down large goals into smaller sub-goals for quick learning. With a few additional tools from coaching, NLP and Real Options, these patterns can be applied to real life - and it's also a fun way to practice the BDD mindset.\n\nThis talk introduces the non-technical principles of full-stack BDD together with a few simple examples, so is suitable for beginners.	Coaching Agile	Talk	2010
20105246	Pinocchio: On Becoming a Lean Leader 	You're a mischievous wooden little boy who dreams of becoming a manager one day. On your journey, you'll encounter characters that will lead you astray and others who'll help you find your way back to your goal.\n\nDiscover how you can apply some Lean Leadership tools:\n  \n * Long term philosophy\n * Focus on Value\n * Relentless Reflection and Continuous Improvement\n * Leadership Discipline\n * Decisions based on Consensus\n\nJoin us to put some Lean leadership tools into practice and come up with 3 actions to take away. Give your story a Happy Ending with the help of talking animals. 	Leadership & Culture	Workshop	2010
20105110	Collaborating with Non-Collaborators	How can we deal with non-collaborators? We can't change them but we might be able to work with them - or, work around them. How do we know? In this interactive course, you will learn how to identify non-collaborators, understand the systems your non-collaborators work in, assess the systems you work in, build a map of traits, and map tools for dealing with non-collaborators.	Leadership & Culture	Workshop	2010
20105565	Upstream Kanban: Engineering to Marketing	This is the story of a value-driven transformation, about how groups from Product Management, Marketing and Engineering merged into a single organization and reporting line, and a single Kanban team that embraces the entire value flow, from concept to final delivery. We improved work flow and hand-offs, end-to-end visibility and communication, and achieved new levels of responsiveness, with work capacity up by two-thirds and visibility up 200%. We'll relate a detailed account of our experience, and the tools and metrics we used to drive participation, improvement and inclusion.	Organization & Enterprises	Talk	2010
20105533	Comparative Agility: How Agile You Are and How Agile is the Industry	Are you curious how agile your organization is? Do you wonder how you compare with other organizations? Comparative Agility is framework for assessing organizational agility.  Over 1,500 participants worldwide have taken the assessment survey.  We will describe how to use the tool and how to derive actionable information from survey results. We will present industry findings derived from assessment results.  Attendees will gain insight through small group discussions during which they will interpret industry-wide results and develop actionable advice based upon results of a real company.	Organization & Enterprises	Tutorial	2010
20105383	Today's best practice is tomorrow's process smell	The premise: A "best practice" at one level of maturity becomes a "process smell" that guides us to the next level of maturity. There is a tendency to "lock in" a set of assumptions and practices and to assume this represents "agile best practice." Rather than locking in, we should be guided by the principle, "question everything." This applies especially to our own assumptions about what constitutes agile best practice. Otherwise, our thinking will ossify and we will cease to improve the overall agile toolkit and our own ability to add value for customers.	Organization & Enterprises	Other	2010
20106245	Cooking the Product Stew	What is a stew? A stew is made from various ingredients you have around, left overs, new ingredients that go together well, and others that are filling but need lots of sauce. The enterprise software market is made up of products that are a stew of software on many legacy platforms that have evolved over a long period by many hands. Taking an enterprise software product to Agile methods is a challenge. In a uniquely European context, this presentation will draw from the ongoing agile adoption in a multi-location multi-team enterprise product with 460 staff in 4 countries and 5 locations.	Large Scale & Distributed Agile	Talk	2010
20106229	Generating Actionable Solutions using Distributed Retrospectives	Distributed development challenges the effectiveness of retrospectives.We designed and trialled a lightweight analytical approach (CLPP-Retro) that engages distributed teams and generates actionable solutions. We discuss the feedback from a team that employed CLPP-Retro over 12 iterations. They find that it identifies solutions that are not merely corrective; it facilitates agile adoption, identifies critical gaps in the organization, improves estimation, decreases repetitive problems, and provides a voice for the engineer. We also discuss lessons learned during deployment.	Large Scale & Distributed Agile	Workshop	2010
20105734	Applying Agile Development Practices to Distributed Teams	For a distributed team it is even more important to pay 'Continuous attention to technical excellence and good design' as the Agile Manifesto requests. Yet, how to implement the typical agile development practices like pair programming or collective code ownership in a distributed setting? Moreover are there any differences or things to watch out for when applying "easier"practices like unit testing or refactoring? In this session I want to focus on the impact and application of agile development practices in distributed teams and how such a team can ensure its technical excellence.	Large Scale & Distributed Agile	Workshop	2010
20106310	Agile Business Intelligence - 12 Critical Steps to Success	The data community is one of the next "agile frontiers". While the software community has largely embraced agile techniques, data warehousing practitioners continue to follow a waterfall development style, and continue to have a high probability of project struggles or outright failures. It can be challenging to apply agile software practices directly to BI systems development. This includes technical practices; project management practices; and "customer"interaction practices. This talk demonstrates the key practices that are especially tailored to the nuances of data warehousing.	Team-Room Agile	Talk	2010
20105589	Exploring the Kanban Multiverse	A multiverse is the hypothetical set of multiple possible universes that together comprise everything that physically exists: space, time, matter, energy, momentum, and the physical laws and constants that govern them. A Kanban Multiverse is the hypothetical set of multiple possible Kanban Boards that together comprise everything that physically could be visualised: scope, time, work type, status, flow, and the organisational laws and constants that govern them. This workshop will explore how a single Kanban Board might visualise these multiple aspects in a limited and constrained space.	Team-Room Agile	Workshop	2010
20105208	It's All In the Cards	The hallmarks of a "good"story card are that it describes business value, can be estimated, and can be tested.  When I'm asked how to write good story cards,  I typically answer, "You start by writing a couple hundred bad ones."Like all things, it takes practice to improve. There are, however, ways to write better story cards from the start.  This session will explore the good, the bad, and the ugly of story card writing using examples from real projects and will give participants an opportunity to exercise their story writing skills for their own projects.	Team-Room Agile	Tutorial	2010
20106170	Walk and Code - Non-exercise Activity Thermogenesis	Life as a programmer is primarily sedentary.  Most of the day, a programmer sits in front of a computer moving little more than fingers. \n\nDr. Jame Levine of the Mayo Clinic has been doing some fascinating research on the health benefits of non-exercise activity.  He has pioneered the concept of active workstations to promote an overall healthier life for people with typically sedentary jobs.  I have taken his advice to heart and built a walking treadmill desk that I use everyday as I write code.   I will present Dr. Levine's research and report on my first 6 months on the treadmill desk.	Technical Edge-Development Praxis	Experience report	2010
20106296	Programmer Self-Education: My Year Studying Programming Language Fundamentals	After attending Michael Feathers's talk at SCNA 2009 titled "Self-Education and the Craftsman," Kevin Taylor made a commitment to himself to read the revered, and despised, MIT textbook, "Structure and Interpretation of Computer Programs" (SICP). Over the next year, he spent hours each week working through challenging programming exercises in Lisp.\n\nIn this talk, Kevin shares some of the programming fundamentals he discovered, or rediscovered. Kevin also shares his insights on the importance of self-education (knowledge + practice) for software craftsmen and their journey toward mastery.	Technical Edge-Development Praxis	Experience report	2010
20106353	The Butterfly Effect - How the little things you do affect you later	The butterfly effect is a phrase from chaos theory that describes how a dynamic system can be very sensitive to changes in the initial conditions. As the story goes, a butterfly flaps its wings in Maine and causes a hurricane in India that floods millions from their homes. Software systems, and in particular the systems we call "teams" and "processes" are very similar and are also subject to the same kind of unexpected outcomes. How do changes to processes, rules, guidelines and gates impact the work the team does? How does it impact the thing they produce?	Technical Edge-Development Praxis	Talk	2010
20105488	How Low Can You Go: Doing the Defect Management Limbo	In the party game Limbo, you set a bar lower and lower. Players must dance under the bar without touching the floor. When it comes to bugs, we also want to set the bar lower - fewer bugs are better. How do we do that, and what about our huge defect queue? Lean development tells us queues are waste, but don't we need defect tracking systems (DTS)? \n\nWe'll discuss different approaches to bugs, from "fix and forget"to lightweight DTS. We'll look what we can learn from bugs, including Antony Marcano's "hidden backlog"concept. We'll explore agile ways to prevent bugs.\n	Testing/Specification Practices	Talk	2010
20105834	Testing When You're Not Automated (Yet)	Ideally, as an Agile tester you would enjoy full participation of customers and programmers in creating automated acceptance tests for every feature before it's coded, and manual regression testing would be a thing of the past. For many reasons, this is not often the case. How do you balance releasing rapidly with adequate testing, especially when you're dealing with an existing product with few or no automated tests? In this tutorial you'll practice simple, proven techniques for quickly getting control of manual testing on an Agile project, while making time for learning and improvements.	Testing/Specification Practices	Tutorial	2010
20106295	Practices in the Integration of Agile and UCD Processes - A Reality Check	In this experience report I discuss the investigations I made into current attempts to address usability & user experience requirements within agile projects. I have conducted in-depth, one-to-one interviews involving 14 participants from 5 different countries. The data collected were analyzed using a grounded theory approach. These interviews covered a broad range of issues ranging from usability and UX goals, to incorporating user feedback in UI implementations within an agile team.	UX/UI	Experience report	2010
20106294	Mind the Gap	This report will summarise experiences across a number of projects, customers and teams where there was a significant UCD aspect to the projects.  It will explore where teams worked efficiently, not so efficiently or were down right dysfunctional.  This will highlight each of the team's key challenges, what made their approach successful or hi-light warnings for future projects.  A common issue that each of these teams highlighted were extremities on the gap between UX and development collaboration and understanding.	UX/UI	Experience report	2010
20106290	Using storytelling to explore the rich context of user experience	We all tell stories-they are an easy way to communicate. Agile uses Stories as a core technique to explore needs and benefits for each unit of work. This workshop will look at complementary ways to use storytelling and stories to add depth to the team's understanding of the rich context of user experience. These types of stories help you understand users, add perspective and context to personas, and explore early design ideas. This hands-on workshop will explore additional ways to use stories to keep the big picture in view.	UX/UI	Tutorial	2010
20106461	Make Stuff People can Use	There doesn't have to be tension between user experience methodologies and teams working to deliver fast, value-added iterations. Any agile team member can participate in delivering great user experiences without slowing work. Engaging the full agile team in keeping users central to their thinking is the best way to successfully incorporate emergent requirements and provide innovative and usable experiences. This active session illustrates how user-centric gains can be made with a few activities that activate user empathy and provide enhanced ability to provide deliverables for users' needs.	UX/UI	Talk	2010
20105951	Agile Teams: Surprising Exceptions to Common Expectations	Agile teams tend to work better when they exhibit certain qualities, competencies and behaviors. Conversely, teams are much less effective when they exhibit other traits that run counter to Agile expectations. Or so the literature says... But is that the complete picture?\n\nDuring this workshop participants will identify and consolidate factors that enabled the challenged, imminent-failure teams to succeed, as well as the factors that inhibited potentially great teams. These lessons will assist them on future teams and integrate real-world experience into the Agile body of knowledge.	Leadership & Culture	Workshop	2010
20105756	Agile Managers: The Essence of Leadership	As organizations have transitioned to agile projects and programs, what happens to the managers? Do we need managers any more? Yes, we need managers. And, in an agile organization, where the managers are freed from the day-to-day tactical project tasks, we need them more than ever as  leaders doing strategic work: managing the project portfolio, removing organizational obstacles, building trusting relationships with technical staff, coaching, providing feedback, assisting with career development, leading the hiring decisions and process, and building the capacity of the organization.\n	Leadership & Culture	Talk	2010
20105612	Trust, Authenticity & Forgiveness: Workplaces Where People Thrive & Produce	Trust is a key ingredient for collaborative work. Yet even when things go wrong, the team must recover to remain productive. As team members we must trust, learn to forgive, and move forward when trust needs rebuilding. Taking a look at the origins and the behavioral components of trust - including the individual propensity to trust (or distrust), we'll build a foundation for discovering the role of trust and forgiveness in teams. We'll also explore why a clearer understanding of interpersonal behavior across gender and other differences can lead to mistrust or accelerate trust building.	Building High Performance Teams	Tutorial	2010
20106207	Agile for the Practical Project Manager 	In this 60 minute presentation, we will provide a 360 degree view of Agile and how it relates to the classic project manager role. We will discuss the flavors of Agile, how to pick and choose practices from the flavors, and how to create an Agile lifecycle that thrives within a specific company and environment. We will look at the overall Project Management lifecycle and where Agile fits in. We will also discuss the Scrum Master role and how it can be done in parallel with classic PM work.  This presentation has been presented to over 1000 project managers to superb reviews.	Project Management	Talk	2010
20105801	Agreeing on Business Value Using Systems Thinking 	Defining value, reasoning why those values matter and figuring out how a project will deliver that value is crucial to a project's success. One of the results we've seen consistently is higher value, for less cost.\n\nSo why do so few projects define and measure the values they were created to achieve? Because agreeing on values with diverse stakeholders is hard.\n\nExperience how to build business value models based on business value drivers to determine what's really needed. See how the models help you achieve our projects' goals. Learn how you can help define and deliver value.	Business Transformation	Tutorial	2010
20106250	From Estimate to Contract - Choosing the Right Model for Your Situation	Because we work within a variety of industries, including medical and defense, we use several different contracting models.  In any particular scenario, more than one model could work.  This talk will discuss how to select the right model and go from estimates to a cooperative contracting model that fits the situation.  It will also explore methods for properly accounting for risk.  Finally, it will look at ways to best present the information to a client so that they clearly understand options available. 	Business Transformation	Talk	2010
20106069	Using Agile and Lean to Lead Business Transformation	Companies need a sustainable model for leading continuous change - yet most leadership teams are too busy running the business to effectively lead change.  Many transformation efforts fail due to false starts, organizational resistance, and a lack of effective governance. We will explore a strategic change project management model that has repeatedly resulted in successful ongoing change initiatives. The model draws on Agile and Lean principles and techniques to lead change initiatives in a way that is simple, provides focus and transparency, and builds trust. 	Business Transformation	Talk	2010
20106053	Hiring doesn't have to be random	Agile teams need to hire. How do you know who will transform your entire team's ability to meet its objectives?\n\nBehavorial Interviewing is a very pragmatic technique that gets to heart of assessing people. Avoid typical mistakes like hiring people similar to you ("fit"). Get good information from people who do not interview well, and don't get blinded by those who do. Focus on the specific traits you need in your team, rather than just skills.\n\nThrough experience as interviewers, your team will also greatly enhance their understanding of each other, and collaborate more effectively.	Leadership & Culture	Tutorial	2010
20105740	RIM's Agile story, the Millionaire game show	The style of the presentation will be a Millionaire game show format guiding the audience through the history of Agile at RIM by answering progressively more challenging multi-choice questions for each milestone of the narrative.\n\nEach question will be introduced with a summary of the milestone context, and the audience will be asked to predict the next step.  Wry humor will keep both novice and Agilista amused and engaged.  The audience will wait with baited breath as with suspense and drama the answer is revealed, and the next stage of the 'RIM Agile story' is fleshed out with visuals.	Enterprise Improvement	Other	2010
20105116	Agile Transitions: Cannonball and Stealth Approaches Exposed/Compared	You've discovered agile and are excited!  You are a leader within your team or company.  Your next question is "How do I ignite this fire and get agile to take root in my organization?"\n\nAfter experiencing two extreme opposite transitions, I will tell the story of these approaches along with their successes, failures, and lessons learned.  One transition occurred in a regulated global 50 company including offshore teams which dove headfirst into Scrum and XP within 3 months.  The second is a stealth transition in a small .com startup company that is still ongoing after 3 years.	Adoption	Talk	2010
20106161	Bloody Stupid Johnson Teaches Agile	This fun and energetic session features "Bloody Stupid" Johnson and The Jester facing off to architect the Perfect Agile Process (PAP). On their journey, they will get just about everything wrong. Come learn what not to do and have a good time doing it.	Leadership & Culture	Talk	2010
20106323	Becoming Agile: Designing a Transition Plan from Waterfall to Agile	An increasing number of organizations are transitioning to Agile, but designing a compelling transition plan to secure executive support can be intimidating. This interactive session will take participants through a fictional business case in which the purpose is to design a plan to transfer an organization from traditional Waterfall to Agile. The class will discuss the case and break into groups to analyze the situation. The case will then be 'solved' as a class, integrating each group's findings to design a successful high-level transition plan.\n\n	Enterprise Improvement	Tutorial	2010
20105528	The Right Way to Wireframe	What happens when you take 4 designers, give them all the same design problem and challenge them to come up with a solution and document their entire process? \n\nThis highly interactive panel takes a detailed behind the scene look at their process, including: research, IA/interaction design, wireframing/prototyping and visual design. Each presentation will wrap up with a time-lapse video of their entire process from start to finish. 	Expressing User Needs	Panel	2010
20106364	Beyond Sprint 0: Using Collaborative Product Discovery to Plan Agile Projects	In this class you'll learn the mechanics of collaborative product discovery: a short intense collaborative phase that precedes a successful agile project.  Discovery workshops leverage design thinking to move from product idea through to a backlog and development plan.  In this class you'll fill your practice toolbox with dozens of practices to mix and match in a series of discovery workshops that involve stakeholders, users, and the whole team to build your product backlog, envision your product's user experience, estimate development time, and plan successful product releases.  	Expressing User Needs	Tutorial	2010
20106374	Is It Time to Ditch Your Product Backlog? Using Story Maps to Visualize Backlogs	Agile teams are asked to build product backlogs, but little guidance is given on how to organize them. Many teams utilize simplistic formats for their backlogs, but often lose the strategic vision in the lists of stories. Ironically, the same teams use very effective visual task board formats for their iteration backlogs. What would the task board equivalent be for product backlogs? The answer is - Story Maps! In this session, learn the key concepts of Story Maps and how they visually present multi-faceted product backlogs. We'll work through a hands-on exercise building an actual story map.\n	Expressing User Needs	Tutorial	2010
20105566	BDD for Analysis: an Introduction to Feature Injection	Behaviour Driven Development allows analysts, developers and testers to collaborate on a project together, producing well-tested, valuable code. BDD emphasises test-first as a way of learning more about the project. This pattern can be applied to analysis too! We work through some simple exercises and techniques for delivering the stories, features and projects that really matter, and provide developers with a clearer understanding of the value behind stories or features before they start coding.	Expressing User Needs	Workshop	2010
20106302	The Art of the Hackathon	hack-a-thon [hak-uh-thon]: a period of time for which team members are given the freedom to work on whatever they want with few restrictions in an environment where creativity is encouraged.\n\nMost organizations value innovation, but often it's unclear how to build time for creativity into their development cycles. This discussion will focus on practical hackathon implementations, how to run them effectively and what to do with the results. Hackathons are a great way to keep development teams engaged and their energy high so why not let the rest of the company join in on the fun?	Building High Performance Teams	Talk	2010
20106077	Product Road-Mapping using Agile Principles	As agile practices become more prevalent, Product Management divisions face increasing challenges to adapt agile techniques. Most Agile project teams prefer direct collaboration with the strategy makers for decision making over reporting metrics; the reality is that only a few product/portfolio managers are actually capable of paradigm shifts to accommodate this drift. What is needed to make this shift? \nThe paper outlines an agile-enabled framework adopted by the digital division of a publishing house to charter their product roadmap and enable their project team with the "big picture".	Product Management	Talk	2010
20105649	Portfolio Management Done Foolishly	The Motley Fool adopted Scrum as the primary development system across the enterprise in December of 2007.  Shortly afterward, we developed a simple initiative planning system to help feed our teams work that was aligned with our strategy.  In 2010, we launched new portfolio management process that allowed us to better utilize Scrum, as described by Ken Schwaber, for growth initiatives and Kanban, as described by David Anderson and Corey Ladas, for managing KTLO (Keep the lights on) work and other sustaining activities.  This interactive session will describe the framework and our findings.	Product Management	Tutorial	2010
20105187	From Concept to Product Backlog - What Happens Before Iteration 0?	Many agile methodologies assume a customer (or product owner) walks into the room with a swack of money and a pile of story cards and tells the development team to start building the functionality described on the top few cards. This tutorial provides an overview of what needs to go on "behind the scenes" between when a project is conceived and when development can start in earnest. It identifies the artifacts that may need to be produced, whether and when they should be produced, which activities can be used to produce them and who should be involved in those activities.	Product Management	Tutorial	2010
20105821	I'm The Business And Agile Was My Idea	Agile is often traditionally associated as being exclusively applicable to the field of software development. However, non-software development projects can take ownership and use agile values, principles and practices to great effect.\n\nIn this session, I will offer some approaches, techniques and examples for introducing agile into parts of the organisation that traditionally may not have considered it such as central services like finance, HR, marketing, traditional business areas as well as other areas of IT like infrastructure and provide some real-life examples along the way.	Project Management	Talk	2010
20105522	Estimating and Managing Fixed Price Contracts For Agile Projects 	Fixed price contracts written before a project starts lock in a fixed set of deliverables. Agile processes allow the customer to change his mind about those deliverables. In this report, we will describe how our project copes with this dissonance, including how we estimate project scope and write statements of work to allow the flexibility of change. We will also show how we manage the project through the life of the contract to meet real customer needs and the letter of the contract. The session will end with a demonstration of our project estimation process followed by a group discussion.	Project Management	Talk	2010
20106242	Case Study: First Time Implementation of Agile at a NY State Government Agency	Like many IT organizations in state government agencies, NY's Dept. of Transportation primarily used Waterfall.  I implemented the agency's first agile projects.  I was challenged by the agency's unique environment, learned lessons, discovered systemic problems, overcame organizational obstacles and changed misconceptions.  I will discuss what I've learned during this award-winning project and make recommendations for others in bureaucratic companies and agencies.  DOT's projects are moving to agile/scrum and the institution's IT group is incorporating agile into its PM and SDLC methodologies.	Project Management	Talk	2010
20105753	Agile Program Management: Another Approach to Large Projects	Have you ever waited weeks for one piece of functionality to release a large project? Have you been in the situation where the software is waiting for the hardware? Or, where the database admin held up the entire release because his work wasn't coordinated with the feature-based teams?\nProgram management is the art of coordinating several sub-projects to a common objective. Until the parts are assembled into the whole, the parts have no value to the organization. Agile approaches help manage risk for projects, and can scale to programs. We'll experience risk and coordination as a program.	Project Management	Tutorial	2010
20105254	Accelerating Your Organization's Agile Adoption	As more organizations adopt Agile practices they want to rapidly extend these benefits across their enterprise.  However, agile adoption is challenging and teams can often start regressing backwards in the 'J-curve' effect after a few iterations. Using a skills maturity framework, organizations can assess where they are and accelerate their agile adoption avoiding the costs associated with the 'J-curve' effect.   Participants will have an opportunity to practice by measuring their own agile maturity and working through some real-world problem scenarios with their fellow participants.	Adoption	Workshop	2010
20105776	Using Scrum to Complement Existing Organizational Transformation Methods	Like many other large-scale organizations, we have engaged in organizational transformation by using and adapting recognized change management principles.  While relying on John Kotter's eight essential principles led to some dramatic successes, we found that our own inconsistencies in how we engaged stakeholders and demonstrated short-term wins impacted the level of success. In this session, we will discuss how Scrum complements the eight steps of transformation, provide practical guidance in how to leverage Scrum and provide project examples that demonstrated the value of the integration.	Adoption	Talk	2010
20105752	Energize Your Agile Community with Roundtable	Do you remember the energy from the early XP/Agile conferences? Want this same energy in your local community or inside your company? Don't wait for someone else to do it - begin a roundtable today.\n\nStarted by Alistair Cockburn, the Salt Lake Agile Roundtable over 13 years has produced a thriving local Agile community, strong Agile teams at local companies, major Agile conferences, and two Gordon Pask award winners. In this session, you'll see and try the practices that work for us. You'll experience the unique feel of our user group and leave ready to start or re-energize your community.	Adoption	Workshop	2010
20105798	Savoring the spirit of Scrum	Laws are general, concrete but not comprehensive. Thus a judge must interpret it for every trial. Judges interpret by referring both to cases and the spirit of the law. Scrum has a clear and concise definition, but in order to use it in real life we need to interpret it depending on the context. There's the equivalent to case law: case studies and good practices. We'll try to grasp the often forgotten spirit that lives and breathes at the core of any healthy Scrum story. Via interactive activities we'll take a sip of the spirit, absorbing with our souls and bodies the essence of agility.	Adoption	Workshop	2010
20105283	Making feedback work in your teams	One of the key values of XP is Feedback. While teams and software development organisations focus on systemic issues and technical improvements for their Agile journey, the importance of sharing feedback amongst each other somehow falls by the wayside. Feedback in peer groups allows us to rapidly move from forming, storming and norming stages, to performing. On Agile teams that are focussed on communication, this is key to success. In this workshop, I will share with you how we approach feedback at my workplace and explain some of the principles we use to give and receive feedback every day.	Building High Performance Teams	Workshop	2010
20106379	A graphical approach to improve the cost/benefit ratio of user stories	User stories are a great way to capture requirements and are successfully used in many projects. Every user story comes with a business value and a effort needed to implement the story, usually in software. Since there are almost always more requirements than budget (or any other limiting factor like time, available resources, etc) decisions have to be made on  which stories to pick up in which order. Usually the stories are prioritized by the product owner and put on a textual product backlog. We will show how a graphical overview will stimulate the right side of our brains. 	Product Management	Talk	2010
20105942	Getting Managers and Agile Teams Out of Each Other's Hair	One of the most talked about and least well understood concepts in Agile is the "self-managing" team. This session will provide a new perspective on self-management by examining the external roots of the practice and by taking a bottom-up look at what it is, the benefits, and how it works.\n\nWe'll see how twelve widely adopted Agile practices contribute to self-management by reducing and/or redistributing traditional management activities. These practices provide a framework for delegation, communication and coordination; and encourage team ownership, commitment and accountability.	Building High Performance Teams	Talk	2010
20105804	Learning is key to Agile success: Building a learning culture on your Agile team	"Tell me and I'll forget; show me and I may remember; involve me and I'll understand." - Chinese Proverb\n\nAgile teams that rapidly learn and apply new-found skills become increasingly adept at embracing change and delivering value. Team members feel more fulfilled, motivated and valued. And they have way more fun!\n\nIn this session you will learn about agile learning! Learn to recognize learning moments and put in place effective learning patterns tuned to your team and context. Learn how to build and sustain an effective learning culture on your agile team.	Building High Performance Teams	Talk	2010
20105243	Lean and Agile: Roommates, Married, or Twins?	What is Lean?  Is Lean the next "big thing" I need to learn -- or is Kanban enough? Is Agile still relevant? To add to the confusion, there seem to be several different interpretations of Lean Thinking in the Agile community! In this panel, four Agile/Lean thought leaders and practitioners will discuss the essential elements of Lean and its relationship to Agile. Our panelists will share their ideas about Lean, show similarities they see between Lean and Agile, and help attendees understand (and perhaps reconcile) any differences.	Organization & Enterprises	Panel	2010
20105643	Coaching Agile Teams: Using Silent Work Techniques to Get to Astonishing Results	The word "respect" tops the list of both the Scrum Values and the XP Values. In both, the agile definition of respect comes through loud and clear: to hear ideas from everyone on the team because diversity of ideas yields astonishing results. Yet, every team I've coached seems divided into two camps - the dominant ones and the quiet ones. Just talking and brainstorming doesn't level the playing field. But "silent work" does. Come to this session to practice techniques you can take home so that your teams become free to create more and better results (faster, too) through silent work.	Coaching Agile	Workshop	2010
20105420	What I learned from burning my parents' house down!	July 1991 Yves` parents go on holiday. Leaving him (19 years old) to guard their house.\n\n1 august 19 hour 36 minutes: Yves' parents house burns down.\n\nIt was yves' fault. And yet it was the best thing that happened to him till 2002. If you want to know why, come to our session. \n \nThis interactive talk will show you why a crisis is a good thing. \nWe make the link to agile transitions and how coaches can use a crisis.\n\nWhy do people change? \nDo we consider their interests when making a change?	Coaching Agile	Talk	2010
20105327	Agile Coaches Dojo	Come to a Dojo for Coaches! Take part in a unique interactive session that builds on the popular Dojo format used by agile developers. Instead of coding problems, we'll be exploring typical challenges faced by an Agile Coach. You get to offer your own counter-moves and also hear how other experienced coaches would tackle the same problem. What you'll see is more that one way to approach coaching that reflects the personal style of each agile coach and their reaction to a given context.	Coaching Agile	Workshop	2010
20105682	The Task Commitment Game	The Task Commitment Game helps team members allocate their time across tasks in an iteration. Designed to be played during the iteration planning meeting, this game specifically helps teams whose members are still working in narrowly defined skill sets. Attendees will play the game as members of a team who don't have enough available hours in the iteration to get all the tasks done. After the game is complete, two additional variations will be shown: an online version for distributed teams from Innovation GamesÂ®, and a minimalist version for the busy or budget-constrained.	Leadership & Culture	Tutorial	2010
20105216	Virtual Reality Meets Scrum: A Senior Team Moves from Management to Leadership	The role of managers in a Scrum organization is a topic of high interest with almost no research. Changes in management roles and behaviors a Scrum environment were evaluated in a rapidly growing, social entertainment and gaming company in Finland. Sulake introduced Scrum in 2006 and within 6 months institutionalized Scrum across the organization. The biggest challenges for managers were keeping up with the team and learning to "let go" and stop micro-managing the teams. The experience of the managers and their transition in roles  and perceptions of the teams will be described in detail.	Leadership & Culture	Talk	2010
20105197	Learning Best Approaches for your Brain	Do you mentor, coach, teach or just help other people? Do you wonder why, after what feels like your greatest teaching moments, some people still don't get it? Neuroscience has started to provide us with insights into what happens in the learner's brain when we're teaching. Learning is really about building and reinforcing existing neural networks. Instead of providing a lot of new ideas out of the blue, we need to understand the learners existing context and work with that. Instead of focusing on mistakes and errors, we need to focus on what good solutions look, sound and feel like.	Leadership & Culture	Workshop	2010
20105662	Death by Scrum Meeting	There is no better way to gauge an organization's culture than to watch its meetings - usually dull and lifeless. Meetings are often cited as one of the most wasteful activities in business - yet Scrum demands more meetings more often. Engineers find themselves micro-managed with little time left to get "real"work done. This session provides leaders a whole new perspective and techniques for Scrum Meetings in building high-performing disciplined teams through focused, active, engaged, visual and time-boxed facilitation techniques to take teams from DOING Scrum to OWNING Scrum!	Leadership & Culture	Tutorial	2010
20105859	A holistic approach to scaling agile at Salesforce.com	Salesforce.com is 100% agile across our 1000 person Technology & Products organization.  Our brand of agile, Adaptive Delivery Methodology (ADM) enables our 100+ teams to collaboratively deliver high quality throughput reliably 3 times a year to more than 67,900 customers worldwide. Scaling while remaining true to agile values is incredibly hard.  In the 3 years since our rollout, we have scaled ADM successfully by approaching scale holistically--considering impacts to people, process and technology.  ADM encourages collaboration and visibility as opposed to centralized control and exclusion.	Organization & Enterprises	Talk	2010
20106233	30 Dev Teams saying: "Bye, bye Scrum. Hello Kanban."	Is your team thinking about moving to Kanban? Do you want to know the benefits and pitfalls you may face? Ultimate Software is knee deep in a large-scale transition to Kanban.  We have moved 200 people (from 30 Scrum teams) to Kanban.  And we have collected over a year's worth of data from every team. These teams didn't just move to Kanban, they have also merged into much larger development teams.  Each team has between 15 and 30 people. In this presentation I'll focus on lessons learned regarding Kanban and large teams. I'll tell you what has and hasn't worked for us.	Organization & Enterprises	Talk	2010
20105628	Achieving Chaords in Organizational Transformation	As teams aspire towards hyper-performance, libraries have materialized to guide teams along their journeys. Unfortunately when results have been good, they have not been reproducible\n\nTeams and the wider organizations that contain them are simply fractal representations of each other: simultaneously of the same design but each with greater complexity. This complexity defines the social fields describing the interrelations between individuals in the organizations. Addressing complexity through channeling social fields, we are able to direct the transformative processes with repeatable chaords	Organization & Enterprises	Workshop	2010
20105600	Scaling Software Agility: Advanced Practices for Large Enterprises	Dean Leffingwell describes how rapidly advancing agile methods are being successfully applied to enterprise-class software development. He describes emerging practices including: lean requirements practices that scale to the full needs of the enterprise, intentionally emergent architectures, achieving strategic alignment and product development flow with the Agile Release Train, a kanban system for re-architecting large-scale systems, and strategies for agile portfolio management.\n\n	Large Scale & Distributed Agile	Tutorial	2010
20106210	Mind the Gap! Principles of hyperproductive fully distributed Scrum	The author and Jeff Sutherland previously showed (at Agile2008,2009) Scrum teams using XP practices achieved distributed velocity equal to local velocity with multiple distributed teams. This was shown under extreme timezones and at large scale development.\n\nThe authors have formalized the principles & practices that are the foundation for hyperproductive fully distributed Scrum. This framework has been published as free e-book (SEE ATTACHMENT) and is the subject of this presentation. New experiences and figures on recent projects will be shared to illustrate the pitfalls and success points.	Large Scale & Distributed Agile	Talk	2010
20106330	Being There Without Being Present: Distributed Teams and UX Design	Experience design is expanding as product development teams disperse. No longer will experience design occur in one open, physical room. Instead, distributed teams will design as well as develop...and they need techniques, guidelines and tools to do so. Development has already become a multishore activity. Yet how do we ensure that distributed teams also incorporate experience design as an integrate part of their approach and outcome?\nThis session provides principles and guidelines to enable teams to design in a collaborative yet distributed fashion.	Large Scale & Distributed Agile	Talk	2010
20106045	Scaling Scrum -- Practical Techniques for Large Organizations	Have you successfully implemented Scrum on your team, and are hungry to expand?\nAre you finding the pain of scaling your Scrum deployment too much to handle?\nIs the Scrum of Scrums concept not working out the way you thought it would?\nHas someone told you that you need to roll out Scrum to a team of 300+ developers?\nHave you had success with scaling Scrum, and want to share what you've learned with others?\n\nIf so, join us for this interactive session where we explore three different experiences scaling Scrum in large organizations.	Large Scale & Distributed Agile	Talk	2010
20105217	Scrum Metrics for Hyperproductive Teams: How They Fly Like Fighter Aircraft	Scrum teams use lightweight metrics like story points, the burndown chart, and team velocity. The inventor of Scrum was a fighter pilot and used the burndown chart to help teams land a sprint properly. Recent work with hyperproductive teams shows they are like modern jet fighters in two ways. They have engines that produce velocity--alignment of the team, and team spirit. And they carefully measures aspects of performance to make slight adjustments in flight. Failing to constantly adjust the flight of the team can result in a hyperproductive crash into waterfall performance. \n\n\n	Team-Room Agile	Talk	2010
20105960	Pairing Games as Intentional Practice	Even experienced agile developers sometimes struggle with pair programming. Pairs may have trouble agreeing on a direction, or may find that one person has taken over. Yet specific advice about pair programming is hard to find, and we may not even know which skills we lack.\n\nAs a group, we'll build a model for thinking about pairing skills. Then we'll suggest some games--constrained formats for short pairing sessions--that can act as intentional practice for these skills.  After trying out a few games together, we'll share our experiences and try to invent some new ones.	Team-Room Agile	Talk	2010
20105698	Object-Oriented Design and Mock Objects - for Non-Programmers	We're not shy about saying that testers, programmers, and everyone else in the team needs to become fluent in the business domain. But we're blasÃ© when programming practices and programming knowledge are the exclusive province of the programmers. That hampers communication and hurts teams. \n\nBy simply having people stand up, move around, and speak messages to each other, this workshop will show anyone who attends how advanced object-oriented programming and test-driven design works. \n\nAlthough tailored to non-programmers, programmers may find it useful too.\n\n\n	Team-Room Agile	Workshop	2010
20105167	Agile Architecture Retrospective - Inspect-n-Adapt Tool For The Enterprise	Agile teams perceive architecture-centric approaches as paper-driven, heavyweight, insufficiently focused on business results, and delivering systems that align with standards not relevant in the context of fast changing business challenges.  \nEnterprise architects often criticize Agile methods as they perceive them as lacking architectural control or governance.  \nSoftware Architecture Retrospective is a thinking tool for an enterprise to blend reflections on architecture with agile delivery for balancing quick term business goals with long term architecture initiatives.  	Team-Room Agile	Workshop	2010
20105249	Code Retreat	Code retreats are happening all around the world. What are they? Software craftsmen from all over get together somewhere in the world on a Saturday and do several iterations of pair programming and test-driving Conwayâ€™s Game of Life. For this session, we will only have time for a single iteration, but that should be enough to give you the code retreat fever (and if you catch it, weâ€™ll continue in open space afterward). Please bring your laptop and dev environment of choice.	Technical Edge-Development Praxis	Workshop	2010
20105816	Developer's Guide to Feedback Driven Development	A new approach for building software has emerged from the world of startups. Steeped with agile and lean principles, these ideas are being championed by Eric Ries, Steve Blank, Dave McClure and others.  Feedback Driven Development, as I am calling it, is one facet of these ideas. As the name implies, we use the interaction of users and their activity to determine if our software is delivering value. This talk will cover what it is, how you use it in the development cycle, explore several implementations and discuss the realities of integration. 	Technical Edge-Development Praxis	Talk	2010
20105832	Zero to Clojure in 90 Minutes	We all know that learning one new language a year is a great goal for improvement as an Agile developer who wants to be more effective. However, it can be a bit intimidating to get started in a new language, especially one that looks very different from what you're used to. \n\nMany developers are responding to change (in a macro sense) by learning Clojure, which brings together the expressiveness and power of Lisp, fantastic concurrency semantics, and the rich libraries of Java. It allows for great simplicity of code, which translates to fewer mistakes and more working software.	Technical Edge-Development Praxis	Tutorial	2010
20106409	How to screw up Dependency Injection and Inversion of Control	Dependency Injection is a technique that has moved out of controversy, but it continues to cause problems when introduced into codebases.  Some consider it a basic principle of good OO design (separating concerns), while others find it makes their code "magical", creates confusing code flow, and obfuscates entry points.  This session examines the worst practices and patterns to come out of the IoC/D-I tools, their limitations, and their communities.  Focusing on Google Guice and others, we examine how and why some of these practices create worse code, and how such errors can be corrected.	Technical Edge-Development Praxis	Tutorial	2010
20105670	Ten tips every agile team should know about Performance testing	This session covers 10 tips successful agile teams have used to ensure their success. Learn performance anti-patterns like "Too green for his own good" and "Scrooge" and how to spot them before it is too late.  Learn how to prevent problems in the first place using techniques like "Test early, test often" and "Listen to your users" (Yeah, that one is obvious). You will even get to play a fun game that will teach you spot some performance problems like a pro.	Testing/Specification Practices	Tutorial	2010
20105865	Experiences on test planning practices in Agile mode of operation	The presentation describes how the test planning practices have evolved in our large scale organization when moving from the waterfall style software development towards Agile ways of working. \n\nIt discusses the different aspects of the test planning: Which activities are required in the high level release vs. detailed sprint planning? What is the difference between the team level planning vs. planning required across the teams in a large organization? Examples of useful practices are presented as well as experiences on things which have not worked so well. \n\n\n\n\n	Testing/Specification Practices	Experience report	2010
20105841	Turning mountains into molehills: A story of QA 	Dave Haeffner had just changed jobs within his company. Completely shifting his career paradigm from Systems Administration to Quality Assurance. If only he knew the challenges that faced him in the year ahead. He might get excited, or maybe, he would have thought twice.\n\nThere was very little he knew about his new role but that didn't worry him. The mountainous challenges that faced QA is what kept him up at night.\n\nJoin him as he retraces his steps, sharing lessons learned, how he helped change QA from the bottom up, and how he turned those mountainous challenges into molehills.	Testing/Specification Practices	Experience report	2010
20105953	Testing Olympics! Teams Compete to Solve Agile Testing Challenges	Join us for team-based games and compete to solve the agile testing challenges we all face. Do you still have separate "dev"and "test teams"? Mired by mini-waterfalls? Testing at the end of the release? Buried by "manual monkey scripts?"We'll fearlessly tackle these and more in a fun and humorous series of improv sketches, root-cause roundtables, and "what if"scenarios. We'll learn from each other in a friendly competitive environment as teams vote for the best ideas. You'll leave with fresh thinking to resolve or prevent these testing dysfunctions on your agile teams.	Testing/Specification Practices	Workshop	2010
20105496	Why Your Selenium Tests are so Dang Brittle, and What to Do About It	If you are writing automated through-the-GUI tests for a web application, you are in danger of creating tests that are more expensive to maintain than they are worth. With well-factored Selenium RC tests running in Junit or TestNG, you can keep your abstraction layers or "Lingos" -- small bounded bits of slang for discrete parts of the object model -- separate, thereby reducing the maintenance costs of your tests, and improving your sanity. \n\nPrerequisites include experience with Java or C#, and ideally some basic OOD familiarity (inheritance, composition, encapsulation, polymorphism).	Testing/Specification Practices	Tutorial	2010
20105880	The User Feedback Two-Step	One challenge of Agile development is to integrate UX work with the fast iterations of an Agile project. \n\nThe User Feedback Two-Step is a best practice UX team members perform to juggle their work with developers and with end-users. Nimble players can be ready with designed and tested user interfaces when developers need them, and can implement user acceptance testing during iterations. \n\nWe use a simulation game to give participants the experience of working in such a project-both as developers and as UX experts showing how to plan stories and schedule work into coherent iterations. \n	UX/UI	Tutorial	2010
20106058	Agile Transition: How the UX Research Team Did Not Fall Off the Bandwagon	This presentation will cover the evolution of a centralized user experience research team as the engineering organization transitioned from waterfall to an agile development process. The experience report will discuss how a team of three user experience researchers was able to adapt to changes in the development process and how we were able to work with over 10 scrum teams to deliver usability results that impacted the teams' product backlogs.  Concrete examples will also be presented to illustrate how the UX research team was able to evolve with the rest of the engineering organization. 	UX/UI	Experience report	2010
20105773	Making Usability Testing Agile	We all know that testing designs with users is an important step in iterating toward a great product. But using traditional testing methods in a fast-moving agile environment falls short, as our UX team has discovered. To speed things up, we took advantage of resources our company already had - including support staff to recruit users, the customer relationship manager to track participants, and web conference tools to do remote testing. We'll share our failures, successes and challenges as we have modified our methods to be more in sync with our product owners and developers.	UX/UI	Experience report	2010
20106178	Integrating design practices for small agile teams on a budget: You can do it!	You're a small agile dev team with a great idea and a tight budget. You've heard about user research, usability testing, etc., but haven't yet successfully integrated them into your workflow. Your attempts have challenged your budget, your assumptions, and the very agile practices that have served you so well.\nDon't stress. We'll discuss some antipatterns that have emerged, exposing how we can get in our own way in our quest to develop great software. We'll then share a range of core design practices and describe strategies for integrating them into a typical small team's agile workflow.	UX/UI	Talk	2010
20106321	Everything else for the UX Team of One	Whether you're an "innie" or an "outie," we've all had  that  project: The one where there's a lot of "must-dos" but no budget; The one where you have to scope and estimate without requirements; The one where you need to wear about 6 different hats while working on 3 different projects-and it's a project for a client you want to keep.\n\nIn their talk, Michael and Joe will share their experiences managing business development, project management, design and execution, and post-mortems for sole UX practitioners. We'll laugh, we'll cry, we'll share our successes and, er, learning moments.	UX/UI	Talk	2010
20106179	Nano-incremental Development - Elephant Carpaccio	If breaking features down to small tasks is good, what happens if we crank breaking features down to 11? This is a workshop for both product owners and programmers. We will mix into groups of programmers and analysts then every group will be working to implement a small program. Each group will  decompose the problem into initial requests, then the programmers will deliver those features in five 10-minute iterations, with the analyst adjusting requests on the fly. Programming language and environment agnostic, but programmers should bring a laptop with their preferred environment setup.	Team-Room Agile	Workshop	2010
20105200	Agile Mythbusters: Reality over Rhetoric	There are many myths regarding agile software development, such as agile has been adopted by the majority of teams, that agile approaches are more effective, that agile teams don't do up front modeling, that agile teams produce less documentation, that TDD is commonly practiced, and so on. Some of those myths are true, some false, and some we're not so sure about yet.   This talk summarizes the results of 4 years of industry surveys concerning the adoption and effectiveness of agile techniques. Let's cut through the dogma and instead focus on what agile practitioners are actually doing.  	Enterprise Improvement	Talk	2010
20105527	Leading a Self-Organizing Team	One of the challenges of agile is coming to grips with the role of leaders and managers of self-organizing teams. Many go to the extreme of refusing to exert any influence on their teams at all. Others retain too much of a command-and-control style. Leading a self-organizing team can be a fine line. In this session you will learn the proper ways to influence the path taken by a team to solving the problems given to it. You will learn how to become comfortable in this role. You'll understand why influencing a self-organizing team is neither sneaky nor inappropriate but is necessary.	Building High Performance Teams	Tutorial	2010
20105288	What do Agile Executives and Leaders Do?	In some circles agile executives and leaders are admonished to buy pizza and get out of the way. In others they are asked to be supportive of self-organizing teams. But leading agile organizations requires more. There are specific activities that help build agile organizations that can weather business turbulence. This session will explore those activities that an agile leader or executive must "do," including: revising performance measurements; facilitating self-organizing teams; developing strategies for operational, portfolio, and strategic agility; and assessing how agile to be. 	Business Transformation	Tutorial	2010
20105515	Delivering Business Agility: Earning the Agility Dividend 	Agile is spreading into the business world. We know traditional business models and slow moving bureaucratic processes don't work any better for business than the waterfall process works for software development. Award winning CIO and mentor Michael Hugos presents case studies from his own experience illustrating effective use of agile practices to develop new products and redesign business operating procedures. See how companies adopting agile practices earn higher prices for their products and respond effectively to continuous change. (Presentation based on his book - Business Agility) \n\n	Business Transformation	Tutorial	2010
20106277	How to Relate 'Business Value' to Making Money with Agile	One of the central tenants of Agile practices is the emphasis on customer value. That's great, but if you're a product company, focusing on business value alone isn't enough. You need to convert business value into actual money flowing into your company. This workshop will provide a method for relating business value to revenue for major features to be delivered at the end of a release. We will explore themes between a Business Model Framework and a method for Prioritizing Backlogs for Profit to provide attendees with the tools to relate the concepts to their products and services.	Business Transformation	Workshop	2010
20105241	The Big-Ass View on Competence and Communication	Agile team members create their own rules, based on constraints imposed by the environment. But something else is needed for good results: some call it discipline, craftsmanship, or competence. Traffic management teaches us that there are 7 approaches to achieving competence in a self-organizing system. But competence also follows from organizational structure. Organizations are small-world networks, and people are a very diverse bunch of connectors. From network and systems theory we can learn how to use structural patterns to our advantage in growing a competent agile organization.	Organization & Enterprises	Talk	2010
20106306	Introducing Lean Startups: Customer Development Before Product Development	In the world of technology startups, there are winners and losers. Winning startups discover the right product to develop before running out of money.\n\nIn this introduction to Lean Startup theory, Kevin Taylor leverages his experience founding two successful technology companies. We discuss the process of discovering the right product to develop by first discovering the right customers. We examine multiple tools and techniques to iteratively develop customers and determine what their needs are before inexorably committing to a specific product development path or feature set.	Business Transformation	Tutorial	2010
20105625	Institutionalizing Scrum	With its growing popularity, Scrum is being applied in a number of large and complex organizations. Many of these face challenges leading to the situation where Scrum faces the temptation of "institutionalization". It is changed, tempered, or adjusted. Perhaps as a temporary measure, or simply to align Scrum with other processes, or as an adjustment for the circumstance. What are the trade-offs when Scrum, a trans-formative process becomes part of the institution? Join to facilitators who will argue the pros and cons of this situation and invite the audience to participate in the discussion.	Project Management	Other	2010
20106137	Turning Horses into Zebras:  A firsthand account of an Agile transformation	Witness firsthand accounts from the front lines of a successful Agile transformation. \n\nIn 2009, Gap Inc Direct, the online division of Gap, Inc. made a commitment to extend their Agile software delivery practices to their Columbus, Ohio development campus where teams provide solutions for online order fulfillment and call center operations.\n\nLearn the hidden truths, best practices, and lessons learned from "going Agile"as you join us on our journey in transitioning from a traditional waterfall approach to high performing Agile teams in a matter of months.\n	Enterprise Improvement	Tutorial	2010
20106333	Kanban Explained: Seeing, Not Hearing Constraints	Seeing constraints, pulling value and eliminating waste is the goal of practicing kanban. This session is for those who are not familiar with this practice. In addition to understanding how to implement kanban, we will also discuss cross team signals, team signals & retrospective boards.  I will use physical boards to illustrate the concepts.\n\nIntended audience is for those who want to learn more about pull based practices, continuous flow and self organization.  Maintaining flow is the goal, while allowing time to deliver AND allowing time for continuous improvement at a sustainable pace.\n	Enterprise Improvement	Talk	2010
20105646	Case Study: Successful Agile Transformation at Gale - We Burnt the Boats	By any standard, the ongoing year-long, multi-team agile transformation at Gale is an enormous success. We have gone from average project durations of 18 months to average durations of 6 months. Production releases had hundreds of defects before we began, and now have handfuls. We are earning ROI on our software products far faster, while we garner awards for innovation and user value. Come hear how we did it: our challenges, our successes, our setbacks, our wins and losses. Come hear how Big Bang "Enterprise Agile Tranformation"is alive and kicking, fully backed now by our CEO.\n\n	Enterprise Improvement	Tutorial	2010
20105375	Value over Velocity: From Feature Building to Value Delivery	Introducing an approach to defining and measuring business value that is simple, intuitive and built on 30 years of success. Forget user stories, points, velocity and all the typical agile terms associated with business value. Instead, learn how to clearly quantify business objectives and measure value delivered through a combination of lecture and hands-on exercises.\n\nThe approach combines the principles of Evo with the practices of Scrum to enable teams to clearly define and report the value they've delivered each  release to stakeholders in terms they've defined!\n	Expressing User Needs	Talk	2010
20106354	Decoupled Requirements Pipeline	A story should not exit an iteration until it is done, but to be done at the end of an iteration, it must be ready at iteration start!\n\nBut typical agile processes often defer detailed requirements discussions and elaboration until Iteration Planning, or to the prior iteration.  This JIT approach works well for many, but often fails in complex scenarios.  \n\nA new requirements approach is needed for complex projects; this session will cover how to mature requirements in a decoupled pipeline, operating on a separate cadence from the development iterations.	Expressing User Needs	Talk	2010
20105226	Agile business analysis	This session will bring together a set of practices to help analysts support agile teams.\n\nWhere analysts sit between the business and developers they can reduce collaboration, delay information arrival and mis-direct. An agile business analyst by contrast is an enabler and facilitator.\n\nThe analyst must work with business stakeholders and the development team to ensure that information is available at the right time and fidelity. Information arriving too early can be wasteful due to depreciation while information arriving late increases the risk of re-work.\n\n	Expressing User Needs	Workshop	2010
20105210	Beyond User Stories: Identifying and Defining Missing Links in Your Product Back	How comprehensive is your backlog?  Does it include nonfunctional requirements?  These are often 'missing links' in a product backlog. A holistic set of product requirements includes quality attributes, external interfaces, and design & implementation constraints. Some nonfunctional requirements don't easily fit into the user story canonical format. We will survey practical techniques for agile teams to represent nonfunctional requirements and provide practice with a sampling of the techniques so you can understand how nonfunctional requirements are vital link in your backlog.	Expressing User Needs	Tutorial	2010
20106014	How to Own a Really Big Complex Product	Product Owner is the most misunderstood and misapplied role in Scrum. The concept barely works on small products... it almost always fails in larger enterprises where many teams work together on complex enterprise deliverables.  We hear about people implementing product councils and product owner teams but that seems to miss the point of having single wring-able neck. This talk explores the role of Product Owner and breaks down just what it takes to do this role well. We'll explore a capability driven model for scaling the PO role and keeping us all focused on building the right products.  	Product Management	Talk	2010
20106006	Agile in the Real World	In its pure form, Agile is a simple theory -- a prioritized backlog, iterations, collaboration, scrums, etc. Practicing it in its pure form in the real world of enterprise software is challenging. There are many other business demands that affect how we practice Agile software development. These constrain and increase the responsibilities of the scrum team and affect velocity as well as how and when software can be released. This necessitates proper planning in recognizing these realities up-front.	Product Management	Talk	2010
20105531	Agile Inception: Approving Agile Projects in a Waterfall World	Whether you're working on a new development effort or the next release of an existing system you need to get your project approved. Many organizations have embraced agile but still follow a traditional project-approval process requiring a complete, up-front project plan including dates, costs, and resources. This tutorial focuses on strategies for overcoming this disconnect of "build in an agile way but still provide all of the same waterfall-like artifacts to get your project approved."	Product Management	Tutorial	2010
20106120	Bringing Agility to the PO Team - Scaling or Failing in an Enterprise Transition	In enterprise situations we have a more complex upstream than a single Product Owner, but rather a Product Owner Team. But a bad PO team can sink an Agile transition.\n\nIn this session we will talk about how we can bring Agile practices and tools to the upstream processes and how they can help us achieve better agility and visibility outside the development team. .\n\nWe will explore how POs and Agile Project Managers can use Kanban, Retrospectives and other agile tools and practices to build better PO Teams. We will look at metrics and visibility tools, and discuss flow in these processes.	Product Management	Tutorial	2010
20106307	Save 76% - Joys and Pitfalls of using Virtual Worlds for Remote Teams	Travel budgets are under pressure.  Traditional 2d collaboration tools help, but may not engage our minds or convey as much information as 3d virtual worlds.  Many companies, universities, and government bodies are using virtual worlds for collaboration.  But what are the pitfalls? This talk shows how 3d tools were used to save 76% of event costs, as well as how to conduct Scrum in 3d.	Project Management	Talk	2010
20106123	How an Agile Project can Fail; and what to do about it.	This experience report is about how "agile"projects that are poorly implemented can turn into a worse nightmare than old traditional projects. This fixed-price project had lots of customer feedback and changes. Scope creep was evident but "Agile says be open to feedback."The project started losing lots of money and it was barely halfway done. The project illustrates a great account of how literal and immature implementations of Agile may lead a project to failure and how management can turn things around by the proper adoption of agile practices.	Project Management	Experience report	2010
20105794	Estimation Games - Play to create and destroy good estimates	Estimation is associated with Fear, Uncertainty and Deathmarches. Most of us would rather not estimate. Yet, sometimes we do need estimates and commitments, even on "estimation-less" projects.\n\nPlay a series of estimation games to experience how different techniques deliver very different results. Learn a few simple rules that turn you into a reliable estimator.\n\nBut correct estimates aren't enough. See what else is required to deliver on your promises. Learn to deal with the destructive games people play with estimates.\n\nEstimating can be Fun, embracing Uncertainty and Delivering.	Project Management	Tutorial	2010
20105674	Agile Projects - Beginning with the End in Mind	Too often teams simply dive into Agile projects-allowing the iterative and emergent nature of agility to guide\nthem through the project. Sometimes this works well, often it can fail because you're not well "Connected"to the\n "Business". This sessions examines how to consistently get your Agile projects off to a strong beginning. We'll explore how to create a project charter to guide your agile project; the keys to forming a solid agile team; and how to create a plan that allows your stakeholders to understand where you're going.\n\n	Project Management	Workshop	2010
20106365	PDCA: Moving Beyond Simple Inspect and Adapt	Plan-Do-Check-Act (PDCA) is a Lean discipline that moves beyond inspect and adapt of Agile team-level processes. At a corporate level, PDCA provides guidance for strategy as well as problem-solving work. In 2009, I led Rally's move to PDCA for the company's strategy process at both the annual and quarterly levels. My primary guide was Pascal Dennis's "Getting the Right Things Done". In this experience report, I share Rally's PDCA first year of adoption: where we started, how this impacted our corporate behaviors, and where we are now. 	Organization & Enterprises	Experience report	2010
20106213	Unleash the Agile power: bridge the Gap between Development and Operations.	Enterprises traditionally distinct Development focusing on the creation of software and Operations focusing on the infrastructure. A natural gap between the two is caused by their key interest: change versus stability. \n\nIntroducing Agile in Development confronts Operations with more work due to increased productivity and release frequencies. The power of Agile is not unleashed. \n\nA case study at KLM/Air France shows how this impediment was overcome and huge savings were achieved by implementing a self-service change control process for Development still under full control of Operations.	Organization & Enterprises	Experience report	2010
20105685	Distributed ScrumMasters & The Art of Digital Facilitation	ScrumMasters for distributed teams need help.\n\nAs more corporations offshore/nearshore their development efforts, ScrumMasters bear the burden of facilitating distributed Scrum or Agile without being prepared for its unique challenges. While ScrumMaster Certifications and local user groups do provide guidance, they are often focused on collocated scenarios. \n\nIn this talk, I will convey my personal experiences of being a ScrumMaster for geographically distributed teams and explain what steps you can take to be successful.\n	Adoption	Talk	2010
20105728	Look before you leap - Agile readiness assessments done right	A common approach to help get clients started with Agile is to undertake a readiness assessment to:  \n1. Understand challenges and goals  \n2. Understand the environment and technical practices  \n3. Decide what techniques (Scrum, Kanban, collocation, etc) might be suitable  \n4. Build a plan with them of what a transition to Agile might look like  \n\nUnfortunately there is very little written about how to go about this. Hence, this knowledge-sharing workshop to define this better.\n\nThe workshop involves active participation so come ready to share your experiences and learn from others.	Adoption	Workshop	2010
20106055	Kanban and Scrum - making the most of both	There's a lot of buzz on Kanban right now in the agile software development community. Since Scrum has become quite mainstream now, a common question is "so what is Kanban, and how does it compare to Scrum?" Where do they complement each other? Are there any potential conflicts? Can an organization combine these techniques?\n\nThe purpose of this session is to clarify Kanban and Scrum by comparing them, so you can figure out how these may come to use in your environment. \n\nBased on the book Kanban and Scrum - making the most of both.	Adoption	Talk	2010
20105640	Continuous Creativity for Agile Teams	Creativity can manifest in several ways including creation of something new, refinement of something that exists and problem solving. How do we support, enable and enhance the creative abilities of Agile teams? There are many ways to shape the work environment for greater creativity. We will present a summary of the literature that describes how creativity can be enhanced by providing a safe, nurturing environment, enhancing group interactions, pacing activities that utilize different sensory modes and trusting in the power of subconscious integration.\n	Building High Performance Teams	Talk	2010
20105112	Project Vital Signs	In order to foster trust and credibility between a project team and its stakeholders, the team has the responsibility to clearly communicate the health of the project. As the leaders of a project, we can apply the metaphor of medical care and their use of "vital signs" to help form a holistic view of the state of the project. Come learn the five "Project Vital Signs", their associated quantitative metrics and how to enable a team to effectively use them as a tool to diagnose and treat project health problems.	Project Management	Talk	2010
20105946	The team manifesto	Since 1998, I have been a member and leader of volunteer teams. For self-organised and self-motivated teams, agreeing on a mission statement, a 'code of conduct' and a shared mindset and values are indispensable to succeed. \nTeam collaboration is at the heart of agile, and I found the skills I acquired as a volunteer invaluable in my daily work life. What can we learn from techniques successfully used by volunteer teams? In this workshop, I will introduce team building tools and discuss how a cross-disciplinary 'team manifesto' can improve collaboration, satisfaction and quality. 	Building High Performance Teams	Workshop	2010
20106397	Your Team, Your Freedom, Your Responsibility	"OK, find a partner." In high school, did that phrase fill you with dread? And yet here we are bragging about our self-organizing agile teams: high-performing, highly-collaborative, and fun. The basics of the self-organizing team are easily accepted: the team that does the work says how big it is and decides how to get it done.  The harder part is that with that freedom comes responsibility.  Only by accepting responsibility do we turn the engine on for real.  What are those responsibilities?  Transparency, Commitment, and Courage	Building High Performance Teams	Workshop	2010
20105385	Coaching Introverts: Building on Their Quiet Strengths	In an Agile workplace it certainly seems that extroverts have the run of the roost. It's loud. It's interaction-intensive. It's focused on rapid results.  The introverts on your team can end up feeling excluded, overlooked, or simply misunderstood.\n\nWhat's a coach to do?\n\nThis session explores how knowledge of Myers-Briggs personality types can help you decipher the interactions & friction within your team. Building on Jennifer Kahnweiler's Four Ps we'll delve into ways to bring out the inherent leadership potential of the introverted agilista to make their voices heard.\n	Coaching Agile	Tutorial	2010
20105965	Developing ScrumMaster Excellence	At salesforce.com the ScrumMaster role is filled by Development Managers, QA Managers, Program Managers, and individual contributors. Because of these dual roles and differences in background, it is common for people to be confused about the expectations of a ScrumMaster. To increase ScrumMaster effectiveness and help the organization distinguish great ScrumMasters from good ScrumMasters, salesforce.com developed a ScrumMaster competency model.  In this session we'll present the competencies, discuss how they were created, and how they are used.	Coaching Agile	Talk	2010
20105679	The Limited Red Society	When you have compilation errors and/or failing tests, you are "in the red", unable to integrate or release your code. Over the years, I've learned techniques to limit red time while test-driving and refactoring code. In this talk, we will study live Eclipse/Java programming sessions using graphs that clearly visualize red time and green time. You'll learn strategies and tactics that help or hurt our ability to limit red time and you'll gain an appreciation for the visual cues that can help make you a better programmer and fellow member of the Limited Red Society.	Technical Edge-Development Praxis	Talk	2010
20106251	The Curious, Present and Empathetic Agile Coach	Have you ever had clients who "just don't get it"? who are unwilling to change, and with whom you become frustrated over their inability to embrace Agile practices?  Do you find your advice is ignored or altered so significantly that the end result no longer seems to represent the foundational Agile values and principles?  In this session you'll discover a set of beliefs, attitudes and behaviors that are designed to help Agile coaches remain grounded in their convictions while also being curious, empathetic and adaptive to their client's toughest circumstances.	Coaching Agile	Workshop	2010
20105365	Learn how to accomplish more with the Quadrants of Effectiveness Game	You know which agile practices will move your business forward. However, there's no time to actually make it all happen. Whether you're introducing agile practices, you're a customer aching for new features, you're trying to keep your clients happy or you just want to get some work done, The Eisenhower Method (from Covey's "7 Habits of Highly Effective People"? is a simple yet powerful technique to become more effective and getting the right things done at the right time.\n\nJoin us for the Quadrants of Effectiveness board game to learn and practice this method. Fun guaranteed! 	Leadership & Culture	Workshop	2010
20105713	Manager as Work System Designer: 13 Essential Questions 	Its 60 years since Deming said that the biggest problem with many companies is management that is off course. Despite recent interest in applying Lean concepts to software, not enough has changed.  \n\nWhy?\n\nWe think of managers making decisions, setting priorities, organizing work, keeping budgets, hiring, and mentoring people. What we've overlooked is a manager's role as designer. Managers are designers of the experience of work and of systems to produce valuable products.\n\nAs designers, we need to ask and answer questions that will help us create those experiences and systems. 	Leadership & Culture	Talk	2010
20105799	Tackle Culture or Face Failure	Are you thinking about trying agile approaches? Do you have a transition underway? Is your team or organization trying to become agile, but been less than successful thus far? A foundational implication - and biggest potential roadblock - of the agile manifesto is culture change.  \n\nTo be successful with agile and especially to scale, you must go beyond technical practices and simultaneously tackle culture changes. This session shows why this is so, introducing an easy culture model and providing you the opportunity to try out two culture tools to help you plan and overcome hurdles.	Leadership & Culture	Tutorial	2010
20106086	Leading Individuals and Teams with Situational Leadership	Individual and team performance varies by the competence and commitment with the task at hand.  Leaders must be adept at diagnosing situations and versatile in applying the matching leadership style to improve the individual's or team's performance.  Leaders at all levels (functional leads, scrum masters, agile coaches, managers, etc.) will walk away from this engaging workshop with knowledge and skills that will improve their leadership versatility and overall effectiveness regardless of the situation.  This workshop is based on the Situational Leadership II model developed by Ken Blanchard.	Leadership & Culture	Workshop	2010
20105218	Using Scrum to avoid bad CMMI implementations	Scrum and CMMI are often at odds with each other. Scrum focuses on the most important product issues first and supports frequent communication. CMMI promotes consistency and discipline to avoid waste and rework. This experience report covers three Agile CMMI organizations that have used Scrum with CMMI to obtain the best of both worlds. The first organization is an initial Scrum and CMMI implementation, the second organization is using CMMI to bring a failed Scrum implementation back to life, and the third organization is one of the only CMMI Level 5 Scrum implementations in the world.	Organization & Enterprises	Talk	2010
20105782	Enterprise Scrum: Creating an Agile Company	Enterprise Scrum, a fractal extension of Scrum and XP, has organized all development at Citrix Online since Jan 2009. We estimate team months, run quarterly Sprints, reassign teams, meet in weekly stand-ups. We start or postpone whole projects that use Scrum or Scrum-of-Scrums.\n\nNo other known companies yet use Enterprise Scrum. It provides extreme visibility and control for CXOs. It promotes agile thinking enterprise-wide, driving adoption outside engineering. It demands NPV justification and forces executives to prioritize decisions transparently. It makes us more profitable.	Organization & Enterprises	Talk	2010
20106147	Extending Agile - to finance (really?)	At Progressive Medical Inc (PMI) Value Stories are one of the most innovative aspects of our transformation.  Essentially a Value Story covers how what we are building will make or save money.\n\nA guiding principle of our projects is working on the items that create the most value first. Value stories enable us to have an enterprise view of where value is created (crossing multiple functional boundaries)\n\nWe were already formalizing our ROI process, now we have fairly granular Value Stories, with a numerical ROI, that are used to prioritize work within large multi-stakeholder initiatives.	Organization & Enterprises	Workshop	2010
20106273	Agile and the Federal Government - A Panel Discussion	The Agile Manifesto states interactions over processes, collaboration over contracts, working software over documentation, and responding to change over following a plan.  These base principals seem to be diametrically opposed to the Federal government.  Is Agile appropriate for the Federal government and is the government ready for Agile?  This panel discussion will look to address this question while taking a deep dive into the value, issues, details, and vision for Agile in the Federal government.	Organization & Enterprises	Panel	2010
20105739	Managing Growth Pains on the Way to 40 Scrum Teams	What do four global enterprises, each with 40+ Scrum teams of 5-9 people have in common? For the most part they are no different than a project with just one Scrum team. This session will show the size-dependent problems that arose in these projects and how the practices of Multi-stage Continuous Integration, small story size, collocation, cross functional teams, one piece flow, and unit tests helped to address them. Even if you don't have many Scrum teams today, learning about the growing pains will help you fine tune what you are doing today and prepare for growth tomorrow.	Large Scale & Distributed Agile	Tutorial	2010
20105291	Why you suck at offshoring...even with Agile	Offshore is never easy, but more often than not, the secret saboteur isn't someone in far off timezone, it's you and your team. \n\nThis working session will examine offshore work from the perspective of an offshore team lead who deals with onshore resources that often enable the failure of their offshore teams. The workshop will address issues commonly faced by teams working with offshore and what onshore teams can do to foster better results. Towards the second half of the session the discussion will be opened up for participants to introduce issues and develop solutions as a group. 	Large Scale & Distributed Agile	Workshop	2010
20105765	Technically Distributed - Tools and Technology for Distributed Teams	When agile methods are adopted in enterprise organizations there are often members or teams which are not collocated, or work is segregated among distributed teams. While this is often a challenge for things like technical practices (for example, pair programming) it has an even greater impact on the psychology of the team in how they interact and learn. In this session Cory will demonstrate tools and practices he's coached. These tools and practices cover three high-level categories: Development Practices, Product Management / Customer Interaction and Reflection and Introspection.	Large Scale & Distributed Agile	Demonstration	2010
20106009	Product Ownership in the Large	Most Agile practices target teams of 7Â±2. A Scrum of Scrums addresses teams of (7Â±2)Â², or 25 to 81.  What do you do when you run a project on the scale of 7Â³ (~350) or 7^4 ( ~2400) contributors?  It's no longer a Scrum of Scrums of Scrums of Scrums.\n\nI've been in the role of product owner for extended teams of 400=2400 at Microsoft. Building on my Agile 2009 talk, Agile in the Very Large, I'll discuss techniques for envisioning, planning, executing, and releasing product in an organization of this scale, while maintaining empowerment and agile at the individual team scale of 7Â±2.\n	Large Scale & Distributed Agile	Talk	2010
20105905	How long would a Stand-Up meeting take with 85 people in it?	If an 8 person standup takes 20 minutes, a logical assumption is that 85 people could take nearly 3 hours. But what if that wasn't true? At Menlo a daily standup with 85 people typically completes in 15 mins. What other beliefs might be wrong? What if you delivered an installable CD every week? If you collocate many projects together? If everyone had storycards? If sponsors had to move index cards to authorize work? If devs, designers, and QA pair full time? If you eliminate email & meetings? Join us for hands-on exercises and learn why logical assumptions about agile might just not be true.	Team-Room Agile	Tutorial	2010
20105133	Confessions of a Flow Junkie	Vehicular traffic, grocery store lines, and even making dinner in your kitchen all need require Flow in order to work effectively. In software projects Flow is equally important and the same dire consequences result when disruption occurs. The fact is that Flow is a core concept behind all Agile approaches, and needs to be maximized at several levels.\n\nThis interactive talk combines tongue-in-cheek humour with real-world examples of how maximizing flow will help you deliver software sooner and better, as well as shine a light on impediments to flow that you may not have considered before!	Team-Room Agile	Talk	2010
20105201	Agile Modeling and Documentation Practices	This presentation explores the differences between traditional and agile approaches to modeling and documentation.  It explores what it means for a model to be agile.  It describes practices from Agile Model Driven Development (AMDD) such as requirements envisioning, architecture envisioning, executable specifications, document late, model storming, and single sourcing information.  Industry statistics around how much modeling and documentation occurs on agile projects, and the effectiveness thereof, will be presented to address some of the misconceptions people may have about this subject.	Team-Room Agile	Talk	2010
20105183	Hitting the Wall: What to Do When High Performing Scrum Overwhelms Operations	All-at-once Scrum implementations require total commitment to change, high level management participation and aggressive removal of impediments. In July of 2009, Pegasystems (NASDAQ:PEGA)  deployed 27 Scrum teams in the U.S. and India in less than two months and global continuous integration became a top priority impediment.  To avoid "hitting the wall"before the first major Scrum release of their enterprise software applications, a Scrum SWAT team engineered a continuous integration environment for hundreds of software developers on two continents within a few weeks.\n	Team-Room Agile	Talk	2010
20105189	Your software can run faster	This tutorial gets you started in performance engineering.\n\nEveryone likes systems that are 'fast', but 'fast' won't do as a metric. The many facets of 'fast' are discussed, but throughput is the main focus of the tutorial.\n\nIn order to improve throughput, the current bottleneck resource must be found and used more efficiently. This procedure is followed iteratively and recursively until it becomes uneconomic to do so. \n\nBottlenecks are identified by monitoring resource utilization. To make this practical, performance tests must be automated, mirroring modern unit test practices.	Technical Edge-Development Praxis	Tutorial	2010
20106308	Behaviour driven infrastructure with cucumber-nagios	Setting up monitoring can be complicated - tests tend to lack expressiveness and robustness, and quite often don't even test the right problem in the first place.\n\ncucumber-nagios aims to alleviate these problems by providing a standard library of checks that can easily be reused across websites and Unix infrastructure. These checks also happen to be written in plain English.\n\nLindsay Holmwood will be covering how to start using cucumber-nagios, writing tests for your infrastructure, and why it's important to test the behaviour (and not just the availability) of your production apps.	Technical Edge-Development Praxis	Demonstration	2010
20106093	The Worst of Legacy Code: Forensic Development	This session will teach 2 techniques that not only individually help to tackle the more complex parts of legacy code, but combined act as the most powerful technique to fix the worst legacy code situations.\nAfter exploring these separately, we will dive into how they work together to improve a hideous piece of legacy code. It is in Russian, with no access to the underlying source objects, and can't be instantiated (due to external dependencies). \n\nIf firefighting or legacy code is part of your job, this is one session not to be missed	Technical Edge-Development Praxis	Demonstration	2010
20105125	Large-scale refactorings using the Mikado Method	For any code base, ill- or well-structured, there comes a time when you want to change large portions of it to meet new functional requirements or a new business model. When these changes become extensive, it's easy to get lost in a jungle of dependencies, or on a sea of broken code.  \n\nThis session presents 'The Mikado Method', a systematic approach to large changes. It helps you visualize, prepare and perform business-value-focused refactorings, without having a broken code-base. It also enhances communication, collaboration, learning for teams and helps individuals stay on track.	Technical Edge-Development Praxis	Workshop	2010
20105897	Executable Specifications and Domain Specific Languages for Software Teams	Many agile projects strive to automate their acceptance tests, but rarely achieve the automation they desire.  Recent advances in the use of Domain Specific Languages (DSL), testing frameworks like Cucumber, Fitnesse, RSpec and languages like Ruby and Scala provide a rich set of tools to effectively automate customer acceptance tests. This tutorial will leverage actual project examples on how to effectiveley to use Cucumber, Fitnesse, RSpec, Selenium, Ruby and Scala to create human readable, executable user story specifications. 	Testing/Specification Practices	Tutorial	2010
20105295	Story Testing and the 3 Amigos - an experience report	We are actively writing story tests first as 3 amigos (business, dev, & qa).  The team was struggling with some "accordian effect"of a batch of stories in building and then a week later a batch in verify.  Defects were being found late and often due to misinterpretation of requirements.  And we had features that were going to be difficult for GUI automation.  We will talk about how the 3 amigos were done and how they helped.  We will talk about the specifics of the tests written and their impact on design.   And we'll also discuss hiccups along the way and things to still work on.	Testing/Specification Practices	Experience report	2010
20106081	Iterative Performance Testing	Performance testing can be a challenge in Agile development. On a large scale Gap program, we applied some strategies to ensure high availability and performance that exceeds the business expectation. We used an iterative approach, starting with a basic test of the first working code base. That became the baseline that we built upon, by adding more complex and realistic test scenarios as new features were built. In addition we included soak and load tests in the baseline suite.\nAnother iterative approach we applied is to find the breaking point for the system and how it changes over time.	Testing/Specification Practices	Experience report	2010
20105652	Agile Test Case Management	'...over comprehensive documentation' is sometimes interpreted as 'no documentation' but that can be somewhat reckless. There are good reasons for documenting your test cases and their execution. This session looks at some lightweight, dare I say, Agile ways of managing your test cases including mindmaps, checklists and wikis.	Testing/Specification Practices	Workshop	2010
20106278	Non-Functional Requirements, Agile Style	Agile teams typically apply user stories to capture functional requirements - the "what" the system will do. However, agile literature and practice provides little or no guidance on establishing "how well"? in aggregate, the system performs those functions. This tutorial introduces simple, proven practices for defining and testing nonfunctional requirements (aka system qualities) including integration into your agile processes. You will learn how to define and quantify the right system qualities so everyone understands the system's expected performance.	Testing/Specification Practices	Tutorial	2010
20105524	Getting Started with User Research	The gap between a good product and a great one can be bridged by understanding your users.\n\nIn this session you will learn how better systems are built by taking small, iterative steps to understand the users desires, needs and abilities.\n\nYou will learn how to get information about users quickly and cheaply. For those that have more time (and perhaps a small budget) Carol will introduce methods you can use to get more detailed information from your users.  You will also learn ways to effectively share and communicate this information.  \n	UX/UI	Tutorial	2010
20105182	Beyond Staggered Sprints: Agile user experience design teams in the real world.	When integrating design teams within an Agile framework, the general practice is one of staggered sprints - keep the design team at least one sprint ahead of the dev team to ensure smooth transitions from sprint to sprint.\n\nOnce put into practice however, the division of labor is never that clean. This presentation will cover how TheLadders.com product, technology and user experience teams successfully integrated an Agile framework into their process and evolved the "staggered sprints"concept into a more holistic approach to UX/Agile success. \n	UX/UI	Talk	2010
20106465	Agile UX planning	Previously, I've written about adapting usability investigation methods for agile, and talked about keeping the big picture in mind without Big Design. This talk is about how the UX team at Autodesk used agile methods to plan design. In other words, this talk will connect parallel track design as we practice it to our agile planning board.	UX/UI	Talk	2010
20106433	Prototyping with Junk	This session gives participants an additional tool to use in an early sprint for a product, a feature or set of features. Participants will use physical materials which are typically not thought of as part of the business setting - a.k.a. "junk."  This session will be divided 4 segments:  \n1) Creating prototypes in small groups  \n2) Reflecting on the prototypes, their purpose(s) and the assumptions behind them  \n3) Revising prototypes based on the reflection \n4) Finally, we'll summarize what we've learned, and how to incorporate this exercise or similar ones into the work of Agile teams.	UX/UI	Workshop	2010
20105296	Lean in a Nutshell	Join Mary Poppendieck for a Lean in a Nutshell - a fast-paced talk aimed at senior developers and team leads. The lecture and discussion will focus on framing the software development process; it will cover four key frames that really make a difference when you are developing software: (1) A systems view, (2) Essential technical capability, (3) What it takes to deliver reliably, and (4) How to improve. \n	Enterprise Improvement	Tutorial	2010
20105328	Refactor Your Retrospectives	Effective retrospectives enable a team to improve iteratively. However, as Agile team leaders and ScrumMasters know from experience, retrospectives can be challenging to facilitate and engage their team in.\n\nCome to this tutorial to find out about retrospective smells to avoid. Learn how you can refactor your retrospectives so they become something the team looks forward to rather than dreads. Embed retrospectives deeper into the way your team works by extending other tried and tested agile practices to your retrospectives.	Building High Performance Teams	Tutorial	2010
20106157	Products over Process: Successfully Blending Agile Methods and Design Thinking	Several years ago, two agilists (your humble hosts) met and started sharing experiences using agile methods to produce products and their frustrations when "being Agile" was more valued than meeting users needs. Our session draws on our shared experiences blending design thinking (e.g. user centered design) and agile methods to discover and deliver meaningful products. We will cover product design, pragmatic personas,  customer discover, story mapping and story telling and more as we teach techniques and share experiences using agility to produce products validated with real user communities.	Business Transformation	Tutorial	2010
20106298	Understanding Design Complexity	Domain driven design isn't enough to prevent churn on complex, hairy systems. To get slightly ahead of the design curve you should understand more about the inherent complexities in the domain. This tutorial introduces two techniques designers and domain experts can use in conversations to reveal complexities, variations, and stable concepts: commonality-variability analysis and hot spot cards. Applying these techniques allows designers to see the slightly bigger picture so they can be better equipped to align their solutions with the relatively stable parts and support known variations.	Technical Edge-Development Praxis	Tutorial	2010
20106177	Coupling Loosely	Mock objects are a good way to break apart a legacy system to test it. However, they do not improve coupling (few dependencies between units) or cohesion (each unit does one thing). Developers who rely on mocks build well-tested legacy code, even on greenfield projects.\n\nThe next step, making the code easy to change, requires using indirections with looser coupling. In this information-dense, code-oriented session, we'll learn 12 to 18 key indirections and their impacts on your design. Next time, choose the right indirection for the job rather than just reaching for another mock object.	Technical Edge-Development Praxis	Talk	2010
20106181	Telling Your Exploratory Story	Exploratory testing is an approach emphasizing freedom and creativity. For projects that use Agile values and principles, there are two areas where exploration might be particularly useful -- story creation and feature integration. The first may involve a brainstorm using heuristics that trigger ideas about structure, functions, data, platform, operations, and time (to name a few). Feature integration can benefit from chartered, time-boxed sessions where structured exploration exposes new risks and vulnerabilities. This talk is about methods to describe the thoughtful testing of those stories.	Testing/Specification Practices	Talk	2010
8716	Lean UX: Getting out of the deliverables business	Traditionally UX Design has been a deliverables practice. Wireframes, sitemaps, etc defined the practice of UX Design (IA, IxD, UI Design etc). While this work has helped define what a UX Designer does and their value, it has also put designers in the deliverables business   measured & compensated for the quality of their deliverables (instead of the success of the experiences they design).\\n\\nEnter Lean UX - the practice of bringing the experience to light faster, with less emphasis on deliverables and greater focus on the actual experience being designed.\\n	User Experience & Interaction Design	Talk	2011
8736	Critical Success Factors for Acceptance Test Driven Dev't	A good analyst knows what questions to ask to bring clarity to a murky subject. When they hear about Acceptance Test Driven Development (ATDD), a core practice on Agile projects, they ask: "Can examples capture functional requirements?, Where do user stories come from?, and Will my role become extinct? . When Jennitta Andrea worked on her first Agile project in 2000, she asked all of these questions and more. As a hands-on practitioner and keen observer of teams and processes, she has discovered success comes from knowing how ATDD is part of an eco-system of roles, practices, and tools.   	Agile Boot Camp	Talk	2011
8739	Agile In a Nutshell	If you ve been doing Waterfall delivery most of your career agile can be down right scary: changing requirements, adaptive planning, iterative development.  These are all intimidating things for managers and organizations used to doing things in discrete phases one stage at a time.  In this introductory talk, we will look at agile in simple terms explaining:\\n\\n- what agile is\\n- what working on an agile project is like\\n- some of it's myths\\n- which agile method is right for you, and\\n- three steps you can take to becoming more agile today.	Agile Boot Camp	Talk	2011
8741	The Potential For Agile Digital Marketing Business Strategy	David Dalka worked at BlackRock (BLK) during the 80 to 800 person hyper growth phase redefining data structures, agile financial analysis and reducing decision making cycle times. After 9/11 events, David started studying businesses that were failing after not adopting emerging best practices using digital, search marketing and emerging media techniques. He advocates that agile BlackRock style techniques be applied to marketing processes to optimize business performance. David will discuss emerging digital marketing business strategy. Senior business leaders are encouraged to attend!	Business & Project Management	Demonstration	2011
8745	Building a Practice as a UX Team of One	UX teams of one have unique challenges. Fewer resources. Creative isolation. Organizational ignorance. Sometimes even hostility. This workshop will explore the real life agile team situations that solo UX practitioners work in, and show what you can do about them.\\n\\nThe goal of this workshop is to give every attendee the tools to be relevant and effective by creating a personalized plan for their UX practice. Your plan will include the methods, soft skills, and strategies that will help you build support for UX and do your best work in an agile environment.	User Experience & Interaction Design	Tutorial	2011
8747	Tightening the Feedback Loop	Agile methods bring individuals working together in a more intimate environment than other methods. It requires different skills to make it work. Giving and receiving effective feedback is a powerful tool  to improve collaboration in teams and organisations yet our organisations teach us little about this important topic. We are surrounded by poor examples all the time.We'll explore some simple rules for giving and receiving feedback, observe how most people give ineffective feedback to others and illustrate examples of applying the rules to make it more effective.	Collaboration Culture & Teams	Talk	2011
8750	Fluency over Proficiency: Accelerating Agile Learning and "Hunting Fluency"	While we value proficient knowledge of Agile practices, we value more the fluent, skillful expression of these practices and principles in daily use. \\n\\nExperience team and individual learning in this interactive session, via a toolkit of accelerated learning and teaching techniques. Used together, these techniques comprise a coaching and peer-to-peer mentoring language that drives ever-tighter cycles of improvement. \\n\\nCome to this experiential workshop for immersion in accelerated learning using the Language Hunting fluency game system.\\n	Hands-on Learning	Workshop	2011
8751	What are we supposed to do with these managers NOW?	Your organization has begun the journey of adopting agile. Most of the practices learned focus on the team. However, how do those teams become self-organized? Isn t some kind of leadership useful to help them along? Since teams represent all functional groups, where does that leave manager? Do we need them any more? In this session, we will explore areas where management can be valuable such as team organization, team space, mentorship and process optimization. If you are a manager, there is a place in an Agile organization if you are willing to look at responsibilities in a different way.	Leadership	Talk	2011
8752	Goad Testing: Guaranteeing that Tests Make Distinctions	Test Driven Development has reached maturity.  Goad Testing takes you a level deeper, examining what tests really are and using the outcome of that exercise to derive new ways of keeping software - both production and test - healthy, flexible, and on-specification.\\n\\nMaking distinctions is a critical aspect of a test: It allows a test to serve as an executable specification.  Sometimes this ability is lost in the course of maintenance.  Goad testing is a way to prevent that from happening without introducing significant extra work or complexity.	New Horizons & New Voices	Demonstration	2011
8760	SHU-HA-RI Applied to Agile Leadership Driving Your Agile Evolution	Far too many agile instances either fail or are challenged because leadership team members don t sufficiently understand the fundamentals of agility nor how to map them towards effective execution. In this presentation, we ll explore a basic assessment model for determining Agile Leadership Maturity as a means of assessing and improving their understanding and your overall effectiveness. Not as a means of stereotyping leadership, but simply as a tool for understanding the leadership maturity landscape within your organization. Then we'll develop context-based strategies for improvement.	Adoption & Transformation	Workshop	2011
8764	Manager as Scrum Master?	Self-managing is very important aspect in Agile change, in which manager transforms from command & control to leading and coaching. The experience report will share you a 3-year journey from one large-scale organizational Agile adoption, with the focus on the evolution of Scrum Master and manager role and the way they work together. It describes how the change regarding self-managing was introduced and adapted, then how they have tried to sustain the change by creating consistency between the values and principles behind Agile organization and the management capability to practice them.\\n	Insights - Experience Reports	Experience report	2011
8765	Apply systems thinking in large-scale Scrum transformation	In large-scale Scrum transformation, organizations experience gridlock after the initial success. System thinking is one important thinking tool that will help you see the dynamic view of the system and get over the challenges. Through the workshop, you will learn to recognize common system archetypes, so that you understand why you are getting certain undesirable effects; as well as common strategies to leverage in the situation, so that you direct your effort on the right place.	Adoption & Transformation	Workshop	2011
8773	The surprising science behind agile leadership	Not everyone is a fan of the self directed self organizing team. It flies in the face of traditional project management, and often conflicts with the traditional organization model. The benefits of self directed teams however are too big to ignore and now we have scientific proof as to why. \\n\\nIn this new talk on agile leadership, I explain:\\n\\n- how and why agile leadership works, \\n- the science behind why so many choose to work this way, and \\n- the impact it s going to have on you and your organization.	Leadership	Talk	2011
8774	Lean Startup: How Development Looks Different When You're Changing the World	How does development look different when you're creating things that no one has ever created before? Lean Startup is about creating from a BIG VISION, where we want to change the world & do something really significant. It combines Agile Development with _Customer_ Development so we can be disciplined about how we create our startups. Learning (rather than working software) becomes our most important measure of progress and agile practices are pushed to the next level. Come get a glimpse of the next level of agile and discover how development looks different when you're changing the world.	New Horizons & New Voices	Talk	2011
8780	Adaptive Leadership: Accelerating Organizational Agility	Leading agile organizations requires Adaptive Leadership that begins with understanding business agility and how practices like continuous delivery and a mindset of sustainable agility combine to create highly responsive IT organizations. Adaptive Leadership is two dimensional: Being and Doing Agile. Adaptive leaders embrace specific principles and practices, such as "doing" four key performance levers:  Do Less,   Speed-to-Value,   Quality,  and  Engage , and  Being  agile "adaptive", "riders of paradox", "exploring", and "facilitating." \\n\\n	Enterprise Agile	Tutorial	2011
8782	Dr W. Edwards Deming's famous Red Bead Experiment - For Software Teams	Participate in Dr W. Edwards Deming's famous Red Bead Experiment. This classic learning tool helps illustrate the impact that a system, and traditional management approaches, can have on individuals who work within an organisation. I will also relate this experiment to approaches to software development and the management of software development teams. \\n\\nThe experiment introduces many of Deming's ideas about management, including his 14 Points for Management. It also introduces the Statistical Process Control Chart.\\n\\nAfter the experiment there will be a discussion of the issues addressed. 	Open Jam	Demonstration	2011
8785	Becoming Agile in an Imperfect World	Taking a big bang approach to Agile is not a viable option for most organizations. Most successful adoptions of Agile are tailored to the strengths and limitations of the organization. This workshop will show you how to design a tailored roadmap to becoming Agile, despite the constraints around you. The roadmap includes 3 phases; Getting Ready, Piloting and Spreading Agile. If you re just starting your agile transition or in a transition stage, this workshop will equip you with practical techniques and strategies to move from your existing process without starting from scratch.\\n\\n	Adoption & Transformation	Tutorial	2011
8797	Hooray, We're Agile Testers! What's Next? Advanced Topics in Agile Testing	Your team successfully adopted Agile, you have traction on practices such as CI, TDD, maybe ATDD. Still, you see lots of room for improvement in testing. Do you sometimes miss or misunderstand customer needs? Is it sometimes hard to complete all testing activities each iteration? In this interactive tutorial, you'll practice ways to better understand and capture customer needs; collaborate more effectively and enjoyably with developers and other team members;  improve continuous integration and delivery; manage technical debt; plan and estimate in ways that ensure testing \\"keeps up\\". \\n\\n	Testing & Quality Assurance	Tutorial	2011
8798	Coaching at the Enterprise Level - Introducing the Agile Cafe	Agile coaches are leaders of change in an organization and we leverage things like training, direct coaching expertise on Agile, and facilitating peer-to-peer networks to help with this change.   There is a gap in the current literature on how to create such networks.  This talk will cover the Agile Cafe, my version of the World Cafe, in both theory & practice.   The World Cafe is a technique to gather groups of people together, ask them important questions, and draw out their knowledge.  Outcomes are shared knowledge, community creation, and visibility for Agile at the enterprise level.  \\n\\n	Coaching & Mentoring	Talk	2011
8800	Learning From Failure Overpowers Fear	You ve started with Agile, and you re doing ok, some lows, some deeper insights. During an agile transition most people come face to face with something they fear.  It may be a concept, thought, activity or belief that is challenged.\\nI m going to tell you about some fears and failures that teams, Product Owners and Scrum Masters encounter. Along the way you will hear about my agile transition journey and how embracing fear and failure has given me this overwhelming feeling of being free and full of energy!\\n\\n\\n\\n	Adoption & Transformation	Talk	2011
8801	The Speed To Cool: Agile Testing And Building Quality In	Ensuring that the approach to testing and quality is understood and appropriately valued in an agile world can be a struggle for many organisations, especially when resources are limited and our customers are expecting business value in a timely manner. In this session we will define what quality means and share a number of tools for measuring it, discuss approaches to improving the skills, empowerment and role of testing in the organisation and share why testing is the coolest role on the team and why it is everyones responsibility.	Testing & Quality Assurance	Talk	2011
8808	Designing a Kanban System for the Enterprise	Enterprise software and systems development typically involves complex mixes of teams, technologies, skills, architectures and organisational structures which must interact for the business to be successful. This tutorial will introduce an approach which designs the Enterprise as a Kanban System. The model is based on the central theme of Systems Thinking, the purpose of achieving Pull, Value and Capability, and aspects of Workflow, Visualisation, Work In Process, Cadence and Learning. The model is not a complete solution, but suggests key areas to consider when designing the Agile Enterprise.	Enterprise Agile	Tutorial	2011
8810	WIP and Kaizen:  Key Tools for Enabling Continuous Improvement 	Have you established an Agile or Lean software development approach including conducting retrospectives but you just don't seem to be able experience meaningful innovation and improvement in your process?  This talk will explore some of the reasons why this could be and provides a pragmatic approach to helping ensure your process can support innovation and continuous improvement\\n\\n\\n	Adoption & Transformation	Talk	2011
8821	Beyond Software: Adopting Agile Outside of Development	The challenges and benefits of adopting agile in software development are well known. Conceptually it makes a hell of a lot of sense for departments outside of dev to embrace agile as well. However, as organizations extend agile into sales, marketing, professional services and hr they need to leverage the experience of their software teams while understanding that not every agile practice translates exactly. This session will focus on how to help build an agile sales/marketing/professional services/hr team when no one has ever been on an agile sales/marketing/professional services/hr team.	Business & Project Management	Workshop	2011
8823	An Introduction to Non-Violent Communication (NVC) for Agile Coaches	NVC can dramatically improve our relationships by helping us focus our attention on\\n1) Empathic understanding of others without compromising our own values, and\\n2) Expressing our real feelings and needs openly and honestly, yet without blame or criticism.\\n\\nNVC delineates four components of communication:\\n     1) Observations free of evaluations;\\n     2) Feelings straight from the heart;\\n     3) Needs, values and longings; and\\n     4) Requests expressed clearly in positive action language.\\n\\nThis session will show how NVC can be an important addition to your Agile coaching tool kit.	Coaching & Mentoring	Workshop	2011
8831	Agile Decisions	Making the right choices is crucial. Decisions have generally been viewed as the prerogative of individuals - usually senior executive. The process employed, the information used, the logic relied on, have been left up to them, in something of a black box. Information goes in, decisions come out - and who knows what happens in between. Unlike other business processes, decision making has been rarely the focus of systemic thinking and analysis. This has left a significant opportunity to improve decision making as we would any other process through visibility, feedback and value.	Business & Project Management	Tutorial	2011
8832	Taming the customer support queue	In Aug 2010 we reduced the size of our development team. We needed to handle customer support issues and new development with the 3 remaining teams. We had over 600 open defects and the list was growing daily. On top of that our first clients were going live. Clearly some radical change was needed. We implemented Kanban. \\n\\nThe result? In Dec 2010 we had no open severity 1 issues. Our queue was down to 54 issues. SLAs are met in most cases, and our resolution rate exceeds our incoming rate.\\n\\nI d like to share our story, and inspire you to tame your support queue too!	Insights - Experience Reports	Experience report	2011
8838	Flirting With Your Customers	Flirting is about connecting. Some universities require their IT engineers take a flirting class not to attract a partner, but to learn how to interact better in the workplace. \\n\\nWe ve translated flirting techniques for use in a business setting. Discover how the  8 flirting steps  can help you  create stronger connections and greater understanding of your customers so that you work together better to deliver business value.  Flirting With Your Customers  creates the connections that can make a significant difference in your project s success.	Working with Customers	Workshop	2011
8840	Agile Management: creating a culture to help your team succeed	I'm the software development manager for a product company with 3 agile teams. My job is to foster the environment or culture that helps us be the best team we can be. In this talk I'll share a little about how I've done this, where I got my ideas, and how this works compared to other environments I've worked in which are.... well let's just say different :)\\n\\nI recently blogged about this: http://scrumcoaching.wordpress.com/2010/12/17/a-development-managers-strategy/	Agile Show & Tell - Lightning Talks	Talk	2011
8845	Creativity for Agile Teams	This is a refinement of our presentation at Agile2009. Creativity can manifest in several ways including creation of something new, refinement of something that exists and problem solving. How do we support, enable and enhance the creative abilities of Agile teams? There are many ways to shape the work environment for greater creativity. We will describe how creativity happens and can be enhanced by providing a safe, nurturing environment, enhancing group interactions, pacing activities that utilize different sensory modes and trusting in the power of subconscious integration.\\n	Collaboration Culture & Teams	Talk	2011
8848	Design Thinking	What does the US Military have in common with Apple? The both deal with increasing complexity by emphasizing design thinking. At Apple, design thinking starts by deciding, first of all, what NOT to do. In the military, design thinking precedes planning, and takes leaders through a series of steps that reframe their thinking about the environment they are dealing with. When you have competitors like Apple - or when your decisions are a matter of life or death - then you need to move beyond working software, beyond backlogs, even beyond agile - and focus like a laser on customers.	Working with Customers	Talk	2011
8849	Refactoring and Code Smells - An example of refactoring legacy code	Recognizing code smells and cleaning the code up by refactoring are essential skills of an agile developer. This session explains why these skills are so essential, introduces common code smells and shows refactorings that clean up the code. This will be demonstrated in the context of a piece of open-source legacy code (an accounting program in Java). I'll introduce code smells by identifying them in this piece of code, then apply refactorings to remove them. I'll keep identifying more code smells and refactor them until there is nearly nothing left of the original code.	Agile Boot Camp	Demonstration	2011
8854	Collaborating with Non-Collaborators	We understand the vital importance of collaboration among team members. However, how can we deal with non-collaborators people who won t work with us? Although we may not be able to change them, we may be able to work with them. This session describes how to identify non-collaborator and examine the system within which the non-collaborators work: their success factors, motivations and measurements. Using a Trust and Ownership Model, we considers tools and techniques to cope with each trait. Deal with non-collaborators by building a strategy that empowers you to collaborate no matter what.	Leadership	Tutorial	2011
8855	Teach Your Cucumber Scenarios to Speak "Business"	Cucumber can be a powerful tool to build a common, or ubiquitous, language between product people, developers, and testers. A common language leads to common understanding and, ultimately, more valuable software. Unfortunately, too many teams write Cucumber scenarios that use technical language and miss out on this benefit. In this interactive session, you'll learn how to use Cucumber to grow a ubiquitous language and how to refactor your existing scenarios to speak "business." (While the focus is on Cucumber, users of other tools will surely see ways to apply the lessons to their own tools.)	Testing & Quality Assurance	Tutorial	2011
8857	Removing Impediments with Drawings	Pictures convey ideas more clearly and have a greater impact than a simple conversation.  The ability to communicate, and perhaps sell, your ideas at a whiteboard is an essential skill for anyone on an Agile team.  In this hands-on session based on Dan Roam's book "The Back of the Napkin", we will learn the six types of diagrams used in business and how to select the right picture for your problem.  All you need for this session is an issue, your imagination and the ability to draw a circle, square, arrow and a stick figure.  Come on - give this a try.  It will be fun.	Coaching & Mentoring	Tutorial	2011
8858	Refactoring Conversation Smells	As an Agile practitioner, you probably communicate with many different people every day. Are all your conversations effective? Or do you sometimes find yourself or the other person explaining and re-explaining, arguing a position, fighting over  semantics , or cornered?\\n\\nThese conversations go awry in consistent ways, which arise from people's innate methods of processing and cataloguing information. Come to this tutorial to learn these "conversation smells" and systematic ways -- a simple set of patterns and questions -- to tackle them and get your conversations unstuck.	Collaboration Culture & Teams	Tutorial	2011
8859	Powerful Questions	Picking the right question or reframing an issue can introduce a profound shift in the conversation. In this hands-on workshop, we will discuss how to create your own powerful questions and practice this skill. Leave with a practical tool you can use with your Teams today.\\n\\n	Hands-on Learning	Workshop	2011
8860	Creaky Platforms: tackling legacy technology challenges	Yesterday s state-of-the-art system is today s legacy. The advent of SaaS, social, mobile, etc prevents the rapid rollout of new features. Large or small, aligning product or platform with ever-changing business strategy is critical.  \\n\\nLarge or small, it is critical to understand how to align product or platform with an ever-changing business strategy. \\n\\nWe discuss how to balance the cost pressures to use legacy assets with the need to keep up with the market. We also reveal how to remediate legacy systems quickly without investing in a massive and risky 'big-bang' re-platforming.\\n	Enterprise Agile	Talk	2011
8867	Team Swarming--Why and How	Agile teams are often asked to swarm over the work, applying as many people to each item of work as productively possible before starting the next.  Sometimes this magically works, and bystanders confidently describe the team as "gelled." Other times it looks like a train wreck, with people getting in each other s way and on each other s nerves. In the middle we find a continuation of the status quo. What re the advantages of swarming? How can we increase the odds of gaining those advantages? We ll explore the answers from your experience and mine.	Collaboration Culture & Teams	Workshop	2011
8873	Multi-sensory Kanban	NOTE: There is a size limit for 2MB for presentations, so tweet either @adhondt or @ravindar to get the full slide deck.\\n\\nVisual Kanban helps surface process problems--and our Multi-sensory Kanban surfaces even more by helping with soft skills, peer design, and increased collaboration outside the team. See, hear, feel, taste and smell your way to better system throughput with a hybrid of XP-style kanban story boards, Pomodoro-like audible timers, group scrums, and team meals/snacks.	Development Languages Practices & Techniques	Tutorial	2011
8876	Scaling Agile to the Enterprise with Lean	Lean is a journey, and Systematic began that journey five years ago. It started with an executive imperative, was kicked off with extremely successful Scrum pilots, spread to other teams using CMMI principles, then percolated up through middle management as success became obvious. This was certainly not easy! This is a story of a real lean journey taken by a large organization - the triumphs, the pitfalls, the honest results, the expansion as the company grew, the continuing saga of improvement. It's a story of lean theory, the struggle to implement that theory in practice, and the path ahead.	Enterprise Agile	Talk	2011
8877	Do you dare to ask your HR manager to practice KANBAN?	This is a true exercise.  We are a mid size software company in Sri Lanka.  Agile adoption of our development teams made our projects more profitable and sustainable. We got out of the  software factory  concept which is common in offshore business and built a professional software company. \\n But this didn t solve all our problems. With the rapid growth, we started to have a highly pressured situation in HR/operations depts. \\n This session covers how we introduced KANBAN to our HR/Op dept, the success, challenges and the difference I saw when applied them to dev teams.\\n	Insights - Experience Reports	Experience report	2011
8881	IEEE Best Paper - Lean as a Scrum Troubleshooter	Systematic has relentlessly improved how it does Scrum during the past 5 years using the A3 problem solving tool from Lean. This approach is behind  the learning and experience reported in the past 5 years. This talk will take a walk behind the scenes of years of successful experiences and show the management and mechanics driving this learning. The cumulative learning from major improvements are presented, including a small set of measures that for the past 3 years has proven to be very valuable in monitoring project progress while at the same time fostering a Lean mindset in the teams.	Insights - Experience Reports	Experience report	2011
8883	Test Driving and Unit Testing Thread Safety	It came as a shock to me when I tried to convince myself that the multithreaded code I was writing was not unit testable. It's too complex,  non-deterministic to be driven through tests, I told myself. I was so convinced I set out to show TDD does not apply here. But in the end, I proved myself wrong. In this zero-slides presentation, we will use TDD to drive the design of a multithreaded code. Along the way we'll hit some roadblocks, use those to learn some techniques and practices that'll help break the barriers. If you've confronted test driving for thread-safety this session is for you.	Development Languages Practices & Techniques	Talk	2011
8887	The Emperor's New Clothes - Meaningful Interactions in Stressful Situations	See the Emperor in all his glory! Which role will you play? We all interact with different types of characters in our daily lives which may lead to stressful situations. Together, we will learn how to communicate more effectively with others, especially at times of stress, by transforming our behavior from incongruence to congruence. We will learn to recognise incongruence by role-playing the 5 Coping Stances based on the Satir Model, then learn how to begin transforming our behavior from one of incongruence to congruence by thinking about interactions in terms of Self, Other and Context.	Hands-on Learning	Workshop	2011
8888	The Culture of Agility	Agility as a process is well understood today in feedback generating iterations or as a flow. Agility as a structure is becoming better understood through cross-functional teams working collaboratively. However, Agility as a culture has very little exposure - yet culture impacts every attempt at agility.\\n\\nThis session provides a language for organizational culture, its impact on agility, and examples where exposing culture has aided adoption. We explore cultures within single organizations, sub-cultures across boundaries within larger organizations, and cultures bridging a corporate merger.	Collaboration Culture & Teams	Tutorial	2011
8890	Embedded Testing Techniques	Contrary to widespread opinion, you *can* test on the target hardware. There are some challenges to doing so, though. This talk will focus on how I've been doing it since 2004.\\n\\nIn many cases, no modification to the target hardware is needed; in the remaining cases, the necessary modifications are quite minimal, well within the abilities of a programmer who's not afraid of soldering irons (adding one wire, usually).\\n\\nThe heavy-duty modifications will be to your test framework, and will be exclusively software. Example code from actual projects will be used to present them.	Agile for Embedded Systems Development	Talk	2011
8900	Selling the Investment to Pay Down Technical Debt - The Code Christmas Tree	Sharing our experience in making code complexity and unit coverage visible in the hallway adjoining our team room and the conversations that happened around it.  Not only did it help to focus the team on the high debt areas of the application, but its red (bad) and green (good) coloring combined with its high-foot-traffic location enabled executives in this Fortune 500 insurance company to invest in paying down debt as well.	Insights - Experience Reports	Experience report	2011
8901	Ten Tales of Positive Change	These tales relate successful attempts at making improvements. They are described mostly in the order in which they occurred, from my time working in an Agile culture. The tales are about: \\n\\nCreating the Motivation to Pair Program  \\nStaying Focused at Stand-up  \\nKeeping Progress High and Questions Low  \\nReassigning Points to Validate Estimation  \\nAdmitting to the Real Date  \\nDealing With an Overwhelming Amount of Work  \\nGauging the Rate of Progress  \\nFiguring Out How to Construct Teams  \\nFinding Predictability in the Velocity  \\nAllowing for Cross-Functional Teams  \\n	Insights - Experience Reports	Experience report	2011
8902	Deliberate Discovery Workshop	Ignorance is a constraint on many projects. We rarely know everything about our domain, processes, technology, politics, skills, expectations - the list goes on. As we progress we discover unexpected difficulties and find ourselves struggling to overcome them. Yet the unexpected always happens in different areas, no matter how much analysis we do. How much is enough? How can we target our greatest areas of ignorance to learn faster, and how can we keep our options open to cope with unknown unknowns? In this workshop we explore techiques for discovering, and handling, the unexpected.	Hands-on Learning	Workshop	2011
8912	Agile 2.0 - Rebooting A Raccoon In An Imperfect World	On this 10th anniversary of agile, our community is struggling to address the issue of how to take experienced agile practitioners to the next level, while still providing training and tools to support those who are beginning their journey. With the "agile" word getting so overloaded, the challenge is to continually innovate without assigning labels.\\n\\nIn this talk we will discuss how to use the best of traditional, lean and agile methods to suit any team and showcase numerous patterns that demonstrate the best process to use is often a mixture of traditional practices and new innovations.\\n	Adoption & Transformation	Talk	2011
8917	Reverting to Form   How to Make Sure That Agile  Sticks 	Whether the adoption of Agile takes place in a grass-roots  bottom-up  approach or a mandated  top-down  manner, it takes a change in culture, and a willingness to  give it a chance  that is the biggest determinate in making Agile stick in an organization.  In particular, it is the acceptance of using business value as a pivot point that can make an organization realize that Agile is their friend, so long as they are willing to avoid the pratfalls that can drive an organization back to where it started.	Adoption & Transformation	Talk	2011
8918	The Joy of Work:  Managing Performance, Innovation & Organizational Maturity	Do you find your work exciting and fulfilling?  Is your team rewarded for finding better ways to work? While many organizations have adopted Agile approaches at a project level, few have effectively aligned their HR processes with Agile values, or made finding better ways of working a truly rewarding and exciting proposition for their teams. Join us to explore the subject of creating a truly holistic performance management system that not only adheres to Agile principles, but actively promotes individual drive, team innovation and organizational maturity.	New Horizons & New Voices	Workshop	2011
8920	Sustaining Agility after the Coaches Leave	Transitioning to agile is hard. It involves learning new techniques, thinking in a different way, and stepping out of your comfort zone. No wonder so many agile transitions revert back to previous ways over time. A change in management or a loss of the agile champion is often a catalyst for this process. \\n\\nThis talk describes several mechanisms to help counteract these forces, and how to incorporate them into your organization. Presented through examinations of real-life examples, interactive exercises and open discussions, this talk provides guidance on how to create sustainable agility.\\n	Adoption & Transformation	Talk	2011
8921	'Super-Fresh' Code	The confluence of cloud computing, smart mobile devices, social networks and agile software methods transforms the nature of the business. The cloud enables offering everything as a service. Smart mobile devices consume those services and contribute to them in an  always on  mode. Social networks enable expert-sourcing on a per-task basis. When these three trends are combined in the right way with recent advances in Agile methods, the net result is  Super-Fresh  code. Such code serves as the source of competitive advantage for the modern company.\\n\\n	Business & Project Management	Workshop	2011
8923	Embedded TDD cycle - the first 3 years	James Grenning presented the embedded test-driven development (TDD) cycle already in 2004. Whispers on the hallways of conference hotels tell that somebody is actually implementing this idea. However, there are only few documented implementation details available. Schneider Electric s fire security team has been implementing TDD cycle as an integral part of the development process for 3 years. Come to learn from their real-life experience and mistakes in automated testing at different levels: unit testing, acceptance testing using simulation, and in real target hardware.	Agile for Embedded Systems Development	Talk	2011
8924	Technical Debt: Assessment and Reduction	Do you really govern the software development process in your IT organization or do its uncertainty and unpredictability leave you, your internal customers and your company's customers aghast? Will technical debt play havoc with deployment dates you committed to and keep your development and operations staff from responding quickly and effectively to customer requests? Do you know how much money is required to "pay back" your software's technical debt? Once you take this workshop you will know how to quantify technical debt, rein it in, and mitigate its unpleasant consequences.\\n	Testing & Quality Assurance	Workshop	2011
8925	The Kata In The Hat	Programming is insanely hard. It s discipline. It's learning your katas from inside out. It's overcoming fear that you might write something buggy in a piece of software that will cost its owner millions of dollars. It is also fun, however. And while we do talk about it, we seldom do code for fun, just as a celebration of how much we love our coder s life. This session is an attempt to change this. We re going to code for fun. With the secret hope that some of the attendees will like what they ll see, decide it s the coolest thing to do, and make it happen everywhere on the planet.	Development Languages Practices & Techniques	Demonstration	2011
8933	What's NXT? Agile Software/Hardware Integration	Developers never get to play with the cool toys. Now s your chance! This session explores architectural layering and unit testing strategies for a java application that controls a Lego® Mindstorms® NXT robot. Frequently teams that unit test utilize stub objects as substitutes for parts of the code that are not the focus of the test. Creating an architectural layer for the robot s hardware can be utilized for better unit tests and running the application without the hardware. Come get hands on and learn about these techniques using the robot and your pair partner.	Hands-on Learning	Tutorial	2011
8939	The Agile Leadership Kata: Discovering the Practice of Leadership	In software development, we use the term  practice  loosely compared to many other disciplines. It is as if by repeating the word  practice  we might somehow actually arrive at that professionalism that so many desire. How do you practice your skills as an agile team leader? What would that practice look like? \\n\\n\\nIn this tutorial, we will explore the techniques you can use to practice and hone your skills as a team leader. From individual exercises through collaborative games, we will explore how we can practice and improve our leadership skills.\\n	Leadership	Tutorial	2011
8945	How to Get Started with Agile When You Don't Know Where to Start	When transitioning to Agile, people often focus on how 'agile' you are instead of focusing on the reasons why you chose to 'go agile' in the first place. In this session we'll talk about a 3-step process to help you start or tune your adoption regardless if you're a 5 person or 5,000 person company. We'll talk about understanding the objectives for 'going agile', how to get educated about what that really means and how to create an execution strategy.  Attendees will create a worksheet to help them identify possible paths for transitioning based on their unique organizational parameters.	Adoption & Transformation	Workshop	2011
8950	Exploring Enterprise Agile Transformation Strategies	The goal of any enterprise agile adoption strategy is NOT to adopt agile. Companies adopt agile to achieve better business outcomes. Large organizations have no time for dogma and one-size-fits-all thinking when it comes to introducing agile practices. These companies need pragmatic guidance for safely and incrementally introducing structure, principles, and ultimately practices that will result in greater long term, sustainable business results. This talk will introduce a framework for safely, pragmatically, and incrementally introducing agile to help you achieve your business goals.  	Adoption & Transformation	Talk	2011
8954	Own Up: the Product Stewardship model for UX 	Who is your project's Product Owner? What does that even mean? Are they ultimately favoring the voice of the business, its customers, your end-users, or the technologists? Where is the UX voice in your team?\\n\\nUX designers are uniquely positioned to solicit and evaluate input from business stakeholders, developers, and the people (potentially) buying and using our products. The Product Stewardship model allows a business stakeholder to focus on business value while empowering a Product Steward to balance human goals, business needs, and technical constraints and opportunities.	User Experience & Interaction Design	Talk	2011
8955	Introduction to Agile Planning and Project Management	Agile introduces a number of tools and techniques designed to help the team figure out how much software we can build for the time we have, and the amount of money our customer is willing to spend.  This talk will introduce the fundamental concepts necessary to break down and estimate our product backlog, how to organize delivery of that backlog for early risk reduction and rapid customer feedback, and how to get stable throughput and predictability as you mature your agile practices.  This talk is for those looking to understand how (and why) agile methods lead to better business outcomes.	Agile Boot Camp	Tutorial	2011
8967	Agile Requirements: To User Stories and Beyond!	Can extensive written requirements be dispensed with in favor of lighter weight 'stories'? It sounds easier, but can it really be as good? We'll start this session by staging a showdown between traditional and agile requirements.  Participants will form teams, create requirements documents, do development (no technical skill or computers needed), and evaluate the results. Next, participants will learn by doing, as we build a 3-part model for agile requirements: User Story, Conversation, and Acceptance Criteria. Participants will leave with a solid understanding, and practical skills.	Agile Boot Camp	Tutorial	2011
8968	Process Increments: An Agile Approach to Software Process Improvement	Process Increments, is an iterative approach to manage process improvement projects. This approach builds upon Agile values and principles, and reuses some well known Agile techniques. It partitions the scope into user-story-like increments, and manages the project using agile estimating and planning techniques.\\n\\nThis approach has been applied to five enterprises transitioning from individual-driven/non-structured organization to a team-work/structured organization. The study shows sustained improvement velocity, good project visibility, and on-going learning experiences by project teams.	Insights - Experience Reports	Experience report	2011
8969	Scaling Software Agility: Advanced Practices for Large Enterprise	Dean Leffingwell describes how rapidly advancing agile methods are being successfully applied to enterprise-class software development. He describes emerging practices including: lean requirements practices that scale to the full needs of the enterprise, intentionally-emergent enterprise architectures, a kanban system for re-architecting large-scale systems, achieving strategic alignment and product development flow with the Agile Release Train, and strategies for agile portfolio management and governance.\\n\\nsee. www.scalingsoftwareagility.com for more information.	Enterprise Agile	Tutorial	2011
8970	From Development Agility to Business Agility	Scrum is an effective approach for Agile Development. Opportunity Engineering (OE) is a business approach that allows to leverage uncertain business opportunities. We will present an effective framework that uses existing Development Agility and OE to enable real Business Agility. This framework uses Scrum to discover the right product to build by assessing business value under conditions of high-uncertainty (where real profits are). These concepts being already used by successful Internet companies, this presentation shows a ready-to-use framework applicable to any industry.	Business & Project Management	Tutorial	2011
8972	Design by Community: Involving Everyone in UX Design using Design Studio	The Design Studio method lets the whole team get involved in sketching and critiquing product solutions.  It s emerged as one of the agile-UX best practices for rapid design ideation and building whole-team ownership.  This hands-on workshop is a good fit for all project roles - veteran and novice alike!  Everyone will learn by participating in a design studio - exploring ideas for a real product.  You ll learn the process mechanics along with tips and tricks from experienced practitioners - everything you ll need to try this on your own project.	User Experience & Interaction Design	Tutorial	2011
8973	Chasing the constraint beyond the development team	Successfully adopting agile methods creates a high likelihood that the constraint in your value chain will migrate from software development to another business process. As your agile journey proceeds, more agile won t necessarily deliver continued improvements! Unfortunately, systemic improvement often takes considerable time and effort, and your agile effort may be seriously impaired while you work to improve a constraint that lies beyond your control. This workshop will address methods for identifying, predicting, and responding to organizational constraints beyond the development team.	Business & Project Management	Workshop	2011
8975	The Agile Office: Cisco's Unified Communications Business Unit	Agile transition is a period not an event. Structures are needed that will ensure agile survives long after the initial transition period.  Mike Cohn's keynote at Agile 2010 mentioned the concept of an 'Agile Office'. At the time we were over 2 years into our agile journey and 9 months into a formal organization-wide agile transition program. We knew we needed to create the support structures necessary to make sure that agile survived after the transition period, but weren t yet sure what form that would take. In September 2010 we formally launched the Cisco UCBU Agile Office.	Insights - Experience Reports	Experience report	2011
8976	The Budgeting Black Hole: Predicting the Unpredictable	An organization cannot run well without a budget. But a budget doesn t have to be a frustrating futile exercise in prediction. Incremental budgeting, specific management actions, along with project portfolio management provides everyone the data they need.\\n\\nWe will explore incremental budgeting in the context of a project, where we will periodically deliver value to the organization. We will see which work actually delivers value and can help predict budgets, and which work does not deliver value that helps with budgets. 	Adoption & Transformation	Tutorial	2011
8977	Basic Principle of the TPS and its Practical Ideas for Agile Software Process!	TPS developed in the 1950 s is a business model and collection of tactical methods to pursue high quality, low cost and short lead-time. It emphasizes to eliminate non-value added activities (waste) and to construct continuous flow processes. The TPS tools such as Kanban, Andon are only the tip of the iceberg. TPS is people centric system. It is more critical issues how to0change culture to involve people in Kaizen. Several ideas for better agile software development are presented from my experience of enhanced TPS development at Toyota.	New Horizons & New Voices	Talk	2011
8985	Risk Management Game: Shared Accountability Through Collaborative Risk Analysis	As we scale, it is imperative that everyone remain involved.  We must not fall back on old habits.   Risk management is often viewed as a vestige of plan-driven approaches but our agile flavor has proven valuable for helping teams make hard decisions collaboratively and proactively.\\n\\nWe introduce our risk management game, a powerful, collaborative and fun exercise for better results through collaboration.  We demonstrate that release planning is more than just stuffing stories into iterations.   You will take away hands-on knowledge of a technique useful up and down your agile enterprise.	Enterprise Agile	Tutorial	2011
8989	Scrum as a Thinking Toolkit	Leave aside, for the moment, the How of Scrum, those familiar roles & rituals, and come with me on a journey to discover the Why of Scrum.\\n\\nTogether we ll break apart Scrum practices upon the anvil of principles and values arriving at a destination I call  Scrum Thinking ; a place from where you can apply the science & purpose behind Scrum to organise your work & solve problems in disciplines & circumstances typically considered unsuitable to the application of the Scrum practices as they are applied to Software Development.	Business & Project Management	Workshop	2011
8991	Putting  the Fun Back In Your Retrospectives	Retrospectives are a key mechanism of a continuously improving process.  However it is a challenge to implement them well.  Many are poorly facilitated and just downright dull.  It doesn't have to be this way.  Retrospectives can be a time for celebration, a time for fun and a time for team-building.\\n\\nIn this tutorial attendees will experience some of the techniques Rally coaches use to put the fun back in the retrospective including: Goldilocks and the Three Bears, The Break-Up Letter, Draw Me a Picture, Captions, Futurespectives, 5 Whys and Holding a Movie Conversation.	Collaboration Culture & Teams	Tutorial	2011
8994	Design Thinking - Does Your Company Need It to Survive?	Companies fail every day due to a lack of balance between  right now  need for profit and the need for R&D/innovation to survive and thrive long-term.  Design thinking has risen over the past decade as a loose body of thought addressing how to intentionally   by design   achieve this balance.  You should be acquainted with it because 1) your company may need it to survive; 2)  design thinking and agile address similar problems, and design thinking can be leveraged to improve agile success; and 3) agile is a great approach to practically implement design thinking for business success.	New Horizons & New Voices	Talk	2011
9001	Functional Management - There IS a place for it in Agile	With the adoption of Agile, many groups wonder whether functional managers are required any more. Even with self-organizing teams, functional managers are still an integral part of Agile, and their role has transformed into more of a coach than ever. This talk explores what I have seen as a traditional software manager and my experiences in leading Agile teams as their functional manager. It delves into the nuances that I have found that are required of this new form of manager, and how this needed leadership meshes well with and elevates self-directed teams.\\n\\n\\n 	Leadership	Talk	2011
9008	Fact or Fiction:  ERP Projects Can Be Delivered Using Agile?	Fact. ERP projects have successfully delivered quality products by leveraging lean and agile principles and techniques.  Learn about the common differences and challenges that are unique to an ERP initiative and its use of Agile.  Discover how there are varying models of how organizations have introduced Agile into their enterprise.  Transitioning from traditional waterfall to Agile is not easy....learn how to assess whether your Enterprise is ready for Agile.  Discover how other ERP customers have adopted Agile in their enterprise projects and the key lessons learned from their projects.  	Enterprise Agile	Tutorial	2011
9011	Silo Busting	Organizational silos are the source of the most pernicious dysfunctions you can find within any company. These divisions serve to isolate people in the organization within hyper-specialized roles. Ostensibly, we do this in order to help people succeed.\\n\\n\\nHowever, you can deliver a product successfully without compartmentalizing everyone and everything in an organization within an inch of its life. In this tutorial, we explore the causes of organizational silos, their impacts, and the strategies that you can employ to help mitigate their impact on your teams and within your organization.\\n	Adoption & Transformation	Workshop	2011
9021	Intro to Test Driven Design (TDD) & Pair Programming Dojo	If you ve never been on a team that s fully bought into Test Driven Development (TDD) and Pair Programming, then you re missing out.  These teams tend to learn much faster from each other, be more cohesive, write more modular software with fewer defects, refactor with confidence, and are generally more fun to be on.\\n\\nCome experience what it's like to work on a team that's using XP dev practices.\\n\\nBring a laptop with wifi, and expect to have some fun!\\n	Agile Boot Camp	Tutorial	2011
9025	Flow Games	Flow is a core part of Lean and an important concept for Agile teams and organisations to understand. Flow is what helps us deliver value, from concept to cash, as soon as possible. This session will use a selection of games to emphasise the importance of flow, and generate discussion on how to achieve flow through collaboration within and across teams.	Hands-on Learning	Workshop	2011
9029	Continuous Integration for the world: Agile code + Agile Infrastructure	With all the interest in Continuous Integration and  Delivery, we believe that organizations can greatly benefit from an 'Agile Infrastructure': this would enable frequent changes to happen both at the application level and at the infrastructural level. This session wants to explain and *demo* how the concept of 'Infrastructure as code' can help. We envision the OS and middleware build a second pipeline parallel, integrated in the traditional build process. \\n\\nThe concepts can be visualized as shown in this graphic: http://www.jedi.be/pages/ci-for-the-world/ci-for-the-world.png	New Horizons & New Voices	Demonstration	2011
9033	Agile Hardware and Co-design	Agile software development is getting attention also in embedded software development. Embedded system development on the other hand requires  different engineering disciplines working together. When embedded software team starts using agile methods, it affects also other disciplines. Agile development emphasizes continuous learning through experimenting and collaboration instead of following a detailed up-front plan. Agile embedded software team expects different behavior in system co-design. This talk discusses reasons and ways to adapt agile development to co-design of system development.\\n	Agile for Embedded Systems Development	Talk	2011
9038	Creating an Environment by Making, Keeping, and Amending Agreements	Software processes such as Scrum, XP, and Kanban are a set of practices that a team agrees to follow.  Making, keeping, and changing agreements is crucial to the success of any agile process.\\n\\nA team s agreements and their ability to make, keep, and renegotiate these agreements is fundamental to their success.  However, many times, team members are not all clear on their agreements.  They may not have the same understanding of the explicit agreements and are usually carrying around a set of implicit agreements that they expect their peers to execute.	Collaboration Culture & Teams	Tutorial	2011
9042	Dipping Your Toes Into Kanban	This lightning talk will illustrate how a real world agile team working within two week iterations began using work in progress limits to increase focus, foster collaboration and manage flow.	Agile Show & Tell - Lightning Talks	Talk	2011
9047	Agile Coaching Self-Assessment -- Where do you Stand on the Competencies?	As an agile coach, where do you stand? Where have you "got it down"? What more do you need to develop so that you can be the coach your teams truly need?  In this interactive workshop, thought-leaders in agile coaching Lyssa Adkins and Michael Spayd lead you through a self-assessment using an Agile Coaching Competency Model that covers both the *doing* and the *being* of agile coaching. You'll leave the session with a specific plan of action for improving your agile coaching and (likely) many insights about the nature and importance of agile coaching -- for yourself and for your teams. \\n\\n	Coaching & Mentoring	Workshop	2011
9048	Introduction to Behavior Driven Development	BDD helps development teams hold conversations about the behaviour of their system with non-technical stakeholders. BDD has changed from its early roots as a replacement to TDD and now encompasses Feature Injection, extending across the whole software lifecycle. In this tutorial we look at the original reasons for BDD, returning the focus to the language and conversations at its heart. We look at how BDD s patterns can be applied at multiple scales, from the initial project vision all the way to the code, to deliberately discover and address ignorance in every aspect of software development.	Working with Customers	Tutorial	2011
9051	Managing dependencies to create value	The normal dogma of agile execution is to avoid dependencies as they are perceived to disrupt flow and the ability to act with agility. But, why avoid a dependency that creates business value such as reusing customer information across products? Why add yet another framework which would increase the technical debt when there is one suitable already there?\\n\\nThis workshop will provide and refine a framework and practices to identify and manage the dependencies that truly create value while avoiding those that don't. This will ensure a more constructive way of dealing with dependencies.	Enterprise Agile	Workshop	2011
9052	How CSlim and Fitnesse Can Help You Test Your Embedded System	Imagine pushing a button and knowing within minutes that your entire embedded system works to its specifications. With open source tools, you can build into your embedded system the means to write automated tests that will aid communication between team members, verify your code, and allow the specification of functionality before it is implemented. This tutorial takes you through everything you need to write Fitnesse and CSlim tests in your C or C++ based embedded system. We'll also cover the bigger picture of how and why these tests are valuable. Bring a laptop!\\n	Agile for Embedded Systems Development	Tutorial	2011
9056	A Day in the Life of a Menlonian	Menlo Innovations is a fully agile shop. Our team is located in one open space - no cubes or offices. Our company s mission is to return the joy to inventing software. Everything about the space in which we work and the people we work with fosters collaboration and creativity. This talk will seek to answer the question  If we visited your team, what would we see that would blow us away?  We will simulate a day at Menlo by taking attendees through each hour of the day, showing them through photos and brief explanations what it is that makes Menlo such a unique environment to work in.	Agile Show & Tell - Lightning Talks	Talk	2011
9066	One earthquake, hundreds of volunteers and six days to build a website 	On February 27, 2010 Chile was struck by one of the most devastating earthquake. A team of of hundreds multidisciplinary professionals spontaneously arose to help people of our country. Although the abundance of talent, courage and determination, the team was not able to focus due to the stress, lack of information and chaos. We were called to coach this team and could experiment the power of agility in such an exceptional context. In only 6 days the team implemented a web portal and several other tools, helped by kanban, agile programming, holacracy and retrospectives.	New Horizons & New Voices	Talk	2011
9068	Agile Security:  They're Not Mutually Exclusive!	In the federal government, or in any industry where secure systems development is a concern, security requirements are typically considered at the end of development, right before transition into production.\\n    In this session, we will examine recent changes in security doctrine, and how these changes favor secure development and align well with agile methodologies.\\n    Based on work with the National Security Community over the last 3 years, the presenter will describe how to build security in throughout development, and how to put the emphasis on building a secure system.	Development Languages Practices & Techniques	Talk	2011
9074	Continuous Integration: The minimum viable product	What does it mean to 'do' Continuous Integration? It used to be enough to execute your unit tests in CI.  But the bar is steadily raising for engineering practices. In the last decade we've seen tremendous improvements in acceptance testing. JavaScript is now a platform in it's own right. Cloud computing is now vital. There's growing interest in deployment to prod.\\n\\nSo Continuous Integration is under more pressure than ever.  As the bar slowly raises for engineering practices, we ll present 2011's minimum viable feature set for Continuous Integration.	Development Languages Practices & Techniques	Talk	2011
9077	Democracy unleashed: bringing agility to citizen engagement	Empowered individuals. Creative, participatory decision making. Connectedness and care for each other. These words apply equally to an Agile organization as to a healthy community. What might happen if we applied Agile values and methods to transform communities? I will share my experiences over the past year and up to Agile 2011 to nurture engaged community in my home town - tools and methods, trials and triumphs, how Agile applied to community differs from organization. This is bleeding edge stuff, an area of opportunity for Agile consultants to do work that transforms the world.	Insights - Experience Reports	Experience report	2011
9082	Stories from my Experiences Learning Scrum	Stories of using Scrum as a distributed team to build a piece of software (Veracity) which helps distributed teams use Scrum.\\n\\nVeracity is an open source DVCS, somewhat like Git or Mercurial, except that it can manage record-and-field oriented data in the same "decentralized" manner as directory-and-file oriented data.  Its goal is to allow other kinds of team tools (such as agile planning) to be decentralized, not just version control.  Veracity includes a Scrum project module.\\n\\nNeither we nor Veracity are great at Scrum (yet!), but both are getting better with every iteration.	Insights - Experience Reports	Experience report	2011
9083	"It Depends on Context": You CAN get there from here, if you know where here is	Every Agile project must respond to organizational conditions and climate. Gaining awareness of context helps the core team and project community know how they fit into the larger organization. As a systems thinking approach, Agile Chartering and its focus on context enables better decision making, taking the whole system into account. In this session, we will share our experiences with chartering and demonstrate interactive tools and techniques for executive sponsors; portfolio, product, and project managers; and project teams to define and work with their specific project context. 	Business & Project Management	Demonstration	2011
9088	The Product Partnership: Using Structured Conversations to Deliver Value	A shared understanding of product needs is the basis for continual value delivery -- and requires a partnership of product stakeholders. In this tutorial attendees experience a technique that enables partners to collaboratively analyze needs and make just-in-time decisions on what to deliver next. The technique engages partners in structured conversions using seven question-sets to explore, evaluate, and decide on high-value options for the next cycle delivery. Attendees gain insights on how to use this technique to guide product need conversations at any level of agile product planning.   \\n	Working with Customers	Tutorial	2011
9089	Fear-Driven Impediments	In many cases fear is a reason for impediments of an agile team and can cause many effects: resistance to organizational change, procrastination of decisions, inability to surface the real issues in retrospectives. To successfully remove such impediments, the fears of all involved individuals must be understood. If fear is a reason to fail, it should be dealt with as fast as possible.\\n\\nExamples:  \\nI must not use TDD, my boss forbid it.  \\nI will be fired or removed from the team if I say  no .  \\nWe can t change this specific part of the organization because team X would get unhappy.	Collaboration Culture & Teams	Workshop	2011
9091	Whatever the problem, community is the answer	"What are the issues and organizations in this world too important to fail?" asked Lyssa Adkins at Agile 2010. Imagine if the Agile community banded together to tackle complex problems like a smart energy grid or reforming education. Our collective skills, knowledge and passion uniquely position us to make a difference. Whatever the problem, community is the answer. Come meet like-minded travellers. We'll use the engaging World Café conversation format to re-discover our gifts, the kind of world we seek, think beyond the usual debates, with actionable steps to make shifts on a massive scale.	Open Jam	Workshop	2011
9095	Creating a Team Culture to Navigate Conflict	Anyone who has spent solid time with an Agile team can attest to this one thing: conflict happens.  With Agile, we seek excellence and we see that conflicts arise one after the other. Harmony and disharmony are both normal.  But how can teams turn conflict into something productive and maybe even inspirational?  Models and tools to do just that are the core of this workshop.  Participants will leave the session with new ways of thinking about conflict on their teams as well as tools they can use right away to help their teams (and themselves) navigate conflict.	Collaboration Culture & Teams	Workshop	2011
9104	How Social Media in Agile Projects can drive innovation	According to Gartner Group: Companies that are trying to restrain their workforce Internet usages will be extinct within the next 5-10 years...\\n\\nChildren of today use Twitter, Facebook and much more as a normal part of their daily lives - It is their network and backbone! The social medias are to them, what email and phone was to us and our parents.\\n\\nWe call these children "Digital Natives"!\\n\\nHow do we overcome the need for exposure and social interaction - both regarding recruiting and keeping skilled people, BUT also in high regards how can we use social media in our agile projects?	New Horizons & New Voices	Talk	2011
9108	Business Rules Essentials for Quality Software	How and when do you elicit and specify business rules? Where do you look for business rule clues? How can you measure the value of business rules? What is the right level of business rule granularity for testing? When can you start testing business rules? Answering these questions is key to enable effective estimating, building and testing efforts. In this interactive session, you learn how a collaborative, cross-disciplinary approach to business rules provides just-enough, just-in-time detail to develop, test and deliver quality software.     	Testing & Quality Assurance	Tutorial	2011
9111	Facilitation & Communication in Agile Teams	While traditional projects expect most communication to take the forms of email and manager-led meetings, agile projects expect teams to self-organize, collaborate and participate in decision-making. But what is self-organization? How does it work? This 90-minute tutorial will focus on what it means to self-organize, how it occurs and how to help it along, and the hurdles that must be cleared in the process. See how the proper use of facilitation in agile meetings can be a key driver in the development of high-performing self-organizing teams. 	Agile Boot Camp	Tutorial	2011
9112	Everything I know about Leadership I learned from Russell Crowe	While the boss is the person you HAVE to follow, a leader is the person you WANT to follow.  But are leaders born or do they grown through the trials and tribulations of experience?  Who are the people you choose to follow and what are their leadership traits? \\n\\nIn this fun and interactive tutorial we will examine several familiar characters from popular films and discuss their effectiveness as leaders and how they use their own unique style to influence the people they lead. We will then discuss which styles are most effective when working with self-organizing, self-directing Agile teams.	Leadership	Tutorial	2011
9117	My Agile Suitcase	Imagine you are an agile consultant or coach. You are called by the inhabitants from waterfall island, who haven t heard about agility before and want to benefit from your advice. Which practices, principles and values would you pack in your agile suitcase for providing them guidance? What would you leave at home?\\nIn this session experienced agilists will deliver insights in their agile suitcases. Their short, concise and entertaining Pecha Kuchas may give you hints for your own suitcase. Afterwards you will work on your own agile suitcases. This may help you to travel lighter next time.	Coaching & Mentoring	Workshop	2011
9128	Agile Requirements Exploration with Tester Collaboration	Incorporating the testing mindset improves customer exploration of product needs. At the same time, agile test planning and delivery benefits from involvement in agile requirements analysis.  In this experiential tutorial, participants examine a subset of agile analysis models in tandem with specifying acceptance criteria to verify and validate requirements. Participants experience how incorporating the tester mindset during requirements exploration accelerates test planning and specification, enhances product quality, and uncovers missing, conflicting, erroneous and unnecessary requirements.	Testing & Quality Assurance	Tutorial	2011
9140	Coaching Success: Getting People to Take Responsibility & Demonstrate Ownership	Examine, practice, and apply thinking tools and communication strategies adopted by coaches worldwide for teaching, coaching, and inspiring ownership behavior the essence of personal agility.\\n\\nCome learn to apply and teach the Responsibility Process, to handle objections, and to know just what to do when another believes they're owning it and you believe they aren t.\\n\\nDoing so inspires far greater ownership behavior. You add more value as your charges take ownership. They learn, correct, and improve more easily, directly, and quickly. It's the empirical process at the individual level.	Coaching & Mentoring	Workshop	2011
9143	User Experience Teams Gone Agile	If an open collaborative space, short iterations, story-cards, and functional testing are good for software development, then why are software the developers the only ones who have to do it?  What would happen if user experience designers followed the same practices?  In this energetic hands-on tutorial you will explore practices that some user experience teams have adopted/adapted from agile developers.  The session will also share some success stories that demonstrate how these techniques resulted in greater project success.	New Horizons & New Voices	Tutorial	2011
9167	Negotiating Agile Contracts	Business managers and consultants alike are finding that their standard templates for corporate contracts do not support the Agile process.  Instead, these groups must work together to find a new way to define roles and responsibilities within an Agile framework.  This session will focus on practical considerations from both sides of the negotiation table those paying for the work and those providing it in developing these agreements. Session facilitators will help participants develop an Agile approach to writing contracts from requirements definition through project closure and auditing.	Working with Customers	Tutorial	2011
9170	Agile Transition in Trouble? Using the Kotter Change Model as a Diagnostic Tool	Agile transitions tend to imply organizational change. According to change expert John Kotter 70% of all major change efforts in organizations fail. Is it any wonder that so many agile transitions deliver only lukewarm results?\\n\\nThroughout the session, the speakers will use the lens of the 8 Step Kotter Change Model to share their experiences guiding four organizations through their agile transition.\\n\\nIn this session you will learn the 8 Step Kotter Change Model and see how it can be used to guide your agile transition.	Adoption & Transformation	Talk	2011
9172	Visual Portfolio Management - Putting the "Big" in Big visible tracking	In this interactive workshop we will explore the use of a Portfolio Alignment Wall (PAW) to track progress, visualize dependancies and increase collaboration on large portfolios. Experience the process of populating and managing the PAW through a portfolio simulation. \\n\\nWe combine Scrum-Of-Scrums, visual management, value streams and a simple set of rules to balance simplicity and sufficiency.  Bob and Mike have used this technique to manage delivery across 17 agile and waterfall teams, 11 major feature streams with cross team dependencies. 	Enterprise Agile	Workshop	2011
9173	Solving the 1-10-100 problem: Extending Continuous Delivery to QA and Ops	In many medium and large organizations, friction between Agile application development (Dev), Quality Assurance (QA), and Operation (Ops) teams kills productivity.  We ll discuss how the typical continuous delivery loop fails to take into account the need for bi-directional communication with QA.  The growing role of Ops in the application lifecycle means it needs to be connected to the same continuous delivery loop and be linked directly into Agile planning processes.  How does extending the collaboration loop to Ops potentially flatten the exponential 1-10-100 cost curve into a linear one?	Testing & Quality Assurance	Talk	2011
9176	Twelve Steps to Agility	**You're trying to do Agile & it isn't really taking.** You are running into problems at various levels, from naysayers on teams all the way up to C-level execs. At your company, everything is a  top priority  & frequent interruptions are the norm. \\n\\nExplaining  who does what when  is complicated, & there is no clear answer on how to simplify that story. Most meetings you attend are a waste of time in your view. You know Agile is part of the solution, but the results so far are NOT good.\\n\\n**You ask yourself: What steps can we can take now that are quick, cheap & effective?**	Adoption & Transformation	Workshop	2011
9178	Lean Fundamentals: Understanding Flow Through Games	The Lean concept of flow is the underpinning of Agile methodologies including Scrum and Kanban.\\n\\nThrough a series of games and simulations, you will get to experience the inefficiency of multi-tasking, measure the benefit of smaller batch size and start thinking about how bottlenecks impact your system.\\n\\nBy the end, you will understand flow and how it relates to agile practices such as stories and iterations.\\n\\nCome and learn through play.\\n\\n(We will play the Name Game and the Penny Flow Game)	Agile Boot Camp	Tutorial	2011
9182	Tell Me Why -- "The Golden Circle" of Agile Transformation	Simon Sinek s "Golden Circle" resonates with Agile adoptions. Often, we start with  What  as the core for our plans. Or, we may try to start with  How .  Why  can be conspicuous by its absence. I fell into this  What  trap when I was first guiding teams in Agile transformations. I hadn't first asked "Why" though I did embrace Lean principles for "How". I jumped to What the practices were: 5 steps of what to do, roadblocks to expect, and benefits to reap. In this tutorial, we'll create our own Agile "Golden Circles" of "Why How What" for successful transformations.	Adoption & Transformation	Tutorial	2011
9185	Lean Procrastination - How to Identify the Last Responsible Moment	Procrastination is the psychological behavior to needlessly and counter-productively defer tasks. Lean thinking recommends deferring decisions to the last responsible moment and delivering just-in-time. One is a burden, the other a management theory, yet both are concerned with deferring.\\n\\nMeet the Shu-Ha-Ri model of Lean Procrastination which gets you rid of management if applied to work you fully enjoy and master.\\n\\nPlay with us the new LRM complexity game to explore how complexity effects and changes the last responsible moment and how Lean Procrastination enhances flexibility.	Hands-on Learning	Workshop	2011
9186	Strategies for Agile Portfolio Management	Traditional portfolio management frequently uses principles that are at odds with agile thinking. For example, believing that people should be 100% utilized might lead to us to start many simultaneous projects leading to high levels of team-member multitasking. Managing a portfolio according to these principles all but guarantees a continuous stream of impediments that interfere with team-level agility and sub-optimizes delivered value. In this session I discuss strategies for aligning portfolio management with agile development to ensure a better end-to-end flow of value.	Business & Project Management	Tutorial	2011
9192	Collaboratively Chartering Success	How do you create the big picture for your projects or teams? If the big picture is missing, you are not alone but you are probably struggling. Collaborative chartering is a simple but powerful tool that bonds communities around "why they are building what they are building. Known to many project managers, but unknown to many agile teams, chartering builds the large context around product, community and a delivery cadence just to name a few. If you are looking to augment or replace kick off sessions, drop in and learn concretely how to get started in a valuable direction.	Business & Project Management	Workshop	2011
9197	Agile engineering practices and tools	Extreme Programming put strong emphasis on engineering practices to support agile execution and have in practice influenced how many of those practices have evolved. Scrum assumes such engineering practices are being used, without dictating specifically which practices. In this session, we will dive into the most important agile engineering practices and the kind of tools that supports them. We will also discuss the evolution of such tools, including those from both the open source community and commercial vendors.	Agile Boot Camp	Tutorial	2011
9207	Integrated Product Development	In this session, interaction designer Tim McCoy and agile coach and practitioner David Hussman introduce a new way of working. Integrated Product Development combines design skills with agile delivery. Drawing on their real world experience from a range of companies, David and Tim provide a cohesive and integrated process which iteratively draws out real value and context. You will learn goal driven design thinking that helps before and during iterative development. Stop in if you want to try tools that develop rich user experience during the iterative deliver better and timely products.	Hands-on Learning	Tutorial	2011
9210	Applying the Dreyfus Learning Model to Focus your Coaching Approach.	Acquiring any skill through instruction and experience (e.g. flying a plane, practicing yoga, or developing software using agile) involves progressing through common stages of learning. Understanding those stages, the behaviours people (and teams) exhibit at each stage, and how to effectively coach toward the next stage, is crucial for anyone tasked with assisting a team's agile transition. We will present the Dreyfus Model of Skill Acquisition, its 5 common learning stages as applied to agile transition, and coaching advice for each stage based on their common observable behaviours.	Coaching & Mentoring	Talk	2011
9212	Scrum and Kanban Like Chocolate and Peanut Butter	As you adopt Scrum across your enterprise, you will find that synchronizing the work of interdependent Scrum teams is a challenge. Kanban has a number of principles and practices that can aid this synchronization and thus smooth out your adoption.\\n\\nThis session will introduce Kanban from a Scrum perspective, show how the Lean practice of  One Piece Flow  is the key to both, and get into the nuts and bolts of specific practices and concepts from Kanban that can be adopted by an existing multi-team Scrum program.\\n\\n	Adoption & Transformation	Talk	2011
9213	Release your team's intelligent energy through five powerful conversations	With successful agile teams there is a vibrant team buzz present. Struggling teams often seem dispirited and anemic. As a Scrum Master, coach or manager, you'll learn the five key drivers of engagement: I fit, I'm clear, I'm supported, I'm valued, I'm inspired.\\n\\nYou will work with others, focusing on these drivers, to build the five key conversations that will tap & release the latent intelligent energy of the people on your teams.\\n\\nYou will also be able to apply the techniques in this session to your family or other group situations. Prepare to be energized and challenged! 	Coaching & Mentoring	Workshop	2011
9215	Applying Agile to IC Development... We're Not That Different After All!	Agile software development methods have been adapted to and applied in a number of other areas. ASIC/FPGA development, however, with its big bang development and delivery model is an area where agile is strangely absent. This talk examines how agile methods in the following areas may be used to gradually displace the big bang model:\\n\\n* feature based, incremental development\\n\\n* early/sustained collaboration between design, test, modeling and embedded software experts\\n\\n* regular retrospectives\\n\\nIncluded are ideas for how agile may best be introduced to hardware teams.	Agile for Embedded Systems Development	Talk	2011
9219	Enterprise Agile Visioning and Learning   from the Organization to the Person	Truly Agile organizations require new ways of creating and sharing knowledge.  In this session, Jean shares personal experiences and exercises in visioning & learning models. Each model targets a particular part of knowledge creation. For the organizational level, we look at PDCA coupled with Pascal Dennis's True North & Mother Strategies. For team learning, we work with ORID retrospectives. Finally, Peter Senge's personal visioning helps us dig into our own work within an Agile growth-oriented context. This regular cadence of visioning and learning truly sustains Enterprise Agile.	Enterprise Agile	Workshop	2011
9228	Distributed Scrum: Why some teams make it work well and others don't	How does a geographically-distributed team collaborate across distance, culture, and even language? What can an organization do to encourage successful teamwork? What technologies and practices increase collaboration?\\n\\nThis workshop will explore the patterns that enable companies to successfully deliver software with a distributed team. It will be co-presented by the VP Technology of a company that adopted Agile for teams in three time zones with two languages and cultures, and an Agile coach that assisted with the transition.\\n	Collaboration Culture & Teams	Workshop	2011
9231	Agile Isn't Enough	Agile isn't the destination, it isn't even everything you need to get there, at best it's a set of ideas that will help you find what you need along the way.   At this session, we'll explore other sources for some of the things you'll need.  \\n\\nWe'll look at a sampling of techniques, tools, and ideas from outside of agile that are extremely useful to agile teams :\\n\\n* Current Reality Tree - from Theory of Constraints\\n* Paper Prototyping - from IxD\\n* A/B Testing - from Lean Startup\\n* What's the next action? - from GTD\\n	New Horizons & New Voices	Workshop	2011
9238	To Deliver Faster, Build it in Reverse	Agile enables building a system in any order. To get business value faster, it may be better to deliver in the REVERSE order. Corporate waterfall starts with the foundation and the pipes, but on a large-scale Gap e-commerce program, we're flipping the approach:\\nStarting with the fulfillment of orders,  then the customer facing web site, from there to the content and data feeds and last to the tools and foundation.\\nIn the talk we'll discuss:\\n\\nAttributes of Agile that enable this approach\\n\\nBenefits / Disadvantages / Risks\\n\\nThe architecture requirements to support this reversed delivery\\n	Insights - Experience Reports	Experience report	2011
9241	Distributed 3d Conference Ready Rooms	Got Distance?\\n\\nCome learn about immersive tools for remote teams.  See how companies and government have used 3d platforms to save money and collaborate with distributed teams of 2 to 2,000.  \\n\\nVirtual Ready Rooms will be available throughout the conference for you to visit.     They are a speakers lounge where you can mingle with others.   We'll feature key platforms on rotating days.\\n\\nIn addition, a 60 minute slot will host a panel of Agile Luminaries in these virtual rooms.\\nGet ready at http://www.agiledimensions.com/blog/learn\\n\\nDo it.  Learn it.  Join us for Hands On Learning!  	Hands-on Learning	Demonstration	2011
9265	Routine Conflict Processing as a Cultural Norm	Regardless of the Agile techniques you employ, one thing is for sure: lots and lots of conflict is being generated. Questions about the current best idea, authority distribution,  identifying impediments, and impediment removal are just some of the sources of conflict and heat in Agile adoptions. \\n\\nConflict can kill your best intentions for your teams and organizations. Protocols- "structured interactions"-- are a useful tool for processing mistakes, differences and conflict. Attend this session to learn how to develop enterprise-wide norms for routinely processing conflict.	Collaboration Culture & Teams	Tutorial	2011
9269	Handling Product Management Across the Enterprise	The common model of a product owner works well for small to medium scale Agile adoption. However, for large scale Agile adoption one must expand the role to include a product manager that works with the business stakeholders while the product owner focuses on driving the teams. How proper product portfolio management that eases the handling of business dependencies by properly loading the backlogs of the teams involved is presented. The timeliness of this flow from business stakeholders to product managers to product owners to teams also demonstrates the need to keep backlogs to a minimum.	Enterprise Agile	Tutorial	2011
9271	Innovation Jams: Lessons in Agile Product Development - An Experience Report	Shortening time-to-market requirements have put software developers at product companies in a crunch. Many organizations need to cut their development time in half, yet the team is already working in overdrive. This talk reflects the experience of Accept Corporation in developing products in 3-4 day sprints dubbed  innovation jams . We ll share how we can make a set of new product features in under a week, using online customer submissions to guide development priorities and a process flow that accelerates collaboration so we can focus on coding.	Insights - Experience Reports	Experience report	2011
9314	Narrative Coaching	People problems - some we expect and have answers for, sometimes only ideas. Sometimes we just don t know. The narrative approach helps you collaboratively identify and draw out the solutions people have inside themselves.\\n\\nNarrative is a social or personal problem solving approach that shifts power and truth to the person wanting help. It strengthens areas of success. It is not prescriptive. It does not assume the coach has all the answers and needs only to talk with the client enough to identify the problem and prescribe a solution.	New Horizons & New Voices	Clinic	2011
9316	Planting the Power of Strengths-Based Teams	Why do you love or hate what you do? What difference does it make in productivity for your team? I'll share highlights from my experience with several groups, and Dan will share how the teams at Technicolor use it, as well as a quick how-to on ramping up teams on a strengths-based approach. We'll also cover several common strengths in IT and coaches, and how I've applied the test results to help team members find the niche on the team that plays to their strengths and brings out their best.	Agile Show & Tell - Lightning Talks	Talk	2011
9328	Facilitation Fun: BE the challenge you face!	Facilitation skills are essential for anyone. In fact, everyone facilitates whether they know it or not! Do you work on a team, manage an organization, or otherwise work with others? The opportunity to facilitate will come up.\\n\\nSteven  Doc  List leads you to explore the common patterns & antipatterns that come up in facilitation, for the facilitator and the participants. We ll have fun by taking on roles, and exploring the behaviors that work and that don t work. The session will include some time on specific activities and techniques that can be used for effective facilitation.	Open Jam	Tutorial	2011
9347	Integrating UX Into Agile: How To Ensure Your Sprints Result In Usable Software	Learn about the UXI Matrix, a modified version of the product backlog that integrates UX-related information to help the team consider UX impact when working the backlog. It helps you track user experience work and its impact. This is not a product. It s a simple set of techniques proven in multiple projects, that allow you to improve your ability to deliver great experiences to your customers in an Agile fashion. See the next generation in the evolution of the product backlog and find out how to overcome the weaknesses of traditional product backlogs that don t consider UX related work.	User Experience & Interaction Design	Demonstration	2011
9454	Evolving to Agile: A story of agile adoption at a small SaaS company	There are many sources of information about agile adoption in an enterprise environment.  However, I have not found similar material focusing on the challenges present at smaller companies.  This is the story of agile adoption at a small, organic growth, enterprise SaaS software company.  We will discuss what problems we were experiencing before adopting agile, what problems we experienced during adoption, and what problems we are still experiencing.  During the story we will also touch on what we did to address these problems, both successfully and unsuccessfully.	Insights - Experience Reports	Experience report	2011
9504	Vertical Slicing: Smaller is Better	Do your teams have trouble breaking down stories so that they always have demonstrable functionality at the end of a 2 or 3 week sprint?.  Enter "vertical slicing,"  the exercise of breaking a story down into smaller pieces that when completed individually, still offer demonstrable business value.   There is much mention of the concept of vertical slicing in literature, but there few published details on how to actually do it.  In this session, you will learn how we created a model for successful vertically sliced business value, and helped our teams toward hyper-productivity.	Insights - Experience Reports	Experience report	2011
9544	Moving development and testing out of their Proterozoic silos	For far too long development and testing have lived in silos, serving different masters. In most organizations, testing is the neglected child. 'Anyone can test' - and organizations hire accordingly.\\n\\nThe main message behind this session is how to handle testing organizationally and realize not only the skills needed for a successful testing organization but also how the interaction between development, product, and testing needs to evolve.\\n	Collaboration Culture & Teams	Workshop	2011
9574	The Origins of Agile	What is Agile Development, and how did it come about?  How was software done before agile, and why did we change?  In this talk we will trace the recent history of software processes starting with the grand misinterpretation that led to Waterfall and culminating with the revolution that led to the Agile Manifesto.  We'll talk about what software development was like before Agile, and what makes Agile so different. 	Agile Boot Camp	Talk	2011
9604	Agile in Academics	Our university bastardised Agile tools to give curriculum designers in an academic setting increased productivity and improved motivation. This allowed the designers to provide better quality and cutting edge courses in less time. The online educational team implemented and shared a personal kanban, dropped job descriptions, and saw massive improvements throughout. Scrum was then studied, dissected, and reassembled for our needs. Writers are now asking regularly to write for us, while designers have more free time for adding new dimensions to the curriculum in addition to normal expectations. 	Insights - Experience Reports	Experience report	2011
9615	Agile Thinking for Business Analysis   Going beyond user stories	The agile literature currently largely overlooks many of the existing tools and techniques of analysis, often with a focus on user stories as the primary tool for defining and presenting requirements in agile projects.  \\nThis workshop presents a variety of analysis techniques which can be used to identify and elaborate customer needs, to compliment the use of user stories and ensure that the right customer needs are effectively presented to the team at the right time in a way that ensures the right product gets built.  	Working with Customers	Tutorial	2011
9655	The Transformation Priority Premise	Transformations are like refactorings in that they are simple incremental changes to code.  They are unlike refactorings in that they change the behavior of code.  This talk presents a set of transformations sufficient to create any application.  It also suggests that when they are applied in a certain order developers can avoid many of the common problems with TDD such as painting yourself into a corner, or taking steps that are too large.  It also suggests that the ordering helps developers to find better algorithms.  See: http://cleancoder.posterous.com/the-transformation-priority-premise	Development Languages Practices & Techniques	Workshop	2011
9701	A Complete (and fun) Scrum Simulation	Whether you are new to Scrum or are looking for a quick and fun way to introduce Scrum concepts to others, this session is for you! Participants learn every Scrum role and activity by actually doing them in this fast paced simulation.(   \\nEach team starts by throwing together a very wide (and creative) backlog of features. A Product Owner reins in the backlog by prioritizing. The team commits to a micro-sprint&  and away we go! ( After three 'days' (minutes really) and lots of cutting, gluing, and discussing, the sprint ends with an actual product to demo and experiences to retrospect.	Agile Boot Camp	Tutorial	2011
9764	Yahoo! Sports: Sprint 100 & Beyond	Yahoo! Sports, the Web's leading sports' destination, began one week sprints and weekly releases with Sprint 100 in October 2010.  The experiences and learnings of the Yahoo! Sports team will demonstrate specific actions to take to overcome scrum fatigue and rejuvenate your teams.  Our exploration will focus on three transformative events: the implementation of daily code releases during the 2010 World Cup, the innovative Hacktacular event, and the data quality improvements of the Great Bug Sweep.  	Insights - Experience Reports	Experience report	2011
9906	Agile Game Incubator	Ever wanted to create a game but not sure how or where to start? \\nDo you prefer learning-by-doing? \\nDo you use games as a learning tool but haven't found the right game for a topic? \\n\\nLearn to create your own unique games for communicating complex topics and injecting some fun back into work. Come prepared with your own topics and ideas or join in on others'. \\nDon and Mike will kick things off by sharing their approach, valuable guidelines, and experience. They will facilitate the formation of teams around problem topics, then guide them through the creation of the ultimate Agile game!	Hands-on Learning	Workshop	2011
9925	Agile From the Top Down: Executives Practicing Agile	Organizations will have trouble sustaining a true Agile culture if the Sr. Management team does not live the same way.  IT Executives must practice what they preach. If they want teams to be transparent and agile, they need to practice themselves and lead by example. \\n\\nThis talk will share some Agile & Lean techniques, applied in a new way, to help organizations understand their constraints so they can transparently carry forward their journey to becoming Agile. \\n\\nYou can view the slides for my talk at jonstahl.com. I would upload a PDF of the slides but the file size is too large.\\n	Leadership	Talk	2011
9964	Agile Education by Object Game   most HISSATSU way to understand it.	Some people cannot understand  agile technique such as TDD and refactoring because these practices need "Object-Oriented" manner. This method can change non-OO brain into Object Oriented brain for only 4 hours by very easy way!  Learner can understand Why OO?  OO Application Behavior, OO Applications Architecture.\\n\\nIn Japan, Many people have gotten Object Oriented brain since 2006 by this method. and Join Agile Teams! even CEO can understand OO Application  behavior. AMAZING! In this hands-on, you can understand and experience that methods to make OO Brain!\\nSee: http://slidesha.re/ogo5mJ\\n	Hands-on Learning	Clinic	2011
10005	Making Metaphors that Matter	In this paper and talk we'll present our experiences with using architecture metaphors, how they helped us, and some tips we learned for making great metaphors that improve team communication and architectural discussions. Our experience grew out of the IVET project, a collection of software tools to help shoppers of a regional grocery store chain plan menus, find recipes, create shopping lists, and clip e-coupons.  The team built a set of web services in addition to a web client and iPhone app.	Insights - Experience Reports	Experience report	2011
10030	The Agile Scaling Model (ASM): Be as Agile as You Need to Be	The Agile Scaling Model (ASM) provides the context and advice for effectively tailoring agile strategies.  It describes how to extend the agile construction life cycle into a full-fledged disciplined agile delivery life cycle from project initiation to production.  It then describes how to tailor agile practices to address eight scaling factors: team size, geographical distribution, domain complexity, organizational distribution, regulatory compliance, organizational complexity, technical complexity, and enterprise disciplines (such as enterprise architecture, reuse, and governance).  	Enterprise Agile	Talk	2011
10113	Beyond Planning Poker - The Planning Poker Party	People across the world keep discovering Planning Poker. It's a helpful technique, but Planning Poker is not the only game in town.  By itself, it's not the right game when confronted with a large batch of un-estimated stories.  In this session we'll review Planning Poker and some of the underlying principles, and some other uses of them. Then we'll scale the ideas of planning poker and affinity grouping to handle large batches of stories in The Planning Poker Party. We'll walk through the steps needed to get a large backlog sized, and an initial release plan in place.	Working with Customers	Talk	2011
10150	Test-Driven Development in(bed) C	Test-Driven Development is for Java programmers, not for C!  Yes it is!  Roll up your sleeves and test-drive C with us.  We'll start with a short intro to TDD, and quickly get you doing TDD.  Bring your laptop.  If you don't have one,  we'll team you up with another programmer.  You'll see how to make TDD practical for embedded software development.  See <a href="http://cpputest.org/node/42">CppUTest Compilation Environment(http://cpputest.org/node/42)</a> for needed tools. We'll also have a bootable Linux DVD with all the tools so that you can join the experience.\\n	Agile for Embedded Systems Development	Workshop	2011
10201	How to design stuff that matters fast	Too much time is wasted creating that big design upfront only to find that users don't like what you have built once it has been released. Today we are in danger of not only over designing, but also designing solutions to the wrong problems. \\n\\nSee how I experiment with rapid design techniques to ensure design solutions for the **right business problems** are delivered to the **right target audiences** *rapidly* and *continuously*. Learn how to create design solutions fast as a team and work with a client to get products that really matter out into market early that will delight users.\\n\\n	User Experience & Interaction Design	Workshop	2011
10202	Cracking the Agile Big Rocks	Agile solves many problems with software, but presents a new set of challenges for management - the big rocks.  For example, personnel evaluation, agile in a waterfall business, agile and PMO, poor emergent design and more.\\n\\nThis is a highly interactive session.  Before the session, conference participants can post thier big rocks.  During the session the facilitator will present expert opinions on solving those problems.  Participants will form teams and pick their hot issues,  develop potential solutions by medling experience and expert opinions, and present thier solutions to the group.\\n	Enterprise Agile	Workshop	2011
10580	How Functional Programming Changes Developer Practices	Functional programming (FP) is going mainstream. First seen as a better approach for concurrency, we are finding that FP has pervasive benefits, often supplanting OOP for many purposes. This talk explores how FP aligns with, but also changes developer principles and practices.\\n\\n1. FP emphasizes mathematical rigor and rich types, which change TDD.\\n2. Capturing your domain model in code has serious drawbacks.\\n3. *Pure* functions and immutable data structures are more modular and reusable than objects.\\n4. FP introduces new "design patterns".\\n5. *But*, FP can be hard to master.	Development Languages Practices & Techniques	Talk	2011
10596	Exploratory Testing in an Agile Context	Exploratory Testing (ET) isn't new; the term was coined before "Agile." But ET and Agile fit together hand-in-glove. The disciplined Agile engineering practices like TDD and CI mean the code is constantly checked against expectations. But does it also do things we don't expect? Are there lurking risks and surprises? That's what ET can help us discover. And that's why stories aren't really Done until they're both checked and explored. This session explains ET in the context of Agile and gives participants an opportunity to try it out by exploring a hand held electronic game.	Testing & Quality Assurance	Clinic	2011
10636	Leadership Agility in a VUCA World 	Participants will apply leadership agility tools throughout this presentation that combine the leadership agility research and experience of an **Organizational Psychologist, Dr. Nick Horney** with **AGILE Expert, Jim Highsmith**.  Dr. Horney will share his 20+ years in the application of leadership agility with senior leaders from multiple industry sectors and global locations.  Jim Highsmith will provide the commentary and perspective from the AGILE community, reflecting his recommendations about combining the learning from AGILE methods with insights from strategic leadership agility.  	Leadership	Talk	2011
10686	Embedded Storycrafting: Key to controlling Risk and Schedule	In embedded development, much infrastructure must be built before the first user feature can be delivered. Customer-value stories will often be too big. But breaking them down risks losing the focus on delivering functionality. The answer? Let your evolving user stories be the catalyst that drives hardware-software co-development in the early iterations, and then draws in each related engineering discipline as naturally as an acorn develops into an oak tree. Many examples from real embedded teams will be given, and sessions will be offered in open space to practice the technique hands-on.	Agile for Embedded Systems Development	Talk	2011
10782	Acceptance testing in the land of the startup 	Songkick is a web based music startup which operates in a new market place full of unknowns, developing a free service. Focusing on user experience as one of the most critical features of the product. Continuously iterating and experimenting with features based on user observations and metrics. Unusually we adopted Acceptance tests and BDD while still in the early startup phase. Having spent more than 2 years growing our system and learning the pain points both technically and culturally we have lots of interesting lessons we would like to share about startups and Acceptance testing.	Testing & Quality Assurance	Talk	2011
10877	Kaizen Lego Game	After revolutionizing the automobile industry, Lean principles have been applied to different knowledge areas, such as software development. However, many people are using this ideas without having been introduced to the concepts that made Lean successful.\\n\\nIn this interactive session the participants will work in a small Lego production line, trying to improve their own process using different kaizen techniques. Up to 30 participants divided in small teams will learn about Kaizen, PDCA, standardized work, 5 Whys, Genchi Gembutsu, A3 reporting value stream mapping in a hands-on experience.	Hands-on Learning	Workshop	2011
10905	Agile Clojure	This session is a hand-on immersion into an agile development project using Clojure.  If you're new to Clojure, not a problem.  The nature of the project will educate you in the language as well as a toolkit for agile development.  If you're new to Agile, perfect!  You'll experience all the facets of an agile project possible in a half-day session.  If you're experienced in Agile and/or Clojure, awesome! \\n\\nWe'll work in micro-iterations, with customers, stories, acceptance tests, pair programming, etc...  It's sure to be a fun filled adventure that'll get you waist deep in Clojure action.	Development Languages Practices & Techniques	Tutorial	2011
10908	Tests as a Means of Abstraction	The different nature of functional languages can lead to a different perspective on test-driven design: 1) that the soul of the program is a network of relationships among facts-about-functions, 2) that tests are a usefully more abstract way of describing that network than is the program itself, and 3) that data structures should not be designed because they are better viewed as an epiphenomenon--froth thrown off by the network as it computes.\\n\\nIn this session, we'll show these claims in action and question them. The example will be in Clojure, but knowledge of Clojure is not required.	Development Languages Practices & Techniques	Talk	2011
10914	Experimentation: a Missing Agile Practice	Your initial Agile transition had great results. However, now you find the process has problems of its own. It doesn't fit your company, team, or domain perfectly. There's no advice for what to change. Now what?\\n\\nYou already know a safe, effective, and constructive way to explore an unknown domain: do explicit experiments.\\n\\nI will show how to identify the problem and contributing factors, develop and perform a set of experiments to see what might work better, and then follow through on any process changes that you deem fit. We will take on one or two problems from the audience as examples.	Collaboration Culture & Teams	Talk	2011
10915	Code Sense	Does reading code make us better?  Can we recognize good code when we see it?  Do developers agree on on what good code looks like?\\n\\nIn this session we'll try to answer these questions.  Together we'll take a momentary glance at dozens of code snippets and secretly decide if we like them or not.  Then, tempers will flare and fireworks will fly when we compare notes with each other.  There are endless lessons that you will learn and your foundational beliefs about code will be challenged as we develop our code sense.	Open Jam	Workshop	2011
10918	Simple Methods for Reliable User Involvement	One of the difficult problems faced by an Agile team is that of getting reliable user input. Since Agile projects depend on minimal up-front planning and specification, user feedback is critical. But product owners are rarely users themselves and the actual end-users are often located elsewhere and may be highly diverse. This session introduces participants to Contextual Inquiry (CI), a proven field research method for understanding users and their needs. We introduce CI, show how it fits into Agile development, and give participants practice in gathering data and then writing user stories.\\n	Working with Customers	Tutorial	2011
10932	Agile and Kanban In Coordination	A review of the results of running two teams side by side inside the same development organization one traditional Agile iterative development the other Kanban.  Both teams are fully coordinated with each other in a simple and effective system that optimizes responsiveness without compromising quality.  I will detail my experience taking a 30 person development team from a rudimentary agile implementation to a fully Agile organization running both Agile / Iterative and Lean / Kanban models of development side by side.	Insights - Experience Reports	Experience report	2011
10951	Courageous Curiosity: Agile from the Inside Out	Agile isn't just another methodology. 'Becoming agile' isn't about learning a set of tools. The _process_ is the easy part. Here, we'll tackle the hard part: putting love at the center of how you work.\\n\\nThe values of the Agile Manifesto & Extreme Programming encourage us to practice courageous curiosity, changing how we move in the world. In this workshop, we'll explore technologies--technique--for working compassionately.	Adoption & Transformation	Workshop	2011
10957	Writing Maintainable Automated Acceptance Tests	Test automation is software development. As with other software development efforts, most of the cost of test automation occurs during maintenance after the tests are first written. Automated tests can become brittle, so that a small change in a requirement or in the software renders scores of tests obsolete in the blink of an eye. How can we reduce the high cost of inevitable change? Dale Emery demonstrates key principles for writing adaptable automated tests: remove duplication, focus on the essence of the test, and name every important test idea.	Testing & Quality Assurance	Demonstration	2011
10959	Stages of Practice: the Agile Tech Tree	There are many stages of practice for each practice. These are the details that get lost in most discussions. What does it mean to practice Continuous Integration, TDD, or Pairing? If you use a CI server, are you doing CI?\\n\\nThat depends.\\n\\nThe Civiliation games have a "Tech Tree" that show the hundreds of technologies available. They are broken into branches (sea exploration, flight, etc), with dependencies between the branches. We will build a similar tech tree for agile practices, showing how the agile practices interleave and how they change as you develop each branch further.	Adoption & Transformation	Workshop	2011
11028	Breaking the Rules to Increase Customer Satisfaction	This is a story of on-going improvement in both process and culture.  With queue times upwards of 120 days, customers were becoming more upset and the divide between support and engineering seemed to be growing.  Nearly twice as many defect reports were being created than were able to be fixed with a few dedicated pairs.  In four months we have cut our lead time in half, established greater predicibility, and have continued to gain back the trust of our support organization.	Insights - Experience Reports	Experience report	2011
11031	Enter the Bubblesphere:  You and Your Agile Project Portfolio	Bubble charts, seriously?  Yes!  Even the best agile development teams may have yet to mind meld with a professional product portfolio manager, and vice versa.  This simulation gives product managers some new agile bubbles to use when charting their portfolio performance, and provides developers with new tools for collaborating with business owners.  All attendees will focus on how to maximize long- and short-term ROI for IT portfolios, along with learning to evaluate per-iteration team value delivery.\\n\\nThe simulation was be fine-tuned at Agile Games 2011 in Cambridge, MA.	Business & Project Management	Workshop	2011
11037	Teaching Kids Programming with Agile Techniques 	In this workshop, attendees will experience our Intentional Method of introducing children (ages 10+)\\n to programming using recipes (lessons at  www.TeachingKidsProgramming.org ).  We use Agile techniques such as pair programming, randoris, short iterations, re-factoring & test-driven development in teaching.  Pair instructors model Agile practices while teaching. \\nLearn how to teach technical processes using Agile techniques.  \\n\\nAlthough we ve mostly used our method with children, we have also successfully taught adults using similar methodologies.<img src="http://bit.ly/gSTsDY"/>  \\n  	Coaching & Mentoring	Workshop	2011
11055	Complexity at Cisco Voice Technology	In this article we'll tell our story of changing a waterfall culture into an iterative and incremental delivery system. We will talk about the principles of the agile software development life cycle we created, and the steps we had to take to embed this new process into the organization. We have managed portfolios and product teams, this article will tell you how we did it, and how we won't do it again. We have trained teams, project managers, product managers and saw how training an exec team can fail and cause disastrous results. \\n	Insights - Experience Reports	Experience report	2011
11062	Resistance as a Resource	When people resist change, change agents both new and experienced can become confused, stuck, and frustrated. Dale Emery describes how you can turn resistance into a resource. Whatever else it may be, resistance is information information about the values and beliefs of the people you are asking to change, about the organization, about the changes you propose, and about yourself as an agent of change. In this session, you will learn and create ways to tap into that information to translate resistance into effective action to move forward with change.	Coaching & Mentoring	Talk	2011
11074	What We Have Learned So Far: what we got right & what we got wrong	Many of the established ideas and practices of Agile had their first public exposure through Ron and Chet.  They helped take Agile from an underground movement to the mainstream.\\n\\nIn this talk, Ron and Chet will bring you up-to-date on their current thinking on how to best do software \\nin the Agile style.  They will explain why you should stop doing some of the things they recommended in \\nthe past and what to replace them with.  They will take one more run at getting you to do some of the \\nbasics of success that many teams neglect.\\n	Coaching & Mentoring	Talk	2011
11103	When the VP is a Scrum Master, You Hit the Ground Running	In early 2010, the new VP of Unisys Cloud Engineering was chartered with implementing agile methods in a department of engineers with decades of waterfall successes.  He was also an experienced Scrum Master.  One year later, we had completed over 200 sprints for 20 products across four geographies.  I ll tell the story of how we implemented Scrum, what we learned, and what we would have done differently.  	Insights - Experience Reports	Experience report	2011
11104	Applying the lean startup model to the Enterprise	Much is wrong with the way enterprises model the delivery of software projects, starting with the fact they use the project model. What if enterprises treated the software delivery lifecycle based on the concept of products instead of projects? A useful model exists for this paradigm - Eric Ries' lean startup movement.\\n\\nJez will discuss applying lean startups to the enterprise, using examples such as Amazon. He'll also demonstrate how oft-sited blockers to such a model (and to the DevOps vision) such as SOX, ITIL and COBIT, can in fact be made compatible with this model.	New Horizons & New Voices	Talk	2011
11105	Continuous Delivery	This talk will focus on the engineering practices required to achieve the goal of agile development: satisfying the customer through early and continuous delivery of valuable software. I'll cover the importance of good configuration management, automated testing at all levels, and continuous integration.\\n\\nThere will be a particular focus on why feature branching is considered harmful, and alternative techniques which allow for continuous deployment while developing functioanlity incrementally such as branch by abstraction, feature bits, and dark launching.	Open Jam	Talk	2011
11108	The empirical process - at the very core of Agile	Agile is all about empirical processes, controlled by feedback loops. But what does it mean?\\n\\nMost agile practices and principles are rooted in control theory. Knowing these concepts will improve the skills of any coach or mentor. In this  popular science -session, software development will be described as a (simplified) mathematical process. It will teach how feedback, sensors, noise and delays affect outcome, error, robustness and other properties of our process.\\n\\nBoth people with 10+ years of agile experience and absolute beginners are likely to get something out of this session.\\n	Coaching & Mentoring	Tutorial	2011
11110	Scrum in Sales	In the fall of 2010 the iSense sales and account management teams adopted Scrum for their sales processes. In this presentation, one of the sales managers will share his experiences by presenting the processes, lessons learned and main achievements, of using Scrum in sales. The most stringent effect of using Scrum in sales was the insight that the direct cause and effect for closing a sales deal, can be detected and as such controlled. 	Insights - Experience Reports	Experience report	2011
11121	CREATING  CUSTOMER  DELIGHT	The failure of traditional management has led to the reinvention of management: the whole organization must be focused on creating a stream of additional value to customers through continuous innovation. The reinvention reflects an application of Agile thinking to the whole organization.\\n\\nWith the growing power of customers, it is no longer enough to *satisfy* customers with early and continuous delivery of valuable software. Now customers must be *delighted*. In effect, the bar has been raised. The workshop will show how this more strenuous objective can be attained: http://bit.ly/ihcVL2 	Working with Customers	Workshop	2011
11122	MAKING THE ENTIRE ORGANIZATION AGILE 	The failure of traditional management has led to the reinvention of management: the whole organization must be focused on creating a stream of additional value to customers through continuous innovation. The reinvention reflects an application of Agile thinking to the whole organization. \\n\\nThe session shows how applying Agile thinking to the whole firm involves five fundamental shifts in terms of the firm's goal, the role of managers, the way work is coordinated, the shift from value to values and the shift in communications shift from command to conversation: http://bit.ly/bryJHX	Leadership	Workshop	2011
11136	Experiments: how does team structure affect behavior?	When several teams work within the same codebase they share a lot responsibilities. For example, all teams are equally responsible for keeping the build green. However, teams are also committed to sprint goals that are independent from each other. So what happens when the build breaks and the sprint is nearing its end? Let's experiment how structure affects behavior and try to find structures that enhance responsibility. 	Collaboration Culture & Teams	Workshop	2011
11137	Three Months from Idea to Implementation: Jumpstarting Agile in Nuclear Power	We had 3 months to plan the production for 80 control systems intended for a Westinghouse nuclear power plant simulator.  We were on the critical path and our delivery dates were quickly approaching.  A chance introduction to agile principles offered a beam of light.  Within 3 months we held our first Sprint planning meeting, and, in 3 months, we delivered our first software release on-time. It was a significant team achievement that combined Scrum with complex embedded systems development.  Join us to learn what we did and what we learned from our mistakes.  \\n	Adoption & Transformation	Talk	2011
11140	The Fundamental Agile Apologetic	A talk based on the "big four" series by Jeff Langr and Tim Ottinger (from Pragmatic Bookshelf: http://agileinaflash.blogspot.com/2011/02/big-four.html ), this session tells us why the fundamental concepts of software design virtually require us to adopt agile practices.  The fourth in the series shows how software volatility further motivates automated testing, pair programming, continuous testing, continuous integration and constant attention to code quality.	Open Jam	Talk	2011
11141	How a Traditional Project Leader Transitions to Scrum	Transitioning from a traditional project manager to Scrum is challenging. The PMI Project Manager manages the project by ensuring that intermediate deliverables are delivered at various stages of the project. Agile development emphasizes the need for producing tangible results as soon as possible and as often as possible. The resulting role of an Agile project manager is fundamentally different from a PMI Project Manager. We will map the PMI responsibilities to Scrum and show a project manager how to more easily make the transition to an agile practice.	Adoption & Transformation	Talk	2011
11142	To Make a Long Story Short: Splitting User Stories	Large stories mix different levels of functionality, risk, and value. Large stories are disproportionately hard for teams to understand, estimate, and implement. There _is_ a way out: split stories to a manageable size, while keeping them valuable to customers. \\n\\nWe'll examine splitting and merging stories using a variety of concrete techniques. We'll see why splitting on technical lines sounds easy, but gives poor results. Finally, we'll practice applying splitting techniques. You will leave with a toolkit of 20 or more ways to split stories, directly applicable to your project.	Hands-on Learning	Tutorial	2011
11144	Applying Agile to the Operations of a Training Organization	ThoughtWorks Studios Workshops group has decided to  eat its own dog food  by running its training group using Agile practices.   This session will discuss the challenges of a training organization and how we successfully applied Agile practices to our operations.  Our training organization has two distinct tracks of work:  1) creating and managing our content and 2) managing training engagements.  Each track has its challenges, but we have found a way to apply Agile practices to both tracks of work.\\n	Business & Project Management	Talk	2011
11146	Seeing and Steering Systems:  Three Pragmatic Tools	When managers get out of the day to day work and focus on leading and improving the organization, they need a different set of tools.  These tools aren t new; but, they haven t been widely taught in management training programs. These tools help leaders at all levels move beyond "telling & selling," and provide a way to influence patterns of behavior, understand causes and effects, and generate options for action..\\n\\nIn this session, I ll cover three pragmatic tools:  Eoyang CDE, Expand the Problem Horizon, and Finding Factors.\\n	Leadership	Tutorial	2011
11147	Team Traps	Some teams soar; others wallow, bicker and slog their way to uncertain results.  Teams that soar have a few things in common: they have a shared goal, interdependent work, complimentary skills, mutual accountability.  Slogging teams have a few things in common, too.  They fall into predictable traps.  What are those traps and how can you help your team climb out of them?  That s what Esther is here to talk about.\\n	Collaboration Culture & Teams	Talk	2011
11152	The Vision Thing: How Do _You_ Charter?	User stories describe features - _how_ a system will work - and may even describe value or purpose ("in order to..."). But stories are not the starting point: there's a deeper reason and deeper context for projects, often framed as some sort of _charter_. Charters (by whatever name) define projects' vision and mission, measures of success, boundaries.\\n\\nHow do you handle the chartering aspects of _your_ projects? Come to this peer-to-peer workshop, prepared to share what you do, and prepared to learn from others.  We'll work in small groups, then share results with the larger group. 	Open Jam	Workshop	2011
11165	A Transformation Path to Enterprise Agility: Change Levers, Leaders & Culture	Organizational transformation is a journey, not a destination. It requires discipline, patience & courage, leaders at every level, insight on culture, a stomach for change. It requires real teams & the will to endure for years.\\n\\nIn a fishbowl style consultation, one organization (will you volunteer?) will provide a realistic context to explore models of leadership, team dynamics, culture & change: the framework for deep, ongoing enterprise transformation. Meanwhile, participants organized into table teams will craft their own transformation plan, using a template & feedback from colleagues.	Adoption & Transformation	Tutorial	2011
11166	Agile and Kanban Work Together to Deliver Maintenance Releases	Agile and Kanban together to create maintenance releases separates the unpredictable job of fixing defects from the predictable work to validate them. Defect resolution times are hard to forecast because the environment may be hard to recreate and a safe fix may take analysis. Very short Agile sprints manage the constant prioritization of defects and team coordination. Defect validation time is more predictable and Kanban provides a reliable way to verify small batches of fixes for a maintenance release. Come learn how to use these processes together to improve your maintenance deliveries.	Agile Show & Tell - Lightning Talks	Demonstration	2011
11176	Leading Continuous Improvement in Established Agile Organizations	Many organizations believe they have successfully completed the transition to agile thinking. They follow a standardized "agile" process by rote, and they boast of horrifying process smells, like "We never miss a commitment!" Lost in the flurry of self-congratulation: The notion of continuous improvement. Lean thinking brings new models and analytical tools to the table. In this session we examine conventional agile practices through a lean lens to discover opportunties for improvement (mura, muda, muri) that are hiding within the canonical ceremonies of first-generation agile practice. 	Leadership	Talk	2011
11210	Overcoming Self-organization Blocks	We know that self-organization is a critical aspect of every successful Agile project and we know that it takes trust, respect, openness and responsibility; so why many teams have a hard time to achieve it? Self-organization changes the manager/team dynamics and the teammate/teammate ones. Resistance may arise and the source is frequently rooted in mental habits, such as  a latent blaming culture, confusing guidance and command, fear of taking responsibility or losing status, unconscious agendas. Attend this session to learn, through demos and exercises, how to deal with these kind of issues.	Collaboration Culture & Teams	Talk	2011
11212	Geek Leadership in Deep Legacy	The overwhelming majority of development is legacy work, and much of that is deep: 4 years or more. Geek leaders in legacy need reliable techniques for helping teammates develop skills and attitudes to tame the legacy Cthulhu.\\n\\nHere are five proven techniques geek leaders can use to slay the beast: __Tight-Focus Refactoring__, __Lottery Learning__, __Noob Spinning__, __Pressure Bottlenecking__, and __Blind Baby Stepping__.\\n\\nAs a technical leader in a legacy setting, you get to charm your team toward agile practice. Here are some tricks to bring with you.\\n	Leadership	Tutorial	2011
11215	Enterprise Scrum at Belgacom	Belgacom (Euronext: BELG), the largest telecommunications company in Belgium, is transitioning to Agile with sponsorship from senior management. In this session we will give a recount of the fronts that have been successfully tackled so far: Running pilot projects, building an Enterprise Scrum transition team, combining waterfall with Agile, distributed Agile, financial governance, fix-priced projects and RFPs (agile contracts), PMO, project governance, training, technical practices, busting silo thinking within operations, and Agile with large packages such as Siebel, PeopleSoft and SAP.	Enterprise Agile	Talk	2011
11219	Agile Adoption in a non-Western cultural context: Is it any different?	The Agile Manifesto s values and principles need to be applied differently in different cultural contexts. Raya Software made the decision to transform its practices to those of agile software development in early 2008. As an Egyptian company, it was faced with challenges specific to Egypt s cultural context.\\n\\nThis session aims to share adoption insights with non-US companies that want to embark on the journey towards becoming an agile organization, describing a mental model to plan for such a transformation. It also has relevance for US-based companies working with offshore partners.\\n	Adoption & Transformation	Talk	2011
11254	Zero to Agile in 3 to 5 years - It's a Marathon, not a Sprint	Transforming mid-to-large-sized organizations requires much more than an introduction of agile principles and practices to teams.  Any agile introduction is the start of a cultural, structural, political, and personal transformation, and to be successful requires understanding, commitment  to focus on all of these dimensions...and...time.\\n\\nStories abound about large companies starting agile transformations and resulting in reversion to the old ways, or some other state of "hybrid" agility.  This talk is about an effort to change a large company holistically.	Adoption & Transformation	Talk	2011
11266	Architecture and Design Evolution	How do we evolve the architecture and design of a product iteratively and incrementally in Agile? Without a complete and robust architecture and design upfront, would the product not run significant risks? These are some of the questions that challenge a team that is new to Agile. In this talk, we shall learn the practices and principles of agile architecture and design.\\n\\nWith examples taken from real projects, the talk will illustrate how incremental architecture and design decisions are built into a product across iterations, through stories where they are required.	Agile Boot Camp	Talk	2011
11270	Anatomy and Physiology of an Agile Transition	Starting as a coach of a team with almost no agile experience and an release pending was quite daunting. Change was slow and at first it seemed like we might not succeed in converting the team and delivering the product. It took patience, support at many different levels of the organization, and hard work from many different people to put this team on the path to becoming a functional and productive agile team. Now the team is growing as a successful and productive agile team. I am proud to have been a part of going from mostly offshore waterfall development to a local agile development team.	Insights - Experience Reports	Experience report	2011
11272	Undoing Performance Review Damage - Coaching towards Customer Purpose	The Performance Review survives almost intact in most organizations despite the ever increasing rate of adoption of agile and lean techniques. Unfortunately attempts at motivating and engaging employees from such a mindset is more likely to cause damage. Help your coaching clients to understand the pain of the Mass Production mindset with an experiential simulation. And then see within the simulation how coaching can help adjust the process to use intrinsic motivation through more deep understanding of customer purpose.	Coaching & Mentoring	Workshop	2011
11304	Building Great Teams	In coaching, I generally find teams assembled with some thought to colocation and skills. At best they ve been through agile training, picked a team name, and created team norms. Then it s time to get to work.\\n\\nThese steps can produce high performing teams. More often they produce average performance. \\n\\nRather than hope for greatness, helping teams form can ensure team members become equipped to deal with identity, trust, and task issues thereby generating agreement and commitment between the team members.\\n	Collaboration Culture & Teams	Tutorial	2011
11305	Making Hard Choices about Technical Debt	The technical debt metaphor acknowledges that teams sometimes accept compromises to meet an urgent demand. Although unmanaged debt can have disastrous results, strategically managed debt can help businesses take advantage of time-sensitive opportunities. During this session,we will play the Hard Choices game. In your quest to release a quality product, you must decide in the face of uncertainty whether to take shortcuts and incur penalties, or to traverse more of the board to potentially earn more value. At the end, we ll compare strategies and share practices to help make these choices.	Hands-on Learning	Workshop	2011
11309	What Makes Agile Great and How Can We Get More Of It?	As a successful practitioner of Agile, you are interested in the events that created our fantastic community. You have success stories to share. You are interested in future improvements. Come share your unique successes and help shape the future of agile.\\n\\nImagine it is the year 2022. What happened in 2011 that created the second, golden decade of agile? What monumental successes have we had since 2011?\\n\\nIn this workshop, inspired by the events at Snowbird in 2001 and 2011, you will create a manifesto or a call to action that will inspire our future community. \\n\\n	Hands-on Learning	Workshop	2011
11321	Growing Embedded Applications Organically with Ceedling and Friends	Our group of scientists have formulated a suite of open-source tools that make growing robust C applications an enjoyable endeavor. These tools facilitate organic growth of robust and maintainable applications. Unity, Ceedling, CMock and CException are open-source projects whose aim is to make setting up and growing embedded C applications a trivial effort so that developers can focus on features and content. A full overview of these tools will be given, followed by a demonstration of how these tools are used collaboratively to facilitate an efficient TDD workflow in C.	Agile for Embedded Systems Development	Demonstration	2011
11326	There is No Spoon: When Agile Becomes One with the World of Work	When we look at the Agile Manifesto we talk about people, interactions, collaboration and responding to change.  However, we fail by only relating it to software and customers.  It is time we started to embrace entire organizations being agile.  Even then it requires entire communities, systems and society to collaborate towards a common purpose.  When we move in that direction there is no agile only evolution.	New Horizons & New Voices	Talk	2011
11327	Getting beyond 'good enough' - a user goal based framework for Agile Delivery	Agile delivery typically focuses on the prioritisation and development of atomic user stories. Often the focus is on developer throughput and misses the overall value proposition of the software from the perspective of the end user. This session will introduce a user goal based framework for setting up and managing Agile projects for success. It will introduce an approach to Goal Driven Development that will allow stakeholders/Product Owners to take a user centered approach to delivery from requirements capture, through planning and into development to deliver software that delights the user.	User Experience & Interaction Design	Talk	2011
11343	The PO Role - Can you hear me now?	Transition from the PM & BA role to the PO role can be challenging but rewarding. In our organization, the PO role has tremulously evolved and we have made it a role that does not have very specific boundaries. The PO role has empowered and enabled traditional PM & BA to take ownership and be decision makers.  When they speak teams and sponsors listen.  However, with great power, comes great  responsibility.  In this session, I will highlight how the PO role has evolved in our organization and some lessons learned of the role .\\n	Agile Show & Tell - Lightning Talks	Talk	2011
11344	Managers vs. Agile Teams: Who Makes the Decisions?	Agile teams face daily decisions in a dynamic environment. Participants in this workshop will learn key strategic & tactical decisions agile teams make, including how they draw on experience to drive decisions. This is an interactive session that reviews how decision quality is assessed, how decision quality metrics are implemented and how metrics can be improved on their teams. Participants will rate their own levels of decision quality around particular agile activities. Participants should have some experience working on agile teams,e.g. as scrum master, product owner, tester, developer.	Collaboration Culture & Teams	Workshop	2011
11350	Get to CMMI ML3 Using Agile Development Processes For Large Projects	This session will discuss how VSTI, a SAS Company, obtained their CMMI Maturity Level 3 rating while doing agile development processes for large projects (over 30 developers). This will cover automation of documentation and best practices for obtaining a rating of CMMI ML 3 with a large development project, while adopting Agile and Scrum processes. Agenda:\\n\\n1) The major points where Agile and CMMI seem to conflict \\n2) How to get past this conflict and still be productive by: \\n   a) Using proper tools to help save time \\n   b) Automating documentation \\n   c) Daily scrums are critical!	Agile Show & Tell - Lightning Talks	Talk	2011
11352	Increasing Learning in an Agile Environment: Lessons Learned in an Agile Team	Learning and agile are highly related. In the last 3 years, the knowledge of the team increased in all aspects: technically and socially. Everyone in the team, from interns to more experienced programmers, ended up as high-skilled programmers, using (and understanding) all recommended best practices. In this report we will present some techniques we used to enhance learning in our work environment, such as Book Club, Brown Bags, Dojo sessions, Pair Programming, Open Spaces, etc.	Insights - Experience Reports	Experience report	2011
11369	Next Generation Model-Driven Development for Agile Projects	An overview of model-driven development and the new concept of "continuous model transformation" within the context of agile projects accompanied by real-world examples based on an open source MDD toolkit.  A discussion of how using MDD and Agile together results in higher quality results though continual shortening of the development-feedback loop and template-based evolutionary architecture methods. How to use MDD to generate automated tests to jump-start test development. This talk will present a case study of two successful projects that demonstrate the MDD-Agile value proposition.	Development Languages Practices & Techniques	Talk	2011
11370	Cultural Architecture	If our business culture was a product, how would we re-architect it? Culture influences everything. So how can we influence culture? What tools help us understand cultural influences, from the implicit, the elements we don't even think about, to the visible, the artifacts that lead to stereotypes? Adopting an Agile culture, when it is under-laid with the cultures of the world is challenging. Reconciling cultural dilemmas drives collaboration and innovation. Culture is the core of it all. Knowing this, you can create a pull for cultural change in your organization.\\n\\n	Collaboration Culture & Teams	Talk	2011
11376	Why Can t We All Just Get Along? Improving Designer/Developer Collaboration	The relationship between designers and developers is often portrayed as adversarial but it doesn t have to be that way! User experience (UX) professionals and engineers have a golden opportunity to work closely throughout the entire Agile development cycle to build better products. In this session Agile team members will identify breakdowns in their own teams  collaboration and learn practical solutions that help designers and developers work more efficiently and more happily. Through interactive exercises attendees will share their own experiences and learn from other practitioners.  	User Experience & Interaction Design	Talk	2011
11379	The Only Agile Tools You'll Ever Need	Do you need a high-end agile project management tool to support your growing agile adoption? Or do you need a high-end tool because your adoption has strayed from agile values?\\n\\nLow-tech tools such as information radiators and index cards can provide great results, but how do you use them most effectively? What's the sweet spot for high-end tools, and how do you prevent them from sapping productivity? What tools are missing from the spectrum of software-based tools? \\n\\nDisclaimer: This is *not* a vendor pitch, and the speaker owns no stock in companies that produce index cards. :-)	Adoption & Transformation	Tutorial	2011
11382	Agile Office Spaces - Enabling Collaboration and Agility	Your Agile team has the right processes, engineering practices, tools, people, and technology, but what about your office space? Sure, you have a prominently displayed Scrum board, but does your physical environment enhance your collective Agility? \\n\\nDrawing from experiences at Agile shops and government offices, and in collaboration with his wife (Conni Gutierrez Cheng, a professional interior designer specializing in collaborative office spaces), Richard Cheng will lead a workshop session to bring together experiences of the attendees to create a shared learned experience.\\n\\n\\n	Collaboration Culture & Teams	Talk	2011
11391	Will Pair Programming Ruin Your Team?	A lightning talk based on the article at :\\nhttp://agileotter.blogspot.com/2011/01/pairing-competence-and-recognition.html\\n\\n	Agile Show & Tell - Lightning Talks	Talk	2011
11393	Acceptance Test Design Principles	Are you designing your agile acceptance tests (ATs) well? I've derived (with the help of Tim Ottinger) and used a list of seven principles to vet the quality of ATs. I've found these principles very useful in helping agile teams improve their tests. Good ATs are:\\n\\n* Abstract\\n* Bona fide\\n* Cohesive\\n* Decoupled\\n* Expressive\\n* Free of duplication\\n* Green\\n\\nYou'll see ATs (based on real agile team examples) that show violation of the principles and subsequently improved tests that adhere to the principles. One minute per principle, and one minute to wrap up!	Agile Show & Tell - Lightning Talks	Tutorial	2011
11431	Beyond Metrics	NOTE: There is a size limit for 2MB for presentations, so tweet either @adhondt or @ravindar to get the full slide deck.\\n\\nMetrics should only be used to measure progress until a specific goal is reached, after which we no longer track it. Instead, we learn to focus on more holistic goals and intangible indicators that keep a team humming along smoothly. Team energy, communication patterns, slack and reflection are much more important to increasing productivity than any myopic set of metrics.	Adoption & Transformation	Tutorial	2011
11432	Definition of Ready	Definition of Ready is a set of agreements that lets everyone know when something is ready to begin, e.g., when a user story is ready to be taken into a sprint, or when all necessary conditions are right for a team to start a sprint. Definition of Ready does not attempt to turn a user story into a specification, but instead creates an interesting social agreement between the various stakeholders involved in delivering a product or system. 	Agile Show & Tell - Lightning Talks	Talk	2011
11436	The Story of the Wall	Do agile teams really still use index cards, PostIt notes and walls for planning and managing projects? Yes, absolutely. Even in this age of sophisticated tool support it is hard to beat the raw power and efficiency of working with physical media and using walls to display information. Using photos, videos and music, this talk describes the experiences of several teams from the perspective of the walls in the room. From architecture, requirements, planning, and sizing, to tracking project progress, see how teams use paper, markers and walls to foster collaboration, innovation and teamwork. 	Agile Show & Tell - Lightning Talks	Talk	2011
11440	From 'Team' to 'Wow team': an agile team's journey	Our department had been practicing Agile for three years. In the first two years, we learnt how to be really good. Then we began to plateau...complacency crept in, we drifted away from the spirit of agile and began to skip the basics. In this talk we describe we overcame this. How we went from being a team on the slide to a "wow team" by seeing every problem as an opportunity, converting small thoughts into great ideas and finding innovative solutions for problems.\\n\\nDo you want to know the simple yet powerful basics that can make a huge impact and make your team a Wow Agile Team?	Insights - Experience Reports	Experience report	2011
11447	Refactoring in the 4th Dimension	Time is the 4th dimension. We don't pay enough attention to it. We \\nmake assumptions about how changes occur in our code based upon static analysis \\nand tools like the Open/Closed Principle, but we can make our decisions \\nbased on actual data: we have version control histories of our code.\\n\\nIn this workshop, we will mine several projects and look for \\nearly indicators of souring code and evidence of effective refactoring.  We will \\nexplore the notion that we can learn from the history of our own code.\\n\\nParticipants should bring a laptop with git and Ruby 1.8.7 or higher installed	Development Languages Practices & Techniques	Workshop	2011
11449	10 Minutes to a Better Standup	OK, you know the standup is supposed to last 15 minutes, but yours' last 45 minutes or more.  You wonder, how can we say anything useful in 15 minutes? \\n\\nIn this 10 minute lighting session, which by the way is shorter than your standup, we will use a sample Team Board (I did say Team Board, not Task Board) to demonstrate how to hold an effective standup that will allow your team to quickly coordinate, and thus self manage their efforts.\\n\\nWe will also learn more about the Almost Daily Sit Down, and learn how sit downs, can be the cure for your sick standups!\\n	Agile Show & Tell - Lightning Talks	Demonstration	2011
11452	Scaling and Failing - The Human Limits of Effective Software Development	In this lightning talk, Michael Feathers will make the argument that most Agile adoption problems are fundamentally scaling problems. He will then relate two case studies which point toward the sort of advantage we might gain if we thoroughly embrace the limits of scale rather than trying to finesse them away.	Agile Show & Tell - Lightning Talks	Talk	2011
11455	Enterprise Coaching - Practical Lessons Learned	Coaching in the enterprise requires creative initiatives and appreciation of the long view of organizational change. This discussion reveals the story of one company's ongoing agile adoption from a coaching perspective and invites participation from attendees to add to the conversation, ask questions and challenge ideas. I intend to provide several practical concepts for other coaches and attendees from large organizations to take back with them to try in their own context.	Coaching & Mentoring	Talk	2011
11473	Building an Agile Culture in a Regulated Environment	Omnyx, a GE Healthcare venture, has implemented scrum ground up, intentionally shaping the organization, cadence, and office space and focusing strongly on culture, core values, and team building activities. Writing a new Quality System allowed bridging the traditional divide between agile and regulated environments. Using a continuous Alpha/Beta process, we effectively incorporated stakeholder feedback while still working on our initial product launch for 2+ years. We firmly believe that culture is the most underestimated aspect of agile and it needs to be #1 priority for any agile leader.	Collaboration Culture & Teams	Talk	2011
11479	Slackers and Debtors: Meet Commitments, Reduce Debt, and Improve Performance	Does your team have trouble finishing its stories every iteration? Is your "done done" actually a "maybe maybe?" Are you constantly removing stories from your plan? If so, this session will help. We take a close look at the relationship between technical debt, velocity, and iteration slack. We teach you how to use slack to achieve a stable iteration velocity, increase team performance, and get your stories "done done" every time.	Hands-on Learning	Tutorial	2011
11482	Raconteur: luring programmers into testing and testers into coding	Raconteur is an acceptance test framework inspired by Fitnesse and Cucumber. Its goal is to help shorten the developer-tester gap. It lures programmers into writing ATs in the comfort of their IDE and favorite xUnit. The testers get to share the same tool, enjoying intellisense and refactorings, while keeping the test syntax that they are used to.\\n\\nThis session will demonstrate the main capabilities of the tool from the perspective of what is innovative in the approach. Fundamentally, we will provide a glimpse at how IDE integration blurs the boundaries between testing and coding.\\n\\n\\n	Testing & Quality Assurance	Talk	2011
11493	Faster Usability Testing in an Agile World	The sheer speed of an Agile project can be frightening to even the most experienced UX practitioner. In this session you will learn how usability testing can be conducted very quickly, without sacrificing quality. We will cover strategies and techniques that can be used for speeding up traditional usability testing, on-site, remote and Rapid Iterative Testing and Evaluation (RITE) methods. We will cover usability testing from planning through analysis, and ways to provide useful and usable recommendations to the team. 	User Experience & Interaction Design	Tutorial	2011
11494	10 Minutes to Testable Specifications	Come to one of Agile 2011's fastest paced workshop and learn the basics of creating testable specifications that drive requirements clarity, engender collaboration, increase estimation accuracy, and cure many of the ills that plague agile projects today.  \\n\\nWe won't make you an expert, but our acceptance criteria for this session is that you will leave with an understanding of how testable specifications improve your requirements and how the approach varies from the Test Drive Development that developers do.	Agile Show & Tell - Lightning Talks	Workshop	2011
11502	Bad-Assed Double-Loop Learning: From Judgmental to Good Judgement	"We all know" Agile leaders foster self-organization, so why do many have little effect on their teams, or worse, actually harm their effectiveness?\\n\\nPeople act in ways that are rational to them, but differences in mental models can make people seem irrational. By uncovering your team s mental models, you can help them achieve a common rationale. This leads to stronger, integrated teams.\\n\\nScrumMasters, Coaches, Managers, & Team Members will participate in robust scenarios based on team simulation in aviation and healthcare. You will leave experience directly applicable in your workplace.	Coaching & Mentoring	Workshop	2011
11517	Agile and the 21st Century Corporation	**The new economic and social century** is pressing on organizations from every side. What conditions will make demands and how will we adapt? Will Agile provide a long term delivery capability and business solution in the face of a frantic economic reality? Will our competitive nature give us the freedom to build partnerships, even with those outside of our organizations who have heretofore been our enemies? Can we build a creative ecosystem that will last beyond fads and overcome fear of change? Join us for a dialog & workshops on preparing to meet these challenges in our own organizations.	Business & Project Management	Workshop	2011
11536	Telling Better Stories with User Story Mapping	User story maps help us understand the product we're building, break in down into small pieces to build iteratively and incrementally, and effectively plan minimal viable product releases in holistic product slices.  In this quick tutorial participants will learn the basics of user story mapping by building their own story map quickly and collaboratively.  They'll see examples and hear stories of a wide variety companies who've used story maps to simplify backlog building, planning, and delivery.\\n	Working with Customers	Tutorial	2011
11537	Agile Methods Influencing Non-IT Projects	One software development team has found that its agile team practices have been emulated by several of its clients and admirers for non-software projects.  Learn how practices such as short iterations, daily standup, storycards, early releases, and pairing have been adopted in organizations for projects that might surprise you.  These organizations include a law office, manufacturing plant reconfiguration, architecture, industrial lighting, and book publishing.	Business & Project Management	Talk	2011
12633	Making team flow and progress business readable	The last two years we adopted BDD/ATDD, including automated acceptance criteria validation while preserving their business readability (using specification-by-example). \\nAs a side effect of this practice, progress became more transparent:instead of just seeing remaining work and stories done, we track individual ACs showing progress in a business readable form.  This helps testing and early feedback.\\nThe talk shows how automated AC validation increased transparency in our project and briefly walks through our AC refinement flow, how we monitored progress and merged into living documentation.	Agile Show & Tell - Lightning Talks	Talk	2011
12637	Agile won't work here... really?	In this session, the presenters will share their experiences implementing Agile in what many people believe to be incompatible environments. In the first half of this session, Candi Rai will discuss how they adopted Agile in their mainframe COBOL environments in order to save $500,000 in costs while simultaneously increasing customer satisfaction. In the second half of this session, Marc-Ellan Begin will discuss how the European Space Agency (ESA) is adopting Scrum with industrial contractors in a fixed-price contracts context, replacing their traditional waterfall processes.	Adoption & Transformation	Talk	2011
12639	Refactor Your Wetware	You are used to working with software and hardware, but what about working with wetware your own brain? Do you know the best ways to learn, or to think about solving problems? In this one workshop we ll journey through bits of cognitive science, neuroscience, learning and behavioral theory.\\nYou ll see surprising aspects of how brains work and see how to beat the system, improving your own learning and thinking skills.\\n	Collaboration Culture & Teams	Tutorial	2011
12642	Climbing and Governing the Enterprise Agile Mountain	   It s too risky for our financial institution customers; No requirements - no way!, Regulatory auditors will eat us alive ,&   2 Years Later:  these concerns & more were solved to move to Enterprise Agile.  With a strong vision, a worker-derived roadmap, heavy change management lifting, and internal agile coaches, we did it.  What did those look like?  How were  hearts & minds  won?  What teams, tools, training, & rewards, drove the change through?\\n	Enterprise Agile	Talk	2011
12643	New Ideas and Emerging Results workshop	The workshop will provide an excellent opportunity to present and discuss opinions, ideas and suggestions for future research. We aim to bridge the gap between research and practice through presentation of position papers, alongside partners from the agile practitioner community.\\nSix position papers will add to the body of knowledge on agile methods and processes, agile teams and people, and the tools and practices that support them. Presentations of position papers with first authors: Mark Mahoney, Morgan C. Benton, Celio Santana, Yaser Ghanam, Renan de Melo Oliveira and Bill Curtis.	Research at Work	Workshop	2011
12644	Research Methods Workshop	To produce research results of importance it is crucial to apply the right research method. This workshop focuses on the challenges of applying research methods to study agile software development. Authors of accepted full papers in studies of agile software development are invited to give a short presentation of their research method, and there will be discussions on how to apply case studies, experiments, surveys and literature reviews. This workshop is intended for researchers.	Research at Work	Workshop	2011
12646	The home ground of Automated Acceptance Testing: Mature use of FitNesse	The concept of automated acceptance testing (AAT) has had nearly a decade to mature. While it has their score of supporters, it has not been embraced as a silver bullet for software development. The problem is that knowledge of when and where to fruitfully apply such a tool and method is scarce. In this article we describe a project group where the developers by their own account successfully use FitNesse. By describing how they select the appropriate places to use FitNesse, and how they use it, other practitioners can apply this to their domain. This corresponds and adds to recent research.\\n	Research at Work	Talk	2011
12647	Reconciling Perspectives: How People Manage the Process of Software Development	Social factors are the significant cost driver for software development and in this field study we develop a grounded theory of how people manage the process of software development. We discovered the main concern of those involved in the process of software development is getting the job done and to get the job done, people engage in a constant process of Reconciling Perspectives.  What this theory reveals is the importance of individuals  ability to reach out and engage in negotiations to the success of a software project.	Research at Work	Talk	2011
12648	Collaborative Events and Artefacts in Agile Teams with Interaction Designers	We studied 4 agile teams including interaction designers, since the integration of interaction designers on agile teams is an open issue. We found some designer-developer collaborations were for planning, but most were for enacting plans.  These latter collaborations took three forms:  scheduled, impromptu and chats. Regardless of the form, all designer-developer collaborations were mediated by twelve categories of artefacts.  These helped to determine, more precisely what to create.   We discuss implications of our observations for theory and practice. 	Research at Work	Talk	2011
12649	User-Centered Design and Agile Methods: A Systematic Review	This paper presents the results of a systematic review of existing literature on the integration of agile software development with user-centered design approaches. Through systematic and rigorous research methods and data analysis, this paper shows that a common process model underlies such approaches and discusses which artifacts are used to support the collaboration between designers and developers.	Research at Work	Talk	2011
12650	There's Something About Lean: A Case Study	An idea gaining significant interest at the moment is  how can we apply lean manufacturing principles to software development?  There is however, limited information on how Lean is being used by industry practitioners and if the principles and practices are as effective as current interest levels suggest it might be. We have used a case study to explore the practicalities of how one high-performing, open source team, has adopted Lean practices. We found that the existing\\nmeritocratic culture of the team under study appears to have greatly assisted the team s adoption of Lean principles.	Research at Work	Talk	2011
12652	An Agile approach to optimising our digital strategy	 Today, the most popular way people prefer to make contact with organizations is online as customers embrace new digital channels. We needed to modernize our digital presence to take the conversation to the channels where those conversations are taking place. Utilizing an Agile approach allowed us to increase site usability and responsiveness to consumer needs.	Agile Show & Tell - Lightning Talks	Talk	2011
12653	Understanding Post-Adoptive Agile Usage   an Exploratory Cross-Case analysis 	The widespread adoption of agile methodologies raises the question of their continued and effective usage in organizations. An agile usage model consisting of innovation, sociological, technological, team, and organizational factors is used to inform an analysis of post-adoptive usage of agile practices in two major organizations. Analysis of the two case studies found that a methodology champion and top management support were the most important factors influencing continued usage. Both horizontal and vertical usage was found to have significant impact on the effectiveness of agile usage. 	Research at Work	Talk	2011
12655	The Combination of Agile and Lean in Software Development 	Recently there has been a noticeable focus shift from agile methods such as XP and Scrum to lean, indicated as  from agile to lean . However, the reality may not be as linear as the term implies. To better understand the combined use of both, the experience reports published in the past agile conferences were examined. The study shows that the two can be combined in different manners for different purposes. Lean is often applied as guiding principles for agile development. When combined at the practice level, flow-based lean processes tend to substitute time-boxed agile processes.	Research at Work	Talk	2011
12656	IEEE Best Paper - Decision Making in Agile Development: A Focus Group Study	Abstract This research defines decisions made across four periods of the sprint cycle based on input from a focus group conducted with 43 people on agile teams. Results indicate that Sprint Planning includes decisions about planning work for the subsequent sprint, Sprint Execution includes tactical implementation and development decisions, Sprint Review includes decisions about continuing future sprints based on customer product satisfaction, and Sprint Retrospective includes decisions for improving the sprint process. Six key decision making obstacles were also identified.	Research at Work	Talk	2011
12657	Enacted Routines in Agile and Waterfall Processes	Agile methods form an alternative to waterfall methodologies. Little is known about activity composition, the proportion of varying activities in agile processes and the extent to which the proportions of activities differ from  waterfall  processes. In the current study, we examine the variation in performative routines in one large agile and traditional lifecycle project using an event sequencing method. Our analysis shows that the enactment of waterfall and agile routines differ significantly suggesting that agile process is composed of fewer activities which are repeated iteratively.	Research at Work	Talk	2011
12659	Survey of Agile Tool Usage and Needs	The usage of and satisfaction with tools supporting Agile methods has been and remains an unexplored area. Most existing tool surveys have been subjectively conducted by tool vendors, clearly focusing on company structure and a specific Agile method rather than on tool usage and needs. In this paper, we report on a vendor-independent survey on tool usage covering 121 responses from 35 countries. Our results show that the most and least satisfactory tool aspects are ease of use and lack of integration with other systems, respectively. We report on desired tool features and received comments.	Research at Work	Talk	2011
12661	Rule-Based Exploratory Testing of Graphical User Interfaces	This paper introduces rule-based exploratory testing, an approach to GUI testing that combines aspects of manual exploratory testing with rule-based test automation. This approach uses short, automated rules to increase the bug-detection capability of recorded exploratory test sessions. A preliminary evaluation found that this approach can be used to detect both general and application-specific bugs, but that rules for general bugs are easier to transfer between applications. Also, despite the advantages of keyword-based testing, it interferes with the transfer of rules between applications.	Research at Work	Talk	2011
12662	Agile Team Perceptions of Productivity Factors	In this paper, we investigate agile team perceptions of factors impacting their productivity. We here conducted two case studies\\nin the industry and analyzed data from two projects that we followed for six months. From the perspective of agile team members, the three most perceived factors impacting on their productivity were appropriate team composition and allocation, external dependencies, and staff turnover. Pair programming and collocation were the main agile practices impacting productivity. Finally, most team members did not share the same understanding of the concept of productivity.	Research at Work	Talk	2011
12665	Why Scrum works	Scrum seems to work extremely well as an agile project management approach. An obvious question is why. To answer that question, we carried out a longitudinal case study of a distributed project using Scrum across Denmark and India. In our analysis of case study data we used three selected theoretical frameworks. We conclude that Scrum works so well because it provides communication, social integration, control, and coordination mechanisms that are especially useful for distributed and agile project management.	Research at Work	Talk	2011
12666	How to Save Your Industry $1.9B using Agile Methods	My Industry was faced with Legislation to reduce Govt Rebates to the Health Industry by $1.9B. As the key lobby group, we embarked on a digital strategy to support the campaign. We adopted an Agile approach in order to have a skinny website and mobile app up and running as soon as possible. Weekly sprint planning allowed us to build iterative changes into the release strategy in order to respond to stakeholders and the political debate. Kanban was utilised to prioritize widgets we required on the website and ensure our campaign remained responsive to stakeholders.	Agile Show & Tell - Lightning Talks	Talk	2011
12692	Why Care about Positive Emotions?	Dr. Barbara Fredrickson and her colleagues have found that positive emotions literally change the way the human brain works, widening people's perspectives, and their outlooks on life. According to Fredrickson s broaden-and-build theory of positive emotions, this shift in mindset drives people to discover and build new traits, skills, and resources, and over time become better versions of themselves. In this presentation, Dr. Fredrickson will describe the science that backs up these claims and and describe the nonconscious upward spiral processes that enable people to thrive with agility.	Keynote	Talk	2011
12693	Code	Code is the stuff of software. It is the definition of the software. It is the enabler of functionality, the realizer of business value, the expression of understanding. It is also an expression of misunderstanding, a resister of change, a source of sunk costs.\\n\\nBut the word code has meanings beyond source and binary. In a broader sense, code and codes are also the stuff of software development. There are cultures of programming, principles of practice, manifestos of desire. Code refers to a set of conventions by which a group of people will govern themselves.\\n\\n	Keynote	Talk	2011
12694	 The Power of an Agile Mindset	I've wondered for some time whether much of Agile's success was the result of the placebo effect, that is, good things happened because we believed they would. The placebo effect is a startling reminder of the power our minds have over our perceived reality. Now cognitive scientists tell us that this is only a small part of what our minds can do.\\n\\nResearch has identified what I like to call "an agile mindset," an attitude that equates failure and problems with opportunities for learning, a belief that we can all improve over time, that our abilities are not fixed but evolve with effort. 	Keynote	Talk	2011
12706	Making the most of manual testing in a quality focused Agile team	Atlassian is an agile shop, with heavy emphasis on the quality of our products. With the increased focus on great UX, we have focused in the past few years on growing a QA testing function which complemented the automated testing in development. In this talk, I will share some of the challenges we faced, including:\\n\\n* Incorporating manual testing into two-week iterations, while achieving the goal of having shippable products at every iteration.\\n* Ensuring clear communications between QA, developers and PMs, and providing visibility of testing in a script-free testing environment.	Agile Show & Tell - Lightning Talks	Talk	2011
12709	Leading the Agile Release Train	The Agile Release Train (ART) is a scaling model for enterprise Agile programs.  How can the key event -- the Release Train Planning Meeting -- be kept on track?  Enter: The Release Train Conductor, a strong leader with the tools to run a two day meeting of 100+ people to synchronize large-scale planning!	Agile Show & Tell - Lightning Talks	Talk	2011
12711	The Three Ingredients of a GREAT Product Owner	One of the most important components of successfully applying an Agile approach is ensuring that the right product owner is identified.  This attempt to find the right business representative has proven to be challenging in most organizations because they are uncertain about what they should be looking for.  This short session will review the 3 most important ingredients you should consider when seeking to fill the role of product owner.	Agile Show & Tell - Lightning Talks	Talk	2011
12712	When User Stories Just Don't Fit in a Short Sprint	In a complex environment, it can be impossible to write user-valued, end-to-end user stories that fit in a short sprint. In this talk, we'll understand the potential waste of trying to make stories _too_ small. I'll explain ways for teams to keep the value and fast feedback of short sprints without sacrificing the goal of having end-to-end user stories. Hint: you may have to set aside some of your Scrum dogma.	Agile Show & Tell - Lightning Talks	Talk	2011
12715	Design, Style, and Flavors   Their Influence on Agility (BoF)	Join us for a group discussion on how languages and coding idioms influence agility. Bring your favorite examples that influence your code, in any language. We'll set up a projector so we can demonstrate our ideas to the group.\\n\\nHere are some of our favorites:\\n\\n1) Filter, Map, and Fold: the power tools of modular, reusable code.   \\n2) Alternatives to the Visitor Pattern\\n3) Avoiding Nulls with the Option Type\\n4) Concurrency Models: Actors, Software Transactional Memory, etc.\\n\\n	Development Languages Practices & Techniques	Workshop	2011
12716	Three Ways UX Gives You Better Story Sizing and Coverage	Stories give the customer what they asked for, but not always what they really wanted. Learn three practical tips for how to integrate UI design work with story development, to both get more realistically sized stories, and the user experience that the customer wanted but didn't know how to ask for.	Agile Show & Tell - Lightning Talks	Talk	2011
12718	Does Agile Focus on Value Delivery	Lean process has an exceptional focus on providing value to the customer. I ve often seen when groups are considering an agile transformation they are focusing on faster iterations, but faster iterations of what? An agile team can certainly deliver faster iterations of what the customer doesn t want. This lightning talk shows simple methods to ensure that Agile teams are focusing on value delivery along with speed. I will show how the user story/acceptance process can also focus on customer value. We will focus on Kanban and Kaizen as methods to utilize in the Agile value stream.	Agile Show & Tell - Lightning Talks	Talk	2011
12731	Agile Enterprise Architecture? Oxymoron or Savior?	Agile software delivery strategies have taken organizations by storm, and those very same organizations are now scaling agile strategies across the entire IT organization as well as on very complex projects. Agile strategies are even being applied on enterprise architecture teams and are proving to be successful in practice. This presentation overviews IBM s Agile Scaling Model (ASM) and how to take an agile approach to enterprise architecture. It also summarizes industry data exploring the effectiveness of agile strategies and of various enterprise architecture strategies.	Enterprise Agile	Lecture	2012
12737	The Power of Observation	_ To observe without evaluating is the highest form of intelligence.  Jiddu Krishnamurti_\n\nAbility to observe and share observations is one of the most fundamental skills for coaches. Sharing observations increases awareness and empowerment in others to make their own decisions and take responsibility of the situation, where as sharing interpretations has potential for conflict or disempowerment. \n\nHow are your powers of observation?\n\nThe workshop is for both new and experienced coaches. Participants will learn self-awareness and observation techniques to help themselves and others.	Coaching & Mentoring	Workshop	2012
12754	User Driven Development	As Agile Development drastically changed the Waterfall world, the Lean Startup concepts will drastically change Agile Development, mainly for enterprises. \n[Eric Ries](http://startuplessonslearned.com) is brilliantly teaching us how to deal with uncertainty in the business world. It is about time to take advantage of these techniques and learn how to apply them in the whole software development process. User Driven Development is Agile Development revised to incorporate the Lean Startups principles.	User Experience	Lecture	2012
12761	Continuous Delivery	Businesses rely on rapidly getting valuable new software into the hands of users, while keeping production stable. Continuous Delivery is a revolutionary and scalable agile methodology that enables any team to achieve rapid, reliable releases through better collaboration between everyone involved in delivery, and automation of the build, deploy, test and release process. I ll present the principles and practices of continuous delivery, including the deployment pipeline, acceptance test driven development, devops, and techniques for low risk releases.	Agile Boot Camp	Lecture	2012
12765	Distributed Agile in the Enterprise and Virtual Spaces	Good remote collaboration tools and practices can increase the effectiveness and productivity of distributed teams.  Using  Virtual rooms , scrum teams can make eye contact and move themselves around relative to each other and to objects in a virtual space. They can play the sorts of team building games that collocated scrum teams can play.  We will show you how in a live demo.\n \nWe will also share advice on remote collaboration gained from industry literature and experience with over 30 highly distributed scrum teams.	Distributed Agile	Lecture	2012
12773	Journey to Agility: Coaching a Transformation	How far can you take Agile within an organization?  Is it enough to just focus on Agile team practices like Scrum and XP or is something more needed? Agile is much more than a selection of an SDLC methodology for your teams. It can become a larger organizational change for more agility beyond just product development. The speaker will provide you with an approach that has worked with larger transformations with real life examples of how he has taken companies with little or no knowledge of Agile to an organization with high agility. 	Adoption & Transformation	Lecture	2012
12791	Stop Listening to Your Customers! Techniques for Deeper Customer Understanding	Agile practices such as ATDD, TDD, and On-site Customer have gone a long way to help us build better products but are they sufficient? Even after all these years, we still wind up building products with lackluster results. Through more data driven requirements techniques we can better utilize our IT dollars to produce better software, tailored to the needs of our users. In this session, we'll take a look at some of the existing Agile techniques for eliciting requirements and how we can improve them by ignoring our customers and using data to refine product requirements.	Business Value and Working With Stakeholders	Lecture	2012
12800	Team Dynamics Interactive Games 	This session teaches several aspects of organizational and team dynamics in a fun, interactive environment. Three different games/exercises are played. The first game, Communication Origami, teaches the importance of collaborative communication and how different organizational models affect communication effectiveness. The second exercise, the Bridge, demonstrates facets of team organization and leadership including self-organizing teams. The final session, Close Encounters with the Other Kind, teaches how to increase communication effectiveness between individuals and the team as a whole. 	Collaboration Culture & Teams	Workshop	2012
12809	Making an Impact: Agile UX Team of One	Frustrated? Overwhelmed? Wondering if you re making an impact with your team or company?\n\nBeing an Agile UX team of one can be very lonely and exhausting, but it doesn t have to be. You have a whole team of people at your disposal to help you create the best user experience for your customers. With this new team behind you, you'll be sure to make an impact.\n\nIn this session, you will gain knowledge on how to educate and collaborate with your team to build an Agile UX practice, tools to keep documentation to a minimum, incorporating design methods into the Agile process to help move a project forward, and ways to share with executives how your new UX practice is making an impact. Most importantly, the presenter will share secrets on how to keep you energized throughout a project.\n	User Experience	Lecture	2012
12812	Align your scrum teams with ad-hoc personas	Delivering value to the customer is at the core of Agile. But with rapid iterations and little time for research how do you ensure that your teams are building products for the **same** customer?     \n\nOne lightweight technique that helps companies align around a common vision of the customer is the **ad-hoc persona**. This technique visually articulates the team's shared belief of who the customer is (as opposed to a heavily researched and costly persona creation effort) and what motivates them to use the company's products. \n\nThis workshop will teach why ad-hoc personas are powerful, how to create them and how to use them to align scrum teams for deeper customer understanding, group story writing and customer feedback validation.   \n\n<!--break-->	User Experience	Workshop	2012
12823	The Need for (Build) Speed	One of the pillars for an agile process is the ability to inspect and adapt - see where you are and steer accordingly. As our products and projects   and their code base   grow bigger we face an increasing challenge to our ability as developers to see where we are. In particular, our suite of automated tests grows bigger and bigger and soon we are running thousands of tests. That's where the challenge lies: a *slow* build. Join this session to discuss ways of keeping those tests fast and see live demonstrations of techniques that help you keep your Ant or Maven build running quickly!	Development Practices & Craftsmanship	Lecture	2012
12837	Cars.com s Agility Transformation Journey (Case Study)	Cars.com is the leading destination for online car shoppers, visited by more than 13 million people each month. To further fuel its success, Cars.com ventured into an enterprise transformation focused on greater organizational health and agility. The enterprise transformation involved product & project management, product engineering, user experience, enterprise architecture, operations, infrastructure, and oversight. We'll showcase the transformation journey from these perspectives and offer a roadmap with specific actionable lessons learned that you can leverage in your own transformation.	Adoption & Transformation	Lecture	2012
12862	Agile UX Research Practices Applied 	The Sprint team often has to create practices to quickly iterate, develop and test user experiences within the sprint cadence. I will cover how the teams applied "Quick Pulse Studies" to put new ideas, designs, and concepts in front of customers on a regular basis; it requires minimal advance planning, can have immediate product impact, and can meet urgent needs. I will use rich examples and case studies to see how the engineering team all work together toward one goal - getting user feedback frequently and consistently into working software during the agile development cycle.\n\n	User Experience	Lecture	2012
12868	The Coaching Conversation as Driver Towards Great Results 	You call yourself an agile coach, but are you really acting as a coach rather than an advisor or a subject matter expert? What are the benefits of using coaching techniques known from life-coaching when working with self-organizing teams, ScrumMasters, Product Owners and stakeholders? Will you be able to learn such skills? Well, come and try it out! In this session we will take a brief journey into professional coaching from a systemic point of view. You will learn about the mindset behind coaching, the flow in the conversation and try out different types of questions that can be useful.\n\nIf you are considering participation in this session, the article by Sigi Kaltenecker and Bent Myllerup: [Agile & Systemic Coaching](http://scrumalliance.org/articles/354-agile--systemic-coaching-) will be great preparation.	Coaching & Mentoring	Workshop	2012
12871	Raising Your Game: The Role of Flow in Skill Acquisition	If you're worrying about *how* you're doing, you aren't paying attention to *what* you're doing. When you're panicking you're not improving.\n\nFlow. Time appears to slow down, yet coming out of flow you might wonder where all that time went. Watching your mastery develop is like watching grass grow. You don't see it happening, but suddenly, there you are writing better code. How do you make this process more deliberate?\n\nJoin this session to explore the elements that make a flow experience more likely, and how focusing on the process rather than on goals can sharpen your skills.	Development Practices & Craftsmanship	Lecture	2012
12883	Essential Patterns of Mature Agile Teams	Too many agile teams have hit the wall in their performance. Often they think that a few classes, a tools  purchase, and perhaps a certification or two were all they needed to achieve maturity and high performance. However, it remains elusive to them and often they regress in performance over time. It helps to understand what "high performance" looks like In this workshop, we'll explore patterns that capture the essence of agile maturity those that will help you recognize, guide, and achieve your own breakthroughs. \n	Adoption & Transformation	Workshop	2012
12928	Adobe Premiere Pro: Agile Adoption success in a hyper-competitive landscape	Prior to adopting an agile approach, Premiere Pro suffered from brutal death marches that put people in the hospital and struggled to compete against other video production powerhouses (Apple,Avid). Since adopting scrum in 2008 and continuously improving its scrum approach and product ownership techniques the death marches are a thing of the past and Premiere Pro has taken a leadership position in the video production space. Our presentation walks you through the approach we took, the things we ve learned, the success factors (both agile-related and not), and where we hope to go next.	Insights - Experience Reports	Lecture	2012
12946	Baby Steps and Pervasive Feedback	If you are new to Agile and attempting to transform your organization, it s easy to get lost in the details of recommended practices and ceremonies. Too many groups try so hard to exactly follow the descriptions "by the book" that they miss the benefits of those practices. They overlook the very reason the practices exist.\n\nIt s more important to be effective than to attempt a large number of suggested practices. George Dinwiddie will highlight one way to judge the effectiveness of your practices in a manner that guides you in improving them.	Agile Boot Camp	Lecture	2012
12955	Influencing Teams with Psychology	Self directed agile teams often don't have hierarchical management. This session is about using psychological tools to influence team members who don't report to you.  If you need to influence others, this workshop will give you the tools. Through examples, exercises, and practice targeted to selling agile concepts, you will apply Cialdini's psychological tools (reciprocity, scarcity, commitment consistency, authority, liking, and social proof) to craft persuasive positions.\n	Leadership	Workshop	2012
12963	Real World Agile: Going All-In with Agile at Performance Health Technology	In 2009, PH Tech went "all-in" and began the adoption of agile methodologies throughout the software development process. In this session, you'll take a multi-year journey with a growing small business and experience the transition from the blissful ignorance of cowboy-coding through the misery and despair of a sinking, dysfunctional organization, and on to the satisfaction and exhilaration that comes with a high-functioning agile team.\n\nThis session describes both the pain and the fulfillment that comes with developing software in a small business, before, during, and after agile.	Insights - Experience Reports	Lecture	2012
12971	The Product Partnership: Using Structured Conversations to Deliver Value	Are your stakeholder conversations less than optimal? Are your user stories alone insufficient for preparing & delivering the right software? Is everyone clear on business value? Learn effective, efficient, & creative ways for product stakeholders to converse as  product partners  for continual value delivery. In small teams, holistically analyze product needs & make just-in-time decisions on what to deliver next. Experience how to engage in  structured conversations  to explore, evaluate, & decide on high-value options for the next delivery cycle-at any level of agile product planning	Business Value and Working With Stakeholders	Workshop	2012
12972	That Settles It! Techniques for Transparent & Trusted Decision-Making on Your Agile Team 	How does your team make decisions? Do they reflect your agile team values & engender mutual trust? Do decisions result in true commitment from the right stakeholders? Are they defensible & sustainable? Agile teams make countless product and process decisions. Ex. include: features to deliver, platforms, tools, backlog management, metrics, delivery cadence, definition of done. Explore how participatory decision-making practices cut to the heart of your team values. Learn practical techniques for deciding how to decide. Leave with a toolkit to align decision-making with your team values.  	Collaboration Culture & Teams	Workshop	2012
12974	The Contracting Two Step: Patterns for Successful Collaborations	Do your agile team members make optimum use of each other s skills and capabilities? Do they share their personal development needs? Do they trust each other? If not, consider the  contracting two step  - a metaphor for simple yet powerful ways to identify and monitor mutual working agreements. Like a dance, contracting partners take mutual responsibility to reach shared goals. While not legally binding, the contract represents public, explicit commitments essential for successful collaborations. You will learn 3 techniques to implement the Contracting Two Step on your agile team.	Collaboration Culture & Teams	Workshop	2012
12977	Motivated and Hyper-productive Agile Teams by Abolishing Performance Appraisals	Orange and Bronze Software Labs takes pride in being one of the first adopters of Agile in the Philippines. But not with how career management was being done. Big changes were happening, especially doubling up in size. A framework needs to be in place to ensure that employee engagement and productivity is high. Something that supports the Agile Philosophy and improve Agile adoption of both old and new teams.\n\nHere is our story of how we abolished performance appraisals during this intense period. And in it's place, used a framework guided by the Agile Values and Principles to pull it off.	Collaboration Culture & Teams	Workshop	2012
12979	The AWG - An Engine of Sustainable Agile Enterprise Adoption	As Agile has crossed the chasm into the enterprise, it is evident that "going Agile" at scale is vastly different from adopting Agile in small or medium sized organizations. This talk covers the critical role, practical responsibilities and tangible deliverables of the Agile Working Group (AWG), a dedicated set of internal Agile resources responsible for driving a sustainable adoption of Agile at the enterprise level. Developed as part of Agile Alliance's "Supporting Agile Adoption" workshop, this presentation aims to share proven practices for enterprise adoption of Agile methods. 	Enterprise Agile	Lecture	2012
13035	Retrospectives: Yesterday s news, or tomorrow s headline?	In an agile world, retrospectives are about an open and honest examination of the past in order to shape the future. We want to understand past events both good and bad, and also how our emotions influenced those events. It is a learning experience. How can the team get better, accomplish more, collaborate more closely, solve issues more quickly, and deliver business value sooner?  Come to this session to enhance your understanding the goals and spirit of retrospectives, discover several different data gathering techniques, and improve your practice of the art of retrospection.	Agile Boot Camp	Lecture	2012
13060	Connecting Product Vision to Everyday Agile Work 	Agile development helps make us more responsive and flexible in building products, but how do we make sure we are building the right product? Unfortunately, simply asking the customer and getting them involved in the effort is usually not enough. Great products surprise customers by addressing needs that customers often cannot articulate. For Product Owners and Agile/Lean team members that want to infuse their projects with a unique product vision capable of disrupting markets and delighting customers.  Prioritization becomes clear when the vision is a tool rather than a generic platitude. \n	Business Value and Working With Stakeholders	Lecture	2012
13081	Creating a Shared Vision: From Compliance to Commitment	Creating a shared vision is one the core disciplines of the learning organization according to Peter Senge. In this interactive session, we will explore five strategies for creating a shared vision (for a product, a team, or an organization) to move people beyond compliance toward a true commitment to the vision.  \n1. Telling  \n2. Selling  \n3. Testing  \n4. Consulting  \n5. Co-creating  \nParticipants will practice creating a vision using the strategy most appropriate for their own organization, and evaluate the pros and cons of the strategies.	Leadership	Workshop	2012
13092	An Agile Adoption and Transformation Survival Guide - Working with Culture	If you do not manage culture, it manages you. Much of the Agile adoption failure is a result of not understanding organizational culture.\n\nLearn how to use the Schneider culture model to assess your organization s culture and to work effectively with it. \n\nThis survival guide will provide you with the essential mental models and tools you need to navigate safely through the treacherous jungle of Agile adoption and transformation. \n\nYou will apply your newly acquired knowledge to build a plan for working effectively with your own organization.	Adoption & Transformation	Workshop	2012
13094	Hands on keyboards! Coding with Corey Haines (Part 1)	Bring your laptop to this session with your favorite development environment(s) set up and ready to write some code. This session will be hands-on.\n\nCome and practice what you're learning at the Agile Conference.\n\nEach half-day workshop (morning and afternoon) consists of 3 hands-on, focused exercises around the practices and techniques involved in successful agile software development. Each session helps you level up in skills, such as test-driven development, pair-programming and emergent design.\n\nThis special day of practice consists of 2 half-day workshops. By joining for both morning and afternoon, you'll get a wide range of experience that you can take back to your work.	Development Practices & Craftsmanship	Workshop	2012
13095	Hands on keyboards! Coding with Corey Haines (Part 2)	Bring your laptop to this session with your favorite development environment(s) set up and ready to write some code. This session will be hands-on.\n\nCome and practice what you're learning at the Agile Conference.\n\nEach half-day workshop (morning and afternoon) consists of 3 hands-on, focused exercises around the practices and techniques involved in successful agile software development. Each session helps you level up in skills, such as test-driven development, pair-programming and emergent design.\n\nThis special day of practice consists of 2 half-day workshops. By joining for both morning and afternoon, you'll get a wide range of experience that you can take back to your work.	Development Practices & Craftsmanship	Workshop	2012
13129	Shaping Your Agile Adoption Path	Considering your company s culture when introducing Agile into your organization allows you to tailor your approach.   Going even further, it s important to understand the people in your organization, how they react to change and what role they take in creating and changing your organization s culture.  This experiential and discussion based session gives participants the opportunity to learn how to recognize their organization s culture, and perhaps more importantly, recognize how to manage objections based on personality types of the people who may appear to be resisting the change.	Adoption & Transformation	Workshop	2012
13134	Adaptive Leadership: Accelerating Enterprise Agility	Adaptive leadership embraces: Why Agile? Being Agile. Doing Agile. It explores why responsiveness is critical to success from business strategy to portfolio management implications. It explores activities that an agile leader or executive must  do,  starting with four key levers for change:  Do Less,   Speed-to-Value,   Quality,  and  Capability.  Next the focus will be on how to  Be  agile by embracing Adapting, Riding Paradox, Exploring, and Engaging leadership. This session will explore how Adaptive leadership is critical to transforming IT organizations.\n	Leadership	Workshop	2012
13139	Dollars and Dates are Killing Agile	Agile teams speak in points and iterations, but project and business managers think in terms of dollars and dates. This conceptual and language barrier makes strategic business planning, funding, and progress management a significant challenge for sustained large-scale Agile. This session will include multiple case studies from large-scale Agile adoptions that we were part of and have supported over the past 7 years and how Agile values/principles went beyond just the development organizational boundaries into strategic planning and management.	Enterprise Agile	Lecture	2012
13159	How Much Will This Project Cost?	It doesn t matter if your project is agile or not. Someone wants to know the answer to this question before you ve started. And, the larger the project or program, the more they want to know.\nIt s reasonable for people to want to know. And, it can be very difficult or impossible to provide an answer to this question. An iteration zero, no matter how long it is, will not provide you an answer. You can lead the organization by using the transparency that agile provides, and learning how to iterate and how to better the answer as you proceed.\n\n\n	Business Value and Working With Stakeholders	Lecture	2012
13161	TDD And A New Paradigm For Hardware Verification	The practices of unit testing and test-driven development (TDD) are mainstream for agile software development teams. While they also seem perfectly suited to the world of hardware development, where intense rigor is essential to avoiding the high costs of failure, unit testing and TDD are very rarely used. This talk proposes a new paradigm for achieving hardware quality where existing development and test practices are transformed through the addition of unit testing and TDD.	Emerging Applications of Agile	Lecture	2012
13166	Keeping the Dream Alive: Keys to Agile Sustainability	Don't let "we are agile" become "we were agile." Starting a transition to agile is one thing. Making the transition a lasting transformation is something else entirely. Attend this session to gain useful insights into:   \n\n- Three important aspects of Agile adoption: corporate culture, the managers  role, and agile metrics  \n\n- Keys to sustainability  \n\n- Pitfalls to avoid  \n\n- Warning signs of backsliding  \n\nYou will leave this session with specific actions you can take to help ensure that your dream of Agility does not become a nightmare of backsliding.\n\n 	Adoption & Transformation	Workshop	2012
13174	Fluid Code in the Real World	In the end, you get rated on your software's ability to meet your customers' goals. All the Agile practices wrap around one core, inner loop: writing the software.\n\n\n\nIn this hands-on session, we explore that inner loop. How do you write fluid software? How do you test first and design last? How do you get a good design to emerge, every time, even when your first ideas are guaranteed to be wrong? We will explore the engine that makes Agile go: TDD and Refactoring. You will do these in both basic and advanced cases.\n\n\n\nAnd we'll do it in the real world, indebted code and all.	Development Practices & Craftsmanship	Lecture	2012
13177	Agile In a Nutshell	If you ve been doing Waterfall delivery most of your career agile can be down right scary: changing requirements, adaptive planning, iterative development. These are all intimidating things for managers and organizations used to doing things in discrete phases one stage at a time. In this introductory talk, we will look at agile in simple terms explaining:\n\n\n\n* what agile is\n\n* what working on an agile project is like\n\n* some of it s myths\n\n* which agile method is right for you, and\n\n* three steps you can take to becoming more agile today.	Agile Boot Camp	Lecture	2012
13178	This One Goes to 121	This talk will either be a resounding success or a flop. But hey, what s the point of mediocrity?\n\n \n\nWe will explore excellence. What it is, how one achieves it, and how one exceeds it. What determines the outer limits of your team s capability? How can you be continually more awesome? We ve each got a decade of transitioning to (Jim), being on (Arlo), and building (both) awesome Agile teams. We aim to distill that down to an essence that you can inhale in 90 minutes, yet still apply directly as soon as you get home.	Adoption & Transformation	Lecture	2012
13179	Agile Inception Deck - 10 questions you'd be crazy not to ask before starting your project	Software is one of those unique activities that combine design, construction, art, and science all rolled up into one. Teams face thousands of decisions and trade-offs every day. And without the right context or big-picture understanding, it s impossible to make the right trade-offs in an informed or balanced way.\n\n\n\nThe agile inception deck is a lightweight project chartering tool that gives teams the **why** behind what they are doing. More than that it defines a common vision of success upfront, and makes sure everyone is aligned before the project begins.	Business Value and Working With Stakeholders	Workshop	2012
13182	Better Unit Testing with ApprovalTests, an open source library	Whether you are a developer, tester or manager, you'll gain insight and actionable information on how to more effectively test both\n\nnew and legacy code using the open source ApprovalTest library.  Through both demos and explanation of theory, the presenters will show you \n\nhow using ApprovalTests make testing many types of objects (from simple types to complex objects such as GUIs, arrays, database query results and more) more manageable.  The library is available in many programming languages, including C#, Java, Ruby, PHP and more.  Most demos will be presented in C#.	Testing & Quality Assurance	Lecture	2012
13247	Moving from cooperation to collaboration	In the workplace cooperation is a given. What sets agile apart is *collaboration*. Where cooperation involves everyone doing their part, a collaborative solution is more than the sum of those parts. Where cooperation helps us choose among ideas, collaboration lets us create new ones.\n\n\n\nIn this workshop, you'll learn specific ways to enhance your teams' ability to fully collaborate, discover solutions only collaboration can create, and experience real collaboration first-hand.	Collaboration Culture & Teams	Workshop	2012
13252	Agile Values, Innovation and ( the Shortage of Women Software Developers	Women are opting out of software development and leaving established software careers in disproportionate numbers. This is a material burden to the software industry and contributes to software that under-serves women as end users.\n\n\n\nAgile principles motivate practitioners to drive change into their organizations that support a humane, collaborative, empowered way of working. Organizations embracing these principles have potential to better attract and retain women (and men). \n\n\n\nAs Agile practitioners should we and can we advocate for this outcome?\n\n\n\nWomen represent 46% of the workplace and only 25% of software developers. Over two decades the percentage of women developers has steadily declined. 41% of women professionals leave established careers in high technology. Half leaving the sector completely. The number of women earning Computer Science bachelor s degrees dropped 55% from 1986 to 1995 despite growing percentages of women graduating from four year colleges. And young women are significantly less interested in studying hard tech then men.\n\n\n\nTheir absence costs the software industry and is an impediment to addressing a market where women are online in equal numbers to men; directly or indirectly influence 61% of consumer electronics purchases; generate 58% of online dollars; and represent 42% of  active gamers. \n\nWomen avoid careers in software development due to hostile environments, unsustainable pace, diminished purpose, disadvantages in pay, advancement, peers and mentors. \n\n\n\nAgile values steel practitioners for the hard work of confronting impediments, incrementally nudging an organization towards a more collegial, sustainable, creative and productive workplace so that the organization can repeatedly create software of value to stakeholders and of real use to people. These principles and the emergent properties they instill in organizations fight many of the dysfunctions research indicates contribute to women's flight from and avoidance of software careers.\n\n\n\nThrough iterative cycles of knowledge creation and sharing within companies, across enterprises, into academic institutions and out to the media success within development teams can shift the larger culture. Agile adoption itself is an example of this.\n\n\n\nThe result could be more human workplaces and a more social and engaged view of the software developer that will encourage girls to pursue computer science and help the industry recruit and retain larger numbers of talented women. \n\n\n\nThe presenter is developer, manager and executive who has practiced Agile methods for nine years and eleven years working in Women run businesses in the Media industry in New York City.	Leadership	Lecture	2012
13254	A story about dinosaur called Mainframe and a small fly Agile	This is an experience report about adopting agile principles on a huge, conservative, and inflexible environment of hi-performing mainframe applications. Working for critical bank and insurance projects, supporting airport infrastructures, security governmental processes, mainframes are the core backbone of many Fortune 500 companies. Such transformations bring unique challenges, and not only the technical ones. There are other challenges too, such as facing tons of legacy code and working with huge amounts of data. Both come with testing challenges as well.	Insights - Experience Reports	Lecture	2012
13268	What's Done Is Done: An Exploration of What "Done" Means At Various Levels	The definition of done is a fairly popular (and sometimes emotional) topic in the Agileverse.  It seems everyone has an opinion on the matter ranging from  It depends,  to  Let the teams decide,  to a meticulously designed set of business rules and criteria that account for every possible scenario.  However, as organizations adopt Agile practices (and specifically, Scrum), they seek to leverage guidance from those of us who have already blazed the trail.  Why then is this such a complex topic?\n\n\n\nThis session will discuss what the "Definition of Done" means to different stakeholders across the organization at the User Story, Sprint, Release, Product, and Program Level.  The session is based on a series of articles that I have published on this topic.  Also, I have presented various versions of this session for my clients and will be doing a dry-run of the actual Agile 2012 format for one of our Wilmington ALN meetings this Spring.	Agile Boot Camp	Workshop	2012
13274	Can laughing at our problems actually help us solve them?	This session is inspired by a blog post I read explaining how laughter can simulate both sides of the brain to help improve problem-solving capacity. If the ability to laugh at ourselves, our teammates and our work is scientifically proven to increase creative-thinking, can this be a useful tool for an agile coach? Through simple improvisation exercises and role play, this session will provide some useful techniques for coaches to stimulate teams into new ways of thinking by using humour and making each other laugh.	Coaching & Mentoring	Workshop	2012
13283	Can Marketing Go Agile?	Perforce adopted Agile processes several years ago for Engineering. A mix of Scrum and Kanban techniques are in use and are widely seen as having delivered real improvements.\n\n\n\nSeveral managers at Perforce saw this success and wanted to reap some of the same benefits in other departments. In 2011 Perforce extended Agile processes to Marketing. Coaches were brought in and a Scrum pattern was quickly established.\n\n\n\nA year into the experiment, Marketing has seen visible improvements in transparency and collaboration. As might be expected, much work remains to be done. The eventual goal is similar to DevOps: Agile teams and processes in each department with cross-department collaboration. As we get closer to that goal, all the parts of the company will be more closely aligned and pulling in the same direction to help the business.\n\n\n\nThis presentation will describe the initial transition to Agile, including all the pitfalls and growing pains.  Just adopting the basic structure of Scrum (e.g. daily standup meetings) helped improve team communication and made management more aware of the work being done.  But Marketing is a truly cross-functional team with schedules heavily driven by external events and other departments, with remote workers and a partner team in the UK.  Some of the questions we encountered early on were:\n\n\n\n* What really constitutes a team?  We all report to the same manager, but technical marketing, corporate marketing, and outreach all have very different tasks and goals.\n\n* Our sprints are heavily schedule driven: Engineering schedules and conference dates dominate our planning.  That feels a lot like waterfall project management.\n\n* The whiteboard is now project management system #5.  What works well inside the office doesn't work well for the folks in London or working remotely.  How do we manage our communication?\n\n\n\nThe current state of Agile in Marketing will come next, followed by our vision for 2012.  Ideally, Marketing becomes more closely aligned with Engineering.  We're looking at the right way to handle that, including options like 'scrum of scrums' or aligning scrum teams around projects instead of departments, while being aware of the dangers of rocking the boat too much.\n\n\n\nWe d like to share our experiences to help others avoid some of the challenges we faced, and hopefully learn from the community about how to drive forward.  We haven't solved all the challenges yet, but we've made progress.\n\n\n\nThis brief presentation will be relevant to development team leads, product managers, technical marketers, marketing managers, IT: those interested in implementing Agile practices in non-Engineering departments for intra- and inter- department productivity gains.	Insights - Experience Reports	Lecture	2012
13298	Behavior Driven Development: Look, no frameworks!	Behavior Driven Development helps business and development teams to communicate, through collaborative writing of examples of how a system will behave. Nowadays frameworks like Cucumber and JBehave exist which allow those scenarios to be written in English - but what would you do if they weren't there? We look at strategies for writing small, readable domain-specific languages on top of ordinary TDD frameworks like NUnit and JUnit, and show how to structure the underlying steps to keep scenarios maintainable - lessons which can be applied to all scenarios, even with frameworks. We also look at the costs of using frameworks, alongside the benefits, and how to know when to use them - and when to step away from the tools.	Development Practices & Craftsmanship	Lecture	2012
13302	Is It Worth It?  Using A Business Value Model To Guide Decisions	Product owners are expected to consider the question "Is it worth it?" about their projects.  This question is difficult to answer because the answer changes as you proceed through the project and gain more knowledge about the purpose, considerations, costs, and benefits involved in a project.\n\n\n\nKent helps attendees explore a tool they can use to help organize the necessary information to answer the  is it worth it?  question on a regular basis.  This interactive session demonstrates how teams can create a value model to make an initial decision about whether to pursue a project, and then utilize that model as  knowledge grows throughout the project to revisit the question and confirm whether the project is on the right course, or if changes need to be made.\n\n	Business Value and Working With Stakeholders	Workshop	2012
13318	Abuser Stories:  Thinking Like the Bad Guy to Reduce Security Vulnerabilities	At Agile 2011, the speaker introduced the notion of abuser stories to in the context of an overall approach to agile security.  Last year's talk provided a broad brush on a number of topics to introduce how we can consider security throughout the agile development life cycle.\n\n\n\nThis talk will go in-depth on a vital component of identifying, capturing and ranking potential vulnerabilities in software system:  the concept of Abuser Stories.  \n\n\n\nAbuser stories is a way to capture potential vulnerabilities in software systems, using the standard user story format.  While user stories are written from a user perspective, abuser stories are written from an enemy or attacker's perspective and describe the enemy's mal-intent and motivation.\n\n\n\nThe session will look at the concept of Abuser Stories more in-depth. We will examine:\n\n�%\tHow seemingly benign functional user stories can create vulnerabilities in our software, leaving lots of opportunity for our enemies to take advantage of our weaknesses.   \n\n�%\tHow to use the concept of abuser stories to shed some light on where these vulnerabilities can be introduced.   \n\n�%\tHow to craft a good abuser story.    \n\n�%\tHow to craft refutation criteria so that we can determine that the attack depicted by the abuser story is not possible.    \n\n�%\tHow to estimate and rank abuser stories.    \n\n	Emerging Applications of Agile	Workshop	2012
13335	Inside-out: Leading Change from the Middle using Lean Tools and Principles	When large organizations adopt Agile, they often are described as transforming either top down or bottom up. Left out of this picture is the key role of middle management to help reinvent the company. This interactive workshop explores the how the middle manager can apply lean thinking and tools to lead change efforts and how executives and change agents can help support them through the transition. \n\n\n\nAudience: For those who manage while reporting to someone above them; for those who lead middle managers; for those who are change agents in large scale Agile adoption.\n\n\n\nAbout the workshop facilitator: Ed Kraay is an Agile coach, trainer and software development consultant at Yahoo! In the last 6 years Ed has mentored software teams and leaders from several top 20 global companies, in addition to smaller Bay Area firms.  Not only a coach, Ed has experience in the last 3 years leading large programs in mobile, embedded software and gaming. Ed enjoys working in and across teams to eliminate wasteful processes, deliver more value and have more fun in the process. He lives in San Francisco and is still recovering from the deathmarch project that was his son's first year. Ed is a member of the Bay Agile Leadership Network (Bay ALN), and has been a presenter at Agile Development Practices, SDWest, Agile Open Northwest and Agile Open California.	Adoption & Transformation	Workshop	2012
13340	BrainScience: Facilitation and Game Toolbox	Agile is about more than processes and tools; it s about individuals and interactions. A great way to experience what this really means is by participating in facilitation exercises and agile games.\n\n\n\nThis session will explain the thinking behind why we use certain facilitation techniques and play agile games. The group will then participate in several activities, and in debriefing we will discuss how these activities can be used in their environments. Participants will leave the session with a toolbox full of techniques and games they can use themselves to teach agile concepts, as well as an appreciation of the agile values and principles through their own experience in the games.\n\n	Coaching & Mentoring	Workshop	2012
13372	Task Board Evolution	As a coach, you're often asked to either help design or give opinions on task boards.\n\nThis session will be a quick tour through the designs of task boards at several of my clients and how they evolved during the engagement. We'll examine the motivations behind each change and what the outcomes were.	Insights - Experience Reports	Lecture	2012
13376	TDD for [Embedded] C	Test-Driven Development is for Java programmers, not for C! Yes it is! Roll up your sleeves and test-drive C with us. We ll start with a short intro to TDD, and quickly get you doing TDD. Bring your laptop. If you don t have one, we ll team you up with another programmer. You ll see how to make TDD practical for embedded software development. See CppUTest Compilation Environment(http://cpputest.org/node/42) for needed tools. We ll also have a bootable Linux DVD with all the tools so that you can join the experience.	Development Practices & Craftsmanship	Workshop	2012
13411	Does Pair Programming Have to Suck?	On some teams pairing is the norm; developers enjoy the collaboration & experience enhanced productivity. Others, though, work on teams where pairing is shunned, avoided, or just faked. Why do some craftsmen thrive with pairing while others want nothing to do with it? Why does coach-enforced pairing turn into something dry, distracted, imbalanced & ineffective? Effective pairing can increase creativity, energy, speed & quality. What factors make that possible? Join in an honest discussion & learn about which pairing styles drag teams down & what sort of pairing helps teams rock. Whether you've never paired before, or you're on a team that's trying, you'll have fun and come away with a clear sense of the best that pairing has to offer.	Development Practices & Craftsmanship	Workshop	2012
13424	Lightweight Security in Agile Enterprise Environments: Introducing Threat Modeling Express	You care about security, but common secure Software Development Life Cycle (SDLC) practices such as traditional threat modeling and secure requirements analysis seem to be geared towards Waterfall development. What can you do? In this session we will explain the concept of Threat Modeling Express and model one of the audience member's actual applications, live, together. Threat Modeling Express is a two hour activity you do once a quarter that helps you put the right security requirements in your backlog (or other ticket/story/requirements management repository).  It's extremely lightweight: you need a developer (yourself), somebody with security knowledge (possibly another developer), and somebody who represents business priorities (a product owner?). Together in a room you hash out the most common user stories/use cases, possible malicious intents, technical means to achieve those intents, group risk rating, and adding countermeasures to your backlog. At the end of the session you have group buy-in on the security risks you care about and how important they are relative to everything else. This is as lightweight as application security gets: attend if the words "lightweight" and "security" both appeal to you.\n\nThreat Modeling Express is an alternative to more rigorous / comprehensive design-level security activities such as threat risk assessments, traditional threat modeling, and architectural risk analysis.Threat Modeling Express sacrifices rigor in favor of speed.\n\nThreat Modeling Express is a process defined by Security Compass (an application security consultancy), but is really just describes a set of techniques that companies have been practicing informally for years. It's not proprietary and you can do it on your own without any third party assistance if you have the necessary domain expertise in-house. The speaker is one of the people who coined the term and has taught and used Threat Modeling Express at several large companies primarily in the financial services and utilities industries. \n\nNOTE: Although the speaker's personal agile experience is with Scrum, the process works equally well in other agile environments.\n\n\n\nMore information about Threat Modeling Express:\n\n * http://www.infoq.com/articles/threat-modeling-express\n\n * https://msevents.microsoft.com/CUI/EventDetail.aspx?culture=en-US&EventID=1032476372&CountryCode=US%20ForceRecrawl:%200	Enterprise Agile	Workshop	2012
13425	There and back again - from iterative to flow... and back to iterative!	Come and hear the story of a team that started with Scrum, transformed their process in a lean-like approach and then were back to iterative. It had a promising start and, just when it feels like the perfect story, things collapsed and the team was taken by a great doom. Fortunately, difficult times and strongly willed people work well together and peace was restored.\n\n\n\nThe team has started with Scrum, which worked well for a long time. Then, due to context particularities and using retrospectives, the team began to deconstruct Scrum, not by chance but through well thought decisions, and ended up in a single piece continuous flow process. The turning point was when, carried away by the success of removing Scrum practices and ceremonies, the team decided they didn't need a regular retrospective.\n\n\n\nThen the team experienced the effects of relying mostly on discipline and how hard it is to revert that situation without their main continuous improvement tool. Fortunately a call to action saved their moral and put things (and people) together again. Join us for this fast paced talk where you will get to know which particularities motivated changes, the advantages of those changes and how this team surpassed that great difficulty.	Insights - Experience Reports	Lecture	2012
13427	Velocity is Killing Agility!	We know that we can only manage what we can measure   but how do we measure productivity, predictability, quality and value delivery of our agile projects and initiative?  This interactive session was inspired by the response to Jim s blog by the same title that drew over 8,000 hits in 4 days and will explore how we should (and shouldn t) measure the success of agile projects and initiatives. As agile practices have spread widely during the last decade we still struggle with measuring progress in the same ways we did with traditional projects. Is velocity just another productivity measure that we shouldn t be using? How is it helpful? What else should we measure   and how do we effectively measure value or cycle time? Jim Highsmith and Pat Reed will facilitate an exploration of these questions from both conceptual and very practical perspectives.	Enterprise Agile	Workshop	2012
13429	Break Down the Silos: Collaboration Techniques for Teams	Practice collaborative techniques in a project simulation. Walk away from this workshop with tools and techniques you can introduce to your project teams immediately to encourage more collaboration and cross team communication. See the benefits of increased team interaction and pairing through this experiential workshop developed and first used at Nokia Location & Commerce.	Collaboration Culture & Teams	Workshop	2012
13455	Scaling Product Ownership at the US Air Force - A Story of Epic Proportions!	What happens when the DoD, Air Force, Government Contractors, all decide to "Go Agile?"\n\nHow do you scale Product Ownership with a bunch of Lt. Colonels, Majors, Program Managers, and multiple teams?\n\nThis experience report will reveal how we looked holistically at the situation, managed tough personalities, and applied Product Ownership at scale for a multi-million dollar portal project. \n\nCome, sit down and listen to a story and be encouraged. No need to fear. Even our government can apply Agile well!	Insights - Experience Reports	Lecture	2012
13462	Developers Exploratory Testing - Raising the bar	There is a common practice in our company to perform Developers Exploratory Testing (DET) sessions, explained by my colleague Davor [here](http://www.stickyminds.com/sitewide.asp?function=DETAILSIDX&tvniu=1&sqry=*Z(SM\\)*J(ART\\)*R(createdate\\)*&ObjectId=17003&ObjectType=ART&sidx=1) . The cool thing is that this way of performing higher level testing has actually become accepted by our developers, and [they really enjoy it.](http://blog.jayway.com/2010/10/11/three-reasons-for-me-as-a-developer-to-love-developer-exploratory-testing/)\n\n\n\nIn my current work of [developing our organization wide practices for quality](http://blog.jayway.com/2011/12/01/organization-wide-test-strategy-step1-deriving-our-quality-values/), I have made a deep dive into how DET is carried out on a regular basis. What I have seen is that DET is accepted and acknowledged as a valuable practice, however it is not really carried out in its full potential. There are many details and aspects of it to work on, especially regarding reporting and follow-up.\n\n<!--break-->\n\nThis talk will gather my learnings from coaching many of our different development teams in their DET sessions. Some improvements are achieved just by carrying out ET in a better way, but there are also specifics about the involvement of the whole team testing together that give alot of value back to the project. One example is about what information that is gathered which are not plain bugs.	Testing & Quality Assurance	Lecture	2012
13476	Giving Agile Teams the Roots to Grow and Wings to Fly	We introduce useful and proven practices that increase the sticking power of new agile teams, allowing them to stay agile long into the future. To create sustainable change, agile teams have to overcome organizational gravity that pulls them back into the old, comfortable ways of working. New agile teams are especially at risk of falling back after the coaches leave or the agile transition is declared 'over'. By helping the team set expectations early, the +15 practices provide support just when the team is most vulnerable, and increases the chance of creating lasting change.\n\n\n\nWe introduce two concepts, the +15 Team and the +15 Flightplan, that support teams not just at the beginning of a transformation, when management attention and resources are focused on the effort, but much later on as the teams begin unlocking some of the more challenging engineering practices, such as continuous integration or continual refactoring which take time and repeated practice to achieve. You will learn how to work with a new team to apply these concepts, and how the team can use these to guide growth over time.  \n\n\n\nSuccessful Agile transformations are built on successful Agile teams; achieving *sustainable* success depends on helping those teams grow and evolve over time. But in order to be self-organized and self-directed, newly formed agile teams need an example to follow; they need to have a glimpse of where a team can get to after 3, 6 or 12 months of continual retrospection, learning and improvement. Unfortunately, in many cases, there are few examples of such success around them. In a large organization, the inertia of existing cultural norms is likely to weigh down on any visions of excellent execution, diluting the vision and ultimately limiting the success of the teams and the transition.  \n\n\n\nThe +15 Team is a simple exercise to focus the team on developing good agile behaviors that provide the roots from which a team can grow. The +15 Flightplan is a workshop or game that delivers a long-term plan for agile maturity created by the team that allows the team to soar over time. Participants will be introduced to this technique as a way to better guide the team s development over time as well as learn how and when to respond.  Spending just minutes at every retrospective using these artifacts can make the difference between a team returning to old habits and performance levels or striding forward to become self-directed, high-performing agile teams.	Adoption & Transformation	Workshop	2012
13518	Slow Down to Go Fast: Lessons Learned Shipping Bing Voice Search on Xbox 	Are you the tortoise or the hare? Many software teams today practice "rapid development" techniques, and while it is true that some practices and methods produce results more quickly than others, slowing down and (potentially) building less, leads to higher quality and efficiency gains in the long run. At Microsoft, "Slow down to go fast" was the mantra of the Xbox voice search team, taking on the persona of the "tortoise" to successfully deliver on our objectives with high quality. By adhering to the principles of Agile while being agile in our methodologies and practices, the team found a flexible but structured framework to work within. Paramount to this collaboration was the close partnership between developers and testers. Out of this collaboration grew a set of philosophies and best practices that lead to a successful product launch. Come hear a  development lead and senior tester talk about went well and what they learned, with a focus on slowing down to go fast to early cycle - and ultimately shipping - quality.\n\n\n\nIn this session, participants will learn the what and why of our best practices, including:  \n\n- The "Buddy System" employed by development and test  \n\n- Code reviews, buddy building and buddy testing  \n\n- Interactive design and documentation using OneNote  \n\n- Driving crisp and test-driven "done" definitions  \n\n- The right level of unit testing and test automation with feedback from code coverage  \n\n  \n\nTarget Audience  \n\n- Software engineers, particularly developers and testers, with a basic knowledge of agile development principles  \n\n- Agile development teams that tend to ship with lower quality and large volumes of technical debt (e.g. bugs and refactoring work that never gets done)  \n\n- Agile development teams that have to work with several dependencies to ship one product  	Insights - Experience Reports	Lecture	2012
13526	Pitfalls in Agile Testing and How to Avoid Them	Good Agile Testing is hard. Transitioning to Agile is doomed if the testers, team or org. aren t prepared to handle the changes in how testing is performed, managed and communicated. The path to great testing contains many traps and pitfalls along the way - including: only performing manual testing, automated tests that aren t maintained, and user stories that aren t  done  on time.\n\n\n\nIn this interactive workshop, you will explore some of the major challenges and discover ways to avoid them. Everyone tests. Are you ready?\n\n	Testing & Quality Assurance	Workshop	2012
13547	Combining Kanban and Scrum - lessons from the team of sysadmins	Kanban is becoming a fashonable term in the Agile world. Is it really an answer to all of our problems? Join me in discovering how a team of sysadmins dragged the best of it, added a chunk of Scrum and came up with a clear and sustainable process for support teams. Then, let s take a look at another team that successfully followed their example.	Insights - Experience Reports	Lecture	2012
13560	Achieving Business Agility to Survive and Thrive	To survive, businesses must balance new product/service development effectiveness and operations efficiency.  Companies fail every day from lacking balance between opposing needs of  right now  profit and investing in innovation to thrive long-term.  Sometimes they careen chaotically between the two needs.  Understanding business dynamics and the prevailing bias toward  stability  will help both agile adoption and achieving appropriate levels of business agility.  In fact, agile approaches hold the key to a successful balance, meaning you as an agile practitioner can help your company succeed!	Adoption & Transformation	Lecture	2012
13567	The Dirty Dozen - 12 Practices That Can Kill Your Agile Transformation	Are you struggling to gain the value you expected from your transition to Agile practices?  Did your move to Agile seem to create as many problems as it solved?  If so, this is the session for you.  Sometimes organizations get themselves into trouble when they try to "run before they can walk". They want to scale Agile across 20 teams but, at the same, time, can t even hold an effective planning meeting. The discussion and exercises in this session will suggest an  order of operations  in addressing these impediments. The goal of this session is to help participants move from thinking  We have a million problems  to  We have a million problems but Problem X and Y are where we should focus first and here is how we will do that. 	Adoption & Transformation	Workshop	2012
13606	Transforming a Worst Nightmare Leader to Situational Leader	Individual and team performance varies by the competence and commitment with the task at hand. Leaders must be adept at diagnosing situations and versatile in applying the matching leadership style to improve the individual's or team's performance. Leaders at all levels (functional leads, scrum masters, agile coaches, managers, etc.) will gain valuable insight into the behaviors of various leadership styles and the appropriate application of those styles in situations that improve the effectiveness and outcome.  Participants will have their eyes opened to the characteristics of everyone's worst nightmare leader, learn about leadership styles and versatility, and apply the concepts to turn their worst nightmare into a role model for leadership. This workshop is based on the Situational Leadership II model developed by Ken Blanchard.	Leadership	Workshop	2012
13608	Kanban Pizza Game - the Kanban experience for foodies	The Kanban Pizza Game is a unique experience of the benefits of one-piece flow or limiting your work-in-process. You are the proprietor of a new entrepreneurial enterprise, your very own Pizza Shop. You will experience the frenetic energy required to keep up with your customers' needs before using the three simple prescriptions of Kanban to increase your productivity and even offer your customers more choice. You'll experience some subtleties of the Kanban approach before we tie everything back to how software is delivered using Kanban.\n\n\n\n--  \n\nThe Kanban Pizza game was created in the summer of 2011, and has been used at Tampere Goes Agile 2011 in Finland and the Agile Coach Camp in Columbus, OH in Sept 2011. Feedback was enthusiastic, and the game has been used numerous times with clients in the passed 6 months to very positive feedback. The benefit of this game over other Kanban experiences is the level of complexity that can be introduced through the variations of pizza slices (for example, incorporating subtle changes in flow through the system).\n\n\n\nSome feedback from the Tampere exercise can be seen on the [agile42 blog](http://www.agile42.com/en/blog/2011/09/23/kanban-pizza-game/ "Kanban Pizza Game").\n\n\n\nKanban is a tool that allows optimization of a process by visualizing it. Kanban has just three main prescriptions:\n\n\n\n1 Visualize the workflow  \n\n2 Limit WIP  \n\n3 Measure and optimize the average lead time  \n\n\n\n**Visualize the workflow**  \n\nWith the physical production of the Pizza the workflow is always visually present, and with the drawing of the workflow we can reflect the current process.\n\n\n\n**Limit WIP**  \n\nThrough the game some bottlenecks and queues will emerge. During the game we introduce work-in-process limits to highlight the (often counter-intuitive) benefit of focusing on single piece flow, and so that the teams don't lose points for unused materials. The participants experience that WIP limits are more than just imposed limitations - they change behaviour; people interact more on the overall production, communicate more and help each other when needed.  \n\n\n\n**Measure and optimize the average lead time**  \n\nIn the game we measure the lead time and the cycle time. We also use a point system to approximate value delivery, and in particular the cost of inventory or waste. \n\n\n\n**Some Benefits of Kanban**  \n\n- Bottlenecks become clearly visible, leading to increased collaboration  \n\n- Evolutionary path to agile software development  \n\n- Provides a way to be agile without iterations, starting where you are  \n\n- Natural tendency to spread throughout an organization  	Agile Boot Camp	Workshop	2012
13615	Writing High Quality Code	This presentation will help you quantify software qualities. Quality in delivered software is intangible and very different from quality in physical goods. Some external attributes of quality software free from defects and easy to maintain are reflections of the code s internal qualities. When classes and methods are cohesive, non-redundant, well-encapsulated, assertive, and explicitly coupled, they are less prone to mistakes and far easier to debug, test, and maintain. David Bernstein asserts that paying attention to code quality helps us focus on the key principles, patterns, and practices used by expert developers. If you don t pay attention to critical code quality attributes, iterative development practices can quickly degrade code into a maintenance nightmare. Join David and take a deep dive into the code qualities that make software more maintainable and less bug friendly. Create software that not only provides value now but also is easy to change and extend so it can continue to deliver value far into the future.	Development Practices & Craftsmanship	Lecture	2012
13623	The 0-Page Agile Test Plan	Get rid of heavyweight Test Plan documents that no one reads, focus on process, make it difficult to respond to change and don t help with customer collaboration. In this hands-on session, you will create a multi-dimensional Test Strategy that _radiates_ information (i.e. helps everyone know what s important to test _right now_), highlights non-functional requirements, and easily adapts to changing requirements. Everyone on an agile team can use this method to get on the same page - this is **not** just for testers.	Testing & Quality Assurance	Workshop	2012
13624	Wetware Craftsmanship: Better Coaching Through Improved Understanding of the Mind	Modern organizations have developed an excessive focus on human beings as logical and emotionless beings at work - seeing us as no different than the computers on our desks - to the detriment of understanding and improving the way that people actually think. It's time to commit ourselves to the craft of using our brain.\n\n\n\nLearn how developments in neuroscience have given us insights into the inner workings of the mind, some of those discoveries reinforce coaching concepts that have been around for over a century, while others have novel and exciting implications on how to best utilize your most important, and very finite resource: your mind.\n\n\n\nWe ll explore the limitations of the mind, as well as strategies to amplify its effectiveness and answer questions like why stand ups should be in the morning and why that member of the team is just so resistant to your helpful suggestions.	Coaching & Mentoring	Workshop	2012
13649	Cracking Your Big Rocks - Large Problems Don't Talk Back	Ever faced a huge or insoluble problem? \n\nDid it keep you up at night? \n\nDid it give you that feeling of mild panic (or worse)?\n\nDid you keep avoiding it and putting it off?\n\n\n\nHow do your teams tackle their defect backlogs, technical debt, replacing a large legacy system or splitting epics?\n\nHow do managers overcome the hurdle of having to complete 20 performance appraisals in a month (or less) and reporting on large programs of 40+ scrum teams? \n\n\n\nHow do *you* approach your biggest personal challenges? \n\n\n\nThis is a session for anyone who has faced or continues to face large hurdles in either their professional or personal lives - to share your successes and failures with others and to gain new strategies and insights in demolishing the rocks that will fall in your path in future.\n\n\n\nNote, there may be occasional bursts of Brit/pirate humour :)	Coaching & Mentoring	Workshop	2012
13650	The SQALE method: Meaningful insights into your Technical Debt	Fluid delivery stream is a strong requirement for business performance. Managing Technical Debt is a key factor for sustaining this delivery stream.  The **SQALE open sourced method** is used in numerous places; from small to ultra large companies for monitoring their Technical Debt (one of the largest banks in the world is using SQALE on a daily basis across 3,500 builds and 30,000 + developers).\n\n\n\nJean-Louis Letouzey, the author of the SQALE method will introduce it, explain and demonstrate how its indices and indicators provide valuable information for managing and optimizing Technical Debt.\n\n	Testing & Quality Assurance	Lecture	2012
13677	Distributed Agile Simulated Exercise	Have you faced challenges working with distributed scaled agile projects? Do you have the means to cope with the problems in this context? Are you curious to discover techniques that could work for your project?\n\n\n\nIn this workshop you will experience scaled and distributed agile project delivery. This session promises to be as interesting and close to your real life experience. This is your chance to experience and experiment in a fail-safe learning environment. You will come away with a variety of tools and techniques that can help better your distributed project delivery.\n\n	Distributed Agile	Workshop	2012
13685	Case Study: Being Agile in an Embedded, Product-Line Environment	Many have discussed agile success stories in the IT domain.   But little has been published on agility for embedded, product line systems.  This talk presents a case study of one embedded product organization s adoption of agile practices across multiple product lines.   We discuss how the hardware, software, and project management teams collaborate in an embedded agile environment, and their adoption of agile techniques.  While successful, there were several challenges faced by these teams.  We discuss what practice and tool changes helped overcome some of the challenges and conclude with the existing challenges the teams still face.\n\n\n\nWhile the primary audience is embedded systems development, agile practitioners that support multiple product variants would also find this presentation beneficial.	Emerging Applications of Agile	Lecture	2012
13694	"The Big Picture": Agility and Strategic Vision	When organizations adopt an agile approach to development there is so much focus on the iterative nature of agile development that long range vision and strategic product design, "The Big Picture", can get lost. In this workshop, Certified Scrum Trainer and Agile Process Mentor, Jimi Fosdick, PMP, CST discusses the need to include long term product vision, coherent user experience and User Centered design and architecture along with specific best practices for achieving a coherent product that delights users and walks participants through hands on, game-based, exercises to achieve that goal.\n\n\n\nTopics will include:\n\n\n\nDiscussion of Product Vision and hands-on experience crafting a compelling overall vision\n\n\n\nDiscussion of User-Centered/Value-Driven design and hands-on exercises to incorporate user experience (UX) and software architecture early in the development process\n\n\n\nExplanation of the pitfalls of a lack of vision and so-called "hybrid" models for incorporating UX and architecture into agile projects including the exercise "How To Tell If Your Vision is Impaired"\t\n\n	Enterprise Agile	Workshop	2012
13721	Beyond Functional Silos with Communities of Practice	Stop me if you ve heard this one before&  An organization aligns its operation around business products with cross-functional teams focused exclusively on each one. The business likes the focus, but soon people start to complain. Functional experts feel isolated and aren t able to tap into their technical peers now isolated in other teams. Common practices become difficult. Functional managers feel left out now that their people are permanently assigned to dedicated cross-functional teams. Overall, the organization gains benefit from the re-alignment, but people can t help but feel they are neglecting their institutional knowledge and have reduced their technical capacity to solve problems. You might think we re talking about an Agile development team, but actually we re talking about Chrysler in the 19902 s when they re-organized their engineering around auto lines. (Wenger et al, Cultivating Communities of Practice 1)\n\n\n\nThis session will explore the concept of communities of practice and how they are a vital component for agile organizations. From providing tactical support in issue resolution, to being stewards of knowledge across vast enterprises, and even helping create support for the larger organizational change, communities of practice are a vital component in improving organizational agility. We will walk through the history of communities of practice, from their emergence in fields as disparate as auto manufacturing, consulting, and oil exploration, and show how these concepts apply to agile organizations. Participants will hear several cases about how communities have been used at our actual clients to help support the organizational change, as well as get some tactical steps they can use to implement their own communities of practice at work.	Collaboration Culture & Teams	Lecture	2012
13735	Skiing and Boxing: Coaching Product and Enterprise Teams	Successful Agile transitions depend on a coaching approach as much as development of a good sports team. One is not going to assign the same exercising programs to pro skier and boxer and exactly the same applies to the development teams\n\n\n\nIn our study we summarized experience from Agile transformation projects in different areas from travel website to investment bank risk management software. What makes the difference between B2C product developer and enterprise automation consultant? We are going to discuss common points and distinctive features in requirements management, innovations, customer collaboration and team motivation.	Insights - Experience Reports	Lecture	2012
13758	The Perils of Prioritisation 	Many factors affect our ability to prioritise.  Not the least of these is Decision Fatigue.  Simply put, the more decisions you make, the less able you are to make good decisions in the future.\n\n\n\nThis opens us up to the possibility that by forcing their Product Owners to groom the backlog, well meaning ScrumMasters and Agile Coaches may actually be making their backlogs worse!\n\n\n\nIn this session we'll delve into the science behind how we make decisions, and the toll they take on us every single day. We'll then relate that knowledge to the challenges that "Product Owner" shaped individuals face during the life cycle of a typical Agile Project; as they come to terms with keeping their Stakeholders happy, their Backlog's Prioritised and of course their organisation's value maximised.	Business Value and Working With Stakeholders	Lecture	2012
13776	Pragmatic, Not Dogmatic TDD: Rethinking How We Test	This presentation challenges the "norm" for TDD. Testing should be an integral part of your daily programming practice. But you don t always need to derive your code via many test-code-revise-retest cycles to be test-driven. Some find it more natural to outline a related set of tests first, and use those test scenarios to guide them as they write code. Once they ve completed a  good enough  implementation that supports the test scenarios, they then write those tests and incrementally fix any bugs as they go. As long as you don t write hundreds of lines of code without any testing, there isn t a single best way to be Test Driven.\n\n\n\nThere s a lot to becoming proficient at TDD. Developing automated test suites, refactoring and reworking tests to eliminate duplication, and testing for exceptional conditions, are just a few. Additionally, acceptance tests, smoke tests, integration, performance and load tests support incremental development as well. If all this testing sounds like too much work, well& let s be practical. Testing shouldn t be done just for testing s sake. Instead, the tests you write should give you leverage to confidently change and evolve your code base and validate the requirements of the system. That s why it is important to know what to test, what not to test, and when to stop testing.	Testing & Quality Assurance	Lecture	2012
13777	Testing System Qualities	Agile teams incrementally deliver functionality based on user stories. In the sprint to deliver features, frequently software qualities such as security, scalability, performance, and reliability are overlooked. Often these characteristics cut across many user stories. Trying to deal with certain system qualities late in the game can be difficult, causing major refactoring and upheaval of the system s architecture. This churn isn t inevitable. Especially if you adopt a practice of identifying those characteristics key to your system s success, writing quality scenarios and tests, and delivering on these capabilities at the opportune time.\n\n\n\nWe will show how to write Quality Scenarios that emphasize architecture capabilities such as usability, security, performance, scalability, internationalization, availability, accessibility and the like. This will be hands-on; we present some examples and follow with an exercise that illustrates how you can look at a system, identify, and then write and test quality scenarios.	Testing & Quality Assurance	Workshop	2012
13801	Scaling Scrum step by step:  The mega framework 	We will describe our experience of scaling scrum from one single team to seven teams during 2010 and 2011. To do that, we will talk about the new meetings  we added to our scrum framework to improve team communication and synchronize the parallel sprints that we run to develop the most important online payment system in Brazil. We will address the steps that we did and the focus on values instead of rules that is the basis of our agile environment.\n\n\n\nThis work is a continuation of our first paper about this topic (Moving back to scrum and scaling to scrum of scrums in less than one year)) presented at SPLASH 2011 conference. Now we plan to emphasize our  mega scrum framework , that allows us to add more teams to the same product more easily.\n\n\n\nOur first work was focused on our experience of implementing scrum in a team that had already tried it and failed and in less than year scaled it to four teams. At this moment, we can say that we have learned how to handle multiple teams in parallel in the same product. Nowadays, we have a framework and for us it is quite simple to start a new team (but it was not easy in the beginning). \n\n\n\nThe focus of the first paper was on values like transparency and commitment and a vision that we could have more than two teams working in different backlogs but everyone belonging to one big team. In this propose to agile 2012, we will emphasize the mechanism of framework that we created to scale scrum:  the mega framework .\n\n\n\nIt is important to say that the development team and the business team agreed that the product backlog had a lot of different areas and the existent team was not sufficient to deliver as the market expected (There are historical reasons for that and we will detail them in the paper). So we started our strategy of adding and hiring people to existent teams before creating new ones. As new people learned the values and how we work, we started a new team.\n\n\n\nWith more than three teams we learned that it would be important for everyone to know the sprint backlog of the other teams and to know the course of the parallel sprint. So we created two meetings: mega planning and mega daily. The first one happens just after the plannings and the second one in the middle of the sprint. At this point we  created our  mega framework  with the challenges of continuing being agile.\n\n\n\nIn the beginning (with two or three teams) it was possible to have meetings with everyone, but nowadays, there are so many people   the meetings were not productive and there is no room for everybody. So we learned and adapted them to meet our needs. We will detail that in the paper.\n\n\n\nOne important lesson that we learned was the necessity of improving the communication of the team and between product owners and scrummasters. So we created some rules to do that, improving our development process. Another important lesson that we learned was that scrummasters and product owners must be synchronized but that was not only their responsibility    the team must know what the other teams are developing. We can detail that and we believe that point is one of the biggest challenges to scale scrum.\n\n\n\nAnother relevant point to share is that we improved the productivity of the team. We observed that the velocity of the teams increases when they have a focus   with two or three teams, there were many different subjects to handle. Another metric is that the revenue of the business increases in a ratio that is bigger than the team expansion   so the team is delivering value to the clients can be observed in this scenario.\n\n\n\nSo, we think that story is very useful to the agile community because we have learned a lot (and continue to learn) and now we have a framework that makes easy to add new teams. We also believe that everyone can adapt that to start a process of scaling agile in their teams. Of course we have more details of each point and we plan to discuss them in the paper.\n\n	Insights - Experience Reports	Lecture	2012
13804	Agile Game Incubator	Ever wanted to create a game but not sure how or where to start? \n\nDo you prefer learning-by-doing? \n\nDo you use games as a learning tool but haven't found the right game for a topic? \n\n\n\nLearn to create your own unique games for communicating complex topics and injecting some fun back into work. Come prepared with your own topics and ideas or join in on others'. \n\nDon and Mike will kick things off by sharing their approach, guidelines, and experience. They will then facilitate the formation of teams around problem topics and guide them through the creation of the ultimate Agile game!	Coaching & Mentoring	Workshop	2012
13819	Selenium Users Anonymous	Hi, my name is Dave, and I'm a recovering Selenium user. \n\n\n\nI was like you once -- new to Selenium, using the IDE for a quick fix. Oh sure, "Just this once. I'll have plenty of time to change it later." is what you'd say. But before you knew it -- BAM! -- you're in so deep you don't know how to get out. Trying to debug a large suite of brittle tests that constantly break only to find false positives after slow run times along with a nice helping of poor cross-browser coverage.\n\n\n\nI've seen it a thousand times, and I'm here to tell you, it doesn't have to be this way.\n\n\n\nHere at Selenium Users Anonymous, we offer practical advice from those that have gone before you -- showing you how to evolve your current Selenium nightmare into a bright automated testing future with our universal 12 step program.\n\n<!--break-->	Testing & Quality Assurance	Lecture	2012
13820	Remote Pair Programming: A Guide for Distributed Teams	*Remote pair programming* is surprisingly simple and inexpensive to implement, but it's not just about bleeding-edge technology -- a good attitude is just as important as good technology. Joe will walk you through how your distributed team can successfully implement remote pair programming, allowing you to realize the same benefits as in-person pairing and address some of the challenges of distributed development.  Joe will discuss the important personal and interpersonal skills needed for remote pairing as well as the technology.   \n\n \n\nDistributed agile teams need not forgo the valuable discipline of pair programming. Thanks to ubiquitous high speed internet service, major advances in online collaboration technologies, and the need to source talent wherever they might be, remote pair programming is becoming more common. 	Distributed Agile	Lecture	2012
13848	Creating Maintainable Automated Acceptance Test Suites	Creating automated end-to-end functional acceptance tests is hard. Maintaining them over time is harder. Some agilistas even claim that the cost outweighs the benefit. In this tutorial, Jez will explain how to create valuable, maintainable acceptance test suites and keep costs under control. First, he describes how to layer acceptance tests to reduce coupling between the test harness and the system under test. Then he discusses how teams should be organized in order to efficiently manage acceptance test driven development. Next Jez shows how to manage the evolution of acceptance tests by organizing them as scenarios rather than as suites of story tests. Finally he discusses how to manage data for acceptance tests.	Testing & Quality Assurance	Workshop	2012
13875	Playing the Customer Development Game	Agile is great at building what you want but how do you know what your customers want?\n\n\n\nIn this game-based workshop you learn how the Customer Development model lets you discover the right product before you build the wrong business.\n\n\n\nInstead of creating a Big Business Plan Up Front you will learn how to incrementally build a business model using lightweight descriptions of business hypotheses that you can test against real customers.\n\n\n\n	Business Value and Working With Stakeholders	Workshop	2012
13876	1000 Words - Illustrating Project Challenges with Visuals	A project can face varied challenges through its life, foreseen and otherwise - runaway scope, high defect volumes, depressed velocity, and many more. Addressing many of these first requires recognition of the problem and then action from one or more sets of project stakeholders. Telling the story with simple visuals can be a very powerful way to articulate a challenge (the what), the potential root causes (the why) and the options available to fix it (the now-what). In this workshop, participants will use role-play to go through such a project scenarios and try to tell their stories to other project stakeholders through visuals.	Business Value and Working With Stakeholders	Workshop	2012
13885	Questions not Stories: Build a business-value oriented team	User Stories are a fantastic agile tool - letting the customer and the team come to a mutual understanding of the business value to be delivered. But they're not the only way to achieve that goal.\n\n\n\nIn this session we explore the use of hypotheses and experiments from the Lean Startup community - and how using them instead of stories brings advantages to the development team, the customer and the user.\n\n\n\nStop telling stories about your product - start asking questions.\n\n	Business Value and Working With Stakeholders	Workshop	2012
13925	Strategies for Agile Portfolio Management	Traditional portfolio management frequently uses principles that are at odds with agile thinking. For example, believing that people should be 100% utilized might lead to us to start many simultaneous projects leading to high levels of team-member multitasking. Managing a portfolio according to these principles all but guarantees a continuous stream of impediments that interfere with team-level agility and sub-optimizes delivered value. In this session I discuss strategies for aligning portfolio management with agile development to ensure a better end-to-end flow of value.	Business Value and Working With Stakeholders	Lecture	2012
13949	Agile in the bathtub	How does a company produce bathtubs in an agile way?  \n\n\n\nAfter significant downsizing, a traditional top-down org started to apply agile/lean to their product development.  \n\nStarting there with Kanban, even Marketing, Operations and Sales started to adopt Agile/Lean principles: all in a non-software context!\n\n\n\nThe talk will show how the Agile/Lean approach has been applied, which have been the main issues and obstacles, which lessons can be learned that can be applied back in the software realm and entertain you big time.\n\n\n\n\n\n\n\n\n\n	Insights - Experience Reports	Lecture	2012
13950	The Stone Soup Approach to Successful and Thriving Transformation Communities	Transforming a diverse, large-scale, global enterprise with hundreds of thousands of team members into one that is more agile is an effort of epic proportion. Enterprise Transformation Communities and communities of practice can catalyze an enterprise transformation with energy, momentum and purpose if they are nurtured in ways that support collaboration and teamwork of individuals across the business. This session provides participants with practical tips and hands-on techniques that they can use to foster greater participation in their communities in order to deliver results.\n\n\n\nThe old folk story of Stone Soup in which a hungry stranger works with a starving community to deliver an abundance of delicious soup provides the framework for this 90-minute collaborative session in which attendees will discover new ways to support successful transformation and practice communities to deliver "RESULTS." Seven key aspects of successful communities are discussed: Recognition, Engagement, Shared Vision, Understanding, Leadership, Time Trading and Style. Participants will leave this session with a playbook of tips and techniques that they can use to strengthen their community to help drive transformation results.	Leadership	Workshop	2012
13957	Agile Transformation - What to do with managers?	One of the major obstacles in big change initiatives is manager resistance. Agile transformations do not make an exception. If you don't get middle managers on your side when introducing a change, your changes of success are thin.\n\nWhat might be the reasons for resisting agile? \n\nWhat can be done to get managers to support and drive new, agile ways of working and become leaders for an agile organization?\n\nHow can my life become better if I am a manager?\n\nThis talk will give you thoughts from a manager who went through this path.\n\n 	Adoption & Transformation	Lecture	2012
13959	How to Change the World	 How do I make my managers more Agile? \n\n How can I convince developers to educate themselves? \n\n How can I make customers more cooperative? \n\n How do I start a European network of Agile and Lean practitioners? \n\n\n\nWhen transforming organizations and other social systems people usually encounter obstacles. And these obstacles very often involve changing other people s behaviors. Of course, we cannot really _make_ people behave in a different way. We also cannot really make people laugh, and we cannot really make people happy. But&  we can certainly try!\n\n\n\nThis session is about *Change Management 3.0*. It is a new change management  super model  which views organizations as complex adaptive systems and social networks. The Change Management 3.0 supermodel wraps various existing models (*PDCA*, *ADKAR*, *Adoption Curve* and *The 5 I's*). It lists a few dozen hard questions that can help people in their attempts to change the behaviors of other people in an organization and beyond. No matter whether you are a manager, Scrum Master, Product Owner, software developer or writer, anyone will find it useful to know how to change the world around them.\n\n\n\nFor example, some of the questions that will be considered are...\n\n\n\n" \tWhat Are the Crucial Steps?\n\n" \tHow Do You Get Feedback?\n\n" \tHow Do You Make It Desirable?\n\n" \tWhat Makes It Sustainable?\n\n" \tWho Will Be the Innovators?\n\n" \tHow Will You Deal With Skeptics?\n\n" \tWhat Is the Group Identity?\n\n" \tCan You Incentivize Good Behavior?\n\n" \tEtc...\n\n	Adoption & Transformation	Workshop	2012
13965	Getting to the Next Level: Practicing Leadership Agility for Effective Agile Management	Sustaining and growing agile capability in large enterprises presents significant challenges for leaders. Underlying these challenges is the challenge of leadership itself.  What does it mean to lead an agile organization?  What manner of leadership does agility call for? In this hands-on workshop, we explore three  levels  of leadership agility, from the award-winning book, *Leadership Agility*.  Going beyond previous conceptions of agile leadership, you will learn the rarely practiced  Catalyst  level of leadership agility, and think through how to apply its principles and practices to the larger challenges posed by today s Agile initiatives.	Leadership	Workshop	2012
13967	Organizational Agility: The Hidden Goal (And Missed Opportunity) of Agile Transformation	Despite over a decade of formal attempts at agile transformation, there are very few real examples of large scale transformation success, and many examples of reversion and failures to scale.  The most common pattern we see is that teams transform while everything else remains the same. This leads to increased organizational incongruence, disarray, and ultimately failure.  What is needed is a notion of organizational agility that does for the broader organization what software agility does for software delivery teams. In this session we help participants make the case for such a notion, describe the paradigm shift which such a notion calls for, and provide participants with initial steps to influencing organizational agility in their workplace.<!--break-->	Adoption & Transformation	Workshop	2012
13972	Modeling and Simulation - Answering the tough executive questions of cost/date forecasts	This presentation shows how to apply Monte-carlo simulation to Scrum and Kanban project models, and then use that model in a variety of ways for experimentation. The results can be used to build a date, staff and cost forecast for projects, and to find what development factors (defects, scope-creep, etc.) are causing the most impact. If you hate estimation, this session demonstrates how by modeling your process and teams to determine what estimates will make the biggest difference in forecast, allowing you to eliminate the rest.\n\n\n\n<!--break-->\n\n\n\nAgile teams and Executive Management of larger enterprises are often at political odds when it comes to needing estimates, delivery forecasts and the impact of outsourcing. Through the use of modeling and simulating Agile projects as described in this session, you have techniques for quickly answering tough management questions without overburdening the development teams. Modeling and simulating potential project outcomes hundreds of times (using estimate ranges rather than single values) achieves a higher degree of outcome certainty leading to accurate forecasts, and well-informed management decisions.\n\n\n\nDuring this session, the process to answer and solve the following questions will be explained -\n\n\n\n 1. Does it make economic sense to outsource development or testing?\n\n 2. What is the dollar cost of poor quality code (defect leakage)? \n\n 3. Do I manage the added-scope problem, or code quality problem first? \n\n 4. How do I get the staff I need?\n\n\n\nBy the end of this session you  will understand the basics of modeling and simulation, understand the types of problems simulation solves, how to communicate likelihood of outcomes with executive leadership, and be positioned to start applying these fundamentals on your own teams and projects.\n\n	Enterprise Agile	Lecture	2012
13979	The UX of User Stories	Agile methods emerged in the highly task-oriented world of enterprise software, where it made a good deal of sense to expect that a customer would be able to tell developers what features the software should contain.  "I need to first be able to do this, and then I need to be able to do that, and after that I want to be able to see a list of the other thing," and so on.  And thus User Stories were formed around that premise.  Within that world, they ve become incredibly powerful and nimble tools for team communication, planning, and more.\n\n\n\nBut software products have moved well beyond those shores.  Today s software is often either too complex or too experience-oriented for customers to know what features to ask for, or worse, they think they know what to ask for, but that is based on a dated understanding of evermore rapidly evolving interface paradigms.\n\n\n\nIn this hybrid lecture/workshop, we ll show how a UX-oriented approach to story development can help teams transform often fuzzy and emotion-oriented customer needs and desires into actual estimable features that a software team can build and deliver.  We ll also show how the old delivery-focused model of story development is highly revealing of the origins of Agile UX dysfunction (e.g. the  feeding the beast  phenomenon), and how a UX-oriented approach can mitigate or eliminate much of that dysfunction.\n\n\n\nTopics covered will include:  \n\n\n\n* What makes user stories powerful and how they can help traditional UX designers understand and learn how to use lean conversation-centered documents.   \n\n* Why and how to have customers/users write problem- or experience-oriented stories instead of the more common solution-oriented  As a& I want to..so that..  story format.  \n\n* Why and how to integrate UI exploration with story mapping to achieve much more reliable story estimates.  \n\n* How to ensure that UI stories (ie those which are necessary for a good user experience, but which a customer is unlikely to know to ask for, such as navigation breadcrumbs) are made part of a sprint backlog.  \n\n* Understanding the meaning of a story being Done vs being Validated, in which the former is about planning and enabling teams to make progress, while the latter is about product wholeness and success.  	User Experience	Workshop	2012
13986	Risky Business - An Outside-In Look at Real Options for Managing Risk	All software projects have risk.  Often the most valuable projects carry the most risk.  Other industries also encounter risk and generate value by understanding and managing that risk effectively. Todd and Olav explore some of the techniques used in a number of risky businesses such as product development, oil and gas exploration, investment banking, medicine, weather forecasting, and gambling. They also present studies of software development uncertainties and highlight how software practitioners can learn from better understanding the uncertainties and dynamics. Through this process they introduce techniques and approaches to risk and risk management including utilizing real options and how this helps manage risk for software practitioners.	Enterprise Agile	Lecture	2012
13999	What's the Point of Story Points - A Business Guide to Agile Estimation	The use of story points originated with Extreme Programming, but have become a common  best practice  for planning on Scrum teams since Mike Cohn s book, _User Stories Applied_, was published.  The use of relative estimation is quite often, a mystery to product owners and management.  We will explore how story points are used, misused, abused and determined on teams.  \n\n\n\nThis interactive session will explore the business value that story points support, and look at ways to achieve that value with or without points.	Business Value and Working With Stakeholders	Lecture	2012
14013	Get Over It!  Stop Obsessing Over CMMI and Get On with Being Great!	Incompatibilities between CMMI and agile have largely been due to misapplication of CMMI stemming from a narrow and misguided understanding of CMMI.  This is exacerbated when CMMI is viewed as a compliance standard for defining heavyweight processes rather than an improvement model to increase performance.\n\n\n\nIsn't it about time the Agile community just moved on and stopped dwelling and obsessing over CMMI and its supposed incompatibilities with agile?  Yeah, I said it, _supposed_.  There is nothing in CMMI that demands incompatibilities with agile practices, values, or the principles behind the manifesto.  Any incompatibilities are due to either how people have inappropriately wielded CMMI, abused agile, or both.\n\n\n\nMost information/presentations about successes and failures of CMMI (with or without agile) have largely done little more than highlight what various organizations managed to do to satisfy appraisals.  However, this compliance-driven perspective leaves out critical information about what CMMI actually works, how the appraisal is actually conducted, and how to use CMMI for actual improvement rather than appraisal compliance.  In fact, most information and presentations on the integration of CMMI and agile have done very little to stem the tidal surge of misinformation and "CMMI malpractice" about how to actually work with CMMI -- both for the benefits of improvement as well as for getting coveted ratings.\n\n\n\nCMMI is a model.  Models are tools.  Before using any tool, users need instructions -- or at least they need to know what the tool is for and whether or not they've got the right problem solved by the tool.  This lively, interactive, micro-tutorial will lay plain what CMMI is and how it works so that implementation of the model is clear thereby laying the groundwork for both the benefits of CMMI as well as achieving desired appraisal results.\n\n\n\nProperly used, CMMI can actually help lean and agile teams learn about themselves, find weaknesses in the way they work, improve their effectiveness and increase their performance.  The session will share what I've done with clients for 10+ years that results in these outcomes -- while also achieving CMMI ratings -- while remaining entirely faithful to agile values and principles.\n\n\n\nThe learning outcomes will prepare teams to pursue CMMI effectively with "level ratings" as a by-product of actual performance increases.	Enterprise Agile	Lecture	2012
14026	Values of the Fittest - Taking Cash and Staking Claims	Are you willing to put everything on the line to squeeze every last dollar from your customers? Will you sacrifice quality to get that killer feature out the door? Will you ride the next trend in social media or focus more on premium features to grab those elite customers? What will your competition do?\n\n\n\nValues of the Fittest is a game that will challenge you and your stakeholders to take decisive actions to build software by maximizing value, minimizing risk, and minimizing cost.\n\n\n\nTime is of the essence. You have limited funds and need to deliver a product quickly to stay afloat. Opponents are capitalizing while your team wages civil war. Can your team find a common direction to deliver a better product in less time?\n\n	Business Value and Working With Stakeholders	Workshop	2012
14027	Release Planning on a Budget -- Taking it Virtual!	There is no substitute for face-to-face collaboration, and in highly distributed organizations the one time you can get all the teams together in person is for Release Planning.  But what about when budgets get tight and travel is not an option?  In this presentation you will learn several practical techniques for bridging the physical divide without breaking your corporate budget.\n\n<!--break-->\n\nYour crash course in Virtual Release Planning facilitation will include the following:\n\n\n\n* Virtual Facilitation Techniques: Practical advice on adapting agile facilitation techniques to the virtual world. (For all of us who tried --and failed-- at doing a fist-of-five over the phone...)\n\n* DIY Video Conferencing: We will do a live demonstration of how to do video conferencing on a budget with readily available consumer hardware. (No need to buy a fancy telepresence system from Cisco or AT&T!)\n\n* Practical Time Zone Planning: Problem/solution scenario planning around different distribution and timezone challenges. (Curious why folks will happily attend 8AM meetings after being on a red-eye, but don't seem thrilled to stay up until 2AM on a video conference?)\n\n\n\nTime to stop overpaying for business class international flights and palatial hotels.  You can take back control of your budget and destiny without sacrificing effective communication!	Distributed Agile	Lecture	2012
14029	Users Are From Mars, Developers Are From Klingon	You know it's true. Trying to understand what your users want is sometimes like talking to the wall. Have you ever delivered what you were sure a group of users asked for, only to have them reject it as not even close? Have you ever asked your development team to build you something you thought was clear only to get something that didn't meet half of your needs. This session will leverage some Agile Games to explore techniques designed to help technologists identify with what their users are asking for, and provide some techniques product teams can use to help close the communication gap between users and developers.\n\n\n\nNote: This session is hands-on and highly interactive. This session is for any skill set or role that is involved in product development. Due to the format of this session, it will be limited to the first 60 participants who register.\n\n\n\n	Collaboration Culture & Teams	Workshop	2012
14034	Utilizing Outsourcing Effectively for Test Automation	A major challenge in agile development is the ability of test teams to keep pace with ongoing development while simultaneously ensuring that new development has not created regression failures.  This case study from Halliburton shows how together with two outsourcing partners they developed a comprehensive test automation strategy for their agile teams that effectively leveraged both in house and outsourced activities.  This approach resulted in a significant quality improvement from prior releases.\n\n\n\n \n\n\n\n	Insights - Experience Reports	Lecture	2012
14065	Agile Antipatterns: The Agilist s Guide to Traps, Tripwires, & Treachery	Knowing the basics of being Agile is essential for any team member, but out in the trenches, a good Agilist must be ready to identify and deal with Agile Antipatterns on the fly to help his team and organization move forward.( (   \n\n\n\nWhat's an Agile Antipattern?ﾠSomething that at first blush may seem Agile and useful, but in practice is usually harmful to an agile initiative. It's important to be able to sniff these out since they can damage your organization, and are often slippery to catch. Once they're caught, what does one do with them? Don't worry, we'll come up with a plan together.  \n\n\n\nThrough this interactive workshop, participants will gather a wealth of Agile Antipattern knowledge that will act as a guide for remedying these troubling but common problems in the field. We ll use data collected from The Agile Antipatterns Project (http://AgileAntipatterns.com), and the real-world Antipatterns participants bring to the table. If you're struggling with a problem in the field, there's a very good chance you'll leave with a game plan to address it.\n\n	Adoption & Transformation	Workshop	2012
14068	Agile's Role in Developing Robust Software Competency at Precor	Established in 1980, Precor sets the standard for quality, innovation, and performance in exercise equipment. Precor has distinguished itself as a worldwide industry leader, providing state-of-the-art fitness equipment to health clubs, hotels, spas, fitness centers, and private homes all over the world.\n\n\n\nPrecor is number one in the fitness equipment industry in both product offerings and service quality [Source: 2009 Health Club Equipment Benchmarking Report].  At the same time Precor is a great place to work, as evidenced by honors as a finalist in the Puget Sound Business Journal's 2010 Washington's Best Workplaces in the Large Business category.\n\n\n\nPrecor began by launching the first ergonomically sound rowing machine in 1980, and have been supporting the natural movement of the human body ever since. In 1990, Precor created the first cushioned treadmill. Precor introduced the world to the Elliptical Fitness Crosstrainer"! (EFXﾮ) in 1995. Then in 2007, Precor released the revolutionary Adaptive Motion Trainerﾮ (AMTﾮ), a breakthrough piece of cardio equipment that constantly and fluidly adapts to your stride length and motion.\n\n\n\nPrecor decided to continue its leadership and innovation by delivering a completely new fitness experience through the use of embedded and networked capabilities.  This represents a significant shift from a product mindset to a platform capability for Precor.  Software became extremely complex and a critical competency for Precor which was a radical and transformative change.  This research paper investigates the trials and tribulations of developing a whole new competency in software in order to deliver our next level of innovation.\n\n	Insights - Experience Reports	Lecture	2012
14154	Fixing Broke(n) Governments Through Serious Games	It s no secret. We re broke. Local, state and federal governments around the world are all facing budget shortfalls, spending cuts and reduced services. All of us   ordinary citizens, elected officials, civic and community leaders   know that we must make dramatic changes to solve these crises, and yet governments remain gridlocked. How do we move beyond this impasse? How do we create an approach to budgeting that is both participatory and scalable? The answer lies in the serious games pioneered by the Agile Community.\n\n\n\nIn this interactive lecture, participants will learn to conduct in-person and online games built specifically for resolving multi-dimensional budget problems. These games are based on games that have been played for years in the Agile Community. In this session, however, we'll demonstrate that by challenging our own definitions of leadership, we can demonstrate that practices common in many Agile teams can have a massive impact. \n\n\n\nWe will detail the Budget Games played in San Jose, CA, on Jan. 29, 2011 and Jan 21, 2011. In both sessions more than 100 community leaders collaboratively re-crafted the city s proposed budget. Because the games, which were graciously facilitated pro-bono by many members of the Agile Community, generated actionable consensus, San Jose officials were able to act on the game s results with more confidence than traditional polling. In the workshop, participants will learn how to run a budget game in their own community and help refine both the in-person and online game prototypes.\n\n\n\nBrief overview of our process and results from January 2011 (the Jan 2012 games have not been completed):\n\n\n\n1. The San Jose Mayor s office created  a list of 18 funding proposals that community leaders could purchase using the basic game structure of the Innovation Gameﾮ _Buy a Feature_. The total cost of these items was $14,000,000. The list of items that we used in this game can be found here: [funding proposals](http://innovationgames.com/wp-content/uploads/2011/02/fundingproposals.pdf).\n\n\n\n2. Community leaders organized into groups of between 7 and 9 players, with 8 players / game as the most common configuration. Each player was given $200,000 to purchase items they wanted. This was a very constrained game, and Community leaders quickly determined that they couldn t buy much.\n\n\n\n3. The Mayor s office created a second list of budget cuts that the Community leaders could select through unanimous agreement to get more money. This list of potential budget cuts we used in this game can be found here: [reduction proposals](http://innovationgames.com/wp-content/uploads/2011/02/reductionproposals.pdf).\n\n\n\n4. The pricing and structure of items on either list cannot be adjusted (this is a standard rule for _Buy a Feature_ games).\n\n\n\n5. One Innovation Gamesﾮ Trained Facilitator and One Innovation Gamesﾮ Trained Observer managed each group to minimize researcher bias and record key aspects of the negotiations.\n\n\n\n6. The game was played for 90 minutes.\n\n\n\n7. There was no requirement that any items were purchased or cut. The community leaders were in complete control of their virtual money.\n\n\n\n8. We prepared a [final report}(http://innovationgames.com/wp-content/uploads/2011/02/BidsOnly-Raw-Game-Data.pdf) that allowed City leaders to take action.\n\n\n\n\n\nAn even more thorough review of the event results can be found [here](http://innovationgames.com/2011/02/san-jose-ca-community-leaders-budget-games-results/).\n\n	Leadership	Lecture	2012
14274	Building a Team Through Feedback	In traditional team cultures, feedback has been the sole responsibility of the manager. In Agile teams it s more important for feedback to be peer-to-peer because the manager doesn t know the minute-by-minute details of what s going on within the team. What if managers were not solely responsible for providing guidance for an individuals growth, but rather the team itself? Building feedback into the culture creates a team with a stronger sense of responsibility for one another. They will self-correct interpersonal issues and work-quality issues better and faster than a traditional team.	Collaboration Culture & Teams	Workshop	2012
14320	Extreme Design   The Secrets to Successful Design Pairing	Whether you're a designer or a developer there's a simple way to get better at both, help others around you improve, and make working together more enjoyable. The power of design pairing can produce better ideas faster and instill greater empathy for both design and programming throughout your company.\n\n\n\nSamuel Bowles will explore how his team has adopted the principles of design pairing in a number of contexts and configurations. His observations are based on the contrast between his work in traditional design firms and as a member of various Agile development teams. He will explore the various types of design pairing and especially the power of cross-functional pairing.	User Experience	Lecture	2012
14331	Behavior Driven Design for Bad*sses	We all know the basic concepts of Test Driven Development: \n\n\n\n  * Write the test before you write the code\n\n  * Red, Green, Refactor\n\n  * Take small steps\n\n  * Make it work then make it clean, etc.\n\n\n\nBut what about the more subtle nuances of test driven design? What about  London with mocks and stubs vs traditional Uncle Bobian TDD? How do you decide to drive from the outside vs the inside? What about custom matchers to make tests more expressive? Nested contexts for different sets of examples? Where is the line between BDD and TDD and when should we cross it?\n\n\n\nIn this live coding session, half the session will be test driving a simple problem using outside-in London style TDD, the other half will start over using inside-out traditional TDD. The focus will be on following the four rules of simple design:\n\n  * Software works as intended and you can prove it\n\n  * Minimize duplication \n\n  * Reveals the intent of the programmer\n\n  * Small\n\n\n\nNote: This will either be in ruby or javascript; but the principles apply across languages. At the end I'll share libraries for Java/C# that enable these techniques.\n\nDouble note: This isn't cucumber. This isn't story/acceptance testing. This is Unit level BDD.	Development Practices & Craftsmanship	Lecture	2012
14371	Exploring UX techniques and practices - When should they be applied? Get some practice!	The need to incorporate UX into Agile is quickly becoming a no-brainer. But how do experts do it? Let's find out so that you can do it too!  \n\nIn this highly collaborative workshop, I will start by using human-centered design methods to elicit lean UX practices and techniques from the participants, and then categorize them by product development stage. The result is a poster with a clear picture of what UX practices and techniques are appropriate and useful at what stages of a product life cycle.  \n\nAfter a quick review of new/unfamiliar techniques, we'll put theory to practice and have a focused collaborative design session allowing teams to pick their technique of choice for each stage.\n\n\n\nCome to this session to: \n\n<ul>\n\n<li>find out the newest lean UX techniques </li>\n\n<li>put UX techniques to practice with a team </li>\n\n<li>enlighten us with your new favorite UX technique(s)</li>\n\n</ul>	User Experience	Workshop	2012
14379	Systems Thinking through Play	Ever wonder why people behave the way they do, and it doesn't make any sense? Systems Thinking helps explain the unusual behaviour that arises in organisations, teams and individuals. Learning to see what might be driving people's behaviour helps you improve your team and organisation's ability to collaborate more effectively. \n\n\n\nFear not as this won't be lecture. It's hard to fully develop an appreciation of Systems Thinking (and often harder to explain it), so why not experience for yourself through a series of engaging activities. Each activity will explore a key concept of Systems Thinking and leave this workshop looking at the world from a different perspective.	Collaboration Culture & Teams	Workshop	2012
14474	Lessons Learned Integrating UX into Agile Teams	As Agile has evolved, it has become a challenge to get dependent teams working together in a synchronous fashion. One type of team that has always presented a challenge to me, as a development manager, has been the UX team. This talk explores my various attempts at integrating UX into Agile Teams. It tells of the sordid history, of what worked, and what truly did not. I will also work with the audience and gather their ideas, patterns, and potential solutions. After the conference, I will gather the results and publish them.	User Experience	Workshop	2012
14507	Embracing HTML and CSS as Beautiful Code	It's time we treated HTML and CSS as more than an annoying implementation detail. Developers who carefully craft their code need to stop treating HTML and CSS as annoying implementation details. We need to up our game, bringing craftsmanship to the presentation layer.\n\n\n\nDoes CSS drive you nuts? Do you struggle through getting your site looking okay on one browser, only to find out that it looks like a trainwreck on others? Do suffer recurring nightmares about Internet Explorer? Do you fight with your designers because they keep sending you things that look pretty, but just don't seem to work in real life? Is your HTML and CSS a pile of ugly, hacky, brittle code that mars your otherwise beautiful codebase?\n\n\n\nHTML and CSS can be beautiful, and - dare I say it - fun. The trick is to think like they do, so you can outsmart them. I'm a dev at heart, but I've learned some great secrets along that way that have helped me develop - and more importantly, maintain - some high profile, beautiful websites. I'll share 8 important tips for coming to terms with, outsmarting, and kindling a romance with HTML.	Development Practices & Craftsmanship	Lecture	2012
14594	Big Data, Little Tests	This session is an easy introduction to writing small automated tests for very Big Data systems. \n\n\n\nIf you're considering Hadoop, Cassandra, or Riak but don't know how you would begin with good developer testing practices, then this talk is for you.\n\n\n\nI'll be showing live test execution and debugging for some very Big systems:\n\n\n\n1. The ant/maven config to enable testing\n\n1. How to connect to a local or in-memory testing harness\n\n1. Demonstrate execution and debugging in an IDE\n\n\n\nThe code and configuration will be published on GitHub for all to repeat what's shown.\n\n\n\nThe session agenda is:\n\n\n\n1. Brief presentation introducing Big Data technologies.\n\n1. An hour of code/test live demonstrations.\n\n1. Discuss the hard questions: large test datasets and test execution performance.\n\n1. Wrap up with Q&A.\n\n	Testing & Quality Assurance	Workshop	2012
14621	Agile FDA Mini- Plays, Mosh Pit Style	In the FDA-regulated world, resistance to using Agile methods is still strong. We ve turned several of the typical objections from quality and regulatory managers in the FDA-regulated industry into role-play sessions, both to explain the reason for the objection and to describe how well-managed Agile teams can answer it. \n\nBy modeling the conversations you may need to have, we help you understand not just the FDA rules, but the thinking behind those rules. Our role play won t be a  closed shop    you can jump in too, and get your questions addressed!	Adoption & Transformation	Lecture	2012
14630	Better Code, Littler Classes: Refactoring to Separate Concerns	You know the basics of refactoring: you rename variables for maximum clarity, extract methods to make them nice and compact, and sometimes even extract shared code into a superclass. But how do you go beyond the basics, to get simpler classes and more modular code? In this hands-on training session, we ll demonstrate techniques for dividing large, complex classes into small, cohesive units. You ll learn several key class-level refactorings, when to apply them, and how to find a class for every responsibility. This is a hands-on tutorial, so bring your laptop and be prepared to write some code!	Development Practices & Craftsmanship	Workshop	2012
14679	A Change Model for Agile Transformations	When an organization makes a real effort to be Agile, they set in motion a series of changes that ripple throughout the entire organization. The side-effects are often surprising, and dealing with them can be challenging.\n\n\n\nAt the Agile Alliance's "Supporting Agile Adoption" workshop in December 2011, Jutta Eckstein, Diana Larsen, and James Shore tackled this problem with a new change model targeted at Agile transformations. The model gives change leaders a tool for understanding the context of their transformation, for choosing which changes to focus on, and deciding whether to take a deterministic or adaptive approach to each one.\n\n\n\nThe change model is new and experimental. In this workshop, Diana, James, and Jutta will present the model, invite you to apply it to your situation, and use your feedback to further improve the model.	Adoption & Transformation	Workshop	2012
14718	LEtGO your Organization - design a best-fit large Agile Organization	In large geographically distributed organizations where the size of the product exceeds what a single Scrum team can build, we scratch our heads trying to figure out the best way to organize teams and work. Over the past year, we have been working with large projects (over 100 people), distributed in several countries and helping them develop organizational models that they can use to visualize how teams and work could be best organized to maximize agility.\n\n\n\nIn this workshop, we will guide the participants through the process of assessing and developing organizational models that represent a fractal that can be replicated to scale as needed. The models provide business stakeholders with a tool to assess the pros and cons of different organizational models visually and rapidly. Whether you are responsible for building a large scale global Agile organization, or are a team member with ideas on how to organize teams and work, this workshop will provide you with tools to develop organizational "preto-types" you can use for communication and troubleshooting large-scale Agile organizational design.\n\n\n\n\n\n	Adoption & Transformation	Workshop	2012
14737	Evolve Your Agile Coaching Dashboard	As Agile Coaches, we know the importance of helping teams make their work visible and transparent. This concept extends to our own practice as well. Over the course of a year coaching more than a dozen Scrum teams, I created several iterations of a coaching dashboard - all of them big visible charts on the wall - to help me be systematic and in tune with the changes taking place in the organization.\n\n\n\nThe first dashboard could be characterized as "Using Scrum to coach Scrum teams." The dashboard looked like a typical card wall with the teams as backlog items and columns for tracking my tasks to support them. The dashboard was tactical in nature and focused on the coaching tasks. I found I was repeating many of the same tasks, like "coach X team to do Y," and rewriting the same sticky notes got old. I made some minor tweaks to the dashboard, but it remained useful only to me since I was the wall's sole user.\n\n\n\nThe next major iteration really got people's attention. I made the wall look like a project dashboard. It had 10 yes or no criteria based on Jeff Sutherland's ideas about hyper-productive Scrum teams, and I posted the answers as green or red sticky notes. Having these simple criteria on the wall really challenged the Scrum Masters (most of them former project managers) who hated seeing something "red" beside their team. This dashboard ultimately attracted frequent visits from the CIO, who was used to high-tech solutions for metrics reporting, and said "This is the simplest, most intuitive bit of reporting that I have in my organization."\n\n\n\nThe next two iterations of the coaching dashboard were driven by successfully launching a Scrum Adoption Team chartered to support widespread adoption of Scrum. We became a team of coaches, and we used a Kanban(ish) dashboard to systematize our workflow. We used the wall to stay focused on delivering value, and when we saw our work piling up, we would look for the root cause. That insight drove our final coaching dashboard. We needed to know where to strategically invest to improve the agility of the organization. At regular intervals we would survey each team along six dimensions - Scrum process, teamwork, knowledge creation, requirements, planning, and technical practices. [See spider diagram dashboard] We knew intuitively that technical practices were a key opportunity for growth, but having a tool to visualize this data has finally led senior managers to begin investing in them.\n\n\n\nParticipants in this workshop will come away with ideas for creating and evolving their own Agile coaching dashboards.	Coaching & Mentoring	Workshop	2012
14749	Clean Code	Get ready for a challenge as Robert Martin dives deep into the topic of clean Java code by examining what makes a good function.  In this talk you will look at a lot of code; some good and some bad.  You will experience how such code is analyzed, critiqued, and eventually refactored.  You will understand the decisions made by an expert in the field as bad code is gradually transformed into good code.  How big should a function be?  How should it be named?  How should it be documented.  How many indent levels should it have?  How should it deal with exceptions, arguments, and return values.  This talk is all about code at the lowest level.  And yet the principles and techniques presented have far reaching implications. 	Development Practices & Craftsmanship	Lecture	2012
14751	Demanding Technical Excellence and Professionalism	The vast majority of software developers have yet to learn the practices and disciplines that constitute professional behavior. That's because those practices have only just recently been defined. The software industry is barely fifty years old.  It has taken nearly that long to figure out what software professionalism is.  It is only in the last few years that a set of generally accepted software practices have been defined.  But now they are here, and it's time for management to demand that professional behavior.  In this talk, Robert C. Martin will describe these disciplines, and practices, and will discuss how to raise the professionalism bar in your projects and teams.	Leadership	Lecture	2012
14752	Scaling Lean|Agile Development to the Large Enterprise with the Scaled Agile Framework	The continuing knock on XP, Scrum and Kanban is that they may work well for small, collocated teams, but they do not scale to the needs of the larger software enterprise. In this presentation, Dean Leffingwell will finally dispel this myth by describing the Scaled Agile Framework"!, a well-defined and publicly available set of practices which have been used to successfully scale Lean|Agile development to hundreds and even thousands of practitioners at companies like BMC Corporation, John Deere and many others. Results typically include quality and productivity improvements of from 20-50%, along with increases in employee engagement and job satisfaction.\n\n\n\nIn this presentation, Leffingwell will describe how the three key Agile constructs   team, backlog and timebox  can be scaled to the program and portfolio levels of the enterprise. However, since simply making Agile things bigger does not necessarily keep a system lean, Leffingwell will describe how the framework a) keeps work in process visible and limited, b) keeps backlogs and queues short, c) uses cadence and synchronization to align teams to a common mission, and d) applies system-level continuous integration to facilitate fast customer feedback. \n\n\n\nThe presentation also includes a description of kanban systems to manage the flow of the business and architectural epics that drive the agile programs. \n\n\n\nThe presentation concludes with a discussion of how lean thinking executives are instrumental in helping the enterprise achieve the ultimate business benefits that these innovate processes can deliver. \n\n	Enterprise Agile	Lecture	2012
14792	Simple Design Applied: Spend More Time Creating Valuable Code	Experience and research shows that developers spend as much as 70% of their time reading and understanding code. In this workshop you will learn how the rules of Simple Design help to reduce this percentage so you spend more time creating valuable code.\n\n\n\nThis will be a highly collaborative workshop where you share your insights and learn from others. You ll get to the heart of Simple Design by reviewing code - both beautiful and ugly. You ll get to practice by improving the readability and understandability of real code.\n\n\n\nYou ll leave this workshop ready to apply Simple Design to improve your own code.	Development Practices & Craftsmanship	Workshop	2012
14794	An Agile Accounting Model to Accelerate Enterprise Agility	Before Agile can scale as the primary mode of developing software, an Agile accounting standard needs to be developed to enable CFO s to understand and leverage one of the most quantifiable and compelling benefits of Agile software development.    In this hands-on tutorial, we will walkthrough the problem, map current  accounting standards to an Agile project accounting model and walk through a practical and defensible solution that participants can customize and implement.	Enterprise Agile	Workshop	2012
14828	Acceptance Tests:  Writing with the Future in Mind	Acceptance Test Driven Development is a very popular topic these days.  Everybody s excited about the idea of writing tests prior to development.  And yet many teams run into difficulties as they attempt to implement this practice.  It is all too easy to fall into the trap of writing acceptance tests that specify every keystroke and button click.  Acceptance tests that are tightly coupled to the system under tests are the norm.  Most software changes over time and our tests need to be able to adapt to that change. Join Cheezy as he shares the experience and insight he has gained while working with numerous teams implementing ATDD.  Cheezy will take us on a journey of discovery where he demonstrates techniques to write Acceptance Tests that describe the essence of what they are specifying while hiding unnecessary details that obfuscate their meaning.  Cheezy will also demonstrate how to structure and layer your test code to reduce brittleness and fragility so they will retain their usefulness well into the future.\n\n	Testing & Quality Assurance	Lecture	2012
14829	Quality Assurance - A Team Sport	Who is responsible for QA on an Agile team?  The answer is  Everybody .  And yet this is rarely the case.  Often the Testers write their test cases and automation in isolation and execute them after development is finished.  Developers write their code without talking to the testers except to understand how to reproduce the latest discovered defect.  Product Owners elaborate requirements in isolation and then hand them off to the team only to check back at the end of the sprint.  Business Analysts spend their time in meetings away from the team working on documents that have questionable usefulness.  Join Cheezy as he paints a different picture.  This picture includes techniques and practices that foster collaboration between all team members that have the side effects of dramatically improving quality and achieving better flow resulting in a more streamlined development effort.  This new picture is a picture of teamwork and quality assurance.\n\n	Collaboration Culture & Teams	Lecture	2012
14864	Turning and turning in the widening gyre	Things fall apart; the centre cannot hold. Test-first and outcome-oriented disciplines such as PDCA or BDD's scenarios are fantastic when someone else knows what they want and you know how to achieve it. But what do you do in high-learning and exploratory environments? What patterns still work when the team have given up on process altogether? What if some functionality is completely new, the rest is covered by third parties, you don't know what the libraries will do for you, and your business stakeholders are still learning too? In this workshop we explore what it means to be in chaotic, complex and complicated environments, and we look at patterns of delivery that can still work effectively when you know you're delivering the wrong thing, but you don't know what the right thing is.	Coaching & Mentoring	Workshop	2012
14868	The Silence of Agile	We've all sat through painful requirements, planning, and brainstorming sessions that provide little useful output and where the outcome was already decided by the loudest few before the meeting even started. Learn how silence can increase collaboration and help your agile project be more productive. Silent brainstorming allows everyone to have a voice   the loud people can t dominate the conversation, the quiet people are provided with a way to contribute, and cognitive fixation is reduced. We ll discuss the science of brainstorming and then practice several silent brainstorming techniques in order to generate a user story map, do agile chartering, brainstorm a list of user stories, prioritize your user stories, and generate ideas for your retrospective.\n\n	Collaboration Culture & Teams	Workshop	2012
14875	Agile and PMI: Barbarians at the Gate	How to react as stones fall on our Agile heads from lofty towers?  Transcendence of Agile limitations in the quest for Enterprise Agility calls for a planned siege, not a mob.  Make a blueprint in this session!  Become masters of siege engines delivering customer value, not Barbarians at the Gate.\n\n\n\nThe PMO and keepers of the corporate yearly planning cycle still cling to traditions of waste.  The true need to optimize the whole is fog bound by mystic thinking.  In revered enterprise Keeps, day is night.  It is possible to know all the requirements at the start.  Omniscient customers knowing what they want a year from now.  Interim feedback is a waste of time and generates scope creep.  Interim milestones measure progress.  Demanding that work be done delivers desired results.   Complex program management software can squeeze 150% out of a DBA this month!\n\n\n\nKeepers of the enterprise ken know Agile is wrong.  The status quo is correct.  Affronts are hurled down on Agile teams.  Self-organizing teams can never improve processes beyond the team.  It is not feasible to deliver value to the customer every sprint.  Agile teams can not plan beyond the current sprint.  Scrum of Scrums is a failed theory to coordinate multiple teams.  It just can t scale.  Agile sees no need for automated testing or up front unit testing.  We need documentation!\n\n\n\n\n\n\n\n	Adoption & Transformation	Lecture	2012
14889	Deliberate Practice - becoming a better programmer	Have you ever wondered how to improve your programming skills and learn new techniques? Work doesn t always provide a great environment for stretching your abilities to do better work. \n\n\n\nLearn some ways to practice, and the difference between programming and deliberately practicing programming. Hear stories of applying deliberate practice to teams, and how little time you need to gain benefits from deliberate practice. Learn how developers at all skill levels can greatly benefit from practice. Experience deliberate practice hands-on in the session. Leave the session with all the tools needed to start your journey.	Development Practices & Craftsmanship	Workshop	2012
14906	How to play basketball with a soccer team? Making IC development more agile.	How different is software and IC development? Let's answer with a relative estimation: It's as different as soccer and basketball. Besides both being team sports and the goal to score more points than the other team, everything else if different. If software and IC development are that different, why should Agile work in an IC development environment? Wait! Let's have a closer look. There are more commonalities as you can see on the first glance. IC development also requires satisfying customer requirements as early as possible, deals with changing requirements, needs to have frequent product releases and requires technical excellence and good design. And these are certainly areas where agile principles have been proven to be successful. \n\n\n\nAs an IC development organization for an embedded microcontroller we experienced over the last projects that the "game" changed. While projects got more complex and development cycle times longer, customers required products earlier than before and new requirements came up more frequently. It was time to change the way we play!\n\n\n\nThis talk demonstrates how we changed our existing IC development flow to an Agile IC development process. It shows which agile practices we ve chosen and how we applied them to our development process. It shows the challenges we faced in the transition and the success stories we experienced. It also gives an outlook how the process can be even more agile. \n\n\n\nThe session isn t tailored to hardware developers only. I envision a lively discussion among participants from different domains on how the development process can be further refined, enhanced, applied to other organizations and maybe it can also trigger some additional thoughts for existing agile practitioners.\n\n	Emerging Applications of Agile	Lecture	2012
14908	5 Free Leadership Tools that Improve Agile Results	Free? Free? What do you mean, free? What can you, as a leader, do in your organization to improve company performance without spending any money? From experience working with leaders inside organizations such as IBM, Headwaters, and Headstart as well as research into what drives organizational performance, we have uncovered five things leaders can do that will not cost them a penny and, when implemented effectively, will make a positive impact on their top and bottom lines. What are these  magic  activities? Let's take a look.\n\n\n\nStart with creating a culture of trust. While we can't make people trust each other, leaders can create an environment that fosters trust building. Next, Agile is based on team ownership. However, many leaders struggle with how to help teams take ownership and often make the mistake by taking ownership back from teams.Leaders cannot change or "fix" people. People do what they are passionate about. Leaders who match passion and skills to roles on teams can see improved productivity. Finally, integrity is essential. These tools are all free.   	Leadership	Workshop	2012
14909	Down the Pub: How did that transition you were working on go?	Imagine a reunion in the pub between you, an agile coach, and some Ericsson managers. You met some years before and the seed of an idea was planted. Over a long evening you discussed what the world would look like after completing a large-scale agile transformation. Three years later, you catch up, and learn that the transformation has been a roaring success. Through the evening you share the ups and downs, the lessons learned, and the critical success factors that made the success.\n\n\n\nThree years ago Ericsson started on a long journey to agility - over 1000 people adopting an agile mindset after over 30 years of entrenched control gate processes. Back then, there was fear and uncertainty, a will to control and preserve what made the organization successful. Today there is a completely different culture. A culture that allows the organization to sustain and keep on evolving, that allows them to achieve significant results long after you, as the coach, left. Obviously, you want to learn what worked so well? Was it your coaching ability (of course!)? Was it the uniqueness of the organization (well, they are special, but unique? No!)? What made this such a persistent and sustainably successful transformation?\n\n\n\nThis is an exciting tale. In just three short years, Ericsson has made monumental changes, including:\n\n - Significantly improved predictability, in particular in relation to customers and the business department. The product pipeline is solid and reliable, and managed through business value, not release content.\n\n - Significantly improved quality, allowing Ericsson to exceed expectations even of the most demanding customers, releasing newly developed functionality ahead of schedule and skipping previously critical integration and verification gates in the process.\n\n\n\nThough many organizations achieve this while being coached, Ericsson has built up an internal capability able to continually learn and improve. Reflecting on what went well, we have identified five keys to sustainable change. The first two, People and Practices, are well-understood. The last three, Perseverance, Protection and Patience, are more cultural characteristics. You will learn how these were introduced and encouraged, and how Ericsson was able to bring about widespread adoption of such deep skills in a very short time.\n\n\n\nIf you are interested in knowing how an organization with a couple of thousand employees was able to learn how to continuously improve, and make that transformation to agility a successful long lasting journey, you can't miss this fly-on-the-wall view of the pub reunion. Join us, Andrea Tomasini, the executive agile coach, and Hendrik Esser, VP Portfolio Management, share their story in a relaxed atmosphere. 	Adoption & Transformation	Lecture	2012
14944	Meet Scrum s Big Brother, Dynamic Governance. Effectively Delivering Large Programs	Scrum works great with small, focused teams on small projects. What happens when you need to deliver a medium to large sized program that require more people? Scrum gives no guidance on scaling. There are books and ideas out there ( Scrum of Scrums , Integration Scrum teams) but none have delivered reliable results. These techniques often reduce the sense of collaboration and agility as the programs get larger. Decisions feel more autocratic, teams have a lower sense of control and happiness. Dynamic Governance (see http://www.governancealive.com/dynamic-governance/) may provide the answer. Called by some  Scrum s big brother , Dynamic Governance is an organizational method  that uniquely combines  best business practices with the principles of cybernetics and systems thinking to deliver a decision-making mechanism that works at scale. Developed in The Netherlands, it has been used successfully in organizations for over 40 years. This workshop will demonstrate how Scrum is a Dynamic Governance system for 1 team. It suggests some improvements, particularly for retrospective meetings. However, the workshop will focus primarily on applying Agile philosophy and the 3 principles of Dynamic Governance to design organizations at different levels of scale, including top management and organizational units that are not directly involved in the production of software. Decisions are made quickly, are biased toward action, and stick.	Enterprise Agile	Workshop	2012
14962	Embracing Nihilism as a Software Development Philosophy	How do we get developers to let go of their ego and do what s best for the customer? How do we encourage an environment where developers do not hold code sacrilegious and feel free to refactor or delete code? This session will go over strategies for teams to embrace YAGNI and celebrate the purging of dead code.\n\n\n\nFor the majority of the presentation I will talk about how a team I was on came to produce a 500+ page  Big Book Of Dead Code  off of a legacy application. Producing this book reduced build times, reduced bugs, and became rallying point for developers. It s very existence helped encourage simple design and clean code. It also spawned a competition amongst developers to see who could add more to the book. I will also talk about how this powerful visualization helped to change the way the business itself thought about code, planning, and quality.  \n\n\n\nI would expect this presentation to be of benefit to almost everyone involved in software development but especially for anyone struggling with trying to introduce agile and TDD to a legacy application.\n\n\n\nI have presented at various Iowa technology related user groups and IT departments. I have also been involved with the Hyperstream project from the Technology Association of Iowa. This is a project where local technologists work with high school and middle school students on projects that benefit the school and the community. The goal of the project is to encourage young people to purse careers in technology. This goes beyond just programming and includes art and design, marketing, business, and science.  I work directly with students as a mentor on a weekly basis and I help the students present their projects to school boards and the community.  My style is pretty loose and I try to keep the group engaged by not overloading on too much raw data at once. If you are looking for Agile Alliance reviewers who have worked with me and can give you a feel for my style please talk to Tim Ottinger or Brandon Carlson.\n\n\n\nThis is a new presentation but some of the content can be found in these two blog posts:\n\n\n\n   http://ryber.tumblr.com/post/4745553646/the-big-book-of-dead-code\n\n\n\n   http://ryber.tumblr.com/post/11716935907/night-of-the-undead-code	Insights - Experience Reports	Lecture	2012
15000	Building a Team from Values to Principles: A Step by Step Approach	Building a high efficiency team can often be elusive and challenging. \n\n\n\nWith all of the focus on jumping into an Agile framework or process, we often forget that these frameworks are built on a set of Values and Principles. By not establishing a shared understanding with the team, our overly processed focus may leave our team in a state of "norming" without reaching a truly "performing" state. \n\n\n\nThis session offers a unique guide for team growth through building values, evaluating agile principles and acknowledging benefits with an iterative, interactive and visual team building activity.\n\n\n\n\n\n\n\n\n\n\n\n 	Coaching & Mentoring	Workshop	2012
15003	Take your team to the next level: from Adoption to Transition	Some teams seem to benefit more than others from the agile practices they introduce. Why is this? Most of the agile practices are well described, some of them even have whole books dedicated to how they work and how they can be customized to your specific organization and context. Yet, for many teams, applying these practices seems a significant challenge that sometimes even leads to less than good results and moving away from the introduced practices altogether.\n\nThe foundation of many of the agile practices is collaboration, not just working next to one another, but true collaboration around a common goal.\n\nGreat collaboration comes from a healthy team dynamic, and without this, a lot of the value of agile practices goes to waste or might even result in counterproductive situations.\n\nThis session will show you how a healthy team dynamic creates a solid foundation for any agile implementation and how coaching can help to set your team up for success!	Adoption & Transformation	Lecture	2012
15024	Easily Mocking Dependencies in C++	There s an often-repeated myth that C++ is not well-suited to doing TDD.  This is completely untrue.  With a single, simple technique, based on C++ templates, **any** dependency in C++ can be mocked up with very little effort, a technique I call **"Test Base Class Injection"**.  It works on automatic variables, parameters, return types, and  C  APIs.  The same technique can be applied to legacy code, and even in kernel-mode or straight C.\n\n	Development Practices & Craftsmanship	Lecture	2012
15034	Scaling Agile with Multiple Teams: Using Lean to Drive Business Value	This program will share Lean-Agile principles that guide both what to build and how to coordinate the teams that need to build it. We will cover how to apply these principles when there are several teams involved in creating software using either Scrum or Kanban development approaches.\n\n\n\nA common intent of all Agile methods is threefold:\n\n1. Build the most valuable features\n\n2. Build them efficiently\n\n3. Minimize creating extra work\n\n\n\nThe challenge to accomplishing this is not that great for one team working independently. However, when several teams have to coordinate, the challenges greatly magnify. When implementing software over several teams, we have found it to be valuable to manage the workflow from the perspective of what will provide value to the business   not quite the same thing as customer value. This can be used to guide how to slice work up into smaller chunks, enabling at least quick feedback, if not quick delivery, to ensure the right products are being built. A lot of thrashing can take place when teams work with poor coordination   greatly lowering efficiency. In large scale development, it is clear that working on the right functions, and coordinating their construction across teams is essential.\n\n\n\nHaving teams coordinate amongst themselves has been the popular method. Unfortunately, this approach, typified by Scrum-of-Scrums, has a dismal track record. Having discovered the correct principles underneath large scale development, we now believe we understand why coordinating teams as a set of peer development organizations, can rarely be an optimal approach. Teams need to be guided by the value they are building, while self-organizing to improve the embedded feedback loops of development. The self-organization techniques required vary, depending upon several factors. These principles, not surprisingly, are directly related to the 3 intents mentioned above. This seminar will present both the principles underneath large scale feature implementation, as well as a few case studies demonstrating different implementations of these principles.	Enterprise Agile	Lecture	2012
15039	De-Mystifying Kanban: Understanding Its Many Faces	There is a lot of confusion about what Kanban is.  Some of this is due to the fact that many people who have never used Kanban have been deriding it   saying it is a mechanistic team management method that doesn t respect people. The fact that Kanban is quickly growing and gaining a reputation for success where other Agile methods have had challenges belies that categorization.\n\n\n\nBut what is Kanban?  Even when listening to Kanban thought leaders one will hear different answers.  1) it s a power agile management system based on lean-flow. 2) it s a transition management method to assist teams to achieve continuous learning.   3) It s a way to create visibility for executives to improve their product portfolio management.  I can almost here Gilda Radner and Dan Aykroyd on Saturday Night Live describing New Shimmer!\n\n\n\nThis talk discusses how Kanban actually is a multi-faceted method that assists process, transition and collaboration.  Kanban is not a mere tool, or even a set of practices. It s a mindset that attends to people, their culture, and the systems they find themselves working in.  The talk presents a few of the basics of Lean-Flow and theory of constraints that it is based on as well as some of the psychological aspects of people adopting new methods. \n\n\n\nWhile this talk is intended for those considering adopting Kanban, those currently using Scrum will find it helpful as many of the principles and practices of Kanban fit well into the Scrum framework.\n\n	Adoption & Transformation	Lecture	2012
15042	Continuous Feedback: Practicing Innovation Skills	The development of the first machine-powered aircraft and the first human-powered aircraft had a lot in common. Both development teams created an experimental environment in which flights took place daily, modifications were made after every flight, crashes were expected and easy to recover from, and finally, problems were tackled methodically, one at a time until a solution emerged. There is a lot we can learn about development by studying these breakthrough inventions, but perhaps the most critical lesson is the importance of fast feedback loops in a development organization. This talk is about using feedback control to radically improve the process of developing of software-intensive systems. It covers:\n\n\n\n1.\tContinuous Delivery: A surge in organizations engaged in continuous delivery (weekly, daily, or more frequently) has changed the development game from iterations to flow, and from intermediary product  owners  to sending system-level feedback directly to the technical team.\n\n\n\n2.\tContinuous Design: Continuous delivery requires the ability to continuously take the feedback into account and adjust the software content accordingly. Instead of designing features based on speculation, system development decisions are based on real data   for example, A/B testing, Cohort analysis, etc. \n\n\n\n3.\tContinuous Demand Management: One of the biggest problems development managers face is demand management   and resolving this problem is fundamentally about the ability to match demand to capability. A rapid full-system feedback control loop is increasingly practical, and is a very effective way to manage demand. \n\n\n\n4.\tContinuous Progress: Recent research has shown that the most potent motivator, the one that gets people deeply engaged in their work is not incentives, not goals, not even teams.  The most effective motivator of knowledge workers is: making progress in meaningful work. Continuous delivery and design put members of the technical team in direct contact with the end result of their work   making the work more meaningful and progress highly visible.\n\n\n\n5.\tContinuous Experimentation: Research also shows that the most successful organizations are those that take a disciplined, empirical approach to improving business processes   questioning conventional wisdom and experimenting to find out what works. This includes questioning the conventional wisdom behind approaches to developing software-intensive systems   including agile and lean approaches. \n\n	User Experience	Workshop	2012
15097	Three Pair Programming Games	Pair programming is one of the fundamental technical practices of Agile, but even experienced developers can find it hard to master. In this hands-on session, we ll demonstrate three games you can use to structure and improve your pairing sessions. You ll learn ways to develop your pairing skills, to make pairing sessions more engaging and effective, and to apply pairing in difficult situations such as reading legacy code.\n\n\n\nCome prepared to do some programming! If you can, please bring a laptop with a working development environment. The choice of language is up to you.	Development Practices & Craftsmanship	Workshop	2012
15106	Affordance-Driven Process Improvement:  Designing a Process that Works for Your Team	The best processes are those that encourage teams to naturally do the right things at the right times. Amazing processes like this don t happen by accident; they are specifically designed to encourage desirable behavior while discouraging harmful behaviour. By carefully choosing the process s affordances -- practices or artifacts that direct our thinking toward a specific goal -- a team can tailor a process that makes success intuitive. The session will begin by presenting the core concepts behind affordence-driven process improvement before diving into a collaborative workshop. \n\n\n\nDuring the workshop teams (tables) will use information from the introduction to brainstorm values (as quality attribute stories) and affordances that will help them promote those values. By the the end of this workshop attendees will have produced posters which serve as **actionable examples they can take home to their teams -- and artifacts for continuing the conversation in the hallways.** \n\n\n\nIn this workshop, teams will address the following questions: \n\n\n\n* What properties does my team value in a process?\n\n\n\n* What techniques/methods/processes promote or inhibit specific properties? \n\n\n\n* What is a process affordance and how can I choose the right ones for my team to drive process improvement?\n\n\n\n* How do I pick the right process for my team?\n\n\n\n\n\n**Intended Audience**\n\n\n\n* People new to agile who don t know where to start\n\n\n\n* High-level executives and managers who want to take an active role in shaping their team s future\n\n\n\n* Process improvement professionals who want to explore a new way to look at teams and organizations\n\n\n\n* All design, Process  and team fanatics\n\n\n\n\n\n**Presentation History / References to Speaking Ability**\n\n\n\n**Michael Keeling** hosted popular and highly reviewed sessions on the Insights stage at XP2010 and Agile2011. He frequently shares his ideas in front of an audience, and facilities workshops for small teams at work and in the local agile and tech communities.  You can find a complete summary of his public speaking engagements online at http://neverletdown.net/topics/talks/.\n\n\n\n**Ariadna Font** regularly leads and facilitates collaborative design sessions and retrospectives for an engineering team of over 30 people. Moreover, she organizes and facilitates well-attended and well-recieved collaborative design sessions and large team retrospectives in the Agile community (http://www.meetup.com/PittsburghAgile/events/37027802/ http://agile-barcelona.org/2011/12/building-applications-for-the-users-a... \n\nhttp://www.meetup.com/PittsburghAgile/events/46350422/).\n\n\n\nFor additional background on the concepts covered in this workshop and prior talks on this subject see:\n\n\n\n* http://neverletdown.net/2010/03/identifying-process-affordances-nudging-toward-change/ -- summary of a talk,  Process Affordances: Nudging Toward Change , which presents the idea of affordance-driven process improvements.  Links to a more formal paper and slides from that presentation are included.\n\n\n\n* http://neverletdown.net/2009/03/process-affordances-ignore-at-your-own-peril/ -- initial idea with a story of how paying attention to process affordances helped one team.  Alistair Cockburn commented on the page that this is a "lovely idea...a new way of looking at processes."	Collaboration Culture & Teams	Workshop	2012
15135	Let's Stay Agile! Applying the Framework for Agile Sustainability in our Teams	How do we sustain the use of agile methodologies both in our project teams and in our organisations? How do we know we have improved our project performance by using agile methods? How can we assimilate agile methods more deeply into our organisations? These questions are the focus of this workshop on agile sustainability. \n\n\n\nMuch of our time is spent understanding how to implement agile methodologies but less is spent on understanding how we can sustain these methodologies and the ramifications if we do not sustain them. Agile methodologies have well passed the phases of adoption in many organisations.  Yet the ultimate success of an agile methodology depends on the sustained use of the method both on the project team and in the organisation. \n\n\n\nWithin an organisation, the greater the amount of project teams using agile methods and the deeper the use of agile practices are assimilated into that organisation, the greater the likelihood of specific improvements in agile systems development outcomes. However, what facilitates the early stages of agile assimilation in an organisation is different to what facilitates the later stages of the assimilation. \n\n\n\nTherefore, this workshop and its participants will discuss the key factors that either facilitate or prevent the sustainability of agile methods in an organization. We will discuss how to achieve significant improvements in agile systems development projects and provide an overview of mechanisms that can be used to track improvements during organizational assimilation of agile methods. \n\n\n\nParticipants should have at least two years working experience in agile projects and include a wide range of roles such as manager, scrum master, business analyst, product owner, testers and developers. 	Adoption & Transformation	Workshop	2012
15139	Traversing the Canyon of Anarchy: From Agile Adoption to Agile Transformation	Have you ever begun an Agile adoption, only to watch in dismay and puzzlement as the change fizzles out like a wet firecracker?  Have you generated excitement for these new ideas, seen them seem to take root and grow, only to find a year later that people have fallen back into their old ways of doing things?  Or, are they now cherry picking Agile practices, perhaps using Agile terms, but ignoring the Agile values?   If so, you are not alone.    In this talk, Tamara Sulaiman Runyon discusses some reasons why simple practice adoption is not enough; and why transformation is so difficult to make stick in many organizations. Topics include: the nature of change and complex systems models   where do we fit?  The key role that vision and leadership play in instigating  and supporting transformation;  the potential iceberg of organizational culture as a change blocker,  as well as people aspects    the levels of discomfort caused by any change; and measuring the growth of competence as Agile practices and values are assimilated.  	Adoption & Transformation	Lecture	2012
15140	The evils of multi-tasking and how Kanban-for-One can help you	We know for a fact that multi-tasking slows us down both physically and mentally. Agile, Lean, Scrum and Kanban limit work in progress (WIP) on a team and organisational level but what about the personal space? What practices can we use as individuals to avoid multi-tasking and achieve flow? \n\n\n\nThis session will explain the research on and theory behind why multi-tasking is bad at every level and through telling the story of Snapper, a company based in New Zealand, I will show how an entire organisation organically adapted Agile practices to extend from the organisational and team level to the personal and individual space. \n\n\n\nI will demonstrate how Kanban-for-One works and how my colleagues and I are using it. I will talk about how Agile on a team level has helped us adopt Agile and Lean practices in our daily work lives and will describe how everyone at Snapper and the organisation as a whole have benefitted from the use of personal Kanban. I will also show the personal Kanban boards that have popped up everywhere around the office. Come along and learn how Kanban-for-One can help you! 	Emerging Applications of Agile	Lecture	2012
15144	Improving Collaboration and Communication through Improvisation 	To accomplish anything you need the help of others and others need your help.  Successful teams have members that are continually improving how they interact and communicate with each other. Collaboration, creativity, and results grow out of an environment that is positive and affirming.\n\n\n\nIn this highly interactive and fun session, Kupe, an improvisational actor, focuses on key improvisation lessons that will help you be a more attentive and flexible team member. You will walk away with lessons to help you stay in the present, temporarily suspend judgment, keep conversations moving forward and listen generously. These skills are needed to build positive, results oriented teams.  \n\n\n\n	Collaboration Culture & Teams	Workshop	2012
15151	Understanding Agile Program and Portfolio Management	More than 10 years after the signing of the Agile Manifesto, agile is now officially mainstream. PMI is offering an agile certification and you can't hardly find an IT job description that doesn't ask for some sort of Agile experience.  As a community, we've become pretty good at setting up agile teams and delivering agile projects.  The next frontier for agile methods is tackling the enterprise and one of the toughest nuts to crack will the the traditional PMO.  \n\n\n\nIn larger more complex environments, it isn't sufficient to pair a single product owner with a single team and expect that the work of the business is going to get done. We are dealing with larger, more diverse groups of stakeholders, stakeholders who's needs often compete for the attention of the team.  Furthermore, the teams have to work together in more complex ways that require tighter integration across teams to deliver larger, more complex feature sets.  \n\n\n\nThis talk will explore patterns for dealing with more complex organizations, managing interdependencies between teams, and balancing tradeoffs to optimize the project delivery organization.  The key question to answer is 'when will we be done, and what will we get for our time and money'.  We want to give the PMO a way to answer this question without having to resort to traditional plan-driven approaches.  This talk will lay out just such an approach. \n\n\n\n\n\n\n\n\n\n\n\n	Enterprise Agile	Lecture	2012
15153	Agile Portfolio Management at NYSE 	Sharing my experience in the financial industry as a Managing Director at NYSE Euronext, as well at other finance companies, in managing a business program by leveraging Agile.  \n\n  \n\n  \n\n-      **Introduction/Context**   \n\n          *  My background and the world of finance & technologies  \n\n  \n\n-      **Real examples of managing a portfolio by prioritizing against real business value**   \n\n          *  Competing priorities  \n\n          *  Revenue objectives and cost constraints  \n\n          *  Planning a roadmap and managing opportunity costs  \n\n          *  Prioritization against real business value whether internal business programs or client-facing deliverables  \n\n          *  Road mapping and continuous re-planning  \n\n          *  Validating annual stakeholder objectives  \n\n  \n\n-      **Define the Product Owner role/team between the business and IT**   \n\n          *  Product Owner roles between the business and IT  \n\n          *  Typical corporate Agile evolution & adoption pains  \n\n          *  Defining release visions and goals  \n\n          *  Stakeholder engagement model  \n\n          *  Adoption & Power-Users  \n\n	Insights - Experience Reports	Lecture	2012
15154	Patterns for Agile Adoption and Transformation	Introducing agile into an organization is more than just running people through a few days of training and hoping for the best.  Training is part of the equation but only addresses one part of the adoption and transformation cycle.  The problem with a training-only approach is that we can learn new ways of working, but if the structure and culture of the organization don't support those new ways of working, the training won't stick.  The trick is to create an organizational structure and culture that is congruent with training in agile practices.  We need a structure and culture where Agile practices can flourish and grow and produce the business outcomes we all hope for.  \n\n\n\nThis talk will start by exploring the main differences between agile adoption and agile transformation and how to distinguish between structural transformation and cultural transformation.  Next we'll explore criteria for how to assess your organization and create an adoption and transformation roadmap to help you pragmatically and safely introduce agile methods to your enterprise.  Finally we'll explore three primary dimensions of adoption and transformation:  competency, frequency, and scale that will assist in guiding your adoption and transformation roadmap and change management strategy. \n\n\n\nAfter establishing the theoretical underpinning of a successful adoption and transformation strategy, we'll consider several case studies where these ideas have been applied and what has worked, and more importantly, what hasn't.  The case studies will consider 3-5 companies of varying sizes where these ideas have been applied in the past 18 months.  	Adoption & Transformation	Lecture	2012
15172	"How am I doing?" - Personal Retrospectives on Developing One's Craft	Diana Larsen (co-author of "Agile Retrospectives" and "Liftoff") will lead a retrospective on the week with a focus on "How am I doing? Exploring my personal best" in a hands-on, highly interactive session in which participants develop an individualized plan for further professional development. 	Development Practices & Craftsmanship	Workshop	2012
15193	Where do agile leaders come from?	Becoming truly agile requires a significant change in the leadership practices and in behavior of the managers. One aspect of this change is the transformation from command and control to servant leadership and supporting self-organization, which is not an easy one for many managers and teams. Over the years I have worked with many organizations helping teams and managers on the road to become more self-organizing and agile. Very often I have heard from teams that "we would like to self-organize, but management will not let us . And from managers of the same organization: "we would like the teams to self-organize, but they just don't want to take the power and responsibility".  \n\n\n\nTeams and managers seem to be trapped in the same mental model of hierarchical relationships and command & control leadership without being able to get out of this. In order to get out of this trap people need to start to think differently, feel differently and behave differently.\n\n\n\nIn this session I will share my experience of coaching teams, managers and leadership teams so that the needed changes happen. We will cover the key concepts we have found helpful in changing the mental models. I will also talk about the coaching and training programs we have in place and tell examples of how the process of creating new leadership culture has progressed.\n\n<!--break-->	Coaching & Mentoring	Workshop	2012
15243	Lean from the Trenches: Managing Large Scale Projects with Kanban & Scrum & XP	Find out how the Swedish police combined Kanban, Scrum, and XP in a 60-person project. \n\n\n\nThis is a high-paced talk based almost entirely on photos, diagrams, and concrete examples. We ll go beyond the basics and walk through the project step by step, from customer engagement, to the "daily cocktail party , test, cross-team synchronization, multi-layer kanban boards, version control, metrics, and more.  The project was finalist in the Swedish  Project of the Year  awards for 2011.\n\n<!--break-->\n\nWe start with an organization in desperate need of a new way of doing things, and finish with cross-functional teams all working in sync to develop a scalable, complex system while continuously improving their development process. \n\n\n\n	Enterprise Agile	Lecture	2012
15263	Agile and the nature of decision making	Organizations are really bad at Risk Management. And the typical approaches to risk management are flawed - resulting in bureaucratic overhead and not much improvement in the performance of software development projects. Agile efforts have rejected bureaucratic and non-value adding efforts and in the process have rejected most of what is practiced as risk management. This is unfortunate - because the nature of agile development fundamentally changes how to benefit from effective risk management. \n\n\n\nRisk management is about managing uncertainty to reduce the probability and impact of unfortunate events and the maximize the realization of opportunities. This workshop builds on concepts from SEI's MOSAIC project and Eric Reis Lean Start-up to present a practical and proven to a systemic approach to integrating threat and opportunity identification and response into the management of Agile projects. Useful for typical delivery teams, this approach is particularly valuable in the large projects and large organizations.  	Enterprise Agile	Workshop	2012
15289	Risk Management is Too Important for Project Managers	This workshop introduces an integrated set of collaborative team games for the entire risk management process. It starts by explaining the significance of risk management on projects by reviewing research statistics on the billions of dollars wasted annually on projects that fail due to poor risk management.  Having established the importance of risk management a set of 8 new team based tools for agile risk management are introduced. By deliberately moving risk management from a project management activity to a team activity we dramatically increase the collective knowledge, visibility and in-depth insights into the issues and solutions for project risks. \n\n\n\nThrough collaborative games each of the 6 PMI Risk Management steps are recreated as highly visual, team based activities that then create risk avoidance and risk mitigation stories for the product backlog\n\n\n\n1.\t**Plan Your Trip**   (Risk Management Planning)\n\na.\t4Cs - Consider the Context, Costs, Consequences and Choices\n\nb.\tDeposits and Bank Fees   understanding features and risks\n\n2.\t**Find Friends and Foes**   (Risk and Opportunity Identification)\n\na.\tDoomsday clock, \n\nb.\tKarma-day\n\nc.\tOther risk identification forms (risk profiles, project risk lists, retrospectives, user story analysis, Waltzing with Bears - Top 5-10 for software)\n\n3.\t**Post Your Ad**   (Qualitative Risk Analysis)\n\na.\tInvestors and Help Wanted   classification and visualization of opps and risks\n\nb.\tTug of War   project categorization \n\n4.\t**Today s Forecast** - (Quantitative Risk Analysis)\n\na.\tDragons Den   next best dollar spent \n\nb.\tBattle Bots - simulations\n\n5.\t**Backlog Injector**   (Risk Response Planning)\n\na.\tJunction Function   choose the risk response path\n\nb.\tDollar Balance   Risk / Opp EVM to ROI comparison\n\nc.\tReport Card - Customer/Product owner engagement\n\nd.\tInoculator   inject risk avoidance/mitigation and opportunity stories into backlog\n\n6.\t**Risk Radar**   (Risk Monitoring and Control)\n\na.\tRisk Burn Down Graphs - Tracking and monitoring\n\nb.\tRisk Retrospectives - Evaluating the effectiveness of the risk management plan\n\nc.\tRinse and Repeat - Updating risk management artifacts, revisiting process\n\n\n\nThese techniques overcome many of the correct-but-not-sufficient aspects of traditional risk management:\n\n\t* Poor engagement - dry, boring, academic, done by PM, does not drive enough change\n\n\t* Done once   typically near the start, when we know least about the project\n\n\t* Not revisited enough   often  parked  off to one side and not reviewed again\n\n\t* Not integrated into project lifecycle   poor tools for task integration\n\n\t* Not engaging, poor visibility   few stakeholders regularly review the project risks\n\n\n\nWhy so visual? Visual representation helps engage the left and right hemi-spheres of the brain. They allow us to tap into our spatial awareness / memory to avoid forgetting about risks and are the reason today s military use visual tokens to represented enemy forces, despite having access to sophisticated tools. The impacts of forgetting about them can be fatal. The same goes for project risks.	Enterprise Agile	Workshop	2012
15290	Why Agile Needs More Cowboys	This presentation takes the leadership ideas of Jeffrey Pinto author of  Project Leadership: from Theory to Practice  and transforms them into an agile setting.\n\n\n\nCowboys are resourceful, daring, and are as quick with their wits as they are with their fists. In many ways, we see cowboys as the embodiment of agile leaders. Yet, life is not a Hollywood movie. What do cowboys actually do? They lead cows. Have you ever seen anything that indicates that John Wayne knows how to lead cows? They ride horses, shoot guns, and always get the girl. But have you ever seen them with a cow? Would you want them around a cow? Your cow? They can teach us as much about being a good cowboy as Homer Simpson can teach us about being a good father.\n\n\n\nGo behind the myth, and true agile leadership characteristics emerge. A herd of cows is a lot like an organization: massive and, at times, rather aimless. It takes dedicated leadership using a score of methods to energize this bovine bulk. A good cowboy knows how to select a lead cow, direct the herd into natural flows to help lead the herd.\n\n\n\nMoving a herd into Dodge City required considerable skill. It is the real cowboy, not a stylized caricature, that teaches us something about leadership. \n\n\n\nAgile leadership is not a cookbook. You will find no recipes for leadership stew here. Rather, this presentation is intended as a guide to leadership thought and practice. Good theory underlies good leadership. Theory has received a bad rap. After all, we want doers, not thinkers, right? But, at its heart, leadership is concerned with transforming ideas and concepts into action. Your knowledge of basic principles is essential to you taking the first step to being an effective agile leader. Our six-shooter of agile leadership topics to be introduced is:\n\n\n\n1.\tCraft a compelling vision of the completed project\n\n2.\tModel the desired behaviour towards this vision\n\n3.\tResist meddling and recognize team conflict as a positive step\n\n4.\tAct for the simultaneous welfare of the team and the project\n\n5.\tCreate an environment of functional accountability\n\n6.\tTake time to reflect on the project and challenge the process\n\n \n\n	Leadership	Lecture	2012
15298	Product Owner Snow and the Seven Angry Dwarfs	Has darkness fallen over the Enchanted Forest? Do you feel like you are constantly trapped, being asked to do more and more with no means for escape? Is the Queen out to get your heart for not meeting expectations or being 100% predictable? If so, this workshop is for you! One of the greatest pitfalls in the Agile world is coming to the table at sprint or iteration planning meeting without having stories prepared with the correct level of detail. Proper story preparation & release planning can help fix this situation. In addition, one of the most dreaded parts of great planning is effective estimation. This hands-on session/workshop will allow participants to learn the steps needed to prepare story cards with just enough information and the process of rapid release planning allowing them to give it a shot in a mock planning simulation. LEARN TO PLAN FOR ESTIMATE AND VALIDATE OVER 300 STORIES IN UNDER SIXTY MINUTES WITH TRIPLE VALIDATION ON THE ESTIMATES!\n\n\n\nThis Session has been practiced and recorded a number of times. Come see for yourself how using Rapid Estimation Techniques Enables teams to move Much Much Faster and with Greater Accuracy. \n\n\n\n 	Business Value and Working With Stakeholders	Workshop	2012
15342	Agile Data Warehouse - The Final Frontier	"Data - - - - the Final Frontier.\n\nThese are the voyages of the starship, Agile.\n\nIts ten-year mission: to explore strange, new projects, to seek out new value and new solutions, to boldly go where no teams have gone before."\n\n\n\nIn this episode join our team as they discover the space station 'Warehouse' adrift. Captain Tuple and his crew discover the foundation of the space station is crumbling and the entire structure has fallen into disrepair. The continuous repairing of the space station can not continue and collapse is imminent. To save the inhabitants the starship Agile must design and construct a new space station to support the inhabitants. The new space station is being built in iteration due to the fact that the transfer of inhabitants cannot wait until the new space station is fully complete. But time in running out...\n\n\n\nThis session will take the basis set forth in Scott Ambler's "Agile Database Techniques" book and share the lessons learned, both positive and negative, in the replacement of an Operational Data Store and Data Warehouse in an Agile project. The first part of the session will review the concepts presented in  "Agile Database Techniques". The second part of the session will review how the project structured its iterations and how the Operational Data Store and Data Warehouse were designed, iterated, refactored, and deployed.\n\n\n\nSpecial attention will be given to the Data Modeling or Normalization techniques that allowed for a change tolerant design, the Data Architecture design that implemented multiple layers of abstraction and isolation, and the refactoring techniques to evolve the Operational Data Store and Data Warehouse Data Models. Also presented will be the key role of an Enterprise Data Model in an Agile Database project.\n\n\n\nJoin us for a experience report of how the concepts in "Agile Database Techniques" evolved and were customized in a real world Data Warehouse project for a major Health Benefits provider. \n\n\n\n\n\n\n\n\n\n	Insights - Experience Reports	Lecture	2012
15343	How to Brainstorm : Lessons from Design Thinking	Do you know how to come up with the next great idea? How about just a good idea? \n\n\n\nTurns out there is quite a lot of knowledge out there about just that. In this workshop, we'll take you from where you are today, to visit (and use!) several effective techniques for coming up with a plethora of ideas (which by the way, is how you do it). \n\n\n\nWe'll finish by introducing the most important part of brainstorming, the inspiration you gather before you start.\n\n	Business Value and Working With Stakeholders	Workshop	2012
15370	The Stakeholder Management Framework for Teams, Programs, and Portfolios	Stakeholder management is one of the most important responsibilities of a Product Owner.  It can also be one of the biggest land mines if you don't continuously inspect and adapt your planning and communication.  How do you interact with your stakeholders based on their level of interest and the degree of influence the have over your team's success or failure?  \n\n\n\nIn this session, you will learn how to apply the stakeholder management framework to:     \n\n1. Identify, analyze, prioritize, and engage your stakeholders  \n\n2. Manage expectations through the continuous process of setting expectations, acting on them, reviewing them, and resetting them  \n\n3. Build your communication plan using the stakeholder mapping technique and the Net Promoter Score (NPS) to plot your sponsors, major stakeholders, minor stakeholders, and subject matter experts  \n\n4. Gain consensus with your stakeholders regarding their rights and responsibilities  \n\n5. Scale to the program and portfolio levels  	Business Value and Working With Stakeholders	Lecture	2012
15378	Adopting CMMIﾮ into Your Scrum Methodology	To some, the combination of Capability Maturity Model-Integration (CMMIﾮ) and Scrum is akin to the mixture of oil and water.  We will alleviate some of the concerns that participants may have when CMMIﾮ is introduced into a Scrum environment. At a high level, attendees will be able to crosswalk their Agile/Scrum artifacts to satisfy evidentiary requirements for a Maturity Level 2 Standard CMMIﾮ  Appraisal Method for Process Improvement (SCAMPI A).  Then they will learn how to tie up the loose ends with other standard project management artifacts. The end result will be a fully-populated Scrum/CMMIﾮ alignment matrix.	Enterprise Agile	Workshop	2012
15397	Make your iPhone Agile with automated iOS Testing	Automated Acceptance Tests are the ideal way to bridge the gap between what your customer wants and what your application does.  Meanwhile Unit Tests are required in order to keep your application clean, functional and Agile.  Until recently these practices were not common on the most popular mobile device in the world, the iPhone, and in this workshop we'll show you how to take the customer's requirements from their brain to executable documentation and take you through the development of a real application.\n\n\n\nWe will do this through the use of three tools: Fitnesse, OCSlim, and OCDSpec.  Fitnesse is a wiki with a test runner for Slim Tests, that gives instantaneous feedback to the customer when your stories are complete and documents what they do.  OCSlim allows Fitnesse to call into Objective-C, and OCDSpec is the Unit Testing framework for Objective-C that all your friends have been talking about.  In this hands-on workshop you and your pair will implement the game Mastermind from executable specifications, both writing the Unit Tests and the making the Functional Tests green.\n\n\n\nNote:  If you can, bring a Mac with Xcode and the latest iOS SDK installed.  If you can't we'll all be happily pairing and willing to share.	Emerging Applications of Agile	Workshop	2012
15466	A Starting Point for Negotiations - Delivering with a Heterogeneous Team	Sure, working with a fully cross-functional team where all member's time is 100% on the project is ideal, but we must deliver in the real world of specialization and matrixed personnel.  In this presentation I will describe a methodology that we have developed that allows our Scrum team to consistently predict our capacity and deliver what we promise sprint after sprint, even though our developer's time is fragmented and specialization is to the point where team members have Ph.Ds in various needed disciplines. \n\n\n\nThe key to this system is to, before each planning meeting, even though it appears blasphemes at first glance:\n\n\n\n* Map individual team member's capacity to story points.\n\n* Estimating the potential sprint backlog's user stories in story points.\n\n* Map developers to user stories.\n\n\n\nThe reason this approach works, even though it appears to go against the lean principle of self-empowered teams, as well as many others, is a simple phrase we use over and over, "A starting point for negotiations."\n\n<!--break-->\n\n\n\nI am Scrum Master for a development team at Sandia National Laboratories, one of the three national nuclear weapons Laboratories operated by the United States Government.  Our development team provides computer programs written in C++ that use numerical simulation of physical phenomena (i.e. they solve the mathematical equations that govern natural occurrences such as heat conduction, air flow, and fires) to model the physical environment encountered by nuclear weapon delivery systems.  Our charter is to provide tools which allow designers to deliver safe and functional systems to the nation's stockpile.  Our development team is made up almost entirely of engineer's with Ph.Ds in various disciplines such as Aerospace, Chemical and Mechanical Engineering as well as Physics and Mathematics.\n\n\n\nThe outline of the presentation is as follows:\n\n\n\n* Introduction\n\n* A description of our business space.\n\n* A description of our development team's educational background, time demands, how they measure success, how their success is measured.\n\n* Our methodology, including our reliance on the the philosophy of "A starting point for negotiations."\n\n* A critical look at our methodology.\n\n* Criteria for success.\n\n* The tools we use.\n\n* Metrics demonstrating success.\n\n* Concluding Remarks	Insights - Experience Reports	Lecture	2012
15497	Successfully bootstrapping a large scalable Scrum practice at Royal Dutch Shell	We will present the saga of a successful transformation from a struggling software development group to a scalable Scrum practice within Royal Dutch Shell. This group of sixty individuals encountered many obstacles on their journey to carry on the development of a large, 25 year old, legacy application. Come and see how, over two years, we implemented a set of organizational, technological, procedural, and cultural changes to lead this group forward. Finally, we will present our vision to further strengthen and accelerate this value delivery system.	Insights - Experience Reports	Lecture	2012
15518	Hold the Sprinkles! Cupcakes, layers, and Agile UX design requirements	Are you a business analyst working in an Agile environment? Ever feel like you re missing the big picture, focusing on iterations of details? Agile teams can often get caught up in a single product feature, iterating on that one feature to its most complete state. While this approach gives the user fully-fleshed functionality in one area, often the larger workflow is forgotten. We know that a complete and meaningful user experience is important for product success, but prioritizing requirements across the entire user workflow can be challenging.\n\n\n\nUsing the concepts from Jeff Patton's story mapping exercise, this presentation will show how you can use a layered design approach to create the most valuable end-to-end user experience. <!--break--> Applied at this level, story mapping helps to identify the basic set of requirements for the workflow, and illustrates options for layering enhancements and embellishments. This technique builds on traditional use cases and workflows and adds a visual map to create a complete user experience with the right level of functionality.\n\n\n\nParticipants will hear examples of how this method has been applied at ProQuest, LLC and learn how to use this simple, effective method to start designing the end-to-end user experience in an Agile way. They will also take away tips for thinking agilely when designing their next project, and they will take away cupcakes. 	User Experience	Lecture	2012
15537	Integrating agile with other Enterprise disciplines: Six Sigma, BPM & CM	As Enterprise-level organizations look to maximize the effectiveness of Information Technology and Software Development activities through adoption of agile techniques, it is common that agile development practices may interact or be impacted by other disciplines already entrenched within the Enterprise.\n\n\n\nThis talk will explore three specific Enterprise disciplines that commonly interact with agile / lean software development:\n\n\n\n* Enterprise-level Process Improvement Activities driven through Six Sigma Methodologies (DMAIC, DMADV, Kaizen)\n\n\n\n* Business Process Management (BPM)\n\n\n\n* Enterprise Configuration Management (CM)\n\n\n\n\n\nFor each discipline, recommended integration patterns will be presented to describe how agile development activities can improve the effectiveness of these common Enterprise disciplines.  <!--break-->Discussion will also outline recommended services that staff supporting each Enterprise discipline (Six Sigma, BPM & CM) should provide to optimize the software delivery and innovation that can be achieved using agile and lean development techniques.  The presentation will also focus on the unique knowledge, skills, abilities, and perspectives that Six Sigma, BPM & CM practitioners have and how often they can integrate with agile development efforts to help teams mitigate specific challenges.  Discussion will highlight specific messaging strategies and patterns to ensure effective collaboration between core agile development staff and staff supporting other Enterprise disciplines.  Lastly, the presentation will provide messaging strategies to deconflict the core activities of agile development from the core activities of Six Sigma, Business Process Management, and Enterprise Configuration Management.\n\n\n\nAll materials shared during this presentation have been compiled during a 4+ year Enterprise-level change management effort embarked on by a large United Stated Department of Defense organization to adopt agile software development within an Enterprise that was proficient at Six Sigma, BPM and Configuration Management prior to adopting agile.	Enterprise Agile	Lecture	2012
15550	Leading Conflict: A Systems Intelligence Approach to Conflict Facilitation for Leaders	Sometimes hot and messy, other times cold and hidden, conflict surrounds us as leaders. There are two obvious choices: become the arbitrator who breaks the tie, or throw up your hands in exasperation deciding it's the team's problem. A third, more powerful approach is to become a skilled conflict facilitator. This hands-on workshop provides four interrelated systems intelligence tools and mindsets to help you prevent destructive conflict and encourage the creative kind: the positive/negative ratio, deep democracy perspective, conflict protocols and creating alignment without agreement.\n\n\n\nFirst laying a foundation with the team s positive/negative behavioral ratio, this creates a positive emotional bank account to strengthen resiliency and help people "assume positive intent." We then add a behavioral structure, conflict protocols, to prepare teams for the heat of conflict, and finally introduce two core practices (deep democracy and distinguishing  interests  from  positions ) for navigating active conflict as it occurs. The relationship systems approach, from CRRGlobal, will be taught and facilitated by two experienced agile+systems coaches.	Leadership	Workshop	2012
15556	The Lean Pyramid - The Equilibrium of Agile Forces	The Lean Pyramid presents a model to help companies start their agile adoption strategy effectively. Reliably delivering valuable working software frequently is much more than just creating, estimating and prioritizing a backlog and developing it iteratively. In order to succeed with agile you have to understand the needed equilibrium of forces among strategy, management and engineering efforts. Through a deep explanation of the fundamental Lean principles, you will learn how they translate to agile software development in order to create a strong and successful culture in your company.	Adoption & Transformation	Lecture	2012
15558	Dealing with the Counterproductive Games holding back your Agile adoption	Are you encountering impediments to your agile adoption that stem from Individuals and their somewhat unhealthy Interactions? Might any of these relate to people playing games with each other that serve personal interests but are counterproductive to becoming agile? For example: the Blame Game, No Bad News, Token Involvement, Grey Zone ambiguity to avoid responsibility, Social Loafing in group settings, Reverse Doubling of estimates etc. In this session you will use these and other patterns to make  sense of the problematic interpersonal, leadership and estimation games being played in your organisation and those of other participants. You will also explore techniques for reducing or eradicating the counterproductive gameplay that is holding back your ability to be agile.\n\n\n\n\n\n### Audience\n\n\n\nAnyone working to further an agile adoption/transformation in a politically or culturally challenging environment. Especially coaches, ScrumMasters, Project Managers, iteration managers, pro-active team members, line managers, leaders and other change agents.\n\n\n\n\n\n### Presentation Format\n\n\n\nThe following mirrors the process/mechanics below with more explaination.\n\n\n\n1. Set the Scene - We'll begin with a succinct introduction to what counterproductive games are.\n\n2. Make connections - There will be a selection of game patterns on the walls around the room. Participants will be invited to browse these, and by the end of the time-box position themselves by the one that they connect with most strongly based on their recent experience at work.\n\n3. Story telling - We'll invite participants to share stories about their real-world examples of the game they have clustered around\n\n4. Create shared context - We'll invite participants to decide on one particular real-world example in each cluster and to write a dialogue that best captures the gameplay.\n\n5. Techniques - We'll outline a model for understanding the steps in the game and several techniques for intervening to reduce or eliminate the counterproductive gameplay.\n\n6. Create options for action - We'll invite groups to map out the gameplay, identify opportunities for intervention, discuss and illustrate possible interventions.\n\n7. Debrief - We'll invite participants to reflect and share their experience in the session and what they are taking away from it. \n\n\n\n\n\n### Presentation History\n\n\n\n* A 1 hour version of this workshop was run at Agile Tour Sydney in December 2011. The feedback for the session was the most positive out of all the sessions at the event. At least one participant personally thanked the facilitator and said it was the most valuable session of the day.\n\n* A 90 minute version of this session is planned for the Agile Sydney community group within the next couple of months.\n\n\n\n\n\n## Speaking Experience\n\n\n\nRowan is highly active in the Agile community internationally and has spoken at several conferences in Europe and North America including Scrum Gatherings in London (2007) and Munich (2009). In Australia, Rowan has spoken at and facilitated workshops at the Agile Australia (2009 and 2011) and Agile Tour Sydney (2011) conferences. He also founded a successful Agile special interest group supported by the Australian Computer Society (2007) and helped to initiate Scrum User Groups in Sydney and Brisbane (2008) as well as the Agile Sydney group (2010) with a lose affiliation with the Agile Alliance. As a Certified Scrum Trainer(R), Rowan is using his speaking and facilitation skills almost every week to deliver agile training and executive seminars on Agile.\n\n\n\n\n\n### Sources\n\n\n\nThe game patterns used in the session include patterns from:\n\n- the presenter's own experience;\n\n- Mauricio Goldstein & Philip Read, authors of "Games at Work: How to Recognised and Reduce Office Politics";\n\n- Eric Berne, M.D., author of "Games People Play"; and\n\n- Rob Thomsett of Thomsett International (http://www.thomsettinternational.com/main/articles/hot/games.htm).	Adoption & Transformation	Workshop	2012
15559	Raving Retrospectives -Innovation Gamesﾮ & other techniques to facilitate creative retros	Do you find it challenging to keep your retrospectives innovative and creative so you get the maximum feedback from your scrum team?  This session will review traditional retrospectives and give you 3 new innovative tools to add to your "tool kit" to help you facilitate creative, fun and engaging retrospectives. No matter what your project, project methodology or delivery model, everyone benefits from feedback on what they could do differently next time. The session will involve a mix of lecture, workshop and discussion. No death by PowerPoint here!\n\nThis session will look at:  \n\n1) What is a retrospective  \n\n2) Why do we do retrospectives  \n\n3) How to plan a retrospective  \n\n4) Traditional retrospectives  \n\n5) Creative retrospectives  \n\n\n\nSession attendees will be divided into teams of 6-9 (easily adjustable for audience size) and will do an exercise using one of the following creative retrospective techniques:  \n\n- The Boat (Innovation Gamesﾮ)  \n\n- The Retrospective Starfish  \n\n- Spiderweb Retrospectives  \n\n\n\nThe audience for this presentation is anyone looking for feedback on how their project, implementation or work is going. Whether from a more traditional environment or a more Agile environment there is something in this session for everyone; from beginners with no retrospective experience to experienced coaches wanting to expand their "tool box"!\n\n\n\nI will use PowerPoint to cover the introduction to retrospectives and why we do them. I will then demonstrate using a white board / flip chart and post it notes some of the traditional retrospective techniques. I will introduce 3 new retrospective techniques and then divide the attendees into groups of 6-9 and have each group try one of the new techniques (easily adjustable for audience size). I will ask them to come up with a topic on which to do a retrospective and I will give them some examples in case they don't have ideas at hand: Agile 2012 Conference Retrospective, iPad 2's, Facebook. After they are done trying their new techniques, we will do a 10 minute debrief with the entire group to discuss why they felt their technique was effective / wasn't effective, what they liked and what they didn't like so that all attendees get feedback on all the techniques.	Collaboration Culture & Teams	Workshop	2012
15568	Hands On Agile Immersion	This session introduces Agile to the whole team and is for anybody involved in development: management, product managers, business analysts, designers, developers, testers, DBAs, technical writers, project managers, etc. You ll form into cross-functional teams, pick your own software product to build, and become completely immersed in the principles and practices of Agile. Everything you learn will be via a series of whole team hands-on exercises. Bring an existing team or create a team with other participants during the session.	Agile Boot Camp	Workshop	2012
15572	SIMPLE METHODS FOR RELIABLE USER INVOLVEMENT	One of the difficult problems faced by an Agile team is that of getting reliable user input. Because Agile projects depend on minimal up-front planning and specification, user feedback is critical. But product owners are rarely users themselves and the actual end-users are often located elsewhere and may be highly diverse. \n\n\n\nThis session introduces participants to Contextual Inquiry (CI), a proven field research method for understanding users and their needs. We introduce CI, show how it fits into Agile development, and give participants practice in gathering data and then writing user stories.\n\n	User Experience	Workshop	2012
15573	USING RAPID PROTOTYPING FOR DESIGN ITERATION	In theory, Agile projects can iterate their design with users through the regular sprint process. In practice, few projects can afford to revisit completed stories repeatedly until they are right. It s critical that stories define user needs correctly from the start.\n\nPaper prototyping is a key technique for iterating a design with users before development work on a story starts. In this session, we show how to build effective prototypes and how to use them in field interviews to get the most reliable feedback.\n\n	User Experience	Workshop	2012
15609	Cultural change with Spiral Dynamics to transform from "doing agile" to "being agile"	Agile software development is no longer the sole domain of little obscure IT companies with their own gurus. Even the most traditional companies are adopting agile methodologies. This is something the agile community has been waiting for for a long time. Finally, recognition! But alas it comes with some drawbacks. \n\n\n\n Doing Agile  instead of  Being Agile  is one of those drawbacks I keep encountering more and more.  They follow the steps and procedures, but they don t live and breathe Agile and its values , is one of the remarks I get from disillusioned agile coaches. Values don t change overnight by just showing people the agile manifesto and sending them to a two day training. Believe me, we've tried. \n\n\n\nBut how can you change the values of individuals and teams or even worse, whole organisations?  That's what this session is about.\n\n\n\nLuckily, there is a thing called Spiral Dynamics and it s all about: how people get certain values, why they defend them and how these values evolve over time. Spiral Dynamics is based on 30 years of research done by psychology professor Clare W. Graves. \n\n\n\nWith the help of Spiral Dynamics we are going to:  \n\n" \tDiscover the different kinds of Agile implementations based on value systems  \n\n" \tRecognize them  in our own teams and organisations  \n\n" \tKnow how we can help teams and organisations move from  Doing Agile  to  Being Agile   \n\n	Coaching & Mentoring	Lecture	2012
15630	Scaling Agile Teams: Principles and Practices	Agile methods depend on effective cross-functional teams. We ve heard many Agile success stories& at the team level. But what happens when a product can t be delivered by one team?  What do you do when the  team  that s needed to work on a particular product is 20 people?  Or 20 teams? \n\n\n\nOne response is to create a coordinating role, decompose work, or add layers of hierarchy. Those solutions introduce overhead and often slow down decision making. There are other options to link teams, and ensure communication and integration across many teams.  There are no simple answers. But there are design principles for defining workable arrangements when the product is bigger than a handful of agile teams. \n\n\n\nIn this talk, I'll cover principles and practices and explain how they work together to address coordination, integration, and technical integrity.\n\n\n\n\n\nThese are the principles and practices I'll illustrate.\n\n\n\n<b>6 Principles:</b>\n\n\n\nManage dependencies in the backlog as much as possible <br>\n\nAim for long-lived cross-functional teams<br>\n\nGo as far down the technology stack as feasible<br>\n\nOrganize teams around context boundaries rather than component boundaries were ever possible<br>\n\nMake cross-context communication explicit<br>\n\nAvoid late learning\n\n\n\n<b>Technical Practices:</b>\n\n\n\nContinuous integration (CI) within context<br>\n\nIntegration across contexts at some other interval (keeping in mind  avoid late learning )<br>\n\nMutually agreed upon and developed automated test across context boundaries<br>\n\nArchitectural & coding standards<br>\n\nTechnical reviews\n\n\n\n<b>Social Practices:</b>\n\n\n\nScrum of Scrums<br>\n\nIntegrating Teams (keeping in mind  avoid late learning )<br>\n\nDecision Boundaries<br>\n\nComponent shepherds<br>\n\nTech council<br>\n\nProduct council<br>\n\n\n\nI've attached a PDF of the current version of my slides on this topic.  I'm sure they will evolve by next August.	Enterprise Agile	Lecture	2012
15639	Lean UX from UX Veterans: Lessons Learned in Creating & Launching a Complex Consumer App	This session provides and overview and lessons learned from senior UX, product, and software development consultants' experiences in switching from consulting to actually conceiving, designing, developing and ultimately launching a complex consumer application in dating called MinIDates.com. It turns out that our extensive industry experience and past successes couldn't have prepared us for all that we encountered and learned when trying to develop and launch our own consumer startup. We'd like to share what we learned for future teams to benefit!\n\n\n\nOxford Technology Ventures, LLC is a boutique user experience and product strategy consulting firm in New York whose members are seasoned veterans in UX, Internet, and software development. Our clients range from large Fortune 100's to small startups, and we've worked on and helped successfully launch or overhaul hundreds of products and services over the years. \n\n\n\nLike many in the consulting/ agency/ services business, we were feeling "startup envy" and wanted go develop and launch our own service. MinIDates.com was initially conceived as a showcase company case study in superior UX, cutting edge mobile tech, and Lean and Agile development processes where we wouldn't be constrained by our clients' preferences, implementation methods, and product direction revisions. We embarked on developing MiniDates.com in January 2011 after several months of conceiving  the product, and ultimately launched it in beta 14 months later- when we had originally thought it would take us only 3-4 months to MVP!  \n\n\n\nThis session describes the process we went through - what we tried that worked and didn't, what we should have done that we didn't, and what we encountered that we couldn't have foreseen- in the belief that we can help other UX and product-focused startups and Agile teams be more effective practitioners. 	Insights - Experience Reports	Lecture	2012
15661	Working Effectively with User Stories: Silent Sizing and Definition of Ready	User stories are used to describe the functionality delivered in a product or system. Two common challenges we see recurring, even with experienced teams, are (1) they spend far too much time planning and estimating, getting trapped in the details, and (2) they have difficulty finishing user stories in a time-boxed iteration or Sprint   often realizing, despite the promise of further conversation, that they just didn t know enough about the user story before taking it on. This hands-on session introduces participants to two techniques to deal with these problems. The first is Silent Grouping, which allows teams to collaboratively size even very large backlogs in minutes. The second is Definition of Ready, which is a set of agreements that lets everyone know when a user story is ready to begin. Combined, these techniques can save your teams literally hundreds of hours in time.	Agile Boot Camp	Workshop	2012
15711	Servant Leadership	This session is designed to help executive, senior and mid-level management learn how to become more effective, better appreciated and happier in their changing roles in agile organizations.   It is also intended to help you as a servant leader, management coach or sponsor to help managers who you know (or may even work for) to become more agile and better to work with.  The workshop setting will explore servant leader patterns and anti-patterns based on the participants' own experience, to be shared and put into place.  The format will be intensive small group interaction and large group sharing using a merge/diverge/merge facilitation facilitation style.\n\n\n\n	Leadership	Workshop	2012
15715	Bad-Assed Double-Loop Learning: From Judgmental to Good Judgement	 We all know  Agile leaders foster self-organization, so why do many have little effect on their teams, or worse, actually harm their effectiveness?  People act in ways that are rational to them, but differences in internal mental models can make people seem irrational to us. By uncovering your team s mental models, you can help them achieve a common rationale. This leads to stronger, integrated teams.\n\n\n\nScrumMasters, Coaches, Managers, & Team Members will participate in robust scenarios based on team simulation in aviation and healthcare. You will leave with practical experience in team interaction which you can immediately apply in your workplace.	Coaching & Mentoring	Workshop	2012
15757	Winning the Agile Race: Stop Watching The Runner And Pay Attention To The Baton! 	Everyone knows that Agile is about  Individuals and Interactions  but&  what the heck does that really mean for a leader?  How do you make that an actionable goal?  By focusing on the fundamental unit of work (the baton) a clearer and more concise goal emerges that enables leaders to recognize what and **how** to improve interactions and agility not just from a development perspective but across the entire enterprise.\n\n\n\nIn 2006, Alistair Cockburn recognized that [the most meaningful unit of work (the baton) within development organizations is  the decision ](http://alistair.cockburn.us/What+engineering+has+in+common+with+manufacturing+and+why+it+matters).  At its core, agility in development (or any knowledge work) is the function an organizations ability to interact in ways that improve decision outcomes and reduce decision delay. Co-location, self-organizing cross functional teams, incremental development, small units of work, and faster feedback loops are all essentially techniques to improve decision flow.  By and large, leaders control the means to affect changes to goals, structure, and culture to improve decision flow between teams and across the organization. \n\n\n\n## Goals\n\n\n\nIn this tutorial, I'll introduce a set of principles and techniques coaches, leaders, and team members can apply to:\n\n\n\n* Increase alignment within the organization around the goal of Agility \n\n* Identify the greatest opportunities for breakthroughs (and what s holding them back)\n\n* Identify changes to structure and culture that improve decision flow\n\n* Improve the success of Agile adoptions\n\n\n\n## Topics include:\n\n\n\n* **Learning to see the baton;** - stop focusing on process and start focusing on decisions\n\n* **Deciding to decide well;** - aligning teams and leaders around the goal of decision flow\n\n* **Ask a silly question get a silly answer;** - framing decisions with better questions\n\n* **Survey sez!** - Questions you and your teams should be asking (*but probably aren t*)\n\n* **Decision Deodorant;** -  decision smells and how to refactor them\n\n* **Stop Trying To Hit Me And Hit Me;** -  turn wasted  meeting  time into  deciding  time\n\n* **Stop the madness** - Visualizing decision flows and the bottlenecks that are crippling your teams\n\n* **The care and treatment of organizational SEPsis** ( eliminating inflammatory disease of SEP: *Somebody Else s Problem*)\n\n* **Who has the D?** -  Deciding how to decide more effectively\n\n\n\n## 	Leadership	Lecture	2012
15772	What Does "Self-Organizing Team" Really Mean?	"Self-organizing team" may be the most over-used, mis-understood, vague, and mis-leading term of the decade.  So what is a self-organizing team? How are self-organizing teams different from other teams?  How can managers and team members get the self-organizing mojo going?  What are the challenges that self-organizing teams face? In this workshop, we'll explore all these questions and get beyond the buzzword.\n\n\n\n\n\n\n\n\n\n\n\n	Collaboration Culture & Teams	Workshop	2012
15779	High-Gravity Distributed Agile Teams	Distributed Agile can work, but distance often harms self-organization.  Typical reaction:  load down teams with tools and rigid structure.  Typical result: the death of self-organization.  The trick to effective distributed Agile teams is the same as for colocated Agile teams: give them focus, then get out of the way and let them form into a hive-mind. But how?\n\n\n\nDistributed Cognition is a technique from cognitive psych proven in helping teams go from  norming  to  performing.   Come explore how to create gravity that pulls your team together, rather than you pushing them.	Distributed Agile	Workshop	2012
15782	Using the Competing Values Framework & Five Dysfunctions to Improve Collaboration	It is not enough to tell the members of your team to be more collaborative.  Telling them to "try harder" is not a recipe for success.  Instead, improved results come from helping your team see the world in a different light, giving them new tools to use, and the opportunity to practice and fail before expecting mastery.  In our organization, and in many others that we have coached, there are two frameworks that have had the greatest impact.  The first is the Competing Values Framework.  The second is the framework taught by Patrick Lencioni in the "Five Dysfunctions of a Team".  In this session we will experience these tools, and explore how we have used them in the past, and how you might use them in the future.	Collaboration Culture & Teams	Workshop	2012
15783	Story Maps as Test Plans and Other Cross Cutting Guides	Test plans are often secondary to story tests (aka acceptance tests) for an individual story.While this helps focus on finding the value of a story, it often missing the mark in an enterprise setting where real value comes from delivering a collection of stories. Large scale (enterprise ) agility often goes beyond a single story and spans  stories and teams.  Story maps are an excellent tool for visualizing cross cutting needs like testing across stories and other challenges that cut across teams. \n\n\n\nStory maps are a simple and excellent tool that foster cross cutting thinking and learning. Along with connecting testers who care about testing that spans stories, story maps are also excellent tools for connecting other cross cutting perspectives: architecture, user experience, sub teams and end user documentation. This session will teach participants to use story maps to address the many challenges that face large scale (enterprise) agility. Participants will work in groups to utilize story maps as tools for situational challenges and realities faced by multi-team and distributed team agile usage.	Enterprise Agile	Workshop	2012
15787	The Tester s Role in Improving Developers' Testing Skills	The benefits of  making quality the responsibility of both developers and testers are increasingly recognized by Agile teams.  Such an approach improvesﾠaccountability, eliminates bottlenecks and allows testers to focus on the most complex and difficult testing issues.  However, getting developers engaged in non-code facing testing is often a challenge.\n\n\n\nThis presentation will detail two techniques - blitz testing and mentored testing, that we've developed at Atlassian that have been highly effective at not only engaging developers to undertake such testing, but also to gain the knowledge and skills they need to improve the quality of the software that they write.\n\n\n\nBlitz testing, widens test coverage, and involves regularly assembling an internal  SWAT  team to perform focused testing as a group for short periods. The roles within the group and the structure of the sessions are adapted to suit the various goals of the testing. Mentored testing, deepens test coverage, and involves a tester working directly with a developer to help guide the testing that developers perform, as well as a combination of paired and simultaneous test execution to help developers identify where and how to improve their testing.\n\n\n\nTogether, these practices result in developers who spend less time fixing their code and testers who are able to focus on complex testing challenges, enabling the team to improve quality without sacrifice.\n\n	Testing & Quality Assurance	Lecture	2012
15818	Extreme Interviewing Scale your Team, Preserve your Culture, Feel the Joy	A quick way to wreck your organizational culture is to hire someone with a great resume and no kindergarten skills. How can teams grow without sacrificing their communication, trust, and values?\n\n\n\nMenlo Innovations uses a peer-driven hiring process called Extreme Interviewing to help our team answer the question "Does this candidate belong on our team?"  In this workshop, we will show you how we interview dozens of candidates in a single evening by observing them as they work together instead of asking them questions. And you will see why candidates brought on as a result are a better fit for the culture of our team, which is a joyful thing indeed.	Collaboration Culture & Teams	Workshop	2012
15836	Agile approach launches NASA IV&V backlog into ORBIT	In 2008, Ken Ritchie [lead author] was recruited by Mac Felsing [co-author] and colleagues, incumbent contractors in the NASA IV&V Program, to lead the definition and implementation of an agile approach to Independent Verification & Validation (IV&V) processes. Changes were made to IV&V processes applied to evolving products and incremental releases of NASA's Constellation Program (manned exploration) [Reference 1]. The transformation scope was expanded to the then-emerging System Reference Modeling and Validation (SRMV) Product Line [Reference 2] at IV&V, and later to a number of IV&V project teams aligned with unmanned science and robotic missions, including the recently launched Mars Science Laboratory (MSL) aboard the Curiosity rover launched November 2011, due to land on Mars in August 2012.  During his 3 year tenure at NASA IV&V, Ken was also appointed to lead the Agile Process Tiger Team, chartered by the SRMV Management Working Group to assemble and publish an Agile FAQ and to assist IV&V teams in interpreting and applying the "Agile Concepts" first introduced to Constellation and then SRMV. \n\n\n\nThis presentation summarizes the authors' personal perspectives, reflecting on their collaborative experiences at NASA IV&V from 2008 through 2011, and does not necessarily represent the opinion of any government organization or its officials. \n\n\n\nAbout the authors: The authors began working together over 12 years ago as agile project mentors in the Professional Services Organization at TogetherSoft. In their next collaboration, they served as enterprise agile coaches as guests of SprintPCS.com (2001-2002). Mac Felsing co-authored the Prentice Hall (PTR) Coad Series book, *A Practical Guide to Feature Driven Development* in 2002. Both authors have experience speaking before numerous technical groups and various in professional venues. Ken was a speaker, presenter, and session chair for the 1991 IEEE International Conference on Systems, Man and Cybernetics, the NATUG-5 (Transputer Users Group) conference, an Ingres World, and the Potomac Chapter of the Human Factors Society.\n\n\n\n**[EXAMPLE EXCERPT]**  \n\n**Expected Benefits of Agile Approach to IV&V at NASA**  \n\n"  Frequent, tangible customer-valued results\n\n"  Small increments delivered in short cycles\n\n"  Customer-driven, prioritized backlog\n\n"  Rapid response to external change\n\n"  High discipline, low ceremony\n\n"  Predictable, shorter meetings\n\n"  Concurrent work flows\n\n"  Self-managing teams\n\n"  Realistic metrics\n\n[Reference 2]\n\n\n\nThe presentation will highlight several interesting points of view. \n\nWhat worked?  What didn't?  Why or why not? \n\nLessons learned and retrospective highlights.\n\nRecommendations for planning and implementation.\n\n\n\nIn this brief presentation, the authors will summarize their personal observations, analysis, and insights gained from their experience, together with selected references and excerpts from unrestricted documents published in the public domain. \n\nTIE-IN: A full-length presentation [to be proposed] will expand on this material.\n\n\n\n**ACRONYMS**  \n\nNASA: National Aeronautics and Space Administration (US)  \n\nIV&V: Independent Verification & Validation (program at NASA)  \n\nSRMV: System Reference Modeling and Validation (IV&V product line and processes)  \n\nORBIT: Observation, Requirements/Risks, Backlog, and Issue Tracking (system)  \n\n\n\n**REFERENCES**  \n\n[1] *Agile Exploration IV&V: An Agile ALM Approach For Constellation*, Ken Ritchie, et al, September 16, 2008, NASA IV&V, Fairmont, WV  \n\n[2] *Agile Concepts for IV&V: An Agile Product Approach For SRMV*, Ken Ritchie, et al, December 12, 2008, NASA IV&V, Fairmont, WV  \n\n	Insights - Experience Reports	Lecture	2012
15839	Overcoming Traditional Project Release Reporting with an Agile Approach Focused on Change	Overcoming Traditional Project Release Reporting with an Agile Approach Focused on Change\n\n=========================================================================================\n\n\n\nIntroduction\n\n============\n\n\n\nWe are a 30 year old product development shop with more than 450 technical people. For years we have been using a traditional approach to the reporting of progress on releases using traditional stage-gate and project management approaches.  The project management approach had been automated to a significant degree and was well entrenched within the organization.  A lot of the standard discussion on release reporting fails to address the legitimate concerns of executive management for this large a development group as it focuses on team rather than the organization needs.  If not addressed this creates resistance to the adoption of Scrum / Agile which, given all the other cultural issues that need to be addressed could seriously distract and even jeopardize the implementation.  What is required is an approach which maintains the integrity of the Scrum team approach while still providing data to the business that allows them to make decisions.\n\n\n\nWhen I say "traditional" reporting, what am I talking about?  I am talking about weekly schedules meetings to determine whether we are all on track, Microsoft Project based schedules with standard stage gates for approvals, pages and pages of documentation on current status, data held privately to the development shop and so on.\n\n\n\nWhen I say "maintains the integrity of Scrum team approach" what am I talking about?  I am talking about team based estimates using points, simple encoding on user stories to allow categorization of data, roll-up reporting to generate release and portfolio views from team views and a set of 5 simple reports that really do provide everything that everyone needs.\n\n\n\nPrinciples of Reporting\n\n=======================\n\n\n\nThe session explores the following general principles of release reporting and provides specific examples of use.\n\n\n\n* Make everything (I really mean this) available to everyone in the organization.\n\n* Make sure that reporting can be done simply, with no additional work required by the teams, and using simple approaches to categorize data.\n\n* Base release reporting on changes that we are seeing in the progress of the release project as opposed to reporting on the plan so that everyone can understand the current state of the plan.\n\n* Ensure that reports are the same at all levels (team, product release, portfolio), based on the same information (team based estimates and velocity) and producing the same results so that everyone is looking at their view of the same data.\n\n* Ensure that you interview "C" levels in your organization to understand their areas of interest in the reporting so that, again, everyone is looking at the same data and making their decisions by the same criteria.\n\n* Ensure there is a continuum of reporting that not only helps with business but more importantly helps the teams so that the data required by the business are a natural by-product of normal team work.\n\n\n\nQuestions\n\n=========\n\n\n\nHow did you uniquely scale, blend, adapt or evolve agile practices?\n\n-------------------------------------------------------------------\n\n\n\nStarting with the basic "release burn-up" chart sourced from team data (story point estimates and velocity), we developed and sold internally the notion that five simple reports would give us everything we need to run the business:\n\n\n\n* Release burn-up, with trend-lines: "I, as a Scrum Product Owner who is trying to optimize the delivery of a product release in terms of date, scope, and cost need a way to show what the current scope in the release and progress we are making toward it so that we can make well-informed trade-offs and commitments based on the reality of our company's capabilities."\n\n* Scope change report: "I, as a Scrum Product Owner who wants to communicate with the stakeholders need a way to show how the work for a release has changed from the original baseline to the current status so that everyone is really informed about the current status of the plan."\n\n* Epic progress report: "I, as a Scrum Product Owner who wants to understand the status of the release need a way to show how work is progressing against the major epics of the release so that I can make adjustments in the plan based on completion of these epics."\n\n* Investment allocation report: "I, as a Scrum Product Owner who wants to make good investment decisions need a way to show how work is split in terms of the basic investment categories management report against so that I can make predictions for future plans based on history and make adjustments during execution of a release when these assumptions do not work out."\n\n* Project allocation report: "I, as a Scrum Product Owner who wants to make good investment decisions need a way to show how work is split in terms of the next release and existing fielded releases the Scrum Team is working on so that I can make predictions for future plans based on history and make adjustments during execution of a release when these assumptions do not work out."\n\n\n\nThe only adjustments required to produce the reports were some simple attribution on the user stories which the Product Owners were glad to do since it gave them the information that they could use.\n\n\n\nWhat mistakes did you make? What insights have you gained that others need to know about?\n\n-----------------------------------------------------------------------------------------\n\n\n\nThe biggest mistake I made was underestimating the amount of inertia associated with the traditional reporting model.  What I should have done was simply tackle this issue much earlier.  If I had done this I suspect that there would have been less managerial resistance to the adoption of agile.  A second mistake I made was not supplying better templates to produce the information required.  This lead to confusing when amongst the people that wanted to do this reporting since they virtually had to learn how to do it themselves.\n\n\n\nWhat was it like integrating agile development into to the rest of your organization?\n\n-------------------------------------------------------------------------------------\n\n\n\nThe issue of release reporting became an impediment.  I used to think "those management people just do not understand the whole 'agile' concept."  I thought they wanted project reporting against "the plan."  I found out they did have legitimate concerns that we were not addressing.  What they actually wanted was standardize reporting that answered key questions about "where are we", "are we heading in the right direction", "when do we expect something", "what decisions need to be made today" and so on.  While I am sure they would have liked to have a predictable plan, it was my understanding that they were asking for traditional reporting.  Nothing could be further from the truth.  By taking the time to understand the requirements (capturing them as user stories) I could take the issue off the table which meant that we ended up with a smoother transition.\n\n\n\nHow successful were you in overcoming challenges? What challenges remain?\n\n-------------------------------------------------------------------------\n\n\n\nThe main challenge that remains is moving to this work to a tool so that we can automate the process.  We have sold the concepts, are producing the reports manually but it is taking time when it should be easy to automate.\n\n\n\nIf you ve been doing agile development for some time, how have your values or ways of working changed? What are you doing now and why?\n\n--------------------------------------------------------------------------------------------------------------------------------------\n\n\n\nLesson learned - don't let your assumptions about others lead you to thinking that you understand everything.  As an agile coach you can easily fall into the trap of hubris.\n\n\n\n\n\n	Insights - Experience Reports	Lecture	2012
16674	Teams are made of People! Personal Kanban for healthy self-organization and real-time	Sample questions include:\n\nHow does Personal Kanban contribute to team self-organization?\n\nWhy should we focus on the people so much, isn t it more important to fill the right roles with the right skills?\n\nPeople need processes and tools to do their work, what methods and tools do you recommend?\n\nWhat s the difference between healthy and unhealthy self-organization, and how can I tell what s going on on my team?	No Bull Know How	Workshop	2012
16676	The Nature of Software Development: Getting twenty pounds of fantasy into a five pound bag	Are you saying we shouldn t estimate?\n\nWhen do fantasy and reality most often collide on software projects?\n\nWhat s this got to do with agile?\n\nIsn t agile software development about delivering what the customer wants, no matter what?\n\nWhat are the secrets of good estimating?	No Bull Know How	Workshop	2012
16677	Testing As We Go: Perspectives on Testing as part of Done	How does Testing fit into the definition of Done?\n\nIsnﾼt meeting the quality standards everyoneﾼs job?\n\nWhat is the role of Testers on an agile team?\n\nHow do you keep from doing all the testing at the end of the sprint?\n\nDoesnﾼt going agile mean that software development doesnﾼt need Testers anymore?	No Bull Know How	Workshop	2012
16678	Coaching is More than Telling People What to Do	How is an agile  coach  the same or different than a scrum master or technical lead?\n\nWhy does agile put such an emphasis on coaching?\n\nWhat s the role of an agile coach and how is it the same or different than a project manager?\n\nDoes an agile coach focus only on the dev team or do they get involved with coaching product owners and testers too?\n\nWhat does an agile coach do besides running meetings?	Coaching & Mentoring	Workshop	2012
16679	Israel Gat No Bull session	Why does organizational culture matter?\n\nIsn t adopting agile all about changing the culture?\n\nWhat does culture have to do with technical debt or devops?\n\nHow have your experiences as an executive made you think about culture change?\n\nWhen is the right time to think about culture?	No Bull Know How	Workshop	2012
16680	Craftsmanship or "The only way to go fast is to go well"	Isnﾼt agile all about delivering faster?\n\nWhat does craftsmanship have to do with architecture and design?\n\nWhy should I invest in strengthening my programming skills, and where do I start?\n\nWhatﾼs the definition of  clean code ?\n\nNo one else cares about code quality where I work, why should I?	No Bull Know How	Workshop	2012
16681	Cultivating Innovation for the 21st Century Workplace	What role does innovation play in agile software development?\n\nWhy does the 21st Century workplace need to be any different than the 20th century workplace?\n\nWhat is a collaborative workspace and why does it matter?\n\nI work in an IT department of a large organization, why should I care about innovation?\n\nWhat are the hallmarks of a new economy and how does it affect team members or managers?	No Bull Know How	Workshop	2012
16682	The product owner role is a stupid idea: Improving how we handle customer requests	My team takes a lot of time to write user stories in a standard format, what else can we do to develop a good backlog?\n\nAren t user stories just slimmed down use cases?\n\nHow does the team start work if you don t do requirements gathering?\n\nWhat alternatives have you seen to having a product owner/customer proxy on the team?\n\nWhat are the characteristics of a good product manager?\n\n	Business Value and Working With Stakeholders	Workshop	2012
16686	Managing a collaborative multi-national team in real time	Team WIKISPEED entered a $10 Million competition to produce road legal 100+ mpg cars. They built the impossible in three months. Joe Justice will talk about Agile practices applied to enormously speed up physical manufacturing. Joe leads WIKISPEED, a team of 71 volunteers in 6 countries, and walks through how their 100 MPG road car was made possible through modular design, iterative development, and Agile project management. Joe takes a deep dive on exactly how Agile from software projects is applied to physical engineering and manufacture. Joe will use the example and of the design and development of their revolutionary 100 mpg, gasoline powered, four-seat car with a target price of $17,995.\n\n\n\nThis ground breaking work expands the agile process to design and manufacturing of the car. The talk will provide tools and take-aways for engineers and executives, in manufacturing and software, looking to improve their processes. New professionals and students can see examples of the value found in pairing, prioritized backlog driven development, and extreme programming, as they see the methodology jump from software teams to research, manufacturing, and product engineering.\n\n\n\nFor those who have participated in WIKISPEED talks before, this session will be the deepest dive into Agile, Kanban and Lean applied to conquer a highly regulated industry with large, distributed collaborative teams.\n\n	Keynote	Lecture	2012
16687	Scaling up Excellence	Scaling up Excellence	Keynote	Lecture	2012
16688	 Adventures of an Accidental Entrepreneur. A High Tech Teleradiology Venture from India	This presentation traces the journey of a one man one room company in India started by a Doctor without a job, to its present status as the number 1 nationally ranked teleradiology company in the United States. Lessons learnt along the way of this unlikely journey are lessons for all entrepreneurs and employees. The convergence of technology and healthcare is brought alive in this session by a Yale trained Pediatric Cardiologist turned India based health care entrepreneur.	Keynote	Lecture	2012
16689	Software Change in the Solo Iterative Process:  An Experience Report	This paper reports an experience of a solo programmer who added a new feature into an open source program called muCommander. The process is observed on two granularities: Granularity of software change (SC) and granularity of Solo Iterative Process (SIP). The experience confirms that both SC and SIP process models can be successfully enacted, are able to implement the described feature, and produced a high quality code in reasonable time. The lessons learned, particularly the exit criteria for SC phases, are discussed in more detail in the paper.	Research at Work	Lecture	2012
16690	Knowledge Management in Distributed Agile Software Development	Software development teams need highly valuable knowledge to carry out knowledge-intensive development activities. Agile teams are cross-functional teams that promote sharing of project-specific knowledge through frequent face-to-face interaction, effective communication and customer collaboration. Knowledge sharing is difficult for distributed Agile teams due to spatial, temporal, and cultural barriers, which negatively affect face-to-face interaction, communication and collaboration. There seems to be very few studies that focus on knowledge management in distributed Agile teams. Through a Grounded Theory study that involved 45 participants from 28 different software companies in the USA, India and Australia, we investigate distributed software development from the specific perspective of Agile teams. In this paper, we describe how Agile teams gather, store, share and use knowledge in distributed software development.	Research at Work	Lecture	2012
16691	A Methodology for Assessing Agile Software Development Methods	Agile methods provide an organization or a team with the flexibility to adopt a selected subset of principles and practices based on their culture, their values, and the types of systems that they develop. More specifically, every organization or team implements a customized agile method, tailored to better accommodate its needs. However, the extent to which a customized method supports the organizational objectives, i.e. the  goodness  of that method, is questionable. Existing agile assessment approaches focus on comparative analyses, or are limited in scope and application. In this research, we propose a structured, systematic, and comprehensive approach to assessing the  goodness  of agile methods. We examine an agile method based on (1) its adequacy, (2) the capability of the organization to support the adopted principles and practices specified by the method, and (3) the method s effectiveness. We propose the Objectives, Principles and Practices (OPP) Framework to guide our assessment. The Framework identifies (1) objectives of the agile philosophy, (2) principles that support the objectives, (3) practices that are reflective of the principles, (4) linkages among the objectives, principles and practices, and (5) indicators for assessing the extent to which an organization supports the implementation and the effectiveness of that practice. In this paper, we discuss our solution approach, preliminary results, and future work.\n\n	Research at Work	Lecture	2012
16692	Agile Testing: Past, Present, and Future	Testing has been a cornerstone of agile software development methodologies since early in the history of the field. However, the terminology used to describe the field   as well as the evidence in existing literature   is largely inconsistent. In order to better structure our understanding of the field and to guide future work, we conducted a systematic mapping of agile testing. We investigate five research questions: which authors are most active in agile testing; what is agile testing used for; what types of paper tend to be published in this field; how do practitioners and academics contribute to research in this field; and what tools are used to conduct agile testing? Of particular interest is our investigation into the source of these publications, which indicates that academics and practitioners focus on different types of publication and, disturbingly, that the number of practitioner papers in the sources we searched is strongly down since 2010.\n\n	Research at Work	Lecture	2012
16693	User Experience Design Goes Agile in Lean Transformation   A Case Study	This paper describes the results of a single-case case study, exploring the role of user experience (UX) work in agile software development. The case study company is a large multinational telecommunication company undergoing a lean transformation process. In this case, lean transformation includes the adoption of agile software development practices. Transformation to agile practices had taken place one year prior to the analysis. The analysis is based on documentation analysis and semi-structured interviews of seven software development professionals. The results show that there were difficulties integrating UX design and software engineering work in an agile and iterative manner. The transition process succeeded in shifting UX and related documentation to a central planning role. The roles of the UX designers in the teams were still under re-definition. There was also a clear need to establish new ways of collaboration between UX professionals and software designers.\n\n	Research at Work	Lecture	2012
16694	Estimate of the appropriate iteration length in agile development by conducting simulation	"Agile development refers to the group of software development methodologies based on an iterative and incremental process model. It divides the development period into short time frames called iterations and uses a body of knowledge obtained from past experience called practice to ensure agile software development Although the iteration length is an important factor in agile development however it has so far been decided by the qualitatively and it has been reported that projects with an inappropriate iteration length are more preme to failure. \n\nWe thus propose a new methodology for estimating an appropriate iteration length through the conduct on of a simulation based on project constraints. \n\nIn this study we first, propose a method of calculating an appropriate iteration length for a particular project to promote the easy use of agile development. \n\nSecond, the relationship between the iteration length and project constraints was investigated by varying the parameters to create diverse situations. "\n\n	Research at Work	Lecture	2012
16695	Agile Development and User Experience Design Integration as an On-going Achievement in Pra	Little is known about how Agile developers and UX designers integrate their work on a day-to-day basis. While accounts in the literature attempt to integrate Agile development and UX design by combining their processes and tools, the contradicting claims found in the accounts complicate extracting advice from such accounts. This paper reports on three ethnographically-informed field studies of the day-to-day practice of developers and designers in organisational settings. Our results show that integration is achieved in practice through (1) mutual awareness, (2) expectations about acceptable behaviour, (3) negotiating progress and (4) engaging with each other. Successful integration relies on practices that support and maintain these four aspects in the day-to-day work of developers and designers.\n\n	Research at Work	Lecture	2012
16696	Documentation Work in Agile Teams: The Role of Documentation Formalism in Achieving a Sust	As its second guiding principle, agile software development promotes working software over comprehensive documentation. In this paper we investigate alignment between two different documentation practices and agile development. We report upon an experiment conducted to explore the impact of formalism and media type on various dimensions of documentation practice in agile teams. 28 students in 8 teams were divided into two groups: SAD and UML. Group SAD was to update and deliver their high-level software architecture in form of a textual description defined by RUP templates. Group UML was instructed to update and deliver their low-level software design in form of UML models. Our results show that iterative documentation practices led to more extensive and more detailed textual documentation. We found that writing documentation was perceived as a intrusive task leading to task specialization and allocation of documentation to less qualified team members. Consequently, this hampered collaboration within the team. Based in our findings, we suggest that if documentation is to be delivered with the project, producing documentation should be communicated and accepted by the team as a proper product. Furthermore, we argue that codification of internal development knowledge should be a non-intrusive task.\n\n	Research at Work	Lecture	2012
20108617	ADAPTing to Agile for Continued Success	Agile software development has had more of an influence and has become more widespread than any early practitioner could have imagined. Yet some still call agile a failure. They point to the fact that few teams have achieved the 10x productivity or quality gains that the best agile teams have shown us are possible. They rightly state that partial, half-hearted agile implementations are common. These are real obstacles, yes. But evidence of failure? No. Success with agile development is not binary. No teams are perfect - few have achieved the full benefits of being agile - but most who have begun the journey to embrace agile are better than they were.\\nWe succeed by iterating toward becoming more and more agile. Join me as we explore the five stages of the ADAPT model, a sustainable approach for both getting started with and getting better at agile. By creating Awareness, increasing Desire, developing Ability, Promoting successes, and Transferring the implications of being agile to the rest of the organization (ADAPT), we not only become progressively more agile, we also create a solid foundation on which to continue the industry-wide march toward continued organizational success.	Keynotes	Keynote	2010
20108618	Industry Analyst Roundtable: Agile Trends and Future Directions		Special Events	Panel	2010
\.


--
-- Data for Name: speakers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY speakers (id, name) FROM stdin;
1	Alistair Cockburn
2	Dave West
3	Richard P. Gabriel
5	Daniel Steinberg
6	Tom Kubit
7	Alan Airth
8	Gary Pollice
9	Granville Miller
10	Ken Schwaber
11	Scott Ambler
12	Hakan Erdogmus
13	Ward Cunningham
14	Brian Marick
16	Bill Kleb
17	James Caristi
18	Randy Miller
19	Ken Auer
20	Steven Fraser
21	Rachel Reinitz
22	Zhon Johansen
23	Dave Thomas
24	Barry Boehm
25	Kuryan Thomas
26	Arlen Bankston
28	Ron Jeffries
29	Michael Hill
30	Laurie Williams
31	Robert Kessler
32	Holger Breitling
33	Martin Lippert
34	John Goodsen
35	Lisa Crispin
36	Tip House
37	Jutta Eckstein
38	Richard Hightower
39	James Grenning
40	Martin Fowler
41	Pramod Sadalage
42	Peter Schuh
43	Joshua Kerievsky
44	Diana Larsen
45	Paul Hodgetts
46	Chet Hendrickson
47	Ann Anderson
48	Lowell Lindstrom
49	Bret Pettichord
50	David Stotts
51	Grigori Melnik
52	Adam Geras
53	Scott Henninger
54	Frank Maurer
55	Watts S. Humphrey
56	Duff O'Melia
4	Fernando Naveda
57	Jim Highsmith
59	Craig Larman
60	Jeff De Luca
61	Larry Constantine
63	Lucy Lockwood
64	Janet E. Danforth
65	Mary Poppendieck
66	Tom Poppendieck
68	Steve Berczuk
69	Mary Lynn Manns
70	Linda Rising
72	Jim Little
73	Michael Spayd
74	Jari Vanhanen
75	Rick Mugridge
76	Joseph Blotner
77	Russell Hill
78	Brian Boelsterli
79	Christ Vriens
81	Gery Derbier
82	David Kane
83	Christian Sepulveda
84	Jeff Patton
85	Jennitta Andrea
86	Curtis Cooley
87	Christine Moore
88	Clyde Cutting
89	Gary Jedynak
90	Helen Sharp
91	Hugh Robinson
92	William E. Caputo
93	John Nolan
94	Rachel Davies
95	Russ Rufer
96	Tracy Bialik
97	Randy Stafford
98	Sanjiv Augustine
99	Bob Payne
100	Ellen Gottesdiener
101	Laura Hill
102	Michael Van de Vanter
103	Pete McBreen
104	David Socha
105	Jeff McKenna
106	Forrest Shull
108	Mike Cohn
109	Ron Crocker
112	Eric Evans
113	Rebecca Wirfs-Brock
115	Luke Hohmann
116	Jim Newkirk
117	Anuja Shukla
118	Annie Antón
119	Lucas Layman
120	Lynn Cunningham
121	Angela Martin
122	Robert Biddle
123	James Noble
124	Tuomo Kähkönen
125	Yoshihito Kuranuki
126	Kenji Hiranabe
127	Greg Luck
133	Alan Harriman
134	Michael Leo
136	Bill Greene
137	Colin R
139	Bruce Eckfeldt
140	Todd Little
141	Tim Mackinnon
142	Michael Royle
143	Marjorie Farmer
144	Darin Cummins
145	Amy Law
146	Allen Ho
147	Nancy Van Schooenderwoert
148	Ron Morsicato
149	Jeff Langr
151	Dan North
152	Richard Watt
154	Jeff Grover
156	Debbie Utley
157	Bob Evans
158	Ken Scott-Hlebek
160	John Brewer
162	Ole Jepsen
164	Joe Walnes
165	Janet Gregory
168	Alan Cameron Wills
170	Scott Duncan
173	Rilla Khaled
174	Pippin Barr
130	Alan Gray
131	Cormac Driver
129	Shiu Lun Tsang
128	Andrew Jackson
107	Manish Shah
175	Jeremy Brown
177	Kay Johansen
178	John Daniels
181	Esther Derby
186	David Kramer
187	Jean Tabaka
188	Boris Gloger
189	Anko Tijman
196	Orit Hazzan
198	Yael Dubinsky
199	Michele Sliger - Author
201	Max Baumann
202	Gil Broza
203	Julias Shaw
204	Duncan Pierce
205	Pollyanna Pixton
206	Jeff Nielsen
207	Ryan Martens
211	Roy I. Morien
212	Salim Nair
213	Prasad Ramnath
214	John Major
215	Arlo Belshee
216	Moses Hohman
217	Marilyn Lamoreux
218	Matt Ganis
219	Joe Bergin
220	Barg Upender
221	Rex Madden
222	John Horowitz
223	Constance M. Tartaglia
225	Richard K Cheng
226	Steven W. Baker
227	David J. Anderson
228	John J. Cunningham
229	John Mc Cormick
230	Ajay Danait
231	Monica Yap
232	Lynn Miller
233	Andrew Takats
234	Nathan Brewer
235	Prashant Gandhi
236	Nils Haugen
237	Mike Hill
238	Ralph Bohnet
239	Gerard Meszaros
240	Mark Striebeck
241	Jon Spence
242	Shawn Learn
243	Steve Freeman
245	Robert S. Sfeir
246	Pam Rostal
247	David West
249	Christopher Avery
250	Tobias Mayer
251	Christian Hessler
252	Dave McMunn
253	Richard J. Watt
254	David Leigh-Fellows
255	Erik Meade
256	Timothy Wall
257	Dave Astels
258	Kent Beck
259	Dale Emery
260	Chris Mann
263	Cyril M. Coupal
265	Andy Tinkham
266	Cem Kaner
267	Joseph Chao
268	Kris Read
269	Mike Griffiths
270	Kelli M. Slaten
271	Sarah B. Berenson
272	Hubert Smits
277	Bob Martin
282	Tim Snyder
283	David Hussman
284	Gareth Powell
285	Jeff Sutherland
286	Michael Bolton
287	Dan Rawsthorne
288	Keith Braithwaite
289	Anthony Cabri
291	Tamara Sulaiman
292	Brent Barton
293	Bill Wake
295	Bob Schatz
296	Sam Newman
297	Rob Westgeest
298	Tjakko Kleinhuis
299	Ashley Johnson
300	Rich Phillips
301	Maayan Goldstein
302	Yishai Feldman
303	Chih-Wei Ho
304	Michael J. Johnson
305	Peter George
306	Mikko Korkala
307	Pekka Abrahamsson
308	Alex Pukinskis
309	Willem Van Den Ende
310	Marc Evers
311	Deborah Hartmann
312	Robin Dymond
313	Mike W Hill
314	Emmanuel Gaillot
315	Laurent Bossavit
316	Ibrahim Abdelshafi
317	Steven Baker
318	Rod Coffin
319	Joseph Bergin
320	Carlton Nettleton
321	Troy Frever
322	Paul Ingalls
323	Jason Nocks
324	Dorothy Tudor
325	Geoff Hardy
326	Desi McAdam
328	Steve Adolph
329	David Talby
330	Gulgunes Atli
200	Alicia Yanik
191	Paul Rogers
332	Michael Feathers
333	Jez Humble
334	Chris Read
335	Yuri Khramov
336	Bill Curtis
337	Israel Gat
338	Ben Hogan
339	Paul King
340	Cynthia Andres
341	Alex Ruiz
342	Naresh Jain
343	Hugh Beyer
344	Bas Vodde
345	Owen Rogers
346	Linsley Meadows
347	Laura Waite
348	Jeff Honious
349	Jonathan Clark
350	Joseph Pelrine
351	Dan Pierce
352	Eric Sivertson
353	Kelly Weyrauch
354	Beatrice Düring
355	Emma Parnell-Klabo
356	David Williams
357	Chris McMahon
358	Valerie Trapa
359	Santhpur Rao
360	Mara Yale
361	Richard Lawrence
362	Blas Yslas
363	Michele Sliger
364	Lance Young
365	Ken Pugh
366	Mitch Lacey
367	Antawan Holmes
368	Marc Kellogg
369	Micah Alles
371	Jeff McClure
372	Johanna Rothman
373	Janice Aston
374	Stacia Heimgartner
375	Melody Locke
376	Michael Puleio
377	Alan Shalloway
378	Doug DeCarlo
379	Fred Grossman
380	Shiu Lun Tsang
381	Alan Gray
382	Carol Wellington
383	Thomas Briggs
384	Michael Wainer
385	Micah Martin
386	Michael Hamman
387	David DeWolf
388	Brian Robertson
389	Jonathan Rasmusson
390	Daniel Poon
391	Tim Lister
392	Brad Wilson
393	Kevin Taylor
394	George Walter
395	Jonas Hult
396	Wade Lee
397	Dr. Gareth Powell
398	Joseph Beckenbach
399	Christian Hargraves
400	Chris Sterling
401	Bryan Stallings
402	Chris Fry
403	Steve Greene
404	Willem van den Ende
405	Aaron Ruhnow
406	James Shore
407	David Naffis
408	Matt Scilipoti
409	Mark Pushinsky
410	James Gamble
411	Bob Maksimchuk
412	Veljko Krunic
413	Lance B. Young
414	Matt Fletcher
415	William Bereza
416	Phillip Smith
417	Chris Garber-Brown
418	Alex Chaffee
419	Edward Hieatt
420	Susan Ershler
421	Dan Mezick
422	Brian Mezick
423	Brian Button
424	Rhys Keepence
425	Ronald Jeffries
426	Pete Behrens
427	Von Rhea
428	Sue Holstad
430	Alan Armitage
431	Peter Wisniewski
432	Ahmed Sidky
433	Lan Tran
434	Kent McDonald
435	Chris Matts
436	Olav Maassen
437	Ron Hulen
438	Andria Barber
439	Richard Moore
440	Kelly Reff
441	Brian Hackerson
442	Jim Graham
443	Dave Nicolette
444	Karl Scotland
445	Brian Shoemaker
446	Jim York
447	Alan Ridlehoover
448	Michael Phoenix
449	Paul Dupuy, Jr.
450	Rand Huso
451	Michael Vax
452	Thomas Seffernick
453	Peter Hodgkins
454	Brian Hanks
455	Joe Little
456	Alexia Bowers
458	Ash Tengshe
459	Scott Noble
460	Carol A. Wellington
461	Charley Baker
462	Steven List
463	Tyler Jennings
464	Dave Hoover
465	Kelvin R. Boechler
466	Dr. Cyril Coupal
467	Evan Campbell
468	Werner Wild
471	Justin Yaros
472	Al Goerner
473	George Dinwiddie
474	Matthew Plante
475	Johanna Hunt
476	Tom Hume
477	Devi Lozdan
478	Jake Dempsey
479	Brian Knorr
480	Julio Cesar Sanchez
481	E. Michael Maximilien
482	Rich Jochems
483	Shane Rodgers
484	Mickey Phoenix
485	David Koontz
486	Philip Johnson
487	Hongbing Kou
488	Mishkin Berteig
489	Niel Nickolaisen
490	Scott Miller
491	Bill Bereza
492	Lasse Koskela
493	Roland Cuellar
494	Oksana Udovitska
495	Wendy Friedlander
496	Chris Doss
497	Kara Silva
498	Dean Wampler
499	David Chelimsky
500	Robert C Fischer
501	Sarah Edrie Oliveira
502	Susan Borges
370	David Crosby
469	Barbara Weber-Willem
503	Jennifer Gilmore
504	Ronica Roth
505	Amy J. Zuckerman
506	Sarah Beecham
507	Nathan Baddoo
508	Tracy Hall
509	Gordon Cloke
510	Philippe Kruchten
511	Sean Cohan
512	Michael Gallaher
513	Chris Eldredge
514	Elizabeth Whitworth
515	Bobby Norton
516	Jennifer Ferreira
517	Steve Baker
518	Joseph Thomas
519	Surja Sutanto
520	Gabrielle Benefield
521	Brian Takita
522	Brian Lyons
523	Nate Oster
524	Bill McMichael
525	Marc Lombardi
526	Stacia Broderick
528	Kent Johnson
530	Shaun Bradshaw
531	Jay Packlick
532	Jason Chong Lee
533	D. Scott McCrickard
534	Sallyann Freudenberg
535	Pablo Romero
536	Benedict du Boulay
537	Hai Ton
538	Martin Jul
539	Megan Sumrell
540	Mike Roberts
541	Jean McAuliffe
542	Kjetil MolÃ¸kken-Ã˜stvold
543	Kristian Marius Furulund
544	Neal A. Febbraro
545	Vaclav Rajlich
546	Heather Williams
547	Andrew Ferguson
549	Bob Myers
550	Thom W. Vincent
551	Paul W Pagel
552	James Suchy
553	Ade Miller
554	Eric Carter
555	Julie Chickering
556	Lisa Shoop
557	Michael Holzer
558	Chad Woolley
559	Geoffrey Bache
560	Paul Beavers
561	Harprit Grewal
562	Ajoy Krishnamoorthy
563	Stephanie Saad
564	Michael Granetz
565	Gina McCabe
566	Jeffrey Fredrick
567	Julian Simpson
568	Shane Duan
569	Rolf Russell
570	Chad Wathington
571	Wang Pengchao
572	Jamie Dobson
573	Rand Bradley
574	Erik M Gottesman
575	Brian Carter
576	Andy Powell
577	Alex Vandenberg
578	Vivake Gupta
579	Michael England
580	Andre Brissette
581	Francois Beauregard
582	Scott Coburn
583	Rajeev Bellubbi
584	Michelle Williams
586	Nicolas Mangin
587	Steve Bockman
588	Tom Sulston
589	Paul Julius
590	Charlie Rudd
591	Brad Murphy
592	Mike Lowery
593	Scott Gatz
595	Ilio Krumins-Beens
596	Jamie Dinkelacker
597	Jeff Ward
598	Bill Schneider
599	Scott Gilbert
600	Shyam Mohan
601	Manfred Lange
602	Darren Rowley
603	Guy Pshigoda
604	Tiran Dagan
605	Rodney Bodamer
606	Sergei Andrzeevski
607	Markus Hjort
608	Kirk Knoernschild
610	Claire Dormann
611	Julie Brooks
612	Peter Provost
613	Ted Velkoff
614	Narti Kitiyakara
615	Joseph Graves
616	Jeanne Lewis
617	Kevin Neher
618	Bob Galen
619	Matthias Marschall
620	Erich Gamma
621	John Wiegand
622	Raymond Boehm
623	William Krebs
624	Ted Rivera
625	Noura Abbas
626	Andrew M Gravell
627	Gary W Wills
628	Alan Kelon Oliveira de Moraes
629	Silvio Romero de Lemos Meira
630	Jones Oliveira de Albuquerque
631	Nick Naumovich
632	Gil Luria
633	Tali Seger
634	Kendra Cooper
635	Kunwu Feng
636	Meli Lempert
637	Yan Tang
638	Kun Tian
639	Xavier Franch
640	Jason Jen-Yen Chen
641	Avi Yaeli
642	Jeff Sage
643	Constanta Nicoleta Bodea
644	Tiziana Catarci
645	Stephen Kimani
646	Amanda Trosten-Bloom
647	Bernard F. Clark
648	Susan Sprague
649	Yin Zhou
650	Michael Homeyer
651	Michael E. Cottmeyer
652	Judith Good
653	Gagan Dhillon
654	Doug Rosenberg
655	Don McGreal
656	Michael McCullough
658	Danilo Sato
659	Mariana Bravo
661	Brandon Carlson
662	Susan Shaye
663	Pat Reed
664	Charles Suscheck
665	Tim Walker
666	Christopher R Chapman
667	Sarah Edrie
668	Erik Lundh
669	David Douglas
670	Liz Sedley
671	Scott Dillman
585	Eric Groise
657	Garry Berteig
672	lisa shoop
673	Lyssa Adkins
674	Mike Cottmeyer
675	Brian Sondergaard
676	Patrick Wilson-Welsh
677	Mark Isham
678	Henrik Kniberg
679	Dennis Lloyd Jr
680	Sebastian Meine
681	C. Keith Ray
682	Alex Aizikivski
683	Vandana Shah
684	Ainsley Nies
685	Fumihiko Kinoshita
686	Craig Smith
687	Kevin Wagoner
688	Steve Johnson
689	Per Kroll
690	Richard Lyon
691	Marcus Evans
692	Rene Barto
693	Eric Babinet
694	Rajani Ramanathan
695	Rasmus Mencke
696	Matthew D Edwards
697	Lynne Ralston
699	David Spann
700	Rachel Weston
703	Bernard Notarianni
705	Kelly Snavely
706	Tania Broome
707	Christoph Steindl
708	Christian Federspiel
709	Javid Jamae
710	Alexandre Boutin
711	FranÃ§ois Bachmann
712	Yves Hanoulle
713	Alain DÃ©silets
714	Greg Hutchings
715	Pascal Van Cauwenberghe
716	Portia Tung
717	Arnaud Bailly
718	Gilles Mantel
719	Jennifer Gonsalves
720	Elizabeth Keogh
722	Jeremy Kominar
723	Brian Foote
724	Douglas Shimp
725	Giora Morein
726	George Schlitz
727	Cynick Young
728	Hiroki Terashima
729	Brian Drummond
730	JF (John Francis) Unson
731	Stephen Michaud
732	Jagadish Shrinivasavadhani
733	Vinod Panicker
734	Jane Robarts
735	Mark Summers
736	Jamie Allsop
737	Guido Schoonheim
738	Edward Uy
739	Nikos Ioannou
740	Syed Rayhan
742	Lars Arne SkÃ¥r
743	Jan-Erik Sandberg
744	Chris Sims
745	Wes Williams
746	Mike Stout
747	Elaine Therrien
748	Gregg Pollack
749	David Starr
750	James Newkirk
751	Andy Maleh
752	Mike Stockdale
753	Maciej Zawadzki
754	Sreekanth V
755	Ben Rady
756	Bill Hanlon
757	Neal Ford
758	Ram Singaram
759	Jonathan de Halleux
760	Nikolai Tillmann
761	Szczepan Faber
762	Graham Brooks
763	Andrew Rendell
764	Ryan Hoegg
765	Yvonne Price
766	Ken Collier
767	Bonnie Aumann
768	Michael Tardiff
769	Michael Elbaz
770	Keith Nottonson
771	Kenneth DeLong
772	Erik Moore
773	John Spens
774	Joe Ryan
775	Rob Scudiere
776	MaryLynn Manns
777	Roger Valade
778	Jasper Goos
779	Alfo Melisse
780	Nicola Dourambeis
781	Michael Maham
782	Timothy Brown
783	Tsutomu Yasui
784	Yukie Kushida
785	Kalpana Sureshchandra
786	Mun-Wai Chung
787	Sofyan Nugroho
788	Eric Lee
789	Anne Moon
790	Joe Fecarotta
791	Sumit Gupta
792	Steven "Doc" List
794	Mike Russell
795	Amy Levine
796	Ken Long
797	Robyn Johnson
798	Mary Beth Snapp
799	Diane Dagefoerde
800	Amr Elssamadisy
801	Jochen (Joe) Krebs
802	Alan Goerner
803	Lisamarie Babik
804	Clement "James" Goebel
805	Christian Reis
806	RÃ©gis Medina
807	Thomas Nilsson
808	Aaron Sanders
809	Lee Devin
810	Corey Ladas
811	Mark Smith
812	Staffan Noteberg
813	Michael Nygard
814	Vinayak Joglekar
815	Graham Oakes
816	Patrick Debois
817	Nicole Belilos
818	Riaan Rottier
819	Victor Rodrigues
820	Carsten Jakobsen
821	Mario Cardinal
822	Clinton Keith
823	Chris Spagnuolo
824	Andrea Leszek
825	Catherine Courage
826	Kealy Opelt
827	Tom Perry
828	Dhaval Panchal
829	Joseph Little
830	Andy Pols
831	Ryan Shriver
833	Artem Marchenko
834	Thad Scheer
835	Joseph C Thomas
836	Mike Register
837	Tod Golding
838	Teresa Franklin
839	Alan de Ste Croix
704	Chris Louvion
701	Clarke Ching
832	Evan Campbell
702	Graeme Thomas
741	Nimat Haque
841	Angela Vinci
842	Takeshi Kakeda
843	Todd Zaki Warfel
844	Indi Young
845	Jeff White
846	Jim Ungar
847	Dan Harrelson
848	Leah Buley
849	Peter Roessler
850	Anshu  Agarwal
851	William Pietri
852	Amanda Willoughby
853	Kate Rutter
854	Ian Swinson
855	Jason Winters
856	Luke Barrett
857	Maryam Najafi
858	Len Toyoshiba
859	Josh Evnin
860	Marjorie Pries
861	David Broschinsky
862	Lisa Baker
863	Jade Ohlhauser
864	Theresa Smith
865	Mona Singh
866	Damon Poole
867	Joshua Sherwood
868	Xin Wang
869	Christian Gruber
870	Fabrizio Cannizzo
871	Raghav Ramesh
872	Rene Rosendahl
873	Paul Moser
874	Xavier Warzee
875	Ilja PreuÃŸ
876	Joshua Graham
877	David Vydra
878	Johannes Link
879	John Tangney
880	Dalton Cranston
881	Andres Almiray
882	Ixchel Ruiz
884	Emily Bache
885	Gojko Adzic
886	Marisa Seal
887	Adrian Mowat
888	Jon Bach
889	Scott Barber
890	Rafael Santos
891	James Lyndsay
892	James Bullock
893	Machiel Groeneveld
894	Kevin Brennan
895	Doug Bradbury
896	Bob Screptock
897	Dennis Byrne
898	Adam Goucher
899	Patrick Farley
900	Zak Tamsen
901	Robert Benefield
903	Brett Schuchert
904	David Nunn
905	Alistair McKinnell
906	Jason Cheong-Kee-You
907	Eric Jimmink
908	Tracy Beeson
909	Philippe Hanrigou
910	Stelios Pantazopoulos
911	Stephen  Marsh
912	Richard Sheridan
913	Dean Leffingwell
914	David Anderson
915	Michael Mah
916	Sue McKinney
918	Mark Federman
919	Nicolai Josuttis
920	Dirk Riehle
921	Peter  Morowski
923	Corey Haines
924	BJ Allmon
925	Jesse Fewell
926	Pat Maddox
927	Eric Smith
928	Eric Meyer
929	Tommy Norman
931	Christopher Taylor
932	Max Guernsey
933	Howard Deiner
934	John Smart
935	Pekka KlÃ¤rck
936	Elisabeth Hendrickson
937	Erik Petersen
938	Thomas Blomseth Christiansen
939	Bent Jensen
940	Daniel Vacanti
941	Anda Abramovici
943	Ken Howard
944	Arline Sutherland
945	Alan Atlas
946	Sean Stolberg
947	Tim Andersen
948	Luke Amdor
949	Justin Davis
950	Scott Downey
951	Marie Kalliney
952	Daniel Markham
953	Niklas BjÃ¸rnerstedt
954	David Kessler
955	Gabino Roche, Jr.
956	Belkis Vasquez
957	Lars Thorup
958	Bhaven Sheth
959	Sharlene McKinnon
960	Eleanor Starr
961	Alexandre Magno
962	Beth Cohen
963	Igor Altman
964	J.R. Jenks
965	Tim Hughes
966	David Morgan
967	Billy Belchev
968	Paul Baker
969	Eric Willeke
970	Hillel Glazer
971	Ken Kolchier
972	Chirag Doshi
973	ElMohanned Ahmed
974	Brian Victor
975	Noah Jacobson
976	Chris Shinkle
977	Mads Troels Hansen
978	Hans Baggesen
979	Chuck Maples
980	Erik LeBel
981	Isabelle Therrien
982	Brian Spears
983	Philip Abernathy
984	David Rico
985	Alan Padula
986	Justin Babuscio
988	Tom Illmensee
989	Alyson Muff
990	Michael Marchi
991	Kevin Fisher
993	Harry Koehnemann
994	David Wilby
995	Andre Frank
996	Judy Wankerl
997	Brandon Raines
998	Francis Lacoste
999	Rajesh Sharma
1000	Brian Wherry
1001	Steven Mak
1002	Laureen Knudsen
1003	Simon Orrell
1004	Rich Mironov
1005	Mark Levison
1006	Jurgen Appelo
1007	Julian Everett
1008	Barry Rogers
1009	Llewellyn Falco
1010	Daniel Gilkerson
1011	Tom Looy
987	Lily Cho
930	Michael Longin
1012	Alistair Jones
1013	Patrick Kua
1014	Sharon Buckmaster
1015	Stephen Palmer
1017	Hannu Kokko
1018	Ronaldo Ferraz
1019	Tiago Jorge
1020	Stevie Borne
1021	Daniel Wellman
1022	Paul Infield-Harm
1023	Andy Slocum
1024	Jake Scruggs
1025	Shane Hastie
1026	Rob Myers
1027	Eric Anderson
1028	Katarina Thomas
1029	Vasilios Pliakas
1030	Mike Sutton
1031	Catherine Connor
1032	Andrew Shafer
1033	Paul Nasrat
1034	Brian Bozzuto
1036	Jon Dahl
1037	Declan Whelan
1038	Joseph Yoder
1039	Min-Gu Lee
1040	Brad Appleton
1041	Peter Alfvin
1042	Desiree Sy
1043	Arin Sime
1044	Ken Clyne
1045	Darryl Bowler
1046	Wojciech Seliga
1047	Slawomir Ginter
1048	David Endicott
1049	Tim Brown
1050	Mik Kersten
1051	Malcolm Beaton
1052	Simon Bennett
1053	Steve Hayes
1054	Renzo Borgatti
1055	Joe Sokohl
1056	Francisco Trindade
1057	Ola Ellnestam
1059	Mack Adams
1060	Jenni Dow
1061	Christine DelPrete
1062	Paulo Caroli
1063	Sudhindra Rao
1064	Ron Carmel
1065	Jackson Fox
1066	Paul Rayner
1067	Luiz Claudio Parzianello
1068	Rafael Prikladnicki
1069	Matt Roadnight
1070	Una Walsh
1071	Greg Smith
1072	Bud Phillips
1073	Antony Marcano
1074	Andy Palmer
1075	Mark Kilby
1076	Marina Chiovetti
1077	Julian Boot
1078	Bruce Winegarden
1079	David Ullman
1080	Mark Rickmeier
1081	Paul Hammant
1082	Mauro Talevi
1083	Russ Unger
1084	David Booth
1085	Sumeet Moghe
1086	Guillaume Tardif
1087	Eric Lefevre-Ardant
1088	Glenn Bernsohn
1089	Michael Walkden
1090	David Carlton
1091	Bob Hartman
1092	Matt Wynne
1094	Lisa Moore
1095	Keith Voos
1096	Ami Hileman
1097	Thomas Walker
1098	Xavier Quesada Allue
1099	Joanna Zweig
1100	Cesar Idrovo
1101	Tim Gifford
1102	Tim Ottinger
1103	Alan Cyment
1104	Rod Claar
1105	Lane Halley
1106	Abby Fichtner
1107	Aslak Hellesøy
1108	Matt Smith
1109	Mary Gorman
1110	Jean-Michel Lemieux
1111	Mike Dwyer
1112	Dawn Cannan
1113	Tom Grant
1114	Dennis Stevens
1115	Halim Dunsky
1116	Melissa York
1117	Susan Taylor
1118	Cory Foy
1119	Michael Sahota
1120	Gino Marckx
1121	Barry Paquet
1123	Adriano Campestrini
1124	Meghann Drury
1125	Ken Power
1126	David Draper
1127	Arto Eskelinen
1128	Sami Honkonen
1129	Rick Simmons
1130	Michael Fitterman
1131	Kenny Rubin
1132	Jurgen De Smet
1133	Ramya Ravichandar
1134	Dina Mostafa
1135	Richard Paige
1136	Whitney Quesenbery
1137	Samantha Starmer
1138	Jim LaRue
1139	Rod Belshee
1140	Mike Osmond
1141	Ed Willis
1142	Kevin Schlabach
1143	Jorgen Hesselberg
1144	Chris Browne
1145	Anupam Kundu
1146	Maxwell Keeler
1147	Mark Balbes
1148	Pat Guariglia
1149	Bryan Campbell
1150	Robbie Mac Iver
1151	Elizabeth Woodward
1152	Helen McKinstry
1153	Maurits Rijk
1156	Jens Ostergaard
1157	Roger Brown
1158	Fernando Trigoso
1159	Matt Gelbwaks
1160	Nord Samuelson
1161	Melanie Paquette
1162	Moss Collum
1163	Laura Dean
1164	Rob Park
1165	Marty Haught
1166	Colin Jones
1167	Bryan Beecham
1168	Jeff Norris
1169	Eveliina Vuolli
1170	Dave Haeffner
1171	Jennifer Padilla
1172	Cindy McCracken
1173	Skye Pazuchanics
1174	Suzanne Thompson
1175	Michael Carvin
1176	Michael Hugos
1177	Jason Tanner
1178	Joe Astolfi
1179	Gene Johnson
1180	Jon Stahl
1181	Gary Baker
1182	Christopher Beale
1183	David Bulkin
1155	Dina Friis
1035	Gilles Brouillette
1093	Marc McNeill
1184	Gary Jones
1185	Paul Ambro
1186	Inbar Oren
1187	Sara Medhat
1188	Wilco Koorn
1189	David Bland
1190	Gerry Kirk
1191	Johanna Kollmann
1192	John Martin
1193	Alida Cheung
1194	Dave Neuman
1195	Dan Greening
1196	Matthew Van Vleet
1197	Ben Blanquera
1198	Richard Cheng
1199	Shannon Ewan
1200	Dave Prior
1201	Thushara Wijewardena
1202	Sam Guckenheimer
1203	Dave Rooney
1204	Robert Frohman
1205	Johan Peeters
1206	Lindsay Holmwood
1207	Jason Kerney
1208	Daniel Brolund
1209	Alex Kwan
1210	Carol Smith
1211	Jeff Gothelf
1212	Nancy Frishberg
1213	David Dalka
1214	Willem Larsen
1215	Skip Angel
1216	Yi Lv
1217	Samantha Laing
1218	Adrian Smith
1219	Michael DePaoli
1220	Leeann Berner
1221	David Chilcott
1222	Paul Dolman-Darrall
1223	Karen Greaves
1224	Jenni Jepsen
1225	Jonny LeRoy
1226	Matt Simons
1227	Ravindar Gujral
1228	D. André Dhondt
1229	Venkat Subramaniam
1230	John Maxwell
1231	Michael Kaiser
1232	Guy Royse
1233	Dan LeFebvre
1234	Markku Åhman
1235	Timo Punkka
1236	Jonathan Perret
1237	Ted Layher
1238	Jason Little
1239	Tim McCoy
1240	Amr Noaman
1241	Mohamed Amr
1242	Julien Mazloum
1243	Adam Light
1244	William Rowden
1245	Satoshi Kuroiwa
1246	Kazumasa Ebata
1247	Brian Sobus
1248	Jason Fair
1249	Gary Bernhardt
1250	Jeremy Lightsmith
1251	Katherine Kirk
1252	Sonya Lowry
1253	Lars Skaar
1254	Lisa Ho
1255	Agustín Villena
1256	Philippe Camacho
1257	Eric Sink
1258	Ralph Miarka
1259	Marc Bless
1260	Christian Vindinge Rasmussen
1261	Cathrine Lippert
1262	Perry Reid
1263	Martin Heider
1264	Bernd Schiffer
1265	Carol Morton
1266	Angela Druckman
1267	Jimi Fosdick
1268	Ronen Rubinfeld
1269	Olaf Lewitz
1270	Jaron Lambert
1272	Val Scott
1273	Jim McCarthy
1274	John Haniotis
1275	Scott Dunn
1276	Jon Innes
1277	Matt Block
1278	Ian Ratner
1279	Jack Harvey
1280	Steve Ropa
1281	Joel Tosi
1282	Marian Willeke
1283	Tsuyoshi Ushio
1284	Emerson Mills
1285	Michael Keeling
1286	Mike Velichansky
1287	Eewei Chen
1288	Nick Horney
1289	Joseph Wilk
1290	Ryan Polk
1291	Angela Harms
1292	Mike Prior
1293	Cory James Hohs
1294	Elena M Yatzeck
1295	Lynn Langit
1296	Kathleen  Rilliet
1297	Lynn Cowan
1298	Denny de Waard
1299	Stephen Denning
1300	Charles Roman
1301	Nafis Ahmad
1302	Patti Mandarino
1303	Leslie Ekas
1304	Scott Will
1305	Andrea Provaglio
1306	Ali Zewail
1307	Sean Buck
1308	Pradyumn Sharma
1309	Chris OConnor
1310	Harold Shinsato
1311	Don Gray
1312	Nanette Brown
1313	Robert Nord
1314	Greg Williams
1315	Derek  Neighbors
1316	Darius Kumana
1317	Jeremy Sutherland
1318	Catherine Clark
1319	Mauricio Aniche
1320	Guilherme Silveira
1321	Steve Andrews
1322	Raj Mudhar
1323	Allison Corbett
1324	Gourav Tiwari
1325	Zainab Alikhan
1326	Barninder Khurana
1328	Mike Suarez
1329	Isel Fernandez Diez
1330	Derek W. Wade
1331	Jason Dean
1332	Christian Hassa
1334	Marc-Elian Begin
1335	Andrew Hunt
1336	Nils Brede Moe
1337	Torgeir Dingsøyr
1338	Børge Haugset
1339	Geir Kjetil Hanssen
1340	Judith Brown
1342	Tiago Silva
1343	Laura Bocock
1344	Mia Horrigan
1345	Mali Senapathi
1346	Ananth Srinivasan
1347	xiaofeng wang
1349	B Veeresh Thummadi
1351	Gayane Azizyan
1353	Theodore Hellmann
1354	Claudia Melo
1341	Gitte Lindgaard
1348	Kieran Conboy
1327	Michael Meissner
1352	Miganoush Magarian
1350	Omri Shiv
1356	Lene Pries-Heje
1357	Jan Pries-Heje
1358	Barbara Fredrickson
1359	Kevlin Henney
1360	Edwin Wong
1361	Drew Jemilo
1362	Bill Gaiennie
1363	Brad Swanson
1364	Anders Ramsay
1365	Patrick Phillips
1366	Jukka Lindstr�m
1367	Alline Watkins
1368	Melinda Stelzer
1369	Bill Opsal
1370	Virginia Cagwin
1371	Si Alhir (Sinan Si Alhir)
1372	Len Lagestee
1373	Miki Konno
1374	Bent Myllerup
1375	Katrina Owen
1376	Peter Green
1377	Chad Casady
1378	Michael Mallete
1379	Kelly Looney
1380	Neil Johnson
1381	Susan DiFabio
1382	Dan Neumann
1383	Woody Zuill
1384	Ken Judy
1385	Zuzana Sochova
1386	Eduard Kunce
1387	Daniel Gullo
1388	Paul Goddard
1389	Randall DeFauw
1390	Judy Neher
1391	Ed Kraay
1392	Nayan Hajratwala
1393	Rohit Sethi
1394	Cecilia Fernandes
1395	Maria Matarelli
1396	Peter Saddington
1397	Sigge Birgisson
1398	Dave Sharrock
1399	James Waletzky
1400	Randy Santossio
1401	Paul Carvalho
1402	Kate Terlecka
1403	David Bernstein
1404	Devin Hedge
1405	Simon Cromarty
1406	Oana Juncu
1408	Sergey Prokhorenko
1409	Rafael Maranzato
1410	Joe Moore
1411	Pavan Sudarshan
1412	Adrian Howard
1413	Tarang Baxi
1414	Gaetano Mazzanti
1415	Bill Joiner
1416	Troy Magennis
1417	Allen Hurst
1418	Chris Weldon
1419	Stephen Chin
1420	Derek Lane
1421	Adam Weisbart
1422	Brent Brooks
1423	Samuel Bowles
1424	Zee Spencer
1425	Ariadna Font
1426	Jon Galloway
1427	John Heintz
1428	Catherine Louis
1429	David Parker
1430	Walt Wyckoff
1431	Jeff Morgan
1432	Steve Rogalsky
1433	Andrew Burns
1434	Alex Aitken
1435	Tobias Leisgang
1436	Andrea Tomasini
1437	Hendrik Esser
1438	John Buck
1439	Ryan Bergman
1440	Erin Beierwaltes
1441	Zachary Shaw
1442	Tamara  Sulaiman Runyon
1443	Sandy  Mamoli
1444	Kupe Kupersmith
1445	Kati Vilkki
1446	V. Lee Henson
1447	Terry Bunio
1448	Susan Strain
1449	Lee McKinney
1450	Alfred Lorber
1451	David Segonds
1452	Carissa Demetris
1453	Jason Tice
1455	Rowan Bunning
1456	Kate Megaw
1457	Brian Rabon
1458	Dajo Breddels
1460	Susan Eller
1461	Andrew Prentice
1462	Gregory Haskins
1463	Benjamin Root
1464	Ken Ritchie
1465	Mac Felsing
1466	Hans Samios
1467	Jim Benson
1468	Chris Dorman
1469	Siva Dorairaj
1470	Shvetha Soundararajan
1471	James Arthur
1475	Markku Halonen and Andey Sirotkin
1480	Mike Clark
1481	J.B. Rainsberger
840	Alan Easton
902	Amy Farrow
1459	Beverly May
1333	Candi Rai
1482	Christoph Johann Stettina
1483	Werner Heijstek
1484	Tor Erlend Fægri
1485	Siobhán Clarke
1486	Daniela S. Cruzes
1487	Fabio Kon
1355	Reidar Conradi
1488	Carl Erickson
1407	Jean-Louis Letouzey
1489	Yoshiaki Fukazawa
1477	Kazunori Sakamoto
1490	Damian Guy
1491	Mira Kajko-Mattsson
1492	Petri Voltti
1474	Minna Isomursu
1493	Kalle Lyytinen
1494	Shin Kuboaki
1495	Hironori Washizaki
1476	Ryushi Shiohama
1454	Samuel Cresçencio
1496	Abhishek Sharma
1497	Alan Borning
1498	Bjorn Freeman-Benson
1499	Maria Istela Cagnin
1500	José Carlos Maldonado
1501	Fernão Stella Germano
1502	Rosangela Penteado
1503	Richard Turner
1504	Glen Alleman
1505	Michael Henderson
1506	Ray Seggelke
1507	Norm Kerth
\.


--
-- Data for Name: videos; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY videos (id, thumb, media, player, width, height, duration, session_id, public, access) FROM stdin;
11	\N	e8bdaa9e5211a	bit	590	360	\N	8900	f	3
12	\N	9eb734b1afacb	bit	590	360	\N	10005	f	3
13	\N	a9080c9e6a83f	bit	590	360	\N	8901	f	3
14	\N	f926320b92860	bit	590	360	\N	9238	f	3
15	\N	e760167d56fe6	bit	590	360	\N	9504	f	3
16	\N	f32f1bfcf87e5	bit	590	360	\N	9454	f	3
17	\N	a569730b46f70	bit	590	360	\N	8975	f	3
18	\N	4e6f4a5dc1697	bit	590	360	\N	8877	f	3
19	\N	20662bbe37772	bit	590	360	\N	11440	f	3
20	\N	6b731459b849c	bit	590	360	\N	9764	f	3
21	\N	8eb4abc286d3f	bit	590	360	\N	8968	f	3
22	\N	1310f6313cb92	bit	590	360	\N	11270	f	3
23	\N	057822e982ea8	bit	590	360	\N	9077	f	3
24	\N	e4e49406bcf6d	bit	590	360	\N	8764	f	3
25	\N	828f918c5b0a4	bit	590	360	\N	11103	f	3
26	\N	17a0a89b01ed9	bit	590	360	\N	9347	f	3
27	\N	ee221073c6ff2	bit	590	360	\N	8739	f	3
37	/files/1712/8519/0571/Agile-2010---Aug09-Linda-Rising-Pt1.jpg	http://c2459152.cdn.cloudfiles.rackspacecloud.com/Agile2010-Aug09LindaRisingPt1.flv	flv	520	390	\N	20105271	f	3
38	/files/3412/8519/1630/Agile-2010---Aug09-Linda-Rising-Pt2.jpg	http://c2459152.cdn.cloudfiles.rackspacecloud.com/Agile2010-Aug09LindaRisingPt2.flv	flv	520	390	\N	20105271	f	3
39	/files/7712/8519/0574/Agile-2010---Aug10-Esther-Derby.jpg	http://c2459152.cdn.cloudfiles.rackspacecloud.com/Agile2010-Aug10EstherDerby.flv	flv	520	390	\N	20105516	f	3
40	/files/2912/8519/0576/Agile-2010---Aug10-Pollyanna-Pixton.jpg	http://c2459152.cdn.cloudfiles.rackspacecloud.com/Agile2010-Aug10PollyannaPixton.flv	flv	520	390	\N	8854	f	3
41	/files/1312/8519/0577/Agile-2010---Aug11-James-Shore-Arlo-Belshee.jpg	http://c2459152.cdn.cloudfiles.rackspacecloud.com/Agile2010-Aug11JamesShoreArloBelshee.flv	flv	520	390	\N	20106161	f	3
42	/files/4412/8519/0579/Agile-2010---Aug11-Scott-Ambler.jpg	http://c2459152.cdn.cloudfiles.rackspacecloud.com/Agile2010-Aug11ScottAmbler.flv	flv	520	390	\N	20105200	f	3
43	/files/2612/8519/0581/Agile-2010---Aug12-Arlo-Belshee.jpg	http://c2459152.cdn.cloudfiles.rackspacecloud.com/Agile2010-Aug12ArloBelshee.flv	flv	520	390	\N	20106177	f	3
44	/files/3812/8519/0582/Agile-2010---Aug12-Jon-Bach.jpg	http://c2459152.cdn.cloudfiles.rackspacecloud.com/Agile2010-Aug12JonBach.flv	flv	520	390	\N	20106181	f	3
45	/files/5212/8519/0583/Agile-2010---Aug12-Mary-Poppendick.jpg	http://c2459152.cdn.cloudfiles.rackspacecloud.com/Agile2010-Aug12MaryPoppendick.flv	flv	520	390	\N	20105296	f	3
33	\N	1c59f26a49f5f	bit	590	360	\N	11479	f	3
32	\N	e10874b2634db	bit	590	360	\N	11122	f	3
31	\N	c7d56b7c471a4	bit	590	360	\N	8845	f	3
30	\N	c5cb08eb1b735	bit	590	360	\N	8876	f	3
29	\N	7d9b31f7e3881	bit	590	360	\N	9083	f	3
28	\N	584fe570804b8	bit	590	360	\N	8780	f	3
36	/files/9812/8519/0584/Agile-2010---Aug13-Closing-Keynote.jpg	http://c2459152.cdn.cloudfiles.rackspacecloud.com/Agile2010-Aug13ClosingKeynote.flv	flv	520	390	\N	20108617	f	1
2	\N	79878a60e5925	bit	590	360	\N	12693	f	1
3	\N	97af598503fb1	bit	590	360	\N	12694	f	1
1	\N	572274cae0b90	bit	590	360	\N	12692	f	1
4	\N	2f3429fcdc073	bit	590	360	\N	9574	f	2
5	\N	879cd97013fe3	bit	590	360	\N	8955	f	2
6	\N	3b6e63350c34e	bit	590	360	\N	9197	f	2
7	\N	0ed3bcfb3273b	bit	590	360	\N	11062	f	2
8	\N	a35a934683620	bit	590	360	\N	11141	f	2
9	\N	fddc940b8fea1	bit	590	360	\N	9182	f	2
10	\N	343989051f8a0	bit	590	360	\N	11147	f	2
46	\N	http://c2459152.cdn.cloudfiles.rackspacecloud.com/Agile2010-Aug10Roundtable.flv	flv	520	390	\N	20108618	\N	3
\.


--
-- Name: records_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY records
    ADD CONSTRAINT records_pkey PRIMARY KEY (url);


--
-- Name: session_speakers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY session_speakers
    ADD CONSTRAINT session_speakers_pkey PRIMARY KEY (speaker_id, session_id);


--
-- Name: sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: speakers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY speakers
    ADD CONSTRAINT speakers_pkey PRIMARY KEY (id);


--
-- Name: index_records_session; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX index_records_session ON records USING btree (session_id);


--
-- Name: index_videos_session; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX index_videos_session ON videos USING btree (session_id);


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

