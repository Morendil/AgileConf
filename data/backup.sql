--
-- PostgreSQL database dump
--

SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: records; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE records (
    url text NOT NULL,
    session_id integer NOT NULL
);


ALTER TABLE public.records OWNER TO postgres;

--
-- Name: session_speakers; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE session_speakers (
    session_id integer NOT NULL,
    speaker_id integer
);


ALTER TABLE public.session_speakers OWNER TO postgres;

--
-- Name: sessions; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE sessions (
    id integer NOT NULL,
    title text,
    description text,
    stage character varying(50),
    type character varying(50),
    year integer
);


ALTER TABLE public.sessions OWNER TO postgres;

--
-- Name: sessions_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE sessions_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.sessions_id_seq OWNER TO postgres;

--
-- Name: sessions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE sessions_id_seq OWNED BY sessions.id;


--
-- Name: sessions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('sessions_id_seq', 12885, true);


--
-- Name: speakers; Type: TABLE; Schema: public; Owner: postgres; Tablespace: 
--

CREATE TABLE speakers (
    name text NOT NULL,
    id integer NOT NULL
);


ALTER TABLE public.speakers OWNER TO postgres;

--
-- Name: speakers_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE speakers_id_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.speakers_id_seq OWNER TO postgres;

--
-- Name: speakers_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE speakers_id_seq OWNED BY speakers.id;


--
-- Name: speakers_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('speakers_id_seq', 565, true);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE sessions ALTER COLUMN id SET DEFAULT nextval('sessions_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE speakers ALTER COLUMN id SET DEFAULT nextval('speakers_id_seq'::regclass);


--
-- Data for Name: records; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY records (url, session_id) FROM stdin;
http://agile2003.agilealliance.org/files/E13Notes.pdf	185
http://agile2003.agilealliance.org/files/E17Slides.ppt	193
http://agile2003.agilealliance.org/files/E3Paper.pdf	180
http://agile2003.agilealliance.org/files/E5Slides.ppt	182
http://agile2003.agilealliance.org/files/P1Paper.pdf	157
http://agile2003.agilealliance.org/files/P1Slides.pdf	157
http://agile2003.agilealliance.org/files/P2Paper.pdf	158
http://agile2003.agilealliance.org/files/P3Paper.pdf	159
http://agile2003.agilealliance.org/files/P4Paper.pdf	160
http://agile2003.agilealliance.org/files/P5Paper.pdf	161
http://agile2003.agilealliance.org/files/P6Paper.pdf	162
http://agile2003.agilealliance.org/files/R10Paper.pdf	172
http://agile2003.agilealliance.org/files/R11Paper.pdf	173
http://agile2003.agilealliance.org/files/R12Paper.pdf	174
http://agile2003.agilealliance.org/files/R13Paper.pdf	175
http://agile2003.agilealliance.org/files/R13Slides.ppt	175
http://agile2003.agilealliance.org/files/R14Paper.pdf	176
http://agile2003.agilealliance.org/files/R14Slides.pdf	176
http://agile2003.agilealliance.org/files/R15Paper.pdf	177
http://agile2003.agilealliance.org/files/R1Paper.pdf	163
http://agile2003.agilealliance.org/files/R2Paper.pdf	164
http://agile2003.agilealliance.org/files/R3Paper.pdf	165
http://agile2003.agilealliance.org/files/R3Slides.pdf	165
http://agile2003.agilealliance.org/files/R4Paper.pdf	166
http://agile2003.agilealliance.org/files/R5Paper.pdf	167
http://agile2003.agilealliance.org/files/R5Slides.ppt	167
http://agile2003.agilealliance.org/files/R6Paper.pdf	168
http://agile2003.agilealliance.org/files/R7Paper.pdf	169
http://agile2003.agilealliance.org/files/R8Paper.pdf	170
http://agile2003.agilealliance.org/files/R9Paper.pdf	171
http://agile2003.agilealliance.org/files/T17Slides.ppt	154
http://agile2004.agilealliance.org/files/RP1-1.pdf	212
http://agile2004.agilealliance.org/files/RP1-2.pdf	213
http://agile2004.agilealliance.org/files/RP1-3.pdf	214
http://agile2004.agilealliance.org/files/RP2-1.pdf	215
http://agile2004.agilealliance.org/files/RP2-2.pdf	216
http://agile2004.agilealliance.org/files/XR1-1.pdf	217
http://agile2004.agilealliance.org/files/XR1-2.pdf	218
http://agile2004.agilealliance.org/files/XR1-3.pdf	219
http://agile2004.agilealliance.org/files/XR2-1.pdf	220
http://agile2004.agilealliance.org/files/XR2-2.pdf	221
http://agile2004.agilealliance.org/files/XR2-3.pdf	222
http://agile2004.agilealliance.org/files/XR3-1.pdf	223
http://agile2004.agilealliance.org/files/XR3-2.pdf	224
http://agile2004.agilealliance.org/files/XR3-3.pdf	225
http://agile2004.agilealliance.org/files/XR4-1.pdf	226
http://agile2004.agilealliance.org/files/XR4-2.pdf	227
http://agile2004.agilealliance.org/files/XR4-3.pdf	228
http://agile2004.agilealliance.org/files/XR5-1.pdf	229
http://agile2004.agilealliance.org/files/XR5-2.pdf	230
http://trondheim.cs.washington.edu/cgi-bin/agile/BaseQuicki/wiki.cgi?WelcomeVisitors	191
http://www.cebase.org/ADCexchange/	192
http://www.ebgconsulting.com/images/ADC%20Conference%20-%20Cust%20Involvt%206-27/page_01.htm	187
http://www.poppendieck.com/agilecontracts.htm	178
TH1 Agilists are Bonobos2.ppt	12719
BT1 - Smits - Overview of Agile handout.pdf	12720
BT2 2006-07-Intro-to-APM-Agile-2006.pdf	12721
BT2 Cohn_PlanningAndTracking.pdf	12721
BT2 casemaster.pdf	12721
TH2 Ambler Current State of Union.ppt	12724
TH3 AgileInLargeTHJuttaEckstein.pdf	12726
BT3 SutherlandIndividualsAndInteractionsAgile2006.ppt	12727
TU1 Agile 2006 Exploratory Testing.ppt	12728
TU2 Patton-UserStoryToUI-handouts.pdf	12730
TU2 UseStoryToUserInterfaceTutorial.ppt	12730
TU3 Rawsthorne_TheRoleOfTheCustomerTeam_Agile2006.pdf	12732
TU4 brushingUpOnFunctionalTestEffectiveness.pdf	12733
TU4 jennitta_andrea_tutorial4_presentation.ppt	12733
RP2 Cabri Griffiths - Agile and Earned Value Reporting.pdf	12736
RP3 haugen-PlanningPoker.pdf	12737
RP1 Sulaiman-AgileEVM.pdf	12738
TH4 Avery.Agile2006.pdf	12741
BT4 DSDM - Go for Nine.ppt	12742
BT4 FDD_BeginnersOverview.ppt	12742
BT4 Introduction to Lean for Agile 2006.pdf	12742
TU5 Agile 2006 - Rapid Testing.ppt	12743
TU6 Agile 2006 Tutorial Worksheet handout.doc	12744
TU6 Org_Ready_for_Scrum.ppt	12744
TU7 lego_xp_game_submitted.ppt	12745
BT5 Ambler Evolutionary Database Development.ppt	12746
BT5 Derby Team Dynamics.ppt	12746
TU8 innovation-games.pdf	12747
DS6 tracer bullets agile2006.doc	12748
RP6 feldman-RefactoringContracts.pdf	12751
RP4 melnik-maurer-chiasson-executable-acceptance-tests.pdf	12752
RP5 ho-AgilePerformanceSpecAndTesting.pdf	12753
TH5 Highsmith_George_Keirevsky_Agile2006_LargeAgileTranistions_Handouts_R2.ppt	12754
RP8 korkala-abrahamsson-agile2006.pdf	12755
RP7 SharpEtAl-CardsAndWallFinalVersion.pdf	12756
TH6 LittleA2006Handouts.ppt	12758
TU10 Fearless Appendix.pdf	12759
TU10 Interview.pdf	12759
TU10 Leading Fearless Change.pdf	12759
TU10 Play June 20 2006.ppt	12759
TU11 flawless_iterations.ppt	12760
TU12 handouts bobthinksaboutprojectmanagement.pdf	12761
TU12 systemsthinkinghandout.pdf	12761
DS8 Appropriate Agile Metrics - Airplane Simulation.pdf	12762
DS8 Appropriate Agile Metrics - DS slides.pdf	12762
DS8 Appropriate Agile Metrics - Heuristics and Template.pdf	12762
TU13 TDD-Cpp-Agile2006-Tu13-color-2perPage.pdf	12763
TU13 TDD-Cpp-Agile2006-Tu13.ppt	12763
TU13 TDD-hands-on-23Jun2006.doc	12763
TU14 Agile 2006 Storytelling with FIT.pdf	12764
XR1 AgileMarathon_Submitted_6232006.ppt	12768
XR1 Schatz-AgileMarathon.pdf	12768
XR2 Baker-AgileCMMI.pdf	12769
XR3 A Tale of Two Projects Slides.ppt	12770
XR3 coffin-ATaleofTwoProjects.pdf	12770
TH7 Homer Odyssey and Life as an Agile Consultant --TABAKA TH7.pdf	12772
TU16 ExtremeTeams-Agile2006.ppt	12773
XR4 PairingSessionsAgile2006.pdf	12774
XR4 pairingAgile2006Presentation.pdf	12774
XR5 nocks-MultipleProjectsWithOneXPTeam.pdf	12775
XR6 yap-ValueBasedExtremeProgramming.pdf	12776
TU17 Cohn_AgileEstimatingAndPlanning.pdf	12779
TU18 V4o1DSDMTutorialAgile2006.ppt	12782
TU19 xUnit Test Patterns and Smells - Handouts.pdf	12783
TU20 Agile Rqts Workshops for CD.pdf	12784
TU21 SatirResources.pdf	12786
TU21 SatirTemperatureReading.pdf	12786
TU21 TowardsCongruence.pdf	12786
TU21 satirchangemodel.pdf	12786
RP11 Adolph 2006 agile lessons_final.pdf	12788
RP9 Talby-Reflection.pdf	12789
RP10 agile2006_paper_final.pdf	12790
TH9 Advanced Principles of class design.ppt	12791
TU22 agile2006_feathers_coaching.ppt	12792
AS1 north-deployment.pdf	12793
AS2 Agile2006Presentation.pdf	12794
TU23 From Concept to Cash for Agile2006 Handouts.pdf	12798
TU40 WotW.pdf	12799
DS28 HandoutsAgile2006-AgileFactorsHandout.pdf	12800
TU41 dispersed-agile-development.ppt	12801
XR23 hogan-eXtremelyDistributedProject.pdf	12803
TU25 XP Geography Handouts, Agile 2006.ppt	12806
TU26 Agile 2006 handout.pdf	12807
TU26 Agile 2006.ppt	12807
DS17 Handouts Agile2006 Session Proposal.pdf	12809
XR7 mstriebeck-ShtAddingProcess.pdf	12812
XR8 AgileCoachingInBritishTelecom_v1.2.ppt	12813
XR8 hanly-AgileCoachingInBritishTelecom.pdf	12813
XR9 Honious-Clark-SomethingToBelieveIn.pdf	12814
HO4 CodersDojoHandout.pdf	12815
TH11 Cohn_UserStories.pdf	12816
TU28 MakingSenseOfAgile.pdf	12818
DS20 Agile Conference Presentation.ppt	12819
XR10 KellyPresentation.pdf	12820
XR10 weyrauch-FrameworkForDefiningAgile.pdf	12820
XR11 during-oss_sprints.pdf	12821
XR12 Parnellklabo Introducing Lean_revised final.pdf	12822
TH12 History of Lean for Agile 2006 Handouts.pdf	12824
DS21 Autochthony Intro for Discovery Workshop.pdf	12825
TU29 Scripting101_200507.pdf	12826
TU30 TestDrivenJ2EE-XP2006.pdf	12828
TU31 Martin-TutorialReadings handout.pdf	12829
XR14 AgileTalk_Yale.pdf	12833
XR14 YaleFrequency.pdf	12833
TH13 AgileWaterfallCoop-Sliger.pdf	12835
DS25 Discussing the need for Agile Certification Handouts.pdf	12836
DS25 Discussing the need for Agile Certification Presentation.pdf	12836
TH14 Agile meets Offshore - presentation - new.ppt	12842
TU32 Agile Database Tutorial.ppt	12843
TU33 LisaCrispinWhatYouNeed2006.ppt	12844
TU34 handouts CollWorkplacesAgile2006.pdf	12845
TU35 Enterprise Scrum.ppt	12846
DS27 DrawingCarousel_handouts.pdf	12847
TU36 TheAgileProductOwnerAndCustomerFieldGuide.pdf	12848
TU37 RSG Agile2006.pdf	12849
TU38 HIringforagileteam.pdf	12850
XR19 Meszaros - Adding Usability Testing to Agile.pdf	12851
XR19 Meszaros-AgileUsabilty.pdf	12851
XR20 LockeHeimgartnerAgileWriters.pdf	12852
XR20 locke-Writers.pdf	12852
XR21 puleio-HowNotToDoAgileTesting.pdf	12853
HO5 AS_AgileLeanIntroWithGameAndPlay_v2des.ppt	12855
HO5 AgileSimulationSessionDetail_ForPublication_20060627_v2des.doc	12855
TU39 Clean Code Args.doc	12857
TU39 Clean Code.ppt	12857
XR24 jain-OffshoreAgileMaintenance.pdf	12858
ES1 grossman-bergin-TeachingAgile.pdf	12859
ES2 Final-FormingSuccessfulXPTeams.pdf	12860
ES3 girard-ImpactOfAgility.pdf	12861
ES4 wainer-ShareCourseProjects.pdf	12862
ES5 Agile_Camera Ready.doc	12863
TU42 2006.07b crystal 180min.ppt	12866
TU43 IntroToAutoAT.pdf	12867
TU44 Handout Derby-Larsen_Retro.pdf	12868
TU45 agile2006_feathers_welc.ppt	12870
TU46 - Tabaka Smits.pdf	12871
TU48 Holacracy - Agile 2006 - Brian Robertson.pdf	12874
TU48 Holacracy Handouts for Agile 2006.doc	12874
XR25 boot camp paper.zip	12875
XR25 rasmusson-AgileInceptionDeckBootCamp.pdf	12875
XR26 Poon-Bootstrapping (typos corrected).pdf	12876
XR27 VanSchooenderwoert_EmbeddedNumbersSlides.pdf	12877
XR27 VanSchooenderwoert_EmbeddedNumbersSlides.ppt	12877
XR27 Vanschooenderwoert-EmbeddedNumbers.pdf	12877
TU49 Pairing Game (Wilson - Provost - Lacey).ppt	12880
TU50 sell_agile_bean_agile_06.pdf	12881
XR28 Tudor OCLC-DSDM Presentation pdf(final).pdf	12882
XR28 tudor&walter-using an agile approach (DSDM) in a large, traditional organization.pdf	12882
XR29 UsingAn AgileApproachToFreeTheOrganizationFromR_DParalysis.pdf	12883
XR29 UsingAnAgileApproachToFreeTheOrganizationFromR_DParalysis_presentation.pdf	12883
XR30 Extreme Selling in the Early Stage Space.pdf	12884
\.


--
-- Data for Name: session_speakers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY session_speakers (session_id, speaker_id) FROM stdin;
12666	270
12692	285
12693	286
12694	287
12706	288
12709	289
12711	290
12712	291
12715	174
12715	46
12716	292
12718	293
1	294
1	295
2	171
3	296
4	297
4	298
5	299
6	300
7	197
7	301
7	198
8	302
141	340
142	341
143	170
144	342
145	343
146	111
146	344
147	345
147	346
147	347
148	348
149	31
149	45
150	322
150	349
151	304
152	350
153	351
153	287
154	311
155	198
155	352
156	17
163	353
164	98
165	354
166	355
167	356
168	357
169	358
170	359
171	360
172	361
173	362
174	363
175	254
176	2
177	364
178	31
178	365
179	366
179	367
180	368
180	369
181	370
182	371
182	372
183	373
183	374
184	375
185	17
186	56
186	129
187	113
188	373
188	374
189	376
189	377
190	378
191	379
191	380
192	381
192	306
193	372
9	294
9	295
10	171
11	296
12	297
12	298
13	299
14	300
15	197
15	301
15	198
16	302
17	210
18	210
19	210
20	210
21	210
22	294
22	295
23	171
24	303
25	304
26	305
27	217
28	306
28	307
29	308
52	319
53	320
54	321
55	322
56	311
57	312
58	313
59	314
60	315
61	316
62	317
63	311
64	318
65	319
66	320
67	321
68	322
69	170
70	182
71	323
72	324
73	325
74	326
75	327
76	328
77	228
78	329
79	330
80	294
80	295
81	304
82	305
83	217
84	306
84	307
85	308
86	331
87	17
87	332
88	333
89	334
90	171
91	296
92	297
92	298
93	311
94	312
95	313
96	314
97	315
98	316
99	317
100	311
101	318
102	319
8716	1
103	320
104	321
105	322
106	182
107	323
108	324
109	325
110	326
111	327
112	328
113	228
114	329
115	330
116	294
116	295
117	304
118	305
119	306
119	307
120	308
121	331
122	17
122	332
123	333
124	334
125	171
126	296
127	297
127	298
128	299
129	300
130	197
130	301
130	198
131	303
132	302
133	335
134	336
134	337
134	306
135	338
136	310
137	339
138	339
139	170
140	217
8736	2
8739	3
8741	4
8745	5
8747	6
8750	7
8751	8
8752	9
8760	10
8764	11
8765	11
8773	3
8774	12
8780	13
8782	14
8785	15
8785	16
8797	17
8797	18
8798	19
8800	20
8801	21
8801	22
8808	14
8810	23
8821	24
8823	25
8831	26
8832	27
8838	28
8840	27
8845	29
8845	30
8848	31
8849	32
8854	33
8855	34
8857	35
8858	36
8858	37
8859	35
8860	38
8860	39
8867	40
8873	41
8873	42
8876	43
8876	31
8877	44
8881	43
8881	45
8883	46
8887	47
8887	28
8888	48
8890	49
8900	50
8900	51
8901	52
8902	53
8902	54
8912	21
8912	16
8917	55
8918	56
30	302
31	294
31	295
32	171
33	303
34	304
35	305
36	217
37	306
37	307
38	308
39	302
40	309
41	310
42	309
43	311
44	312
45	313
46	314
47	315
48	316
49	317
50	311
51	318
8918	57
8920	58
8921	59
8923	60
8923	61
8924	59
8925	62
8925	63
8933	64
8933	65
8939	66
8945	67
8950	68
8950	69
8954	70
8955	68
8967	71
8968	72
8968	73
8969	74
8970	75
8972	76
8972	77
8973	78
8975	79
8976	80
8976	81
8977	82
8977	83
8985	84
8985	85
8989	86
8991	84
8991	87
8994	88
9001	89
9008	90
9011	66
9021	91
9021	92
9025	14
9025	87
9029	93
9029	94
9033	61
9038	95
9042	96
9047	97
9047	98
9048	54
9048	99
9051	100
9051	101
9052	102
9056	103
9056	104
9066	105
9066	106
9068	107
9074	94
9077	108
9082	109
9083	110
9083	111
9088	112
9088	113
9089	114
9089	115
9091	108
9095	97
9104	116
9104	117
9108	112
9111	118
9112	119
9117	120
9117	121
9128	113
9128	18
9140	122
9140	123
9143	124
9143	125
9167	126
9167	127
9170	128
9172	129
9172	50
9173	130
9173	131
9176	132
9178	133
9182	134
9185	115
9185	135
9186	136
9192	137
9197	101
9207	137
9207	70
9210	138
9210	139
9212	140
9213	141
9213	142
9215	143
9219	134
9219	85
9228	144
9228	81
9231	92
9238	145
9241	146
9265	147
9269	148
9271	149
9314	150
9316	150
9328	151
9347	152
9454	153
9504	154
9504	155
9544	156
9544	157
9574	158
9604	159
9615	160
9615	161
9655	158
9701	162
9764	163
9906	164
9906	162
9925	165
9964	166
9964	167
10005	168
10005	169
10030	170
10113	171
10150	32
10150	171
10201	172
10202	173
10580	174
10596	175
10636	176
10636	13
10686	177
10782	178
10877	179
10877	6
10905	180
10905	181
10908	182
10908	183
10914	184
10915	180
10918	185
10932	186
10951	187
10957	188
10959	184
10959	189
11028	190
11031	191
11031	192
11037	193
11037	194
11055	195
11055	196
11062	188
11074	197
11074	198
11103	199
11104	200
11105	200
11108	201
11110	202
11110	203
11121	204
11122	204
11136	205
11136	206
11137	207
11137	56
11140	208
11141	209
11141	203
11142	210
11144	211
11146	212
11147	212
11152	210
11165	98
11166	213
11166	214
11176	215
11210	216
11212	217
11215	218
11219	219
11254	220
11254	221
11266	222
11270	223
11272	224
11272	71
11304	225
11305	226
11305	227
11309	228
11321	229
11326	230
11327	231
11327	232
11343	233
11344	234
11344	79
11350	235
11352	236
11352	237
11369	238
11370	239
11376	240
11379	241
11382	242
11391	208
11393	241
11431	42
11431	41
11432	79
11436	79
11440	243
11440	244
11447	183
11449	245
11449	246
11452	183
11455	247
11473	248
11479	189
11482	249
11482	250
11493	251
11494	245
11494	129
11502	252
11517	253
11536	254
11537	125
12633	255
12637	256
12637	257
12639	258
12642	259
12643	260
12643	261
12644	260
12644	261
12646	262
12646	263
12647	161
12647	264
12648	265
12648	266
12649	267
12649	268
12650	269
12650	268
12652	270
12653	271
12653	272
12655	273
12656	234
12656	274
12657	275
12657	276
12659	277
12659	278
12661	279
12661	280
12662	281
12662	282
12665	283
12665	284
194	254
195	304
196	382
197	111
198	383
199	384
200	385
201	386
202	387
203	388
204	343
205	113
206	389
207	390
208	311
209	355
210	340
211	391
212	306
212	392
212	393
213	394
213	306
213	395
214	268
214	396
214	397
215	398
216	336
216	280
217	399
217	400
218	300
219	401
220	402
220	403
220	404
220	405
220	406
221	407
221	408
221	409
221	300
222	410
223	411
223	412
223	413
224	414
225	415
225	416
226	417
227	418
228	419
228	420
229	177
229	421
230	241
231	350
232	56
232	295
232	422
233	423
233	424
233	425
234	426
234	228
234	427
235	428
235	429
235	374
235	373
235	430
236	431
237	432
237	433
238	434
238	435
239	436
239	425
240	18
240	437
240	17
240	438
241	439
241	440
242	441
242	442
242	443
243	444
243	445
243	397
243	396
244	446
244	447
244	448
245	449
245	450
246	304
246	451
246	212
246	452
12719	287
12720	196
12721	383
12721	137
12722	254
12722	453
12723	454
12723	455
12724	170
12726	333
12727	203
12727	322
12728	456
12729	457
12729	362
12730	254
12730	453
12731	407
12732	458
12733	2
12734	448
12734	228
12735	459
12736	460
12736	461
12737	462
12738	463
12738	464
12739	210
12739	182
12741	122
12742	465
12742	466
12743	456
12744	467
12745	468
12746	170
12746	344
12747	390
12748	469
12748	470
12749	388
12750	123
12750	471
12751	472
12751	473
12752	336
12752	280
12753	474
12753	475
12754	340
12754	476
12755	477
12755	478
12756	368
12756	369
12758	414
12759	287
12759	351
12760	479
12761	480
12761	481
12762	482
12762	483
12763	171
12764	484
12764	485
12765	434
12766	62
12766	486
12767	197
12767	198
12768	467
12768	487
12769	488
12770	489
12771	490
12771	333
12772	134
12773	491
12773	492
12774	493
12774	494
12775	495
12776	496
12778	304
12779	383
12780	210
12780	182
12781	455
12782	497
12783	498
12783	499
12784	113
12785	500
12785	501
12786	481
12786	480
12787	502
12787	503
12788	161
12789	504
12789	505
12790	506
12790	507
12791	158
12792	183
12793	200
12793	508
12794	509
12795	482
12795	483
12797	510
12798	31
12799	486
12799	62
12800	372
12800	137
12801	449
12802	59
12803	511
12804	512
12805	505
12806	465
12806	513
12807	514
12807	515
12808	185
12808	254
12809	32
12809	372
12810	516
12811	461
12811	460
12812	517
12813	518
12813	519
12814	520
12814	521
12815	486
12816	383
12817	426
12817	228
12818	522
12819	523
12819	524
12820	525
12821	526
12822	527
12824	31
12825	528
12825	529
12826	530
12826	516
12827	197
12827	198
12828	455
12829	268
12829	396
12830	137
12831	441
12832	531
12832	532
12833	533
12834	34
12834	534
12835	118
12836	496
12836	535
12837	536
12838	537
12839	538
12839	539
12840	540
12840	541
12842	434
12843	170
12843	297
12844	17
12845	33
12845	111
12846	304
12847	480
12847	481
12848	300
12849	36
12849	542
12850	80
12851	498
12851	543
12852	544
12852	545
12853	546
12854	344
12855	148
12855	458
12856	547
12857	158
12858	515
12859	548
12859	549
12860	550
12860	551
12861	552
12861	553
12862	554
12863	306
12863	394
12865	322
12866	311
12867	180
12868	212
12868	111
12869	555
12870	183
12871	134
12871	196
12872	98
12873	501
12873	556
12874	557
12875	3
12876	558
12877	177
12878	549
12878	548
12879	559
12880	537
12880	560
12881	561
12882	497
12882	562
12883	563
12884	564
12884	565
12885	318
12885	158
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY sessions (id, title, description, stage, type, year) FROM stdin;
93	THE CURRENT CONVERSATION IN AGILE SOFTWARE DEVELOPMENT	Every 3-6 months, the conversation around the term "agile software\ndevelopment" changes. First it was, "What is 'agile'?", then "How do I do\n'agile'?", then it went to "How can / cannot 'agile' coexist or be mixed\nwith plan-centric approaches?" As of May (2002), the conversation was:\n"Contrast project strategies if the project's dominant priority is agility, or\nlaid-backness, or fun, or cost, or predictability." In this invited talk,\nAlistair Cockburn will describe the dominant conversation he is involved\nwith at the time of the conference. Current prediction has it that the May 2002\ntheme will still be current in early August.	Main conference	Featured Talk	2002
94	"You say you want a revolution ... "	XP/Agile are "revolutionary" approaches to software development.  The\nlatest in a distinguished lineage of such innovations.  A revolutionary\ninnovation does not, however, a revolution make.  What forces are at\nwork that will prevent XP/Agile from becoming truly revolutionary?  How\nmight the revolution be won?  Within the context of these questions we\nwill explore a bit of history, cultural anthropology, mysticism, and\nMaoism and outline future strategy.	Main conference	Featured Talk	2002
95	Triggers and Practice: How Extremes in Writing Relate to Creativity and Learning 	Several XP principles are used by creative writers all the time. Creative\nwriting is about exploration and learning. In this talk I examine the\nrelationships between learning and making things. We will see that\neverything worth anything is extreme.	Main conference	Educator's Symposium Special Presentation	2002
96	EDUCATOR SYMPOSIUM: XP AS A TEACHING PROCESS	Moderator\nJ. Fernando Naveda\njfn@cs.rit.edu\nPanelistsKent Beck, Three Rivers Institute\nkent@threeriversinstitute.org\nRichard P. Gabriel, Sun Microsystems\nrpg@dreamsongs.com\nJorge Diaz Herrera, Southern Polytechnic State University\njdiaz@spsu.edu\nWatts Humphrey, Software Engineering Institute\nwatts@sei.cmu.edu\nMichael McCracken, Georgia Institute of Technology\nmike@cc.gatech.edu\nDave West, New Mexico Highlands University\ndwest@cs.nmhu.edu\nAbstract:	Main conference	Panel	2002
97	EDUCATOR SYMPOSIUM:  EXTREME TEACHING -- AN AGILE APPROACH TO EDUCATION	Extreme Programming is built around core values, principles, and practices designed to align the experience of developing software with reality. You can set out to design your application with the assumption that you can anticipate all issues that will arise in a world of static requirements. What do you do when you come across an unforeseen problem or when the requirements change over time? What happens when new and better solutions become apparent in the course of development? Similarly, as instructors, we begin each new term armed with a syllabus and an idea of how the course will run. Then reality rears its ugly head. The software that was supposed to be installed in the lab for the first day of classes isn't installed. The textbook looked better when you evaluated it last spring than it does now that you are actually trying to teach from it. The students are either much quicker, much slower, or much more diverse than you anticipated. In this workshop we'll begin the process of selecting core values, principles, and practices that we can use to guide us in the classroom the same way that XP can help guide developers. We do not expect the practices of XP to map over. On the other hand, as an example, much of XP benefits from quick, accurate feedback. Several of the practices are based around this idea. Quick, accurate feedback obviously applies in the classroom as well and may suggest other values, principles, or practices.	Main conference	Workshop	2002
98	eXtreme Programming (XP)		Main conference	Special Presentation	2002
99	DSDM	DSDM	Main conference	Special Presentation	2002
100	Crystal	Crystal	Main conference	Special Presentation	2002
101	Agile Software Development and the Rational Unified Process(r)	There are some basic principles and values that make a software development project, or process, agile. Using the agile values and principles, we look at how a process framework such as the Rational Unified Process (r) can be configured to be agile. The presentation is based on examining a specific configuration of RUP and how it supports the agile characteristics. We look at common misconceptions about a process like the RUP, and show that most of the problems come from the different words used to describe the process, and the misapplication of the process.\nWe examine how a framework can be used to grow with a project and organization by providing a consistent set of best practices that may be applied as needed. All you need to do is add a healthy dose of common sense.	Main conference	Special Presentation	2002
102	FEATURES, USER STORIES, AND USE CASES: GATHERING REQUIREMENTS IN AN AGILE PROCESS	Choosing the right requirements vehicle can affect the dynamics of your software development process. Use cases continue to dominate the enterprise while features and user stories are gathering momentum. But which vehicle is right for your project? How can Feature-Driven Development and other agile processes be adapted to use other requirements vehicles? This presentation examines the changing dynamics of the use case, the value of the user story beyond extreme programming, and the increasing role of features in the development of software.\nGranville Miller\nSenior Technical Product Manager, TogetherSoft\nGranville has over a decade of experience in the object-oriented community. He is coauthor of the Advanced Use Case Modeling series and A Practical Guide to Extreme Programming. He has presented tutorials at various object-oriented technology conferences worldwide. His hands-on approach to object-oriented development has been the result of his work with companies that range from startups in the very early stages to some of the most established software giants. He is currently teaching seminars, tutorials, and classes in agile processes, methodology, and Java technology, as well as mentoring and helping to deliver aggressive projects.	Main conference	Special Presentation	2002
103	SCRUM -- AGILE MODELING	SCRUM\nAgile Modeling	Main conference	Special Presentation	2002
104	EMPIRICAL STUDIES I	EMPIRICAL STUDIES I\nExtreme Programming Used to Establish the Culture of a High Performance Team: Management Case Study,\nCircle of Life, Spiral of Death: Are XP Teams Following the Essential Practices?,\nTracking Test First Pair Programming -- An Experiment\nClement James Goebel III, Vinay Ramachandran, Anuja Shukla, Matevz Rostaher and Marjan Hericko	Main conference	Presented papers	2002
105	PAIR PROGRAMMING	PAIR PROGRAMMING\nPair Programming: Addressing Key Process Areas of the People-CMM,\nExtreme Interviewing,\nWhen Pairs Disagree 1-2-3\nGopal Srinivasa and Prasanth Ganesan, Clement James Goebel III, Thomas Meloche, Richard Sheridan, Roy Miller	Main conference	Presented papers	2002
106	INTRODUCING EXTREME PROGRAMMING AND AGILE METHODS	INTRODUCING EXTREME PROGRAMMING AND AGILE METHODS\n\nStrategies for Introducing XP to New Client Sites,\nTurning the Knobs: A Coaching Pattern for XP Through Agile Metrics\nTailoring XP for Large System Mission Critical Software Development\nJonathan Rasmusson, William Krebs, Jason Bowers, John May, Erik Melander, Matthew Baarman, Azeem Ayoob	Main conference	Presented papers	2002
107	TESTING	TESTING\nAcceptance Testing HTML,\nAn Informal Formal Method for Systematic JUnit Test\nCase Generation,\nA Light in a Dark Place: Test-Driven Development with 3rd Party Packages\nNarti Kitiyakara, David Stotts, Mark Lindsey, Angus Antley, James Newkirk	Main conference	Presented papers	2002
108	EXPERIENCE REPORTS	EXPERIENCE REPORTS\nAgile Project Management Methods for ERP: How to Apply Agile Processes to Complex COTS Projects and Live to Tell About It ,\nExtreme Programming in a Research Environment, \nEstablishing an Agile Testing Team: Our Four Favorite "Mistakes", \n Glen Alleman, William Wood, William Kleb, Kay Johansen, Anthony Perkins	Main conference	Presented papers	2002
109	EMPIRICAL STUDIES II	EMPIRICAL STUDIES II\nAgile Meets CMMI: Culture Clash or Common Cause?\nHow to Get the Most out of Extreme Programming/Agile Methods(wed only), \nEmpirical Findings in Agile Methods\nApurva Jain, Richard Turner, Donald J. Reifer, Mikael Lindvall, Vic Basili, Barry Boehm, Patricia Costa, Kathleen Dangle, Forrest Shull, Roseanne Tesoriero, Laurie Williams, and Marvin Zelkowitz	Main conference	Presented papers	2002
110	DISTRIBUTED TEAMS	DISTRIBUTED TEAMS\nSupporting Distributed Extreme Programming,\nExploring the Efficacy of Distributed Pair Programming\nFrank Maurer, Prashant Baheti, Edward Gehringer, and David Stotts	Main conference	Presented papers	2002
111	ARE TESTERS EXTINCT? HOW CAN TESTERS CONTRIBUTE TO XP TEAMS?	Moderator:\nKen Auer\nRoleModel Software\nPanelists\nRon Jeffries\nObject Mentor (www.objectmentor.com, www.Xprogramming.com)\nJeff Canna\nRoleModel Software\nGlen Alleman\nLisa Crispin\nAbstract:Format:	Main conference	Panel	2002
112	XP BEYOND LIMITATIONS	Panelists:\nKen Auer \nWard Cunningham \nRob Mee \nDon Reifer \nOrganizers:\nSteven Fraser (sdfraser@acm.org)\nRachel Reinitz (rachel@reinitzconsulting.com)\nModerators:\nBill Caputo \nBill Pyritz \nAbstract:Session Format:	Main conference	Panel	2002
113	EXTREME FISHBOWL	Directed by:\nZhon Johansen\nSymantec\nwith celebrity guest programmers and commentators including:Ken Auer\nRoleModel Software\nBrian Button\nObjectMentor\nAlistair Cockburn\nHumans & Technology\nJames Grenning\nObjectMentor\nKay Johannsen\nDuff O'Melia\nRoleModel Software\n\nAbstract:http://www.xputah.org/cgi-bin/wiki?ExtremeFishbowlAtXpUniverse	Main conference	Panel	2002
114	AGILE EXPERIENCES	Moderator:\nDave Thomas \nBedarra Corporation,\nCarleton University and University of Queensland\n\nPanelists\nJohn Manzo\nGeneer\nNarti Kitiyakara\nNOLA Computer Services\nRussell Stay\nSymantec\nAldo Dagnino\nABB\nAbstract:	Main conference	Panel	2002
115	Using Risk to Balance Agility and Discipline 	At the USC Center for Software Engineering we have found that risk analysis is a good way to address "how much is enough?"  questions for a given project situation.  This enables you to balance a project's mix of agility and discipline by considering the risks of having too little or too much of each.  I will illustrate this on several projects situations, show some ways in which hybrid agile and disciplined methods can be combined, and discuss the results of some recent workshops which have addressed this question.	Main conference	Keynote Address	2002
116	XP IN A LEGACY ENVIRONMENT	Summary \n        Extreme Programming is not just for the lucky few projects where applications \n        are built from scratch. Learn how XP's practices can be brought to bear \n        on a poorly designed and untested legacy code base in need of salvation. \n        The audience will operate on a J2EE version of the famous "Bowling \n        Score" application, developed under a waterfall methodology and set \n        within a living environment populated with convincingly nervous clients. \n        Duration: Full day Background\n        To implement new functionality and better usability on legacy systems, \n        XP practitioners must begin with a "recovery and stabilization" \n        phase, in which they erect the scaffolding of unit tests, continuous integration, \n        and other technical infrastructure essential to supporting XP's central \n        value of courage. Of course, this is easier said than done, because the \n        code was never designed to be unit-tested, and there is no continuous \n        integration. To top it all off, the client needs new functionality soon, \n        in order to realize their ROI, and the user interface needs to be overhauled \n        to meet basic standards of usability. How can all of this be accomplished \n        while managing risk?By completing this hands-on interactive tutorial, \n        participants will learn how to:  Structure technical infrastructure tasks within the overall release \n        plan.  Identify which XP practices can be implemented immediately on legacy \n        code systems, and which ones must be gradually introduced.  Use techniques for coping while XP practices are only partly implemented. \n         Establish when and how to proceed to deep information-flow refactoring \n        as the XP support infrastructure comes online.  Improve the legacy code base so that new functionality can safely \n        be added. Enhance the usability and user interface of the application \n        with minimal risk. \n        AudienceContent Outline\n       PrologueThe journey begins…\n          Participants will be introduced to a land under siege by a beastly application, \n          and an intrepid tribe of developers fearing for their livelihoods. These \n          are dangerous times, indeed. Chapter I: Hunting the Beast Scouring the land in search of the monster…\n          Using a legacy implementation of the ubiquitous "Bowling Score" \n          application as a J2EE project on the brink of failure, participants \n          will probe for weaknesses such as lack of testability and overly complex \n          design, answering questions such as: Why is it untestable, and how can \n          this be changed? Is this much complexity necessary? What's wrong with \n          its information flow and presentation?  Chapter II: Laying the Trap The beast is captured and immobilized…\n          Through role playing in a simple release plan, participants will seek \n          to establish control of the project. This will include stabilizing the \n          system with an automated build and unit tests, bolstering communication \n          between teams through the planning game, and introducing usability tests \n          into the user acceptance process. Chapter III: Taming the Beast The beast is taught not to bite the hand that feeds it…\n          Using control established in stabilization phase, participants will \n          begin to add value to the application, making it more usable and crushing \n          bugs mercilessly underfoot. This will be accomplished by means of acceptance \n          tests, code refactoring, and examination of the information flow and \n          visual presentation of the application. Chapter IV: Domesticating the Beast The beast is compelled to return its stolen value…\n          Participants will discuss how to implement new functionality while minimizing \n          risk, expand XP's influence by introducing previously subdued practices, \n          and introduce usability and GUI enhancements into the system, while \n          discussing how these practices can be cleanly integrated into XP and \n          increase project velocity. Epilogue And they lived happily ever after?\n          Participants will engage in a process reflection to review intricacies \n          and implications of the lessons learned.\n      About the Presenters Kuryan Thomas is a Technical Director at C.C. Pace Systems in Fairfax, \n        Virginia. Currently he is a Lead Developer and XP coach, and works with \n        developers and managers to help maintain and enhance a large J2EE application \n        using XP. Kuryan has over 15 years of experience with Object Technology \n        applications ranging from embedded real-time systems to enterprise-class \n        business applications. His professional interests include XP as a development \n        methodology, object oriented design and implementation, web services, \n        and mobile computing.Arlen Bankston is a Senior Consultant and User Experience Manager \n        for C.C. Pace Systems in Fairfax, Virginia. He is currently engaged as \n        a Usability & User Interface Design Mentor, in which capacity he works \n        with business managers and analysts to gather requirements and translate \n        them into usable interfaces, then with developers to implement these designs. \n        His professional interests include the integration of usability and UI \n        design best practices into agile methodologies, as well as the continuing \n        advancement of usage-centered design methods and processes in general. \n        Prerequisites:  \n        A laptop with JBoss 2.4.4 integrated with Tomcat 4.0.1. The combination \n        can be downloaded at http://jboss.org/binary.jsp.	Main conference	Tutorial	2002
117	SCRUM AND AGILE 101	Summary\nAgile processes are different. They not only increase productivity, they bring focus and pleasure back to systems development. This tutorial explains the underlying theory and practices of all agile processes, and then explains how they are implemented in Scrum. A case study is presented. An exercise is then conducted to give the tutorial attendees a feel for the flow, practices, and rules of Scrum. Tutorial attendees are organized into teams that collaborate with the customer to formulate an iteration, self-organize to identify the work in the iteration, report on progress and impediments during the iteration, and present the results of the iteration to the users. \nIf you are attending this tutorial and want to see Scrum applied to a product or system development at your organization, contact Ken Schwaber (ken.schwaber@verizon.net) prior to July 15. The most appropriate project will be selected and used in the tutorial.\n\nDuration: 3 hr (half day) \n\nAims\nTo provide the audience with a description of Scrum, why it works, and how it works. To describe the underlying basis and theory of agile processes, including emergence, self-organization, collaboration, iterations, and incremental delivery. To provide a first hand experience being in a Scrum team highlighting the different feel between agile and traditional processes.\n\n\nAudience\nIndividuals that want to use Scrum's high-productivity, agile methods for a project, and individuals that want to understand Scrum and agile practices. \n\nOutline\nPart 1: Scrum theory and practices discussion (75 min)\nLecture style delivery\nSpeaker introduction \nDefined control vs empirical control \nIncremental functionality, emergence, and self-organization \nScrum process overview \nProduct/ system vision \nWhat is the product backlog and who is the product owner? \nWhat is a Scrum team? \nHow do you plan a Sprint (iteration)? \nHow does a team commit to a Sprint goal? \nWhat is Sprint backlog? \nWhat are daily Scrums? \nHow does a team balance its committments within a fixed Sprint in light of emerging requirements, technology, and team dynamics? \nWhat does it mean to abnormally termate a Sprint? \nWhat happens at the end of Sprint review? \nPart 2: Case Study Overview (15 min)\nPresentation of case study\nVision \nTechnology \nRequirements \nRisks \nAssumptions \nPart 3: Translation of Case Study to First Sprint (90 min)\nFacilitated workshop\nSynthesize vision into product goal \nDevelop product requirements list \nSelect first Sprint product backlog and define Sprint goal \nBreak into Scrum teams \nEach team defines its Sprint backlog - self-organization \nEach team has a daily Scrum to report progress \n \n\nPresenter Resume\nKen Schwaber is one of the developers of the Scrum agile process and has extensively used agile processes over the last seven years. Ken is one of the founders of the AgileAlliance and helped setup the AgileAlliance organization. In 2001, Ken co-authored "Agile Software Development with Scrum" with Mike Beedle. With over thirty years of software development, management and consulting experience, Ken is currently working with organizations to develop software with Scrum and a combination of Scrum and Extreme Programming, as well as helping the organizations plan and execute the required change management.\nKen maintains information related to Scrum at www.controlchaos.com, and can be reached at ken.schwaber@verizon.net.\n\nSuggested readings and documentation\nBasic readings in agile processes recommended. Puruse the materials located at www.controlchaos.com, and look at the material in the books Agile Software Development with Scrum, Schwaber and Beedle, Prentice Hall, 2001; Adaptive Software Development, Highsmith, Dorset House, 1998, and Agile Software Development, Cockburn, Addison-Wesley, 2001.	Main conference	Tutorial	2002
118	HOW TO BE A COACH	Tutorial Summary\nIt's difficult to start a new process, but a coach can make this easier. A coach is part\ndeveloper and part manager. Coaches help a team stay on process and they help the team\nlearn. A coach brings in some outside perspective to help a team see themselves more\nclearly.\nWe'll use a combination of lectures, games, and exercises to explore and practice skills\nthat coaches (and team members!) can use.\n\nDuration: Half-day\n\nAims\nGive students:\nA deeper look at the coach's role\nTools to help communicate better\nPractice with charts, retrospectives, and other feedback tools\nPractice diagnosing team problems\n\n\nAudience\nCoaches, budding coaches, and developers on XP or agile teams.\nContent OutlineThe coach's role\nTeam formation \nBig Visible Charts \nRetrospectives \nWorking yourself out of a job\nPresenter Resumes\nWilliam C. Wake is a software coach, consultant, and teacher. He's the inventor of the\nXP Programmer's Cube, and the author of Extreme Programming Explored and the\nforthcoming Refactoring Workbook. He can be reached at\nWilliam.Wake@acm.org or http://www.xp123.com.\nRon Jeffries has been developing software since 1961, when he accidentally got a\nsummer job at Strategic Air Command HQ, and they accidentally gave him a FORTRAN\nmanual. He and his teams have built operating systems, language compilers, relational\nand set-theoretic database systems, manufacturing control, and applications software,\nproducing about a half-billion dollars in revenue, and he wonders why he didn't get any\nof it. For the past few years he has been learning, applying, and teaching the Extreme\nProgramming discipline. Ron is the primary author of Extreme Programming Installed.\nRon is a trainer and consultant at Object Mentor, Inc, and can be reached at\n RonJeffries@acm.org\n\nExamples of Supporting Material \nChart Reading: \nGiven a problem, what chart might you introduce? Given the data on a chart, what does it\ntell you about the team, its product, and process? We'll provide charts, and ask small\ngroups to interpret them.\nRetrospective: \nXP teams value feedback because it gives them an opportunity to learn. By holding end-\nof-iteration retrospectives, a team can learn from recent mistakes and tune its process.\nWe'll help small groups hold quick retrospectives.	Main conference	Tutorial	2002
119	PAIR PROGRAMMING: EXPERIENCE THE DIFFERENCE	Tutorial Summary\nAbstract: Pair programming is emerging as an important technique for developing higher quality\ncode, faster. With pair programming, two software developers work on one computer,\ncollaborating on the same design, algorithm, code, or test. This tutorial examines pair\nprogramming research results and anecdotal experiences of programmers who have\ntransitioned to pair programming. It will discuss what works and what doesn’t and will also\nexplain techniques for fostering support in making a transition to pair programming – support\nfrom management and support from peers. Hands-on activities will be used to demonstrate pair\nprogramming benefits.\nObjective: Participants will experience the difference between working alone and working in\npairs. They will understand the research results that show pair programming works, learn how\nto pair program, what not to do when pairing, and how to transition to pair programming.\nLevel:: Beginner\nAttendee Background: This tutorial is targeted toward software developers and technical\nsoftware development managers who are interested in transitioning to pair programming.\nPresentation Formal: About half of the tutorial time will be presentation based. The remaining\ntime will be spent on activities and discussion.\n\nPresenter Resumes:\nDr. Laurie Williams is an assistant professor at North Carolina State University. In 2000, she\ncompleted her dissertation which demonstrated statistically that pair programmers were able to\nproduce higher quality produces in essentially half the time when compared to individual\nprogrammers. Prior to her recent academic career, Laurie worked at IBM for nine years.\nDr. Robert Kessler is a full professor at the University of Utah. He has a BS, MS and PhD in\nComputer Science from the University of Utah. He has founded several companies and is on\nthe board of several others.\nDr. Williams and Dr. Robert Kessler are currently collaborating on a book entitled Pair\nProgramming Illuminated, to be published by Addison-Wesley in July 2002.\nRepeat: Yes\n\nContent Outline for Half-Day Tutorial (3 Contact Hours):\nI. Welcome and Tutorial Objectives (5 min.)\nII. Activity I: Individual design (25 min.)\nIII. Research Results in Pair Programming Presentation (30 min.)\nIV. Activity II: Individuals working on a team (25 min.)\nV. BREAK – 20 minutes\nVI. Adoption of Pair Programming Presentation (20 min.)\nVII. Activity III: Pairs rotating around a team (25 min.)\nVIII. Pair Programming Implementation Items Presentation (20 min.)\nIX. Summary and Conclusion (10 min.)\nTutorial Resume:\nThis tutorial was given at OOPSLA in October 2001 and at the NASA Software Engineering\nWorkshop in November 2001.\n\nTutorial Notes:\nTutorial participants are divided into teams of four. The three exercises proceed as follows:\nActivity One:\n1. A problem statement for a design is provided.\n2. Each participant individually produces a working design.\n3. Teams convene and review each of the designs, enumerating the features that are\ncommon among the designs and those that are unique.\n4. All tutorial participants discuss:\na. Observation – When engineers work individually on a design, there will be some\nsimilarities among the designs. However, each engineer will typically incorporate\na larger number of unique features.\nb. What conclusions can be drawn from this experience?\nActivity Two:\n1. A problem statement for the design of a device is provided.\n2. Each participant is given a role in the design of one module of the device. Each\nparticipant must complete his or her assignment without collaborating with the team.\n3. Each participant must then draw his or her current view of the team’s device without\ncollaborating with the team.\n4. Participants integrate their designs into one team device.\n5. All tutorial participants discuss:\n   a. How far away their initial knowledge of the entire device was from the integrated\nteam drawing (step 3 vs. step 4).\n   b. How the pieces they designed individually did not really fit together into a\nmeaningful device.\nActivity Three:\n1. A problem statement for the design of a device that is enhanced from the previous\ndevice is provided.\n2. Each participant is given a role in the design of the device. This participant is given\nultimate authority over this aspect of the system in the upcoming collaboration.\n3. Each participant is assigned a partner to work with. Together the pair work on the two\nthings they were assigned.\n4. Partners rotate so that each person is paired with a team member they did not work with\nyet. Together the pair work on the two things they were assigned.\n5. Partners rotate again so that each person is paired with the last team member they did\nnot work with yet. Together the pair work on the two things they were assigned.\n6. Each participant must then draw his or her current view of the team’s device without\ncollaborating with the team.\n7. Participants integrate their designs into one team device.\n8. All tutorial participants discuss:\n   a. How much they now knew about the overall team design before integration.\n   b. How the pieces they designed in pairs generally fit together into a meaningful\ntransportation device.\nNote: The same amount of time is allotted for each activity. With each successive activity,\nmore time is spent on initial designing and less integration time is necessary.	Main conference	Tutorial	2002
120	HOW TO START AN XP PROJECT: THE INITIAL PHASE	Abstract\nWithin Extreme Programming, the initial phase of a project is the exploration phase. This phase should establish\na common view of the system to be built and provide the base for what XP calls “productionizing” – the full-fledged\nXP development iterations. Therefore this phase is of crucial importance to the whole project. While\nthere is a lot of documented experience with the XP process itself, little has been said about the initial phase.\nThis tutorial presents a number of best practices and experiences to structure and master the exploration phase.\nThey will guide the team from the kick-off meeting to the first implementation of the system skeleton. The\ntechniques presented have been adapted to XP from experience gained in twelve years of consulting in\nprofessional object-oriented development projects. They have been successfully applied in numerous XP\nprojects, ranging from high-pressure short-term to large-scale long-term, from finance to the health domain, and\nfrom greenfield development to legacy system replacement.\n\nTutorial Objective\nAfter the tutorial the participants will have a clearer idea of which concepts are helpful and which pitfalls should\nbe avoided in starting an XP project. They will be equipped with a number of practice-proven techniques for\ngaining first insights into the problem domain and finding a system metaphor. They will have learned to use\nspike solutions and prototypes effectively. Finally, they will have a better idea when to end the exploration phase\nand to move on to the well-described XP development iterations.\n\nLevel: Intermediate\n\nAttendee Background\nThe tutorial is targeted at (potential) XP project managers and experienced developers interested in the extreme\nprogramming process. It is assumed that the audience has some familiarity with the basic concepts of extreme\nprogramming or similar agile processes. The typical attendee is thinking about starting an XP project or has\nalready faced the challenges of the exploration phase.\n\n\nPresentation Format: Lecture with slides, discussion\n\nDuration: Half Day\n\nSupporting Material: Handouts containing the slides\n\nPresenters\nHolger Breitling is a research assistant at the University of Hamburg and a professional software architect and\nconsultant at APCON Workplace Solutions. He is a senior architect of the JWAM framework, which is\ndeveloped applying most of the XP techniques. He has several years’ experience with extreme programming\ntechniques working on several projects and is currently acting as a project coach and trainer in this domain.\nbreitling@jwam.org\nMartin Lippert is a research assistant at the University of Hamburg and a professional software architect and\nconsultant at APCON Workplace Solutions. He has several years’ experience with XP techniques and XP project\ncoaching for various domains and has given a number of talks, tutorials and demonstrations (e.g. ICSE, XP,\nOOPSLA, HICSS, ICSTest), especially XP tutorials at ECOOP 2001 + 2002, OOP 2002 and ICSTest 2002. He\nis a member of the XP 2002 program committee. Among his publications are articles for “Extreme Programming\nExamined” and “Extreme Programming Perspectives” and he authored the book “Extreme Programming in\nAction”, which is due to be published by Wiley in July 2002.\nlippert@jwam.org	Main conference	Tutorial	2002
121	EFFECTIVE JAVA TESTING STRATEGIES	Summary\nThis tutorial will address common problems and introduce several mechanisms that will increase the effectiveness and speed of writing Java unit tests.  In this tutorial, attendees will learn (a) how to effectively use the JUnit testing framework, (b) several patterns and practices of implementing mock behavior in Java and (c) techniques for identifying and structuring unit tests that are effective, communicate clearly what is being tested and are easy to understand and change by other members of a software team.\n\nDuration, Aims and Audience\nThis is a half-day tutorial that aims to introduce attendees to writing effective Java unit tests and thereby increasing the speed at which they develop software in a test-first environment like XP.  \nTutorial Content Outline\n\nIntroduction to Junit\nWhat is JUnit?\nA simple Junit example.\nJunit Assertions\nCreating TestSuites in Junit\nAssembling Dynamic TestSuites\nWhat do we test?\nUnit Tests vs. Functional Tests\nTest-first vs. Code-first development\nDesigning By Contract and Unit Tests\nUsing pre/post conditions to guide test case creation\nStaying focused and fast with Mock Objects\nMock objects\nStub implementations\nClass Isolation With Mocks\nMocking to Reduce Pain.\nEffective Mock Object implementation patterns\nSimple mocks\nData mocks\nMocks with memory\nMock Factory pattern\nOverriding Mock Method pattern \nProper use of setUp() and tearDown() for Mock object initialization\nMocking Java API’s\nMocking a Socket\nImpossible Mock Situations\nAbstracting Around Impossible Mock Situations\nUsing Semaphores to coordinate threads and their tests.\nFine Tuning Your Testing\nCommon test case refactorings\nSubstitutability Abstract Test Cases\nAchieving High Code Coverage\nIntroduction and Background of the Tutorial and support materials\nThe tutorial content and materials are based upon Java development workshops that I have been running and guidance that I have been providing as an XP consultant on in-house and outsourced projects over the last 3 years.  The final tutorial materials will be slides taken from our workshops and modified as necessary to meet the needs of this 3 hour tutorial.\n\nInstructor Short Bio/Resume\nMr. Goodsen is the President and founder of RADSoft, a software engineering consulting firm specializing in rapid software development techniques since 1996.  He has worked on a variety of large-scale software projects over the last fifteen years, the most notable projects highlighted below:\nGlobal Positioning Systems, Rockwell International , 1986-1989.  User Equipment software engineer, responsible for design and development of GPS software in the early stages as the GPS satellite constellation was still being deployed.\nSoftware Research Engineer, Rockwell International, 1989-1991.   Representative to consortiums, including the Software Engineering Institute (SEI) and Software Productivity Consortium (SPC).  Primary role was integrate new research in incremental software process and testing/verification back into Rockwell projects, primarily commercial avionics software deployed on Boeing commercial aircraft.\nObject-Oriented Design Instructor, EVB Software Engineering 1991-1993.   Developed software and courses and taught OOD courses for EVB Software Engineering, founded by Edward V. Berard, now with The Object Agency.\nSoftware Consultant, The Dalmatian Group, 1993-1995.   Consulted with many clients to help them adopt a rapid software delivery process, primarily focused in the area of user-centered design and object-oriented graphical user interfaces.  Clients included Mitchell International, The Legent Corporation, J.P. Morgan (Wall St.), Motorola Cellular and Motorola Space Systems Division (IRIDIUM).\nRADSoft, 1996-present.  Founder and President. \nIncremental Software Process and Architecture consulting for large scale software projects, including IRIDIUM ground control systems and Capital One Billing Products.\nIn the last 3 years, we have adopted Java and XP exclusively as our development language and process.  I have brought together teams that have used Java and XP successfully in both outsourced software projects and in-house projects.  We have consulted with several XP projects and developed 2 systems in their entirety using XP with teams of 5-10 developers.  This experience in building teams from scratch, teaching them the practices of XP and the skills of test-first coding, OOD and Refactoring within an XP process has provided a wealth of experience that we would like to share with the rest of the software community.\nWe can provide excellent references on these projects upon request.\nEducation\nB.S. Computer Science and B.S. Applied Mathematics, University of Idaho, 1986.\nA.S. Computer Science, North Idaho College, 1983.\nContact Information\nJohn Goodsen, President and Principal Consultant of RADSoft.\nEmail: jgoodsen@radsoft.com / Office: 208-665-0516	Main conference	Tutorial	2002
122	TEST DRIVE FOR TESTERS: WHAT, WHEN, AND HOW TESTERS DO FOR XP TEAMS	Summary\nThis tutorial shows testers, or anyone wearing the tester hat on an XP team, how testers contribute to the project, including what testers should do, when they should do it, and how they should do it.   You’ll do exercises that show you how to either work on an XP team as a tester yourself, or work productively with a tester on your team.\n\nAudience\nXP newbies and veterans, testers, programmers, coaches, customers, analysts and managers.  Anyone who might be expected to help with some aspect of acceptance testing on an XP team, and anyone who wants to help their XP team maintain a focus on quality.\n\nDuration: Half-day\n\nDescription\nWe’ll take a trip through an iteration of an XP project step by step and show what goals to reach for, which activities to engage in, and some helpful techniques for testers to use.  The exercises are built around an XP project to develop a simple web-based tracking application.  \n\nTutorial Outline\nWhat testers do during release planning and story writing:\nHow to identify hidden, questionable and incorrect assumptions\nHow to define acceptance tests to make assumptions explicit\nHow to accurately estimate time for acceptance test tasks\nHow to enable accurate story estimates\nHow to ask questions to identify potential problems \nWhat testers do during iteration planning\nHow to help team think of all tasks needed to complete a story, including those relating to infrastructure, packaging, environment, functional and acceptance testing\nHow to promote understanding between the customers and the development team\nHow to break out and accurately estimate tasks related to acceptance testing\nWhat testers do during the actual iteration\nHow your team can define detailed, but not too detailed, and effective acceptance tests, accounting for unusual and external events as appropriate\nHow to document tests so they are easily understood and changed by the customer\nHow to design and code effective and maintainable automated tests \n\n\nPresenter's Resume\n\nLisa Crispin has worked as a tester on Extreme Programming teams for a one and a half years.  Her article “Extreme Rules of the Road:  How an XP Tester can Steer a Project Toward Success” appeared in the July 2000 issue of STQE Magazine.  Her presentation “The Need for Speed:  Automating Acceptance Tests in an Extreme Programming Environment” won Best Presentation at Quality Week Europe in 2000.  Her papers “Testing in the Fast Lane:  Acceptance Test Automation in an Extreme Programming Environment” and “Is Quality Negotiable?” will be published in a collection called Extreme Programming Perspectives from Addison-Wesley.  She is co-writing a book Testing for Extreme Programming which will be published by Addison-Wesley in October 2002.  Her presentations and seminars on testing for Extreme Programming in 2001 included “XP Days” in Zurich, Switzerland, XP Universe in Raleigh, and STAR West; in 2002, the Software Test Automation Conference in San Jose and the Rocky Mountain Software Symposium in Denver.  Lisa can be contacted at lisa.crispin@att.net\n\nTip House is Chief Systems Analyst at the OCLC Online Computer Library\nCenter Inc., a non-profit organization dedicated to furthering access to\nworld's information, where he develops and supports test automation tools\nand document management systems for the Web. His main interest is software\ndevelopment, also includes a long-standing focus on software testing,\nsoftware measurement, and quality assurance. He has published numerous\npapers on these subject at development, measurement and testing conferences,\nincluding XP2001 in Sardinia, Italy. He co-author of the book Testing for\nExtreme Programming which will be published by Addison-Wesley in October\n2002, and his articles appear online in the April issue of Cepis Upgrade\nhttp://www.upgrade-cepis.org and at http://xptester.org. Tip has Certified\nQuality Analyst, Certified Software Quality Engineer, and Lead Ticket\nAuditor certifications, and managed the independent test function at OCLC\nduring their three year successful effort to become registered to the\nISO9000 standards. Tip can be reached at tip_house@oclc.org.\nSupporting Materials\n\nhttp://www.xptester.org has materials relating to the subject of this tutorial.  Our chapter from Extreme Programming Perspectives gives an overview of the test framework that we use; it’s available at http://www.xptester.org:4006/_ZABLE[0]_/tab/7/fastlaneSgl.doc.  \nLisa’s article for STQE Magazine and other related papers are available at http://groups.yahoo.com/group/agile-testing/files/.	Main conference	Tutorial	2002
123	SCALING AGILE PROCESSES: AGILE SOFTWARE DEVELOPMENT IN LARGE PROJECTS	Abstract\nOne saying is that, if you have a hundred people on a\ndevelopment team, get rid of at least eighty of them and\nkeep the top twenty (or less). As a result the chances for\nproject success will raise significantly. But maybe you\ndon’t have even twenty top ones and/or the company just\nhave these hundred people sitting around.\nIt seems like the only places where large projects with huge\nteams seem to really work are projects where everything is\nformalized, the requirements are fixed and, most\nimportantly, they don't change over time. A detailed plan\ncan be set up and every successive action will stupidly\nfollow the plan. Example are defense projects or projects\nwith a similar structure, such as in airlines or nuclear power\nplants.\nWe as software-engineers tend to question software\nengineering in the large not only because most of the agile\nprocesses claim to work only for small teams, also because\nmost of the failed projects are really large ones. (Well,\nmaybe nobody talks about failed small projects.) However,\nthere are more than enough projects that are large in some\nsense. So, the question arises, how to use aspects of agile\nsoftware development in large projects.\nWe don’t want to focus on every aspect of agile processes,\nbut on those who we encountered to be mainly different in\nlarge projects. The differences might be that some things\nhave to be implemented differently, because at a specific\nsize of the project things don’t work out the normal way\nanymore. Other differences are based on problems, which\npop up especially in large teams, or rather which won’t be\nproblems at all in small teams.\nThis tutorial is based on our experience coordinating – so\nfar successfully – a large (currently 160 people) project.\nAlthough we are still in the process of learning we would\nlike to share our experiences about how agile processes can\nserve large projects. And besides – chances are high, that at\nthe time XP Agile Universe 2002 is held, we have made\neven more valuable experiences.\n\nDuration, aims and audience\n\nDuration: Half-day tutorial\n\nAims:\n- Ideas on how to overcome the obstacles of agile\nsoftware development in the large\n- Know what the biggest problems of agile software\ndevelopment in the large are\n- Know how agile software development in the\nlarge could possibly work\nAudience\n- Those who tried to use agile methodologies in\nlarge projects and failed.\n- Those who tried to use agile methodologies in\nlarge projects and succeeded.\n- Those who didn’t try agile methodologies in large\nprojects but would like to do so.\n- Proponents of the linear (waterfall-) model who\nthink agile processes suck anyway\n- Proponents of agile processes who think an agile\nprocess would never work in the large\nProcess\n\nWe want to share our experiences as well as hear from the\naudience’s experience and questions. Probably we will use\ninteractive elements to work out patterns of agile\nprocessing in the large.\n\n\nContent outline\nLarge Projects and their environment\nLarge companies often run large projects. The organization\nof the companies forces the project to be run in a specific\nway. Often problems arise because of that. Some of the\norganizational departments have been introduced for non-agile\nprojects, which means they are for example not\nservice oriented, or human centered. They were invented\nfor controlling a project and supporting the organizational\nhierarchy.Theywerenot invented for supporting the needs\nof the different projects, so they don’t regard the projects as\ntheir customers.\nThis has different effects – often a project tries to ignore\nthose departments as good as possible. If this is not\npossible at all the project and the organizational\ndepartments fight against another, which costs of course a\nlot of time, energy and therefore money.\nThe only way out is to ask those other departments to come\non board of the project. – If you can’t fight your enemy you\nbetter work with them. – But beware; that it will take a\nwhile till the different teams will really work together.\nTypical organizational departments that don’t consider\nthemselves as a service to a project are: Project Planning\nand Controlling, Quality Assurance, Revision and the like.\nThe main difference with agile projects is here, that those\ndepartments are involved in the process from the very first\ntime.\nGetting Started\nWhat’s the best way to start an agile project with a large\nteam and what to start with?\nNot every change benefits from being introduced smoothly.\nSometimes it’s even better to change something so\nradically (shock-effect) that the real change you want to\nmake doesn’t seem so strange anymore compared to the\nexaggerated change.\nEspecially for large project continuous feedback is\nessential. For example cycles for iterations and releases\nhave to be much shorter than with smaller teams. The\nproblem is: If this tanker runs in the wrong direction, it is\nalmost impossible to change the course after a while.\nSo according to our experience the most important thing is\nto focus on all kinds of quick feedback: Organization,\nEnvironment, Running Software, Happiness of members of\nthe team, etc. This doesn’t sound too different from any\nother agile project, but establishing short feedback cycles is\nmuch more difficult that with small teams. But once this is\nestablished all other changes will follow more naturally\nCommunication\nInner team- and communication among teams have to be\nestablished.\nDifferent communication channels have to be ensured. It\nseems that as soon as one communication channel is\nestablished, it doesn’t work anymore. The main reason is\nthat a working communication channel is often overused\nwhich results in ignoring the channels. This means\nchannels have to be changed often over time.\nEvery person obtains information differently, using\ndifferent sensory modalities. Some people, the visuals,\nlearn most effective by watching; the auditories, by\nlistening and the kinesthetics, through action. Therefore,\nprovide different approaches to communicate. Accept\ndifferent communication media by addressing various\nsensory modalities.\nCustomer involvement\nThere hardly exists a single customer. Most often if the\nproject is really large, the amount of customers is in\nrelation to the size of the project.\nOften there are several customers, who are either invisible,\nlike for standard software, or it is a community of\ncustomers who have a similar – but not the same – interest\nin the project. Even worse the community of customers, is\noften competitive among themselves. This means it is hard\nto get them on-site, because there is no accepted\nrepresentative of the group and to speak with one voice. Of\ncourse the project can’t solve their competition problems,\nbut it can ask for regular feedback, which could of course\nsometimes be contradictory.\nThe best is to establish a substitute for the customer, which\nare domain experts and ideally have a history at the real\ncustomer-site.\n\nDifficulties in Planning\nEspecially for large projects it’s unusual to plan a projects\ntowards results. Typically the plan focuses on milestones,\nwhich do not reflect the highest priorities, biggest business\nvalue and the like. It’s often hard if not impossible to\nreplace such planning with elements such as planning\ngames or time boxes. However, it might be possible to\nintegrate both forms of planning.\n\nIntegration\nMost agile Processes require continuous integration with\ndaily (nightly) builds. This is often difficult with large\nteams because of several reasons.\n\nAbout the Author\nJutta Eckstein is an independent consultant and trainer from Munich,\nGermany. Her experience in agile processes is based on\nover ten years experience in developing object-oriented\napplications. Besides engineering software she has been\ndesigning and teaching OT courses in industry. Having\ncompleted a course of teacher training and led many 'train\nthe trainer' programs in industry, she focuses also on\ntechniques, which help teach OT, and is a main lead in the\npedagogical patterns project. She has presented work in her\nmain areas at OOPSLA, OT and EuroPLoP.\nShe is a member of the board of Hillside Europe e.V., the\nassociation to advance expert knowledge (in the shape of\npatterns) about practice-proven techniques for analysis,\narchitecture and programming of software systems as well\nas for the formation of organizational and team structures\nfor software development.\nShe is furthermore a member of the program committee of\nXP 2002, XP- and Agile Universe 2002, EuroPLoP 2002,\nOT2002 and OOPSLA 2002.\n\n\nSupporting Material\nThis tutorial is based on two main sources: One is the\nproject the author is working on at the moment. The other\nsource is a goldfish bowl the author runs together with\nsome other co-authors at OT 2002 (see www.ot2002.org).\nThe title of the goldfish bowl is: (Agile) Software-Engineering\nin the large - does it work at all?\n\n\nREFERENCES\n\n[1] Adaptive Software Development. Website\nhttp://www.adaptivesd.com\n[2] Agile Prozesse. Website. http://www.agilealliance.org.\n[3] Kent Beck. "Extreme Programming Explained –\nEmbrace Change". Addison-Wesley, Reading, Mass.,\n2000\n[4] Kent Beck, Martin Fowler. "Planning Extreme\nProgramming". Addison-Wesley, Reading, Mass.,\n2001\n[5] Crystal Clear. Website.\nhttp://www.crystalmethodologies.com Author: Alistair\nCockburn\n[6] Alistair Cockburn. "Surviving Object-Oriented\nProjects". Addison-Wesley 2001.\n[7] Alistair Cockburn. "Agile Software Development".\nAddison Wesley, 2001.\n[8] Extreme Programming. Website:\nhttp://c2.com/cgi/wiki?ExtremeProgrammingRoadmap\n[9] Peter DeGrace, Leslie Hulet Stahl. "Wicked Problems,\nRighteous Solutions – A Catalogue of Modern\nSoftware Engineering Paradigms". Prentice Hall,\nEaglewood Cliffs, New Jersey, 1990.\n[10] James A. Highsmith III. "Adaptive Software\nDevelopment – A Collaborative Approach to\nManaging Complex Systems". Dorset House, New\nYork, 2000.\n[11] Norman L. Kerth. "Project Retrospectives". Dorset\nHouse, New York, 2000.	Main conference	Tutorial	2002
124	APPLYING XP TOOLS TO J2EE FOR THE EXTREME PROGRAMMING UNIVERSE	Abstract Summary\nApplying XP Tools to J2EE for Extreme Programming is a half day technical tutorial that focuses\non using Open Source Software tools to apply XP to Enterprise Java development, specifically for\ntesting web components. This session will mainly encompass automating the build & integration\nprocess and automating the testing process.\nEssentially this tutorial is a cookbook on how to implement XP methodology in an Enterprise Java\nshop. XP is the methodology, i.e., the philosophy. Ant, JUnit, etc., that helps developers realize\nthe XP philosophy in a J2EE environment.\nXP is comprised of much more than testing, integration & build tools, but testing and integration\ntools are one way that XP materializes in the development process. This tutorial covers the day-to-\nday application of XP tools - not the full XP process and methodology. Specifically, this\nsession will cover testing web components with JUnit, Cactus, JUnitPerf, HttpUnit, Ant, and\nJMeter.\nAims and Intended Audience\nMany books and papers on XP are focused on theory and methodology. Fewer publications,\nhowever, focus on practical application in a Java Enterprise Environment. XP is extremely\npopular! However, many development shops fail in instantiating the abstract concepts of XP in\ntheir Java development process. This tutorial is geared to address the gap between XP theory\nand real world application for automated testing and continuous integration in a J2EE\ndevelopment shop.\nThis educational session is geared for developers using J2EE and XP. This includes developers\nwho want ways to perform some level of testing and automated builds, as well as developers\nthat use testing as a central role in their development due to the XP.\nApplying XP Tools to J2EE for Extreme Programming Universe has been designed for designed\nfor an audience experienced in Java, as well as XP programmers who want to ease the\ndevelopment of Java web applications. These developers would be enterprise Web application\nspecialists with a grasp of Enterprise Java (J2EE) technologies: EJB, JDBC, JSP and Servlets.\nHowever, they would not have to be J2EE experts.\nAbout the Presenter\nRick Hightower, CTO of Triveratech, has over a decade of experience as a software\ndeveloper. In the past, he has helped development teams adopt new processes like Extreme\nProgramming, and technology adoption like J2EE.\nRick's publications include Java Tools for eXtreme Programming, which covers deploying and\ntesting J2EE projects (published by John Wiley, 2002); contributions to Java Distributed\nObjects (published by Sams); and several articles in Java Developer's Journal. Rick also\nwrote a three part tutorial series on EJB CMP/CMR for IBM developerWorks (published in\nMarch 2002).\nCurrently, Rick is involved in course development, mentoring, consulting and training on\nJava, J2EE, Web Services and XP projects. In his spare time, he does J2EE development.\nRcik’s detailed resume is attached.\nRick can be reached at 520-290-6855 or at RHightower@triveratech.com.\nOutline\nEach major concept will have supporting sample code. Code samples provided upon request.\n Introduction\n Complexities with J2EE development\n   The JAR file\n     Jar Files and Applets\n     Executable Jar Files\n     Web Applications and WAR Files\n   Enterprise Beans and EJB Jar Files\n   Enterprise Applications and EAR Files\n Continuous integration with Ant\n   Ant Basics\n   Projects, Targets and Tasks\n   Working with Properties\n   Path and Filesets\n   Conditional Targets\n   Using Filters\n   Nested Builds\n   Unit Testing with JUnit\n   Writing a test case\n   Integrating JUnit with Ant\n   In container testing with Cactus and HttpUnit\n   In container testing\n   Cactus Architecture\n     Testing Tags\n     Testing code for use with JSP\n     HttpUnit\n   Combining HttpUnit with Cactus\n   Load Testing with JUnitPerf and JMeter\n   JUnitPerf Concepts\n   Timed Test\n   Load Test\n   JMeter Concepts\n   Combining JMeter, JUnitPerf and more\n   Using performance monitoring tool to find problems (e.g., JProbe)	Main conference	Tutorial	2002
125	XP FOR A DAY	Summary\nAttendees will practice XP for a day. Students will experience the XP development cycle\nand many of the practices in the context of an XP iteration plan and two development\niterations. \nStudents will: \n* Form XP development teams\n* Participate in an iteration plan\n* Accept new stories\n* Identify development tasks\n* Sign up for tasks\n* Experience Pair Programming\n* Program stories using test first design\n* Write and Run automated acceptance tests\nDiscussions occur through out the day to reflect on experiences and lessons learned.\nPrerequisites:\nFamiliar with XP concepts\nJava programming experience\nStudents download and perform XP for a Day preparation exercises.	Main conference	Tutorial	2002
126	REFACTORING: IMPROVING THE DESIGN OF EXISTING CODE	Summary\nAlmost every expert in Object-Oriented Development stresses the importance of iterative development. As you proceed with the iterative development, you need to add function to the existing code base. If you are really lucky that code base is structured just right to support the new function while still preserving its design integrity. Of course most of the time we are not lucky, the code does not quite fit what we want to do. You could just add the function on top of the code base. But soon this leads to applying patch upon patch making your system more complex than it needs to be. This complexity leads to bugs, and cripples your productivity. \nRefactoring is all about how you can avoid these problems by modifying your code in a controlled manner. Done well you can make far-reaching changes to an existing system quickly, and without introducing new bugs. You can even take a procedural body of code and refactor it into an effective object-oriented design. With refactoring as part of your development process you can keep your design clean, make it hard for bugs to breed and keeping your productivity high. \nIn this tutorial we'll show you an example of how a lump of poorly designed code can be put into good shape. In the process we'll see how refactoring works, demonstrate a handful of example refactorings, and discuss the key things you need to do to succeed.\n\nDuration: Half Day\n\nLevel: Intermediate\n\nPresenter's Resume\nMartin Fowler is the Chief Scientist for ThoughtWorks, Inc., a leading custom e-business application and platform development firm. For a decade he was an independent consultant pioneering the use of objects in developing business information systems. He’s worked with technologies including Smalltalk, C++, object and relational databases, and EJB with domains including leasing, payroll, derivatives trading and healthcare. He is particularly known for his work in patterns, the UML, lightweight methodologies, and refactoring. He has written four books: Analysis Patterns, Refactoring, the award winning UML Distilled, and Planning Extreme Programming. \nMartin has been giving this tutorial in various forms since around 1997. It has been presented at a wide range of commercial and academic conferences including OOPSLA (where it was one of the top 5 tutorials in 1999), Software Development,  and JavaOne.\nThe tutorial is based on the early chapters of Martin’s book “Refactoring: improving the design of exisiting code”. The tutorial is either presented by Martin alone or in collaboration with Josh Mackenzie.\nContact information\nMartin Fowler\nThoughtWorks, Inc.\n651 W. Washington Blvd.\nSuite 600\nChicago, IL  60661\nT: 312.373.8564\nF: 312.373.9564\nfowler@acm.org	Main conference	Tutorial	2002
127	THE AGILE DATABASE	Summary\nDoes your development team’s database strategy suck? Does your team even have a database strategy, or is this vital portion of your enterprise application - the repository of the data upon which your entire application rests - in the hands of some guy who sits on another floor or two buildings down the street? Is he even a member of your team?\nThe tutorial’s presenters do not have their sights trained on your database administrator, but they do intend to lay waste to the inefficiency and backward thinking inherent in the database-related practices of most development teams.\nThe tutorial will present a proven plan for adding agility to the database (starting with making the DBA a true member of the team). Participants will be shown how the application database can be structured to provide each team member with control of their own data space (similar to individual application instances). The presenters will explain, in detail, how processes and tools can be used to make the database more manageable and open to refactoring. Finally, the presenters will address the issue of applications that are already in production, and detail how the above topics still can apply to production environments.\n\nObjective\nAttendees will receive both (1) a thorough introduction to the concepts behind an agile database strategy, and (2) implementation-specific details that will allow them to introduce these concepts onto a development team.\n \nAttendee Background\nDevelopers, DBAs and project managers are encouraged to attend. Experience on a development team of eight or people is strongly recommended. Experience with an agile development methodology is recommended, but not required. A general understanding of relational databases and/or SQL is, similarly, recommended but not required.\n \nExperience Level: Intermediate\n \nPresentation Format: Lecture with slides\n\nDuration: Half Day\n\nOutline\n\nThe Development DBA\nManaging the Database: What Makes It So Complicated?\nThe Database Instance\nThe File System Metaphor\nThe Strategy\nThe Bifurcated Database\nThe Lineage of Instances\nThe Master Instance\nThe Update Log\nThe Update List\nImplementation\nThe Rules\nWho Gets to Play DBA\nTools and Automation\nTips and Tricks\nKnown Pitfalls\nLimitations\nAgile Database Development in a Production Environment\nPresenters\nPramod Sadalage, ThoughtWorks, Inc.\npramod@thoughtworks.com\n(312) 373-8555\nPramod Sadalage works as a Data Architect and Lead DBA at ThoughtWorks, Inc, a leading custom e-business application and platform development firm. At present, he is working on a large J2EE application, which uses XP, an agile methodology, may not have been sufficiently discussed in the context of databases.\nWhile on this project, Pramod pioneered the practices and processes of Agility in the database. He has worked with a variety of Relational Databases including Oracle, MS SQL, Informix, and Sybase. Pramod has more than eight years of experience with domains including financial, leasing, material management, and insurance. \nPeter Schuh, Independent Consultant\nagile@peterschuh.com\n(312) 373-8433\nPeter Schuh is an independent consultant, specializing in system analysis and project management. He has more than five years experience participating in and managing projects in the leasing, health care and e-commerce fields. Peter has written and spoken about Extreme Programming, the adoption of agile processes, agile development's impacts upon database administration, and the ObjectMother pattern.	Main conference	Tutorial	2002
128	CHANGE WIZARDRY: TOOLS FOR GEEKS	Duration: Half-Day (3 hours)\nAudience: Agile/XP folks who are trying to make change happen\nAbstract:\nHave you noticed that it can be difficult to get your colleagues and/or your\norganization to adopt agile methodologies? "What's wrong with our current process?"\n"We don't have time for change." "I’ll never pair-program." "It's not in the budget."\n"We've never done that before."\nUnderstanding the organizational dynamics of change is critical to influencing the\nchangeover from traditional software development to XP or other agile\nmethodologies. This tutorial will introduce you to four change tools, which the\npresenters have found helped people and organizations actually effect a change.\nIn this tutorial you’ll apprentice as a change wizard, learning about:\n· Change Readiness Assessments\nConjuring up the right assessment tool will help you determine answers to\ncritical questions like: "Is there a chance for change?" “Do pockets of\nreadiness exist in my organization?” "What would need to be different around\nhere for change to occur?" Will the path to change in my organization be a\nmulti-step process or one transformational leap?"\n· Project Retrospectives\nCast the spell of learning. Change cannot happen without learning and\nretrospectives help organizations learn. The examination of past performance\ndata, which happens during a retrospective, yields a climate that fosters\nreadiness for change.\n· Paradoxes\nAmaze and astound your colleagues with paradox voodoo. Agile\nMethodologies are filled with paradoxes, contradictory conditions that must be\nresolved for effective and harmonious development. Once you tap in to the\npower of personal and team paradoxes you are better equipped to understand\nand work with resistance to change.\n· Chartering\nLearn a little piece of magic called a Charter and you'll know how to make a\ncommitment to change actually stick. A charter is a reference point or shared\nagreement between team players that provides direction during the course of\na project.\nJoin us and learn to do your own change magic.\nOutline:\n\nIntroductions\n Presenters\n Topic Overview\n Participants \n Understanding Change Dynamics – The Trances of the Status Quo\n Change Models\n Change Formula\n Practice experiencing and influencing change – interactive activities\n How does this relate to software development?\n Change Readiness Assessments – Divining the Source\n Examples and Anecdotes\n Interpreting the Assessment – experiential\n Project Retrospectives – The Spell of Learning\n End of Project Reviews and Norm Kerth\n The benefit of a retrospectives\n A mini-retrospective experience\n Paradox Voodoo\n Introducing paradoxes\n Finding where they live – interactive\n How to break the enchantment\n  Chartering – Change Wizardry That Sticks \n Chartering what and why\n Develop a charter – simulation\n What works?\n Wrap-Up\n Review - Earn your official apprentice wizard’s wand\n Resources for wizards\n Closing\n Presenters:\nJoshua Kerievsky is a software development coach and programmer. After\nprogramming on Wall Street for nearly 10 years, in 1995 he founded San Francisco\nBay Area-based Industrial Logic (http://industriallogic.com), a company that\nspecializes in Extreme Programming (XP). Since 1999, Joshua has been\nprogramming and coaching on small, large and distributed XP projects and teaching\nXP to people throughout the world. He regularly speaks about XP, has authored\nnumerous XP and patterns-based articles, simulations and games and is hard at\nwork on the forthcoming book, Refactoring to Patterns\n(http://industriallogic.com/xp/refactoring/).\nDiana Larsen, a senior consultant with FutureWorks Consulting LLC, works with\nleaders of high tech companies, engineering teams, and development groups to\nstrengthen their ability to manage organizational changes (e.g., a migration to\nXP/Agile methods) and capture the learning from their development experiences for\nfuture projects. Based in Portland, OR, she has over twelve years experience with\nsupporting effective interaction, planning, and review, as well as managing projects.\nClients work with Diana because of her experience and expertise, but also because of\nher candor and her willingness to explore uncharted territory and innovative\nsolutions. She is a co-sponsor of the upcoming Project Retrospectives Facilitators'\nGathering and a speaker at conferences.\n\nSupporting Material:\nDiana and Joshua’s experience with Change Wizardry is the supporting material. As\nalways, we plan on conducting a highly interactive session. We will be providing\nhand-outs, which are still under development.	Main conference	Tutorial	2002
129	BEYOND THE CUSTOMER: AGILE BUSINESS PRACTICES FOR XP	AbstractThe role of the Customer/Product Owner in an Agile project is challenging. While much has been written about the Customer practices that address the interface with the Developers, a vital area of the product development process lies beyond that boundary in the business and product management domains. \nCustomers are faced with many tough questions: Are the stories supporting the real business goals? Do the release plans address the needs of all of my users? How can I determine the value and priority of the stories? How can I turn high-level business and product strategies into stories and release plans? How can I make sure that I'm using my Developers' time to produce the most business value? \nIn this tutorial we will explore some specific Agile solutions that we've successfully applied to the business side of real-world projects in concert with XP. Through a combination of light lecture, hands-on exercises, and group discussions, tutorial participants will learn new techniques and practices to introduce and apply to their projects. \nIn this tutorial, we'll cover: \nApplying Agile values and principles to create a relatively simple set of business practices that start with defining the corporate business objectives, and follow through to setting strategic product initiatives and developing specific product feature sets.Practices for identifying and resolving the often-competing interests of multiple stakeholders and user constituencies to create a single, cohesive product plan.Techniques for turning product initiatives and features sets into appropriate stories and release plans, using lightweight essential use cases and breadth-and-depth breakdowns.Valuing stories based on tangible, testable business value, such as revenue or customer satisfaction, and applying that valuation to the release planning and story prioritization practices.Creating a seamless, traceable link from high-level strategic business objectives to Developer's individual tasks. Image being able to point to a Developer and say "she is writing code right now that supports our corporate revenue growth initiative by adding $10,000 in monthly revenue."Providing test-like metrics-based feedback to evaluate if release plans are fulfilling the product strategies and in turn the business objectives.\n\n\nAudienceThis tutorial is intended for team members who are interested in expanding the adoption of Agile practices to the entire product development process. Although no prerequisites are required, knowledge of the business, strategic product planning, and product management aspects of the overall development cycle may be helpful. Familiarity with Agile development processes such as XP or Scrum is recommended.\n\n\n\nContent Outline\nWhy Agile Business Practices?\nOur Experiences with XP/Agile Development Adoption\nWhat Do We Do When the Development Group Outperforms the Business?\nGetting the Entire Business to Spin at the Same Rate\nThe Scope of Product Development\nOverall Business Objectives – What is the business trying to accomplish?\nProduct Initiatives – What kind of product development supports business objectives?\nProduct Feature Sets – What does the product have to deliver to realize the initiatives?\nStories and Plans – How will we go about implementing the features?\nWhat Parts of This Scope Do XP and Agile Processes Cover?\nThe Core Values and Principles of Agility\nCollaboration, Rapid & Concrete Feedback, and Simplicity\nResponding to Change, Learning, and Empowered, Self-Motivated Teams\nWhat This All Means to the Business Side of Things\nTowards an Overall Agile Product Development Process\nAdding A Business Cycle Around XP’s Three Cycles\nThe Business Planning Cycle\nEstablishing the Cycle Charter through Business Stories\n    Generating Product Strategies from Business Stories\n    Generating Product Feature Plans from Product Strategies\n    Release Planning and Strategic Feedback\n    Strategic Investment and Resource Commitments\n    Implementing Releases\n    Business Retrospectives\nConcrete Feedback – Avoiding Guesswork and Pet Projects\nExamples of Business Stories and Product Strategies\nMeasuring with Metrics\nThis Is Business, Not Science – Keep It Simple\nTraceability in The Process\nWhy Bother? Competitive Advantages and Motivation\nDeveloper Episodes Trace Back to Tasks\nTasks Trace Back to Stories\nStories Trace Back to Features\nFeatures Trace Back to Product Strategies\nProduct Strategies Trace Back to Business Stories\nViola! “Jane is working to generate $10K in revenue in support of our quarterly target.”\nWhat To Do When There Isn’t One Customer?\nXP’s “Customer” Is Not Necessarily the End-User\nMultiple End-User Constituents\nMultiple Stakeholder Interests\nWorking with Multiple Stakeholders\nTeam Development of Product Strategies, Features, and Stories\nEstablishing a Customer Board\nEach Board Member Has Their Stories\nMapping and Merging Stories\nOrganizing Stories Based on Strategic Priorities\nEstablishing Normative Priorities\nA Single Customer/Product Owner Represents the Results\nGenerating Stories from Product Strategies and Features\nGenerating Features from Product Strategies – A Little Leg Work\nDescribing Feature Requirements with Lightweight Essential Use Cases\nA Story Is Not a Use Case – Stories As Change Requests\nExtracting Stories from the Use Cases\nStory Depth and Breadth – A Multi-Dimensional Thing\nIssues in Adopting Agile Business Practices\nThe Value of Leaders and Mentors\nA Bit of Preparation and Education Never Hurts\nRespect Everyone’s Turf – This Isn’t Just a Programmer Thing\nCountering Fear and Resistance One Small Step at a Time\nPilot Projects and Adoption on a Shoestring\nThe Challenge of Building and Sustaining Momentum\nThe Fall of Empires and the Rise of the Collective\nAdapting and the Learning Organization\n\nPresenter Bio and Contact InformationPaul Hodgetts is the founder and principal consultant of Agile Logic, a professional services company focusing on Agile development processes and enterprise development technologies. He has more than 19 years of experience in all aspects of software development from in-the-trenches coding to technical project management, on a wide variety of projects from embedded real time control to distributed internet business applications. His recent focus has been on expanding the application of Agile values and principles to the business side of product development, and on the organizational change aspects of adopting Agile processes. Paul has presented at conferences including JavaOne and XP Universe, and has taught software courses both privately and at California State University, Fullerton, where he is a member of the Java, J2EE, and C++ advisory boards.\nPaul can be contacted at:\nPaul Hodgetts\nAgile Logic\n1519 East Chapman Ave. #254\nFullerton, CA, USA 92831\nPhone: (714) 269-7401\nEmail: phodgetts@AgileLogic.com\nWebsite: www.agilelogic.com	Main conference	Tutorial	2002
130	XP RELEASE PLANNING AND USER STORIES	The "Circle of Life" in XP is the cycle: On-Site Customer, Planning\nGame, Small Releases, Acceptance Tests. This cycle, repeated for every\nrelease, and for every iteration, is the heartbeat of an XP project.\nIt provides the requirements that the programmers need in order to\nprogram, the development velocity and quality information that\nmanagement needs in order to steer the project, and the connection\nbetween wish and reality that the customer needs in order to choose\nwhat to do next and when to release. We don't call it the Circle of\nLife lightly.\n\nIn this half-day tutorial, you'll have the opportunity to experience\nthe same project three ways: with very low information, part of the\ninformation that XP can provide you, and with all the cost and value\ninformation that XP provides. You'll experience the highs and lows of\nworking on such a project, and learn hands-on why the XP planning\nprocess is so powerful within such a simple framework.\n\nThe session is based on Ann, Chet, and Ron's popular "small card"\ngame, where we simulate an important valuable project. This is the\nsame experience that we have offered at XP Immersions, Smalltalk\nSolutions, XP200n, and various on-site courses.\n\nWe use the release planning game to explore various project planning\nstrategies. The game is played in small groups of approximately four\nto eight players. Both programmers and customers may play, in any\ncombination.\n\nIn each cycle of the game, the players plan and "implement" a product.\nEach time through, they learn some new lessons enabling them to plan\nand implement better next time. Scoring is based upon each team?s\ntotal return on investment.\n\nBased on that experience, we'll then discuss how teams\nlike yours can get the cost and value estimates needed to run your\nproject the XP way. The session has been rated as valuable and\nenjoyable by all those who have taken part in it. If you haven't yet\nsuffered the joys and agonies of the "Small Card" game, this is your\nchance!	Main conference	Tutorial	2002
131	STEERING THE BIG SHIP: SUCCEEDING IN CHANGING AN ORGANIZATION'S PRACTICES	“Welcome, welcome!, we’re so glad you’re here.  We just have so many problems here at Mock Corporation.   Our software development has been a problem as long as we can remember.  We really thought we had it licked with the last process change we made.  It was kinda structured, but the plans looked great at the start of the project!   Now, some programmers are experimenting with this XP and Agile stuff and they really like it, but lots of people think it won’t work.”\nWelcome to Mock Corp.  In this tutorial, YOU are the coach, helping Mock Corp. over come the challenges of changing the practices they use to create software.   You’ll study Mock Corp’s people, teams, and the organization as a whole.  Common challenges in adopting new practices will be explored as Mock Corp. encounters them.  Resistance behaviors will be identified and tools to over come them will be presented.   Mock Corp. is a generalization of real people and companies that have undergone transition to XP.   Individuals from companies that have or are going through the transition will participate to tell their stories.\nChanging the way individuals work is a big challenge.  Changing the way teams work is an even bigger challenge.  Changing the way organizations work is harder still.  Moving to an Extreme or Agile way of developing software tests the ability of individuals, teams, and organizations to change.  The degree to which an XP or Agile transition is successful long term will primarily depend on this ability to change.  This tutorial will teach the participants about change at different levels in the organization and techniques to make change successful.   Special emphasis will be placed on the organization level change issues and the infrastructure required to make change stick.  \nDuration: half-day\nContent outline\n• Models of Organizational Change\n• Specific change issues caused by the transition to Extreme Programming or other\nAgile methods\n   o Programming Team Changes\n   o Customer Team Changes\n   o Management Changes\n• Mock Corp\n• Individual Change and Techniques (exercise)\n• Team Change and Techniques (exercise)\n• Organizational Change and Techniques (exercise)\n• Tales from the Trenches: Case Studies from Real World Transitions\nPresenter resume with contact information\nLowell Lindstrom has been involved in the teaching, coaching, and transitioning of\nnumerous XP projects in organizations of all sizes and varying domains. He is currently\nresponsible for the business development and strategy at Object Mentor and coaches\norganizations on customer skills and the organizational change aspects of Extreme\nProgramming. He has been professionally involved across of the spectrum of software\nbusiness for 17 years. After many years of developing and managing software projects,\nhe took on organizational change, marketing, and sales roles at a large technology\nproduct company. He has a BSCS from Northwestern University and a Masters in\nManagement from Northwestern's Kellogg GSM.\nLowell Lindstrom\nlindstrom@objectmentor.com\nPhone: 847-573-1565 x20\nMSN Chat: omlowell	Main conference	Tutorial	2002
132	AGILE ACCEPTANCE TESTING	The goal of this workshop is to discuss and develop practices for\nsupporting effective acceptance testing on agile projects. (Some refer\nto acceptance testing as system testing, functional testing, customer\ntesting or GUI testing).\nWhat skills are required for acceptance testing? How should acceptance\ntesters they interact with other members of the team? How can agile\nprojects support the automation of these tests?\nThis workshop will survey the participants experiences and\nunderstandings of what does and doesn't work. Participation is\nencouraged from testers, developers and anyone with an interest in\ntesting and experience with testing on agile projects.\nMore details are available at http://www.pettichord.com/agile_workshop.html	Main conference	Workshop	2002
133	DISTRIBUTED PAIR PROGRAMMING	Agile methodologies stress the need for close physical proximity of team\nmembers. However, circumstances may prevent a team from working in close\nphysical proximity. For example, a company or a project may have development\nteams physically distributed over multiple locations. As a result,\nincreasingly many companies are looking at adapting agile methodologies for\nuse in a distributed environment.\nThe aim of this workshop is to bring together practitioners who have\nexperiences with distributed pair programming.  In addition, the workshop\nwill be especially valuable to participants who are involved in development\nactivity that is geographically distributed and are interested in applying\ndistributed pair programming.  We further want to incorporate experiences\nand research in Computer Supported Collaborative Work (CSCW) environments.\nOverall, the workshop will discuss how to make this type of distributed work\nas effective as possible and will help guide future research.\nFor more information http://dxp-cs.cs.unc.edu/XPU-DPP-workshop/	Main conference	Workshop	2002
134	EMPIRICAL EVALUATION OF AGILE METHODS	Imagine the benefits of knowing that an XP project expends more effort\nunderstanding software requirements than does a team using a typical\ntraditional, or waterfall approach. Imagine the benefits of being able to\npredict that for this particular combination of customer, product, and\nproject team, agile modeling is going to benefit the team more than a strict\nXP implementation. The world we seek is one that de-mystifies the success of\nagile methods and supports everyday practitioners to apply the right method\nat the right time. We believe measurements are key to making these decisions\nand to making agile methods more accessible.\nPresently, there is a lot of anecdotal evidence and very little empirical\nand validated data of agile methods effectiveness. Much of the evidence is\nbased on the stories and preferences of those who practice it. The workshop\nparticipants are expected to share keen interests in finding practical\napproaches to measuring the effectiveness of agile software techniques in\nvarious project situations (both industrial and academic).\nMore	Main conference	Workshop	2002
135	LSO WORKSHOP	This is a full day workshop\nThe theme of the Fourth Workshop on Learning Software Organizations (LSO) is "Balancing Agile Processes and Long-Term Learning in Software Organizations". The LSO Workshop series focuses on technical, organizational, and social solutions to problems of learning from past experiences and codifying the resulting best practices so they can be systematically used in subsequent software development efforts \nThis workshop will explore the issues of managing knowledge in dynamic domains requiring significant levels of improvisation within each repetition of the process. The challenge is not one of capturing and finding complete solutions to problems, but the more difficult task of finding and integrating partial solutions that can serve as a baseline for continuous improvement, and hence, organizational learning. Techniques need to be explored that couple process and workflow management with knowledge management to capture and build an experiential body of knowledge for software development activities, while enhancing the ability of an organization to quickly adapt its processes to new technologies and market pressures.\nLearn More	Main conference	Workshop	2002
136	Setting the Agile Context	The use of agile software methods requires a proper context.  As with\nother methods, a poorly managed and disordered environment makes\ncreative technical work difficult and often impossible.  In this talk,\nWatts Humphrey discusses the environmental characteristics required for\ncomplex creative work, how the working situation is typically\nestablished, and what the software professional can do to influence the\ncontext of his or her work.  He then describes the experiences of\ndevelopment teams in establishing and directing the environment for\ntheir own work.  He also provides data on how this affected the quality\nif their products and the productivity of their projects.  In\nconclusion, Mr. Humphrey discusses the factors that determine the\nability of professionals to set the contexts for their own work and how\nthis relates to the use of agile methods.	Main conference	Keynote Address	2002
137	XP FEST (Monday)	XP FEST\nOne of the core values of XP is feedback, which involves going beyond just talking about something to actually doing it as quickly as possible, because only then do you know if it makes any sense. So, instead of just coming to XP/Agile Universe and talking about XP, why not do some XP, too? It seems fitting to go beyond just talking about abstract concepts to actually implementing them in a simple format.\nIn the style of OOPSLA's AnalysisFest, DesignFest and CodeFest, with their waterfall view of software development, you can participate in XPFest at XP/Agile Universe.\nGoals:\nLearn XP by doing.\nBe exposed to different views of XP. \nTry out XP if you haven't tried it yet. \nCompare how different teams adapt XP. \nHave fun doing something you enjoy: programming using XP! \nMondayTuesday(1) Customer - someone who has a small problem they'd like solved. All sessions will work with this customer.\n\t(1-2) Coaches - people qualified to help the team implement XP. \n\t(up to 8) Developers - people who want to do XP.\n\t(1+) Observer - to record how the team implements XP.\nContact:domelia@rolemodelsoft.comhttp://www.xpfest.org	Main conference	Workshop	2002
138	XP FEST (Tuesday)	XP FEST\nOne of the core values of XP is feedback, which involves going beyond just talking about something to actually doing it as quickly as possible, because only then do you know if it makes any sense. So, instead of just coming to XP/Agile Universe and talking about XP, why not do some XP, too? It seems fitting to go beyond just talking about abstract concepts to actually implementing them in a simple format.\nIn the style of OOPSLA's AnalysisFest, DesignFest and CodeFest, with their waterfall view of software development, you can participate in XPFest at XP/Agile Universe.\nGoals:\nLearn XP by doing.\nBe exposed to different views of XP. \nTry out XP if you haven't tried it yet. \nCompare how different teams adapt XP. \nHave fun doing something you enjoy: programming using XP! \nMondayTuesday(1) Customer - someone who has a small problem they'd like solved. All sessions will work with this customer.\n\t(1-2) Coaches - people qualified to help the team implement XP. \n\t(up to 8) Developers - people who want to do XP.\n\t(1+) Observer - to record how the team implements XP.\nContact:domelia@rolemodelsoft.comhttp://www.xpfest.org	Main conference	Workshop	2002
139	METHODS AND SUPPORTING TOOLS	METHODS AND SUPPORTING TOOLS\n\nDesigning Requirements: Incorporating Usage-Centered Design into an Agile SW Development Process\nUsing Ant to Solve Problems Posed by Frequent Deployments\nSupporting Adaptable Methodologies to Meet Evolving Project Needs\nJeff Patton, Steve Shaw, Scott Henninger, Aditya Ivaturi, Krishna Nuli, Ashok Thirunavukkaras	Main conference	Presented papers	2002
140	SHARPENING THE AXE FOR TEST DRIVEN DEVELOPMENT	Summary\nAbraham Lincoln is famously (mis-) quoted:\n"If you showed me a big tree and an axe and\ngave me eight hours, I’d spend the first 6 hours sharpening the axe.” Software shops all over the world are now\npracticing XP, and specifically Test Driven Development. The tutorial below sets out to accomplish\nthree goals: 1) Offer information on known axe-sharpening efforts in XP-Land. \n2) Provide a demonstration of a small set of hand-rolled tools for TDD\nin real-world projects. 3) Advocate the\nkind of deep laziness that gives making and refining tools its proper value in\nthe framework of XP.\n\nDuration and Target Audience\nThis is a half-day tutorial whose target is intermediate or\nadvanced programmers who feel they are not getting maximum value from the TDD\napproach. Anyone who is trying TDD\nis welcome. Anyone who has understood\nthe urgency of adopting TDD but who is still using crude and ineffectual\ntools should benefit. The presenters particularly welcome new\nadopters and those working with or leading them.\n\n\nOutline\nNote: The tutorial will be handled in true XP style. What follows is a\nrelease plan, and as the class develops, it will surely flex to meet the\nattendees' needs. The real point of the tutorial is to provide a focused topic\nand bring TDD adopters face to face with an experienced practitioner for our\nmutual entertainment and edification. The presentation includes working programs, sample code, and a variety\nof tips, tricks, and techniques.\nThere are Axes and Axes:  It’s Better Than Using A Plastic Knife\n\nThe xUnit Family\n What a Dull xUnit Does, and How\n   The Three Pieces of All xUnits\n   A One-Day xUnit for Language X\nWhat a Sharp xUnit Does, and How\nA Very Sharp xUnit\nIntegrated xUnit\nDeep Laziness:  Preparing And Refining A Good Axe\nIntroducing Tool Smells\n   Learning Not To Type\nCreating Inaccesible Engines\nMaking Your Tool Yours\nBuy, Borrow, or Build?\nxAT, xVersion, xGUI, xProcess:  Attacking The Rest Of The Forest\nWhat xUnit Doesn’t (and Shouldn’t?) Do\nCompleting the Integration\nAcceptance Testing Around the Clock\nTools for Writing Tests\nHard Questions\nOpen season on TDD and tools. The last hour of the tutorial will be focused on the questions and answers that the attendees offer. Real challenges from real applications are the order of the day. \n\nPresenter's Resume\nMichael Hill\n994 Shannon Farm Lane\nAfton, VA 22920\nhill@objectmentor.com\nMichael Hill has been testing first for three years, against a background of twenty+ years as an independent contractor. He is a senior mentor at Object Mentor, Inc., a job that has brought him into contact with literally dozens of differents projects and platforms. He is presently at work on a book on Test Driven Development.  For a more complete bio see Object Mentor - Michael Hill.	Main conference	Tutorial	2002
141	Review of Agile Approaches	In our Information Age, competitive advantage comes from speed and flexibility. With shortened product development cycles and rapidly changing business initiatives, the formula for success has been articulated by Tom DeMarco: “Agility: 1, everything else: 0.” Agile Software Development redefines how software will be delivered in our 21st century economy.\n\nThere has been a rapidly rising interest in these new approaches to software development such as Extreme Programming, Scrum, Adaptive Software Development, Feature-Driven Development, and Dynamic Systems Development Methodology. Furthermore, scores of organizations have developed their own “lighter” approach to building software.\nThis tutorial is based on the material in Jim Highsmith’s book, Agile Software Development Ecosystems. He is the developer of one of the Agile Methodologies (Adaptive Software Development), a coauthor of the Manifesto for Agile Software Development, and founding member of the AgileAlliance. The workshop addresses key questions: What are Agile Methodologies? What problem domains to Agile Methodologies address? What are the common principles and practices of the various Agile Methodologies? What are the similarities and differences between the various Agile Methodologies?\n	Tutorials	Tutorial	2003
142	Agile Software Development: Principles, Patterns, and Practices	For the first four decades of software development we did not had a good definition of our craft. If you asked a software developer what he did, he'd have to say something vague like "I write code." Sometimes developers created something good, but could't repeat the process. They could do good things sometimes but didn't know how they did it. Quality was more an accident than a design. In the last decade this has changed significantly.\n\nWe have identified enough principles, patterns, and practices to provide our craft with a solid definition. This definition gives us something we may not have had before -- pride in workmanship. For though we may have been able to take pride in some of our projects before, we weren't often able to take pride in the “way” those projects were build. Now, we can take pride in ”how” we build software, not just in the software we build.\n	Tutorials	Tutorial	2003
143	From Agile Modeling To Agile Data	In this interactive tutorial we will discuss two agile methodologies --Agile Modeling (AM) and the Agile Data (AD) method.  AM is a chaordic, practices-based methodology which describes how to effectively model and document software based systems.  Modeling and documentation does not have to be dysfunctional!  The AD method encompasses philosophies and techniques which enable data professionals to become active and productive members of an agile software development team.  Modern software development is evolutionary (iterative and incremental) in nature, therefore data professionals need to adopt techniques such as database refactoring, evolutionary performance tuning, Agile Model Driven Development (AMDD), and Test-Driven Development (TDD).  We'll also discuss implementation issues -- mapping objects to RDBs, referential integrity, security access control, transaction control -- that include but go beyond the domain of data.  The AD method also addresses enterprise issues, enterprise architecture and enterprise/data administration, that are critical to your success.  Even enterprise groups can to take an agile approach to development.	Tutorials	Tutorial	2003
144	An Agile UP	The Unified Process (UP) is popularand with good reason, as it includes skillful practices such as iterative development, and early attention to risks.  However, many organizations are adopting it in an unskilled manner, superimposing “waterfall” or “heavyweight” values onto it that need not apply. Applied well, the UP encourages an agile approach, and so you will learn the essential useful UP practices, the keys to its successful introduction in an organization, and how to apply the UP in an adaptive and agile spirit. And, how to screw it up.  Further, many XP and Scrum practices are either part of the UP, or specializations of more general UP guidelines. What are these, and which may be adopted consistent with a UP project? Nevertheless, this tutorial motivates the need for more than just XP or Scrum on many projects. You will learn why a combination of primarily the UP with other agile process practices is an excellent approach.	Tutorials	Tutorial	2003
145	Inside Feature Driven Development	Feature Driven Development (FDD) is a proven-in-practice process for producing software applications. Rather than being "all new," Feature Driven Development is a blend of known best practices and techniques, with only those things that really matter abstracted out and described in its simple process descriptions. Only five processes of one to two pages each - and they tell you what to do. This tutorial teaches you the thinking and practices behind FDD and the five FDD processes in detail - explaining the how and the why for each of them.  You will learn how to apply the most relevant practices from Feature Driven Development and how to avoid common mistakes. You will learn why practices are included in FDD and why other practices are not. You will learn about the project as a system versus the software system being constructed. You will learn what a client-valued feature is and how to express a project as a categorized list of client-valued features. You will learn how the first three FDD processes form a project startup phase and how useful a risk reduction strategy that is for you and your clients, plus learn about important predictive metrics from the startup phase to help you size and cost the subsequent construction phase. You will learn how feature teams are dynamically formed, changing the traditional hierarchic project structures. You will learn about feature milestones and how they solve that worldwide problem word for developers - “finished.” Plus you will learn how the milestones are used for amazingly accurate tracking and reporting that is meaningful to clients and keeps your project team better focused  as everything is expressed in the language of the domain rather than the technologies in use. You will learn how in the construction phase, features are bundled into workpackages and collectively moved through the design and build processes. You will learn about scope or feature creep and how to manage it, plus where the accountability for estimating really lies.  The tutorial also teaches, for the first time publicly, FDD workflow which comprises the key “how to” lessons for the FDD construction phase processes  Design By Feature and Build By Feature.  Learn how there are multiple levels of delegation and self-organization happening within the FDD construction phase, but all within planned assembly.  You will learn how and why FDD can scale to very large projects and, finally, throughout the tutorial you will learn key lessons from over 20 years experience in the industry. Bring your questions, stories of what's worked and what hasn't. Interact with and learn from an experienced project manager and the developer of Feature Driven Development.	Tutorials	Tutorial	2003
146	XP/Agile Organizational Change - Tools for Successful Adoption	Yes, XP and other Agile methods are awesome, but what about your colleagues and managers who staunchly resist them? Have you retreated to practicing only a few XP/Agile practices because you haven’t been able to overcome organizational resistance? Do you feel you are not important enough in your organization to help make extreme changes? Helping organizations, teams and individuals adopt an XP/Agile process is a whole lot easier when you’ve learned the tools of organizational change. In this tutorial, you’ll learn from folks who’ve made extreme changes happen across entire organizations with the help of tools like: change readiness assessments, project charters, test-driven management, retrospectives and more. This tutorial is hands-on and chock full of real-world stories. Join us and learn to practice your own change magic.	Tutorials	Tutorial	2003
147	Understanding Users and User Tasks	Usability is increasingly recognized as important for the success of software and Web-based applications, but developers often lack the time and techniques needed for effective user interface design. Extreme programming and other agile methods have proved their ability to deliver quality software quickly, but have offered little in the areas of software usability and user interface design. This tutorial introduces core techniques of a proven approach that complements agile development methods. In agile usage-centered design, the focus is on quickly developing a clear understanding of users and user tasks through minimal models that provide maximum payoff. Using hands-on application to a simplified case study, the tutorial will show how ordinary index cards can efficiently model the roles users play in relation to a system and the tasks they need to perform within those roles. The use of card-based user and task models to inform and organize planning and design will be illustrated.	Tutorials	Tutorial	2003
148	Collaboration 4 Agile Projects	Human interactions are the way we get work done and are the way decisions are made. In Agile projects, we place interactions over documentation and collaboration over contracts. So, meetings for any decision points in an Agile project need to be lean, focused, and productive. Agile teams with outstanding collaboration skills hold the true key to making their projects work. This fast-paced tutorial demystifies the “art” of collaboration with common-sense skills and processes to use again and again in every Agile interaction. In this tutorial, participants will: understand the role of collaboration and consensus in Agile Projects, learn key techniques and processes to use in Agile collaborations and practice these collaboration techniques.\n\nThis tutorial is mapped to the International Association of Facilitators’ schema for effective meeting management. The instructors teach with a high-energy and highly interactive style, maximizing the learner’s experience through the application of sound adult learning techniques. Templates and agenda guides will be provided as “take-aways.”\n	Tutorials	Tutorial	2003
149	The Lean Development Toolkit	The Lean Software Development tutorial, identifies seven fundamental “lean” principles, adapts them for the world of software development, and shows how they can serve as the foundation for agile development approaches that work. Along the way, you will discover 22 “thinking tools” that can help you customize the right agile practices for any environment.\n\nBetter, cheaper, faster software development. You can have all threeif you adopt the same “lean” principles that have already revolutionized manufacturing, logistics and product development.\nIterating towards excellence: software development as an exercise in discovery\n\nManaging uncertainty: “decide as late as possible” by building change into the system\n\nCompressing the value stream: rapid development, feedback, and improvement\n\nEmpowering teams and individuals without compromising coordination\n\nSoftware with integrity: promoting coherence, usability, fitness, maintainability, and adaptability\n\nHow to “see the whole”even when your developers are scattered across multiple locations and contractors\n\nSimply put, Lean Software Development helps you refocus development on value, flow, and peopleso you can achieve breakthrough quality, savings, speed, and business alignment. For an outline of the tutorial, go to:  http://www.leantoolkit.com/leantutorial.htm\n	Tutorials	Tutorial	2003
150	Customer Testing with FIT: a Hands-On Introduction	This tutorial will introduce the Framework for Integrated Test (fit) and demonstrate its use in Test-Driven Development (TDD) as practiced in Extreme Programming and other agile development methods. Projects use fit-style tests as much to guide programming as to test the correctness of the result. Test-driven designs are more easily "refactored" making it the only programming method that expects programs to get "cleaner" over time.\n\nShort lectures will explain just enough of Extreme Programming to establish the context for test-driven design. These will be followed by live demonstrations and laboratory exercises. The labs will use simple Java, but the emphasis is on familiarity with the frameworks, tools and techniques, not programming. If you are unfamiliar with Java you will learn enough just by watching so as to be able to complete some of the exercises and received all of the benefits of the class.\nBring a laptop, or join someone who has, to do hands-on exercises. Bring a wireless networking card to participate in additional "online" activities. Install java at home to save time in class. Google "sun java download" to find a version for your computer.\n	Tutorials	Tutorial	2003
151	Introduction to Scrum	This tutorial will create an experience of Scrum in a project setting, showing how to plan and manage products and projects using incremental, iterative development based in the agile processes. Specifically, this tutorial will provide:\n\nAn understanding of empirical processes, emergence, self-organization, and adaptation;\n\nA detailed understanding of Scrum principles, flow, roles, artifacts, and operation;\n\nA detailed case study of Scrum being used to solve a competitive problem for a large financial institution;\n\nA detailed description of the role and responsibilities of the product owner, ScrumMaster, and development team;\n\nA description of how to use Scrum to develop software for mission critical and life critical systems;\n\nAn approach to using Scrum for fixed price/fixed date contracts;\n\nAn understanding of how Scrum addresses CMM level 2 and 3 requirements;\n\nAn understanding of how to quickly implement agile software development so projects start producing product increments;\n\nAn understanding of implementation alternatives and their benefits for Scrum;\n\nAn understanding of how Scrum solves predictability and productivity issues for projects and products;\n\nAn understanding of the overlap between Scrum and Extreme Programming and how to use Scrum to wrap Extreme Programming to provide project and organizational scalability and control; and,\n\nAn understanding of Scrum as a methodology and toolset that can be used to Plan, Customize, and Manage any type of project.\n\n	Tutorials	Tutorial	2003
152	Patterns for Agile Software Configuration Management	Software Configuration Management (SCM) is sometimes thought of as a heavy weight discipline that contributes to the rigidity, rather than agility, of the development team. This perception comes out of viewing circumstances where SCM practices were inappropriate to the project. In many cases, proper use of SCM practices can add a level of reproducibility and accountability to the development effort that can enable agility. The tutorial gives a brief overview of the basics of Software Configuration Management, and describes how to use SCM effectively in an Agile environment by describing key SCM Practices that are needed to have a stable, yet agile development environment. This includes practices relating to versioning, workspaces, testing, build, and branching. The tutorial is taught from the perspective of SCM as a part of the daily development cycle. We use a pattern language as a mechanism for describing how the practices fit together, but an understanding of patterns and pattern languages in not essential to understanding the material. Some background on the patterns is available at: www.scmpatterns.com.	Tutorials	Tutorial	2003
153	Project Retrospectives in Agile Development	The Principles Behind the Agile Manifesto state that, “At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.” How can we do that? This tutorial will present techniques for facilitating project retrospectives that allow teams to discover what they’re doing well so that their successful practices can be repeated and what they’re not doing as well so that they can discuss how to improve. Retrospectives are not “finger pointing” sessions, but rather a fun and highly effective series of activities in which teams can reflect on the past in order to become more effective in the future. Participants will be introduced to the retrospective process, learn various techniques for leading retrospectives, hear the experiences of the tutorial leaders who have led retrospectives in various kinds of projects, and will get the opportunity to participate in a retrospective simulation.\n\nwww.lindarising.org\n	Tutorials	Tutorial	2003
154	The Crystal Methods, or How to Make a Methodology Fit	Crystal is a family of highly tolerant, lightweight methodologies and a framework for tuning them to your specific situation. Here, methodology means nothing more (or less) than the conventions the team agrees to use. Level of detail and formality, documents and reviews, office seating and timing of parties can be part of those conventions. Projects vary in size, criticality and priorities, and so should your methodology. The strengths and weaknesses of the organization, the specific people, even the office layout affects how the team best works, and therefore should influence the methodology.\n\nA Crystal methodology aspires to be the least constrictive and yet effective methodology for any particular project team. This tutorial describes the principles and techniques for shaping a methodology to the project-team combination, introduces the colors in the Crystal family, compares different examples of the Crystal family to each other relative to the principles, and shows the differences between Crystal Clear and XP. Expect to learn the methodology tuning principles, and experience how easy and fruitful a methodology-tuning session can be.\n	Tutorials	Tutorial	2003
155	How to be a Coach	It’s difficult to start a new process, but a coach can make this easier. A coach is part developer and part manager: a coach can help a team stay on process and can help the team learn. A coach brings in some outside perspective to help a team see itself more clearly. We’ll use a combination of lectures, games, and exercises to explore and practice skills that coaches (and team members!) can use. The goal of this tutorial is to give participants: a deeper look at the coach’s role, tools to help communicate better, practice with charts, retrospectives, and other feedback tools and practice diagnosing team problems.	Tutorials	Tutorial	2003
156	Testing Agile/Agile Testing: What Testers Do for Agile Teams, What Agile Practices Do for Testers	There are a plethora of agile processes being practiced: Extreme Programming, SCRUM, Crystal, FDD, DSDM, and others. It’s not always clear how a tester fits in to these new software development methods. Even if your organization isn’t using agile methods to develop software, you can benefit from using an agile approach to testing. For the tutorial we’ll use XP as an example, but the lessons learned apply to other agile processes. We’ll go through an iteration of an XP project step by step and show what goals to reach for, which activities to engage in, and some helpful techniques for testers to use. The exercises are built around an XP project to develop a simple web-based tracking application. We’ll examine the techniques we use and see how they could apply in a non-agile setting.	Tutorials	Tutorial	2003
157	YP and Urban Simulation: Applying an Agile Programming Methodology in a Politically Tempestuous Domain	YP is an agile programming methodology that has evolved over the past 15 years. Many of its features are common to other agile methodologies; its novel features include using a highly visible, physical software status indicator (a real traffic light), and a well-defined nested set of development cycles. It is also an exceptionally open process, with the current status of the development process visible to the customers, as well as the code and documentation. We are using YP in developing the software for UrbanSim, a sophisticated simulation system for modeling urban land use, transportation, and environmental impacts over periods of 20 or more years under alternate possible scenarios. Our purpose in developing UrbanSim is to support public deliberation and debate on such issues as building new transit systems or freeways, or changing zoning or economic incentives, as well as on broader issues such as sustainable, livable cities, economic vitality, social equity, and environmental preservation. The domain of use is thus politically charged, with different stakeholders bringing strongly held values to the table. Our goal is to not favor particular stakeholder values in the simulation or its output, but rather to let different stakeholders evaluate the results in light of what is important to them. There are several implications of this for the development process. First, having credible, reliable code is important -- and further, both the code itself and the development process that produced it should be open and inspectable, not a black box. Second, to allow us to respond quickly to different stakeholder values and concerns, a flexible agile development process is required.\n\nBjorn plans to bring his foul weather gear to the conference and mount a 2 minute production at the beginning of the talk (of the opening scene quoted in the Introduction), using selected members of the agile community for the parts of Ship-Master, Boatswain, and assorted mariners.\n	Research	Research Paper	2003
158	XP Culture: Why the twelve practices both are and are not the most significant thing	XP emphasizes underlying values as well as the more visible twelve practices. We examine the relationship between practices and values from the perspective of a model of culture and from an ethnographic study of mature XP practice. We conclude that the twelve practices are both significant and not significant. They are significant in that they do, in the reality of professional practice, give rise to a culture which embodies underlying XP values. They are not significant since both models of culture and the detailed manner in which the practices give rise to a culture suggest that alternative practices may achieve the same ends.	Research	Research Paper	2003
159	PARFAIT: Towards a Framework-based Agile Reengineering Process	The paper presents a sketch of a framework-based agile reengineering process, named PARFAIT, whose objective is to provide the users with evolved versions of legacy systems, as soon as possible. The overall static structure of the Rational Unified Process (RUP), originally developed for forward systems engineering, has been here adapted for reengineering and is used for PARFAIT documentation. Frameworks are used in the process aiming at an agile approach to support the reengineering. Frameworks allow applications to be rapidly created, more than if they are built from scratch. Agile characteristics, such as incremental approach, cooperative approach with users and customers, straightforwardness, adaptability, etc. give PARFAIT the ability to support the rapid evolution of the legacy system to a new version, according to the users and customers needs. A summary of a case study and the results obtained in the reengineering are presented. This study refers to a concrete reengineering case of a real system for controlling entry and exit of electronic appliances in a repair shop.	Research	Research Paper	2003
160	Observations on Balancing Discipline and Agility	Agile development methodologies promise higher customer satisfaction, lower defect rates, faster development times and a solution to rapidly changing requirements. Disciplined (or plan-driven) approaches promise predictability, stability, and high assurance. However, both approaches have shortcomings that, if left unaddressed, can lead to project failure. The challenge is to balance the two approaches to take advantage of their strengths and compensate for their weaknesses. We believe this can be accomplished using a risk-based approach for structuring projects to incorporate both agile and disciplined approaches in proportion to a project’s needs.\n\nThis paper presents six observations drawn from our efforts to develop such an approach. We follow those observations with some practical advice to organizations seeking to integrate agility and discipline in their development process. The material presented here is drawn from our book Balancing Agility and Discipline: A Guide to the Perplexed (Addison Wesley, 2003).\n	Research	Research Paper	2003
161	Throwing Down the Gauntlet: Finding a Place for Discount Usability Engineering in Agile Development	Many software development organizations are reporting great success with agile software development techniques. However, few techniques explicitly incorporate usability engineering. Further, some agile techniques may not address certain kinds of usability problems. While there are many usability engineering techniques, discount usability engineering should be of particular interest to the agile development community because the two disciplines share many of the same underlying principles. The challenge for the agile development community is to find ways to incorporate such discount usability engineering practices.	Research	Research Paper	2003
162	Test Driven Development and the Scientific Method	The scientific method serves as a good metaphor for several practices in Extreme Programming (XP). We explore the commonalities and differences and show that the scientific method, by analogy, can be used to better understand Test Driven Development (and vice versa).	Research	Research Paper	2003
163	Change Your Organization (for Peons)	In this experience report, a programmer at a medium-sized software company explains his tactics for bottom-up organizational change.  The tactics are accompanied by personal recollections of related experiences. Tactics are presented in three primary sections: the difficulty of making change; getting attention; and making a case for change.  A brief section on the consequences of change follows.	Experience Reports	Experience Report	2003
164	Evolving Agile in the Enterprise: Implementing XP on a Grand Scale	How can XP or other agile methods be used in large corporate IT shops? One large company found out, making XP the official corporate software development methodology for all projects over an 18 month period and counting. This paper explores many facets of that experience, beginning with a summary of the eight key determinants of organizational change model. It then follows the organization in implementing XP, using the change model as a yardstick to assess the success of the hoped for change. The paper concludes with key learnings regarding how to implement an agile methodology within a large organization.	Experience Reports	Experience Report	2003
165	Improving the Interface Between Business and Product Development Using Agile Practices and the Cycles of Control Framework	The paper describes how we created and adopted an agile product development process in a small software company based on the Cycles of Control framework by combining selected agile practices and principles from the Scrum and XP methodologies. Describing the development process using the framework helped in identifying the crucial control points between business and development and enabled defining practical and well-functioning connections between them. The control points enable visibility and flexible management of product development status and direction. Currently Business understands development status better, which has led to fewer interruptions between the control points, and thus improved working conditions for Development. Positive experiences are reported of newly adopted practices such as scrum meetings, pair programming, and unit testing. However, finding and adopting technical tools to facilitate the process proved to be challenging.\n	Experience Reports	Experience Report	2003
166	Retrofitting an Acceptance Test Framework for Clarity	An XP customer needs to write and check acceptance tests. However, the format for defining the tests needs to be clear. Many acceptance test approaches use arcane formats which do not promote clarity for the customer, due to a conflict of interest between the complexities of automation and the needs of the customer. We discuss the evolution of acceptance tests to improve their clarity for the customer.\n\nSat is an acceptance test system for testing socket-based servers with multiple clients. The first version used an XML file to define the tests in a test suite. Any errors detected were written to a text log. There were two problems with this first version. The XML format made it difficult to read and edit the tests. When an error was given, it was not easy to identify the place in the test where the problem occurred.\nSat was altered to make use of Fit, a testing framework that uses HTML tables for defining tests and reporting any errors. We found the new version considerably easier to use. The tabular form makes it much simpler to read and alter the tests. Any errors are reported in a copy of the tables, in the place where they occur. We have also found it convenient to include information about the tests in the HTML, providing a form of "literal testing".\n	Experience Reports	Experience Report	2003
167	It's More than Just Toys and Food: Leading Agile Development in an Enterprise-Class Start-Up	One of the myths of Agile Development is that self-organizing teams do not need direction. The agile development movement focuses primarily on programmers: programmers should do X, Y and Z, and everyone else should do whatever it takes to support the programmers. A fantastic start, since programmers are the people who actually build the organization’s product; however, few techniques are offered to the rest of the organization.\n\nThe admonishment to managers instructing them to only provide “toys and food” and buffer the team from external distractions implies that leaders in an agile environment should do less work, and be less involved with the team on a day-to-day basis, than in a more traditional environment. In fact a leader in an agile group must do more than he/she would in a more traditional environment and must be even more involved in the day-to-day activities of the team.\nThe Sabrix development discipline has strong and deeply involved management as one of its keys to success. Management best practices, when applied appropriately and discerningly, do not limit, but rather enhance, the productivity and job satisfaction of the individual members of the engineering teams. This paper discusses ways a manager can and should help the team be more productive, have a better understanding of their fit in the organization as a whole and develop team members by being active and involved with the team and the rest of the company.\n	Experience Reports	Experience Report	2003
168	Ready-to-Roll Boxcar Development - a Flexible, Quality-Weighted Process	In January of 1996, Intuit’s QuickBooks team was faced with an aging code-base using a custom Mac/Win GUI toolkit, a large and rapidly growing customer base, and a rapidly growing and product-inexperienced engineering team. To increase the product’s quality and feature predictability while retaining its ship date rigidity, we created “Ready-to-Roll” Boxcar Development.\n\nThe process enabled the defining of each new feature, enhancement, or engineering re-architecture as a set of boxcars on the product train. A “coupled” boxcar was rapidly brought to a supportable level of quality, or “decoupled” for re-evaluation and re-engineering. Frontloading the highest priority boxcars increased predictability of the product train's contents, while the process allowed for greater flexibility with respect to overall content.\n“Ready-to-Roll” Boxcar Development kept the product within 2-3 weeks of being supportable and shippable. The process focused on individuals and interactions, working software, customer collaboration and responding to change. Better yet, it worked!\n	Experience Reports	Experience Report	2003
169	Iteration Advocate/Iteration Transition Meeting: Small Sampling of New Agile Techniques Used at a Major Telecommunications Firm	This experience report demonstrates a successful implementation of Agile at a major telecommunications firm. Critical aspects to mention about this particular software endeavor include a) this could be one of the largest implementations of Agile documented thus far (approximately 275 immediate and over 3,000 supportive contributors involved), b) the team practicing Agile did so under the constraints of a waterfall-gated (both milestone and financial) environment, c) a 'practice tapestry'' approach was used to 'weave' together elements of Agile that would work for this organization, and finally, d) new practices, not previously known to the Agile community were applied in addition to those well known thus far. Specifically, iteration advocate and iteration transition meeting are two examples of new concepts. This paper focuses on these new practices in an effort to share them with the Agile community. The weaving together of existing and new practices, enabled this major telecommunications firm to deliver a major software release to its large customer base.	Experience Reports	Experience Report	2003
170	Certifying for CMM Level 2 and ISO9001 with XP@Scrum	This experience report describes the followed road of getting certified for both CMM Level 2 and ISO9001:2000 on a time scale of 2 years by using agile methodologies. We discuss why we selected the combination of extreme Programming (XP) and Scrum as the base for our software development process and which "ceremony" we had to add in order to satisfy the requirements of CMM L2 and ISO9001. Also our major challenges at the moment are described, and the way we try to solve them. Furthermore we want to share a number of issues and experiences.	Experience Reports	Experience Report	2003
171	Making Agile Development Work in a Government Contracting Environment	Before any of the current “agile” development methods, Earned Value Management provided information for planning and controlling complex projects by measuring how much “value” was produced for a given cost in a period of time. One shortcoming of an agile development method is its inability to forecast the future cost and schedule of the project beyond the use of “yesterday’s weather” metrics. These agile methods assume the delivered value, “velocity” in the case of XP, is compared with the estimated value  this is a simple comparison between budget and actual cost resulting in a Cost Variance. No Schedule Variance process is directly available in XP. Earned Value Analysis provides a means of predicting future schedule and cost variances through three measurements  budgeted cost for work scheduled, actual cost for work performed, and budgeted cost for work performed (earned value). This paper describes the use of Earned Value in conjunction with Agile Development on a mission-critical, high-security, government project.	Experience Reports	Experience Report	2003
172	Agile Development in the Old Economy	As part of the delivery an automated hub for a postal operator, the Solystic company has to build a complex and feature rich Information System that supports a highly automated process with multiple intricate sub-processes and exceptions.\n\nThe effort has several challenges:\nIt is business critical for the customer, and the output of the project will give the customer a leading position;\n\nIt is the first time Solystic is managing a complete system project, although its mother company Northrop Grumman had previous experience of this business;\n\nThe program is one of the first of the Solystic company in the international field;\n\nIt is a fixed price, fixed time contract with a short time frame.\n\nTo face all these challenges, the software development group in charge of the Information System has adopted a number of agile practices and techniques to manage the project. The major project settings are adapted from Alistair Cockburn's Crystal set of methodologies, SCRUM and Jim Coplien's work on organizational patterns.\nThis paper presents the findings and lessons learned by the team and its manager.\n	Experience Reports	Experience Report	2003
173	Introducing Agile Development into Bioinformatics: An Experience Report	This experience report describes our efforts to introduce agile development techniques incrementally into our customer’s organization in the National Cancer Institute and develop a partnering relationship in the process. The report addresses the steps we have taken not only to deploy the practices, but also to gain customer support for them. It addresses variations we have used to adapt to our customer’s environment, including our approach to involving customer personnel at remote locations. We also address challenges we still must face, including how best to manage a product-line with agile development techniques.	Experience Reports	Experience Report	2003
174	Agile Development and Remote Teams: Learning to Love the Phone	I currently work on a project where we adopted an agile process that integrates elements of extreme programming and agile modeling. Our approach is unconventional however; instead of the team being co-located, I work remotely as the lead developer.\n\nThe risk of increased communication costs can be mitigated rather easily.\nHowever, trust is the most complicated element of team dynamics to establish and maintain. A virtual team must address this issue in order to succeed. Remote teams can work quite well. We have been delivering quality software in a timely manner, within the expectations of management for the last two years. We actually are more efficient and successful with a virtual team than when we were all co-located in the same room.\n	Experience Reports	Experience Report	2003
175	Unfixing the Fixed Scope Project	Although it seems to be common knowledge that it’s impossible to succeed in a project with fixed time, quality and scope, we often continue to try anyway.\n\nThis experience report discusses our successful failure at running fixed time and scope projects. I say successful failure because we actually failed to fix scope but arrived at an acceptable way to vary scope and deliver on time in an environment not normally amenable to variable scope. This paper discusses the methods used and makes recommendations on how you might unfix scope in your development environment.\n	Experience Reports	Experience Report	2003
176	An Agile Request For Proposal (RFP) Process	The Request For Proposal (RFP) process can be agile and efficient. At a high level, the key to achieving this is to specify requirements just in time and containing just enough detail. This paper applies the following XP practices and concepts to the RFP process: acceptance tests, business value, iterative & incremental delivery, on-site customer, pair development, planning game, spike, story, velocity, and yesterday’s weather. In addition, the following concepts are combined with those from XP to achieve maximal benefit: user-goal use case, context diagram, level of detail, and decision tree.\n\nThe contributions of this paper to the agile community are two-fold: describing a practical application of XP concepts to a non-programming project; and making use case style requirements processes more agile.\n	Experience Reports	Experience Report	2003
177	Daily Iterations: Approaching Code Frost and Half the Team is Not Agile	As an XP consultant, I'm asked to bring XP to diverse teams. But what happens when a team is split geographically and half the team prefers non-agile methods? Approaching “Code Frost” we decided to do daily iterations to kill bugs and keep the non-agile half of the team happy.	Experience Reports	Experience Report	2003
178	Agile Contracts (W180)	Agile contracts: These two words together in one phrase just look odd - or at least they seem to be at odds with each other. Contracts have played a very important role in the business of software development; in fact, much of this work is in fact done 'under contract'. Organizations adopting agile methodologies are finding it hard to write contracts for software development without compromising the core values and practices. The Agile Contracts workshop is your chance to help the agile community identify ways contracts can be structured and worded to support agile software development. A pre-conference web site has been established for conference attendees to share their thoughts, ideas, and even contract samples! Visit the web site and get in your two cents now! www.leantoolkit.com/agilecontracts.htm	Technical Exchange	Talk	2003
179	Evaluating and Documenting Alternatives to Certification (W180)	Martin Fowler led a discussion on Paying For Better Value at the Agile Universe 2002 conference. It posed the question: “How do we make it accepted that able people who are expensive end up being better value than cheap, less able developers?”\n° What makes an expert Agile software developer? How do we prove that we are one? We believe the pattern of Expert Capability Maps answers these questions. In this workshop we will all share our perspectives and assess our own capabilities. If you are an expert you will leave with the proof of it. If not, you will leave with a map of your route to becoming an expert.\n° The steps to proving expert capability are 1) describe the attributes of an expert, and 2) get external validation we possess those attributes. Help us evaluate and document why certification and other common systems fall short in attempting this. We will also demonstrate that such experts provide economic value far beyond that of those with lesser capability or experience.\n° Before the conference please join our AgileAssessment list to contribute to creating an Expert Capability Map for Agile software development, using Behaviorally Anchored Self-Assessments. We will also be posting the evolving documents (does not require list membership).\n	Technical Exchange	Talk	2003
180	Customer Collaboration: Challenges and successes in practice (G90)	An important principle in agile methodologies is to value customer collaboration over contract negotiation. In XP, for example, this principle is instantiated through the practice of having an end user on-site, someone who is available to answer questions, resolve disputes and set small-scale priorities on an ongoing basis. Other agile methods suggest alternative approaches. This form of customer collaboration is different from the traditional approach to requirements engineering where a substantial period of investigation and negotiation takes place to uncover the client's requirements.\n\nThe session will share, and then disseminate to a wider community, practitioners' experiences with, and insights into, customer collaboration within an agile environment.\n	Technical Exchange	Talk	2003
181	Enterprise Continuous Integration Limitations and Challenges (T90)	Continuous Integration as discussed in the Extreme Programming literature and elsewhere is largely focused on the development, integration and deployment of a single software product. Many IT shops however have additional problems to solve, problems that result from operating at an enterprise scale.\n\nThis session will determine issues and limitations in scaling Continuous Integration to the enterprise, and identify strategies for overcoming these issues and limitations.\n	Technical Exchange	Talk	2003
182	Exploring Motivation (W180)	Many organizations attempt to increase their productivity by the use of employee reward schemes. Over the years, an increasing body of research has grown suggesting that the use of rewards to move individuals to action may have negative effects on their team working and the quality of their work products in the long term.\n\nThe objective of the session is to raise awareness of the impact that development practices can have on intrinsic motivation, and to identify ways that the practices in different software development methods (such as RUP, SCRUM, XP, Open Source) affect motivation within teams. Participants will pool their experience to come up with patterns (or anti-patterns) that nurture intrinsic motivation within teams.\n	Technical Exchange	Talk	2003
183	Clearing Communication Logjams (W180)	Under a heavyweight process, two individuals can work on the same problem and communicate primarily through the buffer of a 2-inch document. As agile teammates, they would rely instead on many short conversations. Compared to their heavyweight counterparts, it is even more vital for members of an agile team to focus on communication, since the quality of communication relates directly to how smoothly the agile project flows. If communication bogs down, and logjams appear, the agile teammates must unblock themselves to stay on track.\n\nWorkshop participants will examine specific and common problems that arise in everyday interactions within teams practicing agile methodologies. Participants will share and assess one another's approaches to a spectrum of communication logjam scenarios.\n	Technical Exchange	Talk	2003
184	Architectures and Technologies for Agile Development of Enterprise Applications (W90)	Let's cut through the hype and talk about what has really worked. Which technological and architectural choices have best facilitated agile development - early and continuous delivery, at a pace sustainable forever, of valuable, working, simply-designed software, to ever-changing requirements - in the context of enterprise applications?\n\nIn this workshop we'll examine that issue, by breaking down the measures of success of an agile development organization, and correlating architectural and technological choices to performance against those measures, on projects we've experienced. We'll split into small groups to share sanitized characterizations of projects where we've seen correlations, positive or negative, and we'll compile matrices of correlations between such choices and the success measures we break down. We'll describe architectural refactorings we had to do, why we had to do them, and what the end state looked like.\n	Technical Exchange	Talk	2003
185	Introducing Agile Practices (G90)	Before you can succeed with an agile project, you must first succeed in introducing an agile process to your organization. As news about agile processes spreads, more organizations are becoming intrigued and are ready to dip a toe into agile waters. The goal of this goldfish bowl discussion will be to share experiences and look for common answers to questions such as:\n\nWhat is the best way to convince an organization to try an agile process?\n\nWhat types of projects are appropriate for a company's first agile project?\n\nWhat are the most important things to do during the first 60 days?\n\nHow do we measure success?\n\nWhat obstacles are we likely to meet? How do we overcome them?\n\nShould we start with an established agile process or should we customize our own?\n\nHow do we handle reluctant or skeptical programmers, customers or bosses?\n\n	Technical Exchange	Talk	2003
186	Experience the Transition to an Agile Organization (S180)	Our experience on several XP projects over the past four years has led us to believe that strong management and organizational change is critical to successful adoption and application. Because traditional command-and-control management doesn't align well with XP, a more appropriate agile approach is needed.\n\nIn this simulation, participants will simulate a greeting card company. Working together, they will produce greeting cards to specification. The goal of the simulation will be to draw out the differences between traditional and agile organizations to gain a deeper understanding of agile organizational principles.\nVisit CC Pace Systems at http://www.ccpace.com to learn more, or go to Electroglide http://www.webdc.com to check out detailed simulation material.\n	Technical Exchange	Talk	2003
187	Successful Customer Involvement (W180)	Do you want to collaborate effectively with your customers? Use "appreciative inquiry" to harvest wisdom from the best of your own experiences with them.\n\nCustomer involvement is essential for agile projects. We involve customers in chartering (visioning) and planning releases, defining requirements or stories, creating customer scenarios or stories for testing, conducting prototypes, running and checking acceptance tests, and retrospecting (debriefing) iterations and the project as a whole, and more. Using an appreciative inquiry approach, we'll explore the best ways to actively and positively involve customers and users in your project, from beginning to end. Visit http://www.ebgconsulting.com/adceffectivecustcollab.html for more info on this session.\n	Technical Exchange	Talk	2003
188	Are Design Patterns Dead? (G90)	Designs are emerging; small refactorings add flexibility when and where it's needed; the tests tell you where to go. Do design patterns still have a place in an agile world? Some argue the nail is already in the coffin, others contend design patterns thrive in an agile environment. Proponents of these two positions will square off to convince one another of their views. We'll debate Small Up Front Design, its general appropriateness and whether patterns have a role to play, along with the technique of Refactoring to Patterns spearheaded by Joshua Kerievsky.	Technical Exchange	Talk	2003
189	Tool Support for Agile Development: Hi Tech vs Low Tech (T90)	Agile development strives to respond better to the software needs of the customer. And in doing so, agile developers use a variety of tools, some technological typically surrounding the creation, testing, and delivery of the software, and others involving ways of communicating and working with people. In some cases, high-tech and low-tech tools can be brought to bear to solve the same or similar problem in agile development.\n\nThe aim of this think tank is to debate whether high-tech or low-tech tools are the best avenues to supporting and improving an agile process. Participants will contribute their own experiences as well as learn from the experiences of others.\n	Technical Exchange	Talk	2003
190	Requirement Specifications in Agile Projects (T180)	Although "requirements as conversation" works for some organizations, many places still need a written document that can be referred to. Creating an appropriate weight document for Agile projects is the purpose of this session. Specifically this session will look at the enduring specification artifacts that should be preserved by projects as an essential organizational memory of Agile projects.	Technical Exchange	Talk	2003
191	What Should Students Know About Agile Development? (W180)	As agile practitioners, we know the practices and dispositions necessary for an individual to successfully participate in an agile team. Can we convey this understanding to academia? What do we believe students need to know in order to prepare them for doing agile development? What do we want to see in fresh-out students?\n\nThis collaborative session is designed to start this conversation and produce a set of concrete assertions, guidelines and suggestions that are grounded in our experiences as industrial practitioners of agile development.\n	Technical Exchange	Talk	2003
192	What We Have Learned about Agile Methods (W90)	For the past year, the Center for Empirically Based Software Engineering (CeBASE) has sponsored three online “eWorkshops” on agile methods. The purpose of each workshop was to build up decision support for software developers. Each eWorkshop started with and then refined a handful of “heuristics” that attempted to describe basic assumptions about the nature of agile methods and how they could be best used for various types of projects.\n\nUsing some of the heuristics that resulted from the eWorkshops as a starting point, participants in this session will have the opportunity to contribute their own experiences to refine or expand the list of heuristics.\n	Technical Exchange	Talk	2003
193	Retrospectives (S90)	A retrospective is a meeting, where a team looks back on a past period of work so that they can learn from their experience and apply this learning to future projects. Some agile teams run retrospectives at the end of successive iterations rather than at the end of a project. The benefits of running retrospectives every few weeks rather than months are improved communication across teams and early feedback on development practice.\n\nThe objective of this session is to explain the benefits of holding regular retrospectives and give guidance on how to run a retrospective. Participants will get practical experience of how to run a retrospective, using the conference as the subject for reflection.\n	Technical Exchange	Talk	2003
194	Interaction Design Meets Agility	Focal to most agile development approaches is the notion that development work done is described in terms of its understandable value to the users of the software. Yet there's little written in documented agile methods on exactly how to discover and understand these "users". Our once well understood systems architecture has taken a backseat to these often poorly understood "users" and the features they need to generate business value. Interaction Design methodologies such as Constantine & Lockwood's Usage-Centered Design offer valuable approaches for finding, classifying, and prioritzing the people who have goals your software can help fulfill.\nThis tutorial will acquaint participants with U-CD and its place in an agile development approach. As a participant, you'll be working hands-on in a collaborative design team to produce a user role model using 3x5 cards, poster paper, discussion, and creativity. You'll learn how the role model helps build context around software features that help determine priority and make trade-off decisions throughout a development project. You'll use this understanding, and more 3x5 cards, to develop an iterative release plan that takes into account newly understood user roles. In addition, you'll learn collaborative card-sorting and modeling techniques you can apply to other tasks throughout your project.	Tutorials	Tutorial	2004
195	Scrum and Agile Process 101	Focal to most agile development approaches is the notion that development work done is described in terms of its understandable value to the users of the software. Yet there's little written in documented agile methods on exactly how to discover and understand these "users". Our once well understood systems architecture has taken a backseat to these often poorly understood "users" and the features they need to generate business value. Interaction Design methodologies such as Constantine & Lockwood's Usage-Centered Design offer valuable approaches for finding, classifying, and prioritzing the people who have goals your software can help fulfill.\nThis tutorial will acquaint participants with U-CD and its place in an agile development approach. As a participant, you'll be working hands-on in a collaborative design team to produce a user role model using 3x5 cards, poster paper, discussion, and creativity. You'll learn how the role model helps build context around software features that help determine priority and make trade-off decisions throughout a development project. You'll use this understanding, and more 3x5 cards, to develop an iterative release plan that takes into account newly understood user roles. In addition, you'll learn collaborative card-sorting and modeling techniques you can apply to other tasks throughout your project.	Tutorials	Tutorial	2004
196	Top-Down TDD using Mock Objects and Inversion of Control	Focal to most agile development approaches is the notion that development work done is described in terms of its understandable value to the users of the software. Yet there's little written in documented agile methods on exactly how to discover and understand these "users". Our once well understood systems architecture has taken a backseat to these often poorly understood "users" and the features they need to generate business value. Interaction Design methodologies such as Constantine & Lockwood's Usage-Centered Design offer valuable approaches for finding, classifying, and prioritzing the people who have goals your software can help fulfill.\nThis tutorial will acquaint participants with U-CD and its place in an agile development approach. As a participant, you'll be working hands-on in a collaborative design team to produce a user role model using 3x5 cards, poster paper, discussion, and creativity. You'll learn how the role model helps build context around software features that help determine priority and make trade-off decisions throughout a development project. You'll use this understanding, and more 3x5 cards, to develop an iterative release plan that takes into account newly understood user roles. In addition, you'll learn collaborative card-sorting and modeling techniques you can apply to other tasks throughout your project.	Tutorials	Tutorial	2004
197	The Agile/XP Team Primer: Exploring Self-Organizing Teams	Focal to most agile development approaches is the notion that development work done is described in terms of its understandable value to the users of the software. Yet there's little written in documented agile methods on exactly how to discover and understand these "users". Our once well understood systems architecture has taken a backseat to these often poorly understood "users" and the features they need to generate business value. Interaction Design methodologies such as Constantine & Lockwood's Usage-Centered Design offer valuable approaches for finding, classifying, and prioritzing the people who have goals your software can help fulfill.\nThis tutorial will acquaint participants with U-CD and its place in an agile development approach. As a participant, you'll be working hands-on in a collaborative design team to produce a user role model using 3x5 cards, poster paper, discussion, and creativity. You'll learn how the role model helps build context around software features that help determine priority and make trade-off decisions throughout a development project. You'll use this understanding, and more 3x5 cards, to develop an iterative release plan that takes into account newly understood user roles. In addition, you'll learn collaborative card-sorting and modeling techniques you can apply to other tasks throughout your project.	Tutorials	Tutorial	2004
198	Effective User Stories for Agile Software Development	The technique of capturing requirements as user stories is one of the most broadly applicable techniques introduced by Extreme Programming. User stories can be used effectively on any agile project or by any group looking to become more agile. In this tutorial you will learn how to identify and write user stories, how they differ from other approaches, how to estimate them, how to use them for release and iteration planning, and their role in the ongoing management of the project. Special emphasis will be placed on looking at specific attributes and examples of good user stories. Specific recommendations based on the presenter’s experience and research into using stories in XP and Scrum will be given.	Tutorials	Tutorial	2004
199	Large-Scale Agile Software Development	The technique of capturing requirements as user stories is one of the most broadly applicable techniques introduced by Extreme Programming. User stories can be used effectively on any agile project or by any group looking to become more agile. In this tutorial you will learn how to identify and write user stories, how they differ from other approaches, how to estimate them, how to use them for release and iteration planning, and their role in the ongoing management of the project. Special emphasis will be placed on looking at specific attributes and examples of good user stories. Specific recommendations based on the presenter’s experience and research into using stories in XP and Scrum will be given.	Tutorials	Tutorial	2004
200	Exploratory Testing for Agile Projects	The technique of capturing requirements as user stories is one of the most broadly applicable techniques introduced by Extreme Programming. User stories can be used effectively on any agile project or by any group looking to become more agile. In this tutorial you will learn how to identify and write user stories, how they differ from other approaches, how to estimate them, how to use them for release and iteration planning, and their role in the ongoing management of the project. Special emphasis will be placed on looking at specific attributes and examples of good user stories. Specific recommendations based on the presenter’s experience and research into using stories in XP and Scrum will be given.	Tutorials	Tutorial	2004
201	Implementing Lean Software Development	The technique of capturing requirements as user stories is one of the most broadly applicable techniques introduced by Extreme Programming. User stories can be used effectively on any agile project or by any group looking to become more agile. In this tutorial you will learn how to identify and write user stories, how they differ from other approaches, how to estimate them, how to use them for release and iteration planning, and their role in the ongoing management of the project. Special emphasis will be placed on looking at specific attributes and examples of good user stories. Specific recommendations based on the presenter’s experience and research into using stories in XP and Scrum will be given.	Tutorials	Tutorial	2004
202	Domain-Driven Design	The technique of capturing requirements as user stories is one of the most broadly applicable techniques introduced by Extreme Programming. User stories can be used effectively on any agile project or by any group looking to become more agile. In this tutorial you will learn how to identify and write user stories, how they differ from other approaches, how to estimate them, how to use them for release and iteration planning, and their role in the ongoing management of the project. Special emphasis will be placed on looking at specific attributes and examples of good user stories. Specific recommendations based on the presenter’s experience and research into using stories in XP and Scrum will be given.	Tutorials	Tutorial	2004
203	Skills for the Agile Designer	Don’t be complacent with just refactoring your code towards an adequate solution. Agile designers need to be skilled problem solvers and communicators (and no, that doesn’t mean just writing clean code or producing barely enough UML). Increase your agility by adopting new techniques for seeing and articulating problems, shaping solutions, and explaining your designs. This tutorial will present strategies for finding and characterizing objects and their behavior, designing application control centers, adapting patterns, characterizing the essence of a problem, and telling good design stories. Key techniques will be reinforced with brief exercises.\nRecognizing and adapting to different design rhythms is an often overlooked key to agility. When things don’t exactly go according to plan, agile designers react, readjust their thinking, and try again. Even so, unanticipated problems crop upwicked problems that can’t be solved by sheer effort alone. They require a blend of skills: creative problem solving, negotiation, the ability to craft-try-rethink-and-propose solutions that combine simpler ideas or possibly take a leap in a totally new direction. This tutorial concludes with practical advice on how to sort design problems into the core, the revealing, and the rest, so you can give each kind of problem the attention it deserves.	Tutorials	Tutorial	2004
204	Inside Feature Driven Development	Don’t be complacent with just refactoring your code towards an adequate solution. Agile designers need to be skilled problem solvers and communicators (and no, that doesn’t mean just writing clean code or producing barely enough UML). Increase your agility by adopting new techniques for seeing and articulating problems, shaping solutions, and explaining your designs. This tutorial will present strategies for finding and characterizing objects and their behavior, designing application control centers, adapting patterns, characterizing the essence of a problem, and telling good design stories. Key techniques will be reinforced with brief exercises.\nRecognizing and adapting to different design rhythms is an often overlooked key to agility. When things don’t exactly go according to plan, agile designers react, readjust their thinking, and try again. Even so, unanticipated problems crop upwicked problems that can’t be solved by sheer effort alone. They require a blend of skills: creative problem solving, negotiation, the ability to craft-try-rethink-and-propose solutions that combine simpler ideas or possibly take a leap in a totally new direction. This tutorial concludes with practical advice on how to sort design problems into the core, the revealing, and the rest, so you can give each kind of problem the attention it deserves.	Tutorials	Tutorial	2004
205	Collaboration Works! Facilitation Skills for Agile Teams	Don’t be complacent with just refactoring your code towards an adequate solution. Agile designers need to be skilled problem solvers and communicators (and no, that doesn’t mean just writing clean code or producing barely enough UML). Increase your agility by adopting new techniques for seeing and articulating problems, shaping solutions, and explaining your designs. This tutorial will present strategies for finding and characterizing objects and their behavior, designing application control centers, adapting patterns, characterizing the essence of a problem, and telling good design stories. Key techniques will be reinforced with brief exercises.\nRecognizing and adapting to different design rhythms is an often overlooked key to agility. When things don’t exactly go according to plan, agile designers react, readjust their thinking, and try again. Even so, unanticipated problems crop upwicked problems that can’t be solved by sheer effort alone. They require a blend of skills: creative problem solving, negotiation, the ability to craft-try-rethink-and-propose solutions that combine simpler ideas or possibly take a leap in a totally new direction. This tutorial concludes with practical advice on how to sort design problems into the core, the revealing, and the rest, so you can give each kind of problem the attention it deserves.	Tutorials	Tutorial	2004
206	Project Simulation Game	Don’t be complacent with just refactoring your code towards an adequate solution. Agile designers need to be skilled problem solvers and communicators (and no, that doesn’t mean just writing clean code or producing barely enough UML). Increase your agility by adopting new techniques for seeing and articulating problems, shaping solutions, and explaining your designs. This tutorial will present strategies for finding and characterizing objects and their behavior, designing application control centers, adapting patterns, characterizing the essence of a problem, and telling good design stories. Key techniques will be reinforced with brief exercises.\nRecognizing and adapting to different design rhythms is an often overlooked key to agility. When things don’t exactly go according to plan, agile designers react, readjust their thinking, and try again. Even so, unanticipated problems crop upwicked problems that can’t be solved by sheer effort alone. They require a blend of skills: creative problem solving, negotiation, the ability to craft-try-rethink-and-propose solutions that combine simpler ideas or possibly take a leap in a totally new direction. This tutorial concludes with practical advice on how to sort design problems into the core, the revealing, and the rest, so you can give each kind of problem the attention it deserves.	Tutorials	Tutorial	2004
207	Speed Boats & Jacuzzis: What Do Your Customers Really Want?	The first step to creating truly successful products is understanding what customers really want. This can be harder than it sounds. Believe it or not, customers are people. Which means they’re just like you and somewhat like me. Which means that they don’t always know what they want. Because they don’t know, they can’t tell you. So, asking them to rank requirements or write stories isn’t very effective at helping you understand what they really want.\nWhat works for me and my customers, and, I suspect, will work for you and your customers is talking, listening, and working with them to uncover what they really want. This hands on, “learning by doing” tutorial describes 12 proven techniques for working with customers, and in the process understanding what your customers really want. They’re fun, and they work.	Tutorials	Tutorial	2004
208	The Crystal Methods, or How to Make a Methodology Fit	The first step to creating truly successful products is understanding what customers really want. This can be harder than it sounds. Believe it or not, customers are people. Which means they’re just like you and somewhat like me. Which means that they don’t always know what they want. Because they don’t know, they can’t tell you. So, asking them to rank requirements or write stories isn’t very effective at helping you understand what they really want.\nWhat works for me and my customers, and, I suspect, will work for you and your customers is talking, listening, and working with them to uncover what they really want. This hands on, “learning by doing” tutorial describes 12 proven techniques for working with customers, and in the process understanding what your customers really want. They’re fun, and they work.	Tutorials	Tutorial	2004
209	Advanced Fit Lab	The first step to creating truly successful products is understanding what customers really want. This can be harder than it sounds. Believe it or not, customers are people. Which means they’re just like you and somewhat like me. Which means that they don’t always know what they want. Because they don’t know, they can’t tell you. So, asking them to rank requirements or write stories isn’t very effective at helping you understand what they really want.\nWhat works for me and my customers, and, I suspect, will work for you and your customers is talking, listening, and working with them to uncover what they really want. This hands on, “learning by doing” tutorial describes 12 proven techniques for working with customers, and in the process understanding what your customers really want. They’re fun, and they work.	Tutorials	Tutorial	2004
210	Agile Project Management - Reliable Innovation	The first step to creating truly successful products is understanding what customers really want. This can be harder than it sounds. Believe it or not, customers are people. Which means they’re just like you and somewhat like me. Which means that they don’t always know what they want. Because they don’t know, they can’t tell you. So, asking them to rank requirements or write stories isn’t very effective at helping you understand what they really want.\nWhat works for me and my customers, and, I suspect, will work for you and your customers is talking, listening, and working with them to uncover what they really want. This hands on, “learning by doing” tutorial describes 12 proven techniques for working with customers, and in the process understanding what your customers really want. They’re fun, and they work.	Tutorials	Tutorial	2004
211	Test-Driven Development with Visual Studio 2005 Team System	Don’t be complacent with just refactoring your code towards an adequate solution. Agile designers need to be skilled problem solvers and communicators (and no, that doesn’t mean just writing clean code or producing barely enough UML). Increase your agility by adopting new techniques for seeing and articulating problems, shaping solutions, and explaining your designs. This tutorial will present strategies for finding and characterizing objects and their behavior, designing application control centers, adapting patterns, characterizing the essence of a problem, and telling good design stories. Key techniques will be reinforced with brief exercises.\nRecognizing and adapting to different design rhythms is an often overlooked key to agility. When things don’t exactly go according to plan, agile designers react, readjust their thinking, and try again. Even so, unanticipated problems crop upwicked problems that can’t be solved by sheer effort alone. They require a blend of skills: creative problem solving, negotiation, the ability to craft-try-rethink-and-propose solutions that combine simpler ideas or possibly take a leap in a totally new direction. This tutorial concludes with practical advice on how to sort design problems into the core, the revealing, and the rest, so you can give each kind of problem the attention it deserves.	Tutorials	Tutorial	2004
212	An Initial Exploration of the Relationship Between Pair Programming and Brooks’ Law	Through his law, “adding manpower to a late software project makes it later,” Brooks asserts that the assimilation, training, and intercommunication costs of adding new team members outweigh the associated team productivity gain in the short term. Anecdotes suggest that adding manpower to a late project yields productivity gains to the team more quickly if the team employs the pair programming technique when compared to teams where new team members work alone. We utilize a system dynamics model which demonstrates support of these observations. Parameter values for the model were obtained via a small-scale, non-probabilistic, convenience survey. Our initial findings suggest that managers should incorporate the pair programming practice, particularly when growing their team.	Research	Research Paper	2004
213	Exploring Extreme Programming in Context: An Industrial Case Study	A longitudinal study evaluating the effects of adopting the Extreme Programming (XP) methodology was performed at Sabre Airline Solutions™. The Sabre team was a characteristically agile team in that they had no need to scale or re-scope XP for their project characteristics. The case study compares two releases of the same product. One release was completed just prior to the team’s adoption of the XP methodology and the other after approximately two years of XP use. Comparisons of the new release project results to the old release project results show an increase in design complexity, a 50% increase in productivity, a 65% improvement in pre-release quality, and a 30% improvement in post-release quality. These findings suggest that, over time, adopting the XP process can result in increased productivity and quality.	Research	Research Paper	2004
214	The XP Customer Role in Practice: Three Studies	The Customer is the only non-developer role in eXtreme Programming (XP). The Customer's explicit responsibilities are to drive the project, providing project requirements (user stories) and quality control (acceptance testing): unfortunately the customer must also shoulder a number of implicit responsibilities including liason with external project stakeholders, especially project funders, clients, and end users, while maintaining the trust of both the development team and the wider business. In this paper, we report on a series of case studies of the Customer role in XP projects. We have found that Customers have a pressured and stressful role, leading to issues of sustainability.	Research	Research Paper	2004
215	Agile Methods for Large Organizations  Building Communities of Practice	Agile development practices respect tacit knowledge, make communication more effective, and thus foster knowledge creation process. However the current agile methods, like XP, are focused on practices that individual teams or projects need and use of the methods in organizations consisting of multiple co-operating teams is difficult. Community of Practice theory suggests that large agile organization should have various overlapping informal cross-team communities. This paper studies three agile methods, developed in Nokia, that use facilitated workshops to solve multi-team issues. Using Communities of Practices theory paper explains why these methods work in multi-team settings. The results of this paper suggest that workshop practices that gather people from different parts of organizations together to perform a specific well-defined task can be used effectively to solve issues that span over multiple teams and to build up Communities of Practice. This result suggests that the Community of Practice concept could provide basis for adapting agile methods for the needs of large organizations.	Research	Research Paper	2004
216	Direct Verbal Communication as a Catalyst of Agile Knowledge Sharing	This paper discusses the role of conversation and social interactions as the key element of effective knowledge sharing in an agile process. It also presents the observations made during a repeated experiment on knowledge sharing conducted in various groups of professionals and students. The study suggests that the focus on the pure codified approach is the critical reason of Tayloristic team failure to effectively share knowledge among all stakeholders of a software project. Drawing on the knowledge-as-relationship perspective of knowledge sharing we theorize that verbal face-to-face interaction facilitates achieving higher velocity accomplishments by software development teams.	Research	Research Paper	2004
217	XP "Anti-Practices" : anti-patterns for XP practices	When you introduce XP to your project, the team gets fresh enegy and high efficiency. However, sustaining the good condition becomes difficult when you are attacked by its side effects. We call these XP side effects "Anti-Practices", just as well as we name "Anti-Patterns" for Patterns.\n"Turning all the knobs up to 10" is the XP way, but Anti-Practices show bad symptoms of the overdrive. (There is a proverb "more than enough is too much" in Japan.)\nIn this experience report, we identify Anti-Practices discovered from our projects with prescriptions to the symptoms so that XPers can share the counter plans.	Process Evolution (XR1)	Experience Report	2004
218	Refactoring the Development Process: Experiences with the Incremental Adoption of Agile Practices	The goal of many current process improvement efforts is to become more agile by adopting an agile process. However, the results of several recent projects suggest that when attempting to become more agile, adopting an agile process is exactly the wrong thing to do!\nIn this experience report, we discuss our failures with wholesale process adoption and our successes using an incremental adoption strategy based on metric- and retrospection-driven feedback. Similar to refactoring practices for design and code, this strategy identifies “process smells,” and targets the worst of them with specific agile practices drawn from several popular agile processes.	Process Evolution (XR1)	Experience Report	2004
219	Subclassing XP: Breaking its rules the right way	XP says that all of its practices are mandatory. Fine, subclass XP and create a new methodology.\nFor each XP practice you remove you need a compensating one.\nWe removed pair programming and replaced it with pairing. A pair has an author and a second. Design must be paired, but only by the completion of the story. Formal pair programming can ensue at the option of the author or the second.\nWe also replaced individual or pair refactoring with group-controlled refactoring. A refactor list is maintained and prioritised by the group and worked on towards the end of the iteration.	Process Evolution (XR1)	Experience Report	2004
220	Learning Effective XP: Successes and Failures	Agile processes such as XP (eXtreme Programming) have been recognised for their potential benefits of greatly improving software vis-à-vis fewer bugs, early delivery of valuable functionality, closer client/programmer interaction and a lower cost/change curve. As with any process, factors such as experience, time pressures and project scale influence its success or failure. In this paper, we describe the experiences of five different teams that adopted XP in small projects. Project teams were made up of four or five programmers, who were from various backgrounds, with varying levels of experience. The experiments were conducted as part of a postgraduate degree course in a university.\nEach team had differing levels of success. In determining the dominant features of both the successful and unsuccessful projects, we observed that many of the XP principles can be applied in a way that detrimentally affects the project. This paper discusses the learning curve associated with the XP process and how inexperienced teams can misinterpret the guidelines. We argue that this is due to the fact that teams do not appreciate the underlying ethos upon which these principles are based. This paper presents experiences that show how a naïve application of the XP guidelines can greatly affect the success of a project.	Agile Challenges (XR2)	Experience Report	2004
221	Emergent Database Design : Liberating Database Development with Agile Practices	Many agile projects do not apply agile practices to their database development.  Common wisdom dictates that the entire data model be carefully designed up front and protected from change thereafter.\nWe believed the common wisdom as well. But the clash of traditional database practices and agile development practices caused us significant pain, and hamstrung our ability to deliver the most business value in each iteration.\nOnce we recognized this pain, we abandoned the conventional wisdom. Incrementally, we applied agile discipline to our database development, eventually reducing up-front design work to just-in-time work that matched our 1 to 2 week development iterations.\nThis paper summarizes our experience.	Agile Challenges (XR2)	Experience Report	2004
222	Agile Methodologies Applied to Embedded Firmware Development	This paper describes the experience of applying Agile approaches to the development of firmware for the Intel® Itanium® processor family. Embedded development (i.e. firmware) projects are quite different from object-oriented and pure software endeavors, yet they face many of the same challenges that Agile software development practices address. Several unique challenges are described, including team members’ specialized domain knowledge, technical backgrounds and attitudes toward change, and the impact hardware plays in firmware design. We found Agile approaches to be well-suited for our project, in spite of the fact that most Agile methodologists come from very different backgrounds.	Agile Challenges (XR2)	Experience Report	2004
223	Aligning Strategic Planning with Agile Development	In my experience, I have successfully used Agile Development to build quality software, but often these projects have failed to bring about company success. This failure is due to the fact that most companies’ strategic planning capabilities have not been aligned with the flexibility and adaptability of Agile Development. I believe that Agile Development alone is insufficient to make every software project successful; every project must be coupled with a complimentary strategy to achieve business goals. If Agile Development is to continue growing in the business community, current strategic planning capabilities must be developed that share the same agile philosophies.	Management (XR3)	Experience Report	2004
224	Adaptive Agility - Managing Complexity and Uncertainty	Landmark Graphics has a large portfolio of software projects, with over 60 commercial products consisting of over 50 million lines of code. We sought to improve our software development process and looked to agile methods as natural extension of our current processes. As we examined our past projects we realized that an overall process to suit all projects would need to be adaptable based on the project conditions. This led us to look at some of the ideas of Cockburn in Crystal methods, and later to the work of Boehm and Turner.\nUpon reviewing our projects, we realized that we could categorize them into a four quadrant matrix with the axes of Complexity and Uncertainty, where Complexity included such issues as team size and criticality, and Uncertainty included both market and technical uncertainty. As is tradition, we used animal names to represent the four quadrants:\nDogs  Small projects with low uncertainty\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tColts  Small projects with high uncertainty\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tCows  Large projects with low uncertainty\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\tBulls  Large projects with high uncertainty\nAll projects might have core processes that they adopt, but many process activities should be adapted based on the elements of Complexity and Uncertainty. It was comforting to uncover that most of our project teams had already naturally taken on this emergent behavior.	Management (XR3)	Experience Report	2004
225	The Slackers Guide To Project Tracking	As a project manager, your time is far too important to be wasted on mundane tasks like detailed tracking of the day-to-day activities of each of your developers. Wouldn't it be nice if you spent your time negotiating project scope and identifying and removing team impediments? Our experience has shown that consistency in card sizes and estimates allows you to perform full project planning with little effort. Additionally, it results in diagrams that accurately reflect your project's status. With this, accurate release planning sessions take hours not days, freeing up valuable time for both you and your developers.	Management (XR3)	Experience Report	2004
226	DecisionSpace Infrastructure: Agile Development in a Large, Distributed Team	This report takes lessons and experiences from the first two years of the DecisionSpace Infrastructure project. This covers the period from first inception to relative process stability.\nReasons for Interest	Transitioning to Agile (XR4)	Experience Report	2004
227	The Development Game	Three years ago we started a new project at our company. Undermanned, short on time, and under the gun to succeed, we started with 12 developers made up of existing domain experts and new technology experts. Management decided that the new project was the perfect time to implement some much needed process and, after investigating several published processes began implementing practices deemed important to success. I was on both the management and development teams.\nThe developers resisted the idea of new processes and practices for weeks, with quiet grumbling and out-and-out defiance.\nTo move forward, we created a "game" that involved developers in the process, rewarding approved practices and mildly disciplining non-compliance. Management spotted us $1,400 in prize money, which we used to buy techno-gadgets that would serve as rewards at the end of the iteration.\nThe game worked, and we developed a competitive and fun environment that improved morale, increased compliance, and caused the developers to become more involved in how the process itself worked. This paper describes the game and our experiences in playing it on several occasions.	Transitioning to Agile (XR4)	Experience Report	2004
228	A Study Case:  Evolution of Co-location and Planning Strategy	Agile practices can and should be evolved throughout a project.  This paper focuses on the evolution of two agile practices, namely co-location and planning strategy, in a software development project at TransCanada.  From inception to conclusion, the evolution contributes to the successful delivery of an in-house developed system and leads to change in organizational culture.	Transitioning to Agile (XR4)	Experience Report	2004
229	Taming the Embedded Tiger	The challenge: An embedded application for a new product design; Brand new CPU with its design not even finalized; Must integrate with software being developed by a partner company. Add to that a schedule already shortened by delay in staffing. Next, add a team with half of its members inexperienced in embedded or real-time software. Sound like a recipe for disaster? We discovered that even inexperienced team members could contribute productively if there were test methods tailored for agile embedded software development, and real teamwork. Embedded systems are notoriously hard to troubleshoot.\nTest practices we describe in this paper made troubleshooting so easy that our bug list never had more than 2 entries throughout the whole project.	Testing (XR5)	Experience Report	2004
230	Don't Mock Me: Design Considerations for Mock Objects	Mock objects, an object-oriented testing construct used predominantly in test-driven development, are often abused, leading to inflexible and defective systems. Developers abuse mocks because they don't fully understand the driving forces for when to use and not use them; they also don't fully understand the implications of their improper use. Mocks inherently introduce design concessions in code.\nThis experience report discusses when to use mocks, presents design categories that most mock implementations fall into, and discusses the considerations for each design category.	Testing (XR5)	Experience Report	2004
231	Foundations for Agile Development	The books on agile methods don’t cover everything one needs to know to develop software. The participants in this workshop will explore which core best practices and patterns are prerequisites for having an effective agile process, and how an agile team’s approach to the practice would differ from that of a more traditional environment. For example, “Version control” is arguably a process that helps a team; what is a core set of knowledge that an agile team needs to implement version control in a way that helps, not hinders the process? How does that differ from a more traditional environment? What are good resources for an agile team to use.\nThe workshop will start off with the group developing a set of core areas that they want to discuss in detail, and then we will explore the areas in depth.	Peer to Peer	Workshop	2004
232	Great COTS! Implementing Packaged Software with Agility	The books on agile methods don’t cover everything one needs to know to develop software. The participants in this workshop will explore which core best practices and patterns are prerequisites for having an effective agile process, and how an agile team’s approach to the practice would differ from that of a more traditional environment. For example, “Version control” is arguably a process that helps a team; what is a core set of knowledge that an agile team needs to implement version control in a way that helps, not hinders the process? How does that differ from a more traditional environment? What are good resources for an agile team to use.\nThe workshop will start off with the group developing a set of core areas that they want to discuss in detail, and then we will explore the areas in depth.	Peer to Peer	Workshop	2004
233	Agile Enablement Patterns	The books on agile methods don’t cover everything one needs to know to develop software. The participants in this workshop will explore which core best practices and patterns are prerequisites for having an effective agile process, and how an agile team’s approach to the practice would differ from that of a more traditional environment. For example, “Version control” is arguably a process that helps a team; what is a core set of knowledge that an agile team needs to implement version control in a way that helps, not hinders the process? How does that differ from a more traditional environment? What are good resources for an agile team to use.\nThe workshop will start off with the group developing a set of core areas that they want to discuss in detail, and then we will explore the areas in depth.	Peer to Peer	Workshop	2004
234	Making money with (or without) software: Towards zero degrees of customer separation	Have you ever noticed how easy it is to write software tools for yourself?  This is because there are zero (0) degrees of separation between you (the developer) and you (the end-user and stakeholder).\nStakeholders pay for the privilege developers enjoy as a tool-builder.\n\nThis is how software teams are paid.\n\nIf we sold chickens, we would say, “these chickens are healthy and plump, and therefore worth more than this sickly, scrawny old cow”.\n\nMany Agile projects involving more than one person deliver on time and on schedule with high quality, yet fail to satisfy the project stakeholders.  All too often we find ourselves with an unhealthy cow when the market was demanding chicken.\n\nThe purpose of this workshop is to explore the topic, “Directly involving developers with customers makes money”.	Peer to Peer	Workshop	2004
235	Can't Change Your Organization? Change Yourself!	Have you ever noticed how easy it is to write software tools for yourself?  This is because there are zero (0) degrees of separation between you (the developer) and you (the end-user and stakeholder).\nStakeholders pay for the privilege developers enjoy as a tool-builder.\n\nThis is how software teams are paid.\n\nIf we sold chickens, we would say, “these chickens are healthy and plump, and therefore worth more than this sickly, scrawny old cow”.\n\nMany Agile projects involving more than one person deliver on time and on schedule with high quality, yet fail to satisfy the project stakeholders.  All too often we find ourselves with an unhealthy cow when the market was demanding chicken.\n\nThe purpose of this workshop is to explore the topic, “Directly involving developers with customers makes money”.	Peer to Peer	Workshop	2004
236	Non-XP words for agile development practices	Have you ever noticed how easy it is to write software tools for yourself?  This is because there are zero (0) degrees of separation between you (the developer) and you (the end-user and stakeholder).\nStakeholders pay for the privilege developers enjoy as a tool-builder.\n\nThis is how software teams are paid.\n\nIf we sold chickens, we would say, “these chickens are healthy and plump, and therefore worth more than this sickly, scrawny old cow”.\n\nMany Agile projects involving more than one person deliver on time and on schedule with high quality, yet fail to satisfy the project stakeholders.  All too often we find ourselves with an unhealthy cow when the market was demanding chicken.\n\nThe purpose of this workshop is to explore the topic, “Directly involving developers with customers makes money”.	Peer to Peer	Workshop	2004
237	Writing Automated Customer Acceptance Tests	Have you ever noticed how easy it is to write software tools for yourself?  This is because there are zero (0) degrees of separation between you (the developer) and you (the end-user and stakeholder).\nStakeholders pay for the privilege developers enjoy as a tool-builder.\n\nThis is how software teams are paid.\n\nIf we sold chickens, we would say, “these chickens are healthy and plump, and therefore worth more than this sickly, scrawny old cow”.\n\nMany Agile projects involving more than one person deliver on time and on schedule with high quality, yet fail to satisfy the project stakeholders.  All too often we find ourselves with an unhealthy cow when the market was demanding chicken.\n\nThe purpose of this workshop is to explore the topic, “Directly involving developers with customers makes money”.	Peer to Peer	Workshop	2004
238	Customer Collaboration  Challenges and Experiences	The books on agile methods don’t cover everything one needs to know to develop software. The participants in this workshop will explore which core best practices and patterns are prerequisites for having an effective agile process, and how an agile team’s approach to the practice would differ from that of a more traditional environment. For example, “Version control” is arguably a process that helps a team; what is a core set of knowledge that an agile team needs to implement version control in a way that helps, not hinders the process? How does that differ from a more traditional environment? What are good resources for an agile team to use.\nThe workshop will start off with the group developing a set of core areas that they want to discuss in detail, and then we will explore the areas in depth.	Peer to Peer	Workshop	2004
239	Personal Developmemt Practices Map	Have you ever noticed how easy it is to write software tools for yourself?  This is because there are zero (0) degrees of separation between you (the developer) and you (the end-user and stakeholder).\nStakeholders pay for the privilege developers enjoy as a tool-builder.\n\nThis is how software teams are paid.\n\nIf we sold chickens, we would say, “these chickens are healthy and plump, and therefore worth more than this sickly, scrawny old cow”.\n\nMany Agile projects involving more than one person deliver on time and on schedule with high quality, yet fail to satisfy the project stakeholders.  All too often we find ourselves with an unhealthy cow when the market was demanding chicken.\n\nThe purpose of this workshop is to explore the topic, “Directly involving developers with customers makes money”.	Peer to Peer	Workshop	2004
240	Defining Agile Testing Practices, Rules, and Patterns	There are many testers on agile teams these days, and despite the increase in presentations and publications on “agile testing”; we find the term is still vague.  A list of agile testing practices (or patterns, rules of the game, whatever is the best way to express them) would guide us and other agile testers in the way XP practices guide XP teams.\nThe goal of this workshop is to discuss and produce a list of practices, rules, patterns (or however we choose to define agile testing techniques) that we (the workshop participants) agree upon.  We’ll use a list we’ve compiled as a starting point, but expect many ideas to surface in our discussions.	Peer to Peer	Workshop	2004
241	Agile Development with Domain Specific Languages	A domain-specific language is designed to express the requirements or solutions of a particular business domain.\nThe insurance industry, telephony, ice-cream manufacture, etc, all have their own vocabulary, constraints and patterns which can be most conveniently expressed in a purpose-made language. With clever engineering, we can design a compiler and runtime framework that can input such definitions and generate an insurance/telephony/ice-cream system.\n\nWith such a system at our disposal, creating our next insurance or ice-cream system becomes very rapid: development jobs become small-scale, that would be considered large scale if done from scratch; and consequently much more amenable to agile methodology. This workshop will explore that proposition.	Peer to Peer	Workshop	2004
242	Advice to a Customer New to Agile Methods	A domain-specific language is designed to express the requirements or solutions of a particular business domain.\nThe insurance industry, telephony, ice-cream manufacture, etc, all have their own vocabulary, constraints and patterns which can be most conveniently expressed in a purpose-made language. With clever engineering, we can design a compiler and runtime framework that can input such definitions and generate an insurance/telephony/ice-cream system.\n\nWith such a system at our disposal, creating our next insurance or ice-cream system becomes very rapid: development jobs become small-scale, that would be considered large scale if done from scratch; and consequently much more amenable to agile methodology. This workshop will explore that proposition.	Peer to Peer	Workshop	2004
243	Extreme Programming System Metaphor	A domain-specific language is designed to express the requirements or solutions of a particular business domain.\nThe insurance industry, telephony, ice-cream manufacture, etc, all have their own vocabulary, constraints and patterns which can be most conveniently expressed in a purpose-made language. With clever engineering, we can design a compiler and runtime framework that can input such definitions and generate an insurance/telephony/ice-cream system.\n\nWith such a system at our disposal, creating our next insurance or ice-cream system becomes very rapid: development jobs become small-scale, that would be considered large scale if done from scratch; and consequently much more amenable to agile methodology. This workshop will explore that proposition.	Peer to Peer	Workshop	2004
244	Developing an Agile-friendly software testing curriculum	A domain-specific language is designed to express the requirements or solutions of a particular business domain.\nThe insurance industry, telephony, ice-cream manufacture, etc, all have their own vocabulary, constraints and patterns which can be most conveniently expressed in a purpose-made language. With clever engineering, we can design a compiler and runtime framework that can input such definitions and generate an insurance/telephony/ice-cream system.\n\nWith such a system at our disposal, creating our next insurance or ice-cream system becomes very rapid: development jobs become small-scale, that would be considered large scale if done from scratch; and consequently much more amenable to agile methodology. This workshop will explore that proposition.	Peer to Peer	Workshop	2004
245	Top tips for dispersed teams	A domain-specific language is designed to express the requirements or solutions of a particular business domain.\nThe insurance industry, telephony, ice-cream manufacture, etc, all have their own vocabulary, constraints and patterns which can be most conveniently expressed in a purpose-made language. With clever engineering, we can design a compiler and runtime framework that can input such definitions and generate an insurance/telephony/ice-cream system.\n\nWith such a system at our disposal, creating our next insurance or ice-cream system becomes very rapid: development jobs become small-scale, that would be considered large scale if done from scratch; and consequently much more amenable to agile methodology. This workshop will explore that proposition.	Peer to Peer	Workshop	2004
246	Business Speak 101: Communicating Project Alternatives to Customers	Have you ever noticed how easy it is to write software tools for yourself?  This is because there are zero (0) degrees of separation between you (the developer) and you (the end-user and stakeholder).\nStakeholders pay for the privilege developers enjoy as a tool-builder.\n\nThis is how software teams are paid.\n\nIf we sold chickens, we would say, “these chickens are healthy and plump, and therefore worth more than this sickly, scrawny old cow”.\n\nMany Agile projects involving more than one person deliver on time and on schedule with high quality, yet fail to satisfy the project stakeholders.  All too often we find ourselves with an unhealthy cow when the market was demanding chicken.\n\nThe purpose of this workshop is to explore the topic, “Directly involving developers with customers makes money”.	Peer to Peer	Workshop	2004
8716	Lean UX: Getting out of the deliverables business	Traditionally UX Design has been a deliverables practice. Wireframes, sitemaps, etc defined the practice of UX Design (IA, IxD, UI Design etc). While this work has helped define what a UX Designer does and their value, it has also put designers in the deliverables business   measured & compensated for the quality of their deliverables (instead of the success of the experiences they design).\\n\\nEnter Lean UX - the practice of bringing the experience to light faster, with less emphasis on deliverables and greater focus on the actual experience being designed.\\n	User Experience & Interaction Design	Talk	2011
8736	Critical Success Factors for Acceptance Test Driven Dev't	A good analyst knows what questions to ask to bring clarity to a murky subject. When they hear about Acceptance Test Driven Development (ATDD), a core practice on Agile projects, they ask: "Can examples capture functional requirements?, Where do user stories come from?, and Will my role become extinct? . When Jennitta Andrea worked on her first Agile project in 2000, she asked all of these questions and more. As a hands-on practitioner and keen observer of teams and processes, she has discovered success comes from knowing how ATDD is part of an eco-system of roles, practices, and tools.   	Agile Boot Camp	Talk	2011
8739	Agile In a Nutshell	If you ve been doing Waterfall delivery most of your career agile can be down right scary: changing requirements, adaptive planning, iterative development.  These are all intimidating things for managers and organizations used to doing things in discrete phases one stage at a time.  In this introductory talk, we will look at agile in simple terms explaining:\\n\\n- what agile is\\n- what working on an agile project is like\\n- some of it's myths\\n- which agile method is right for you, and\\n- three steps you can take to becoming more agile today.	Agile Boot Camp	Talk	2011
8741	The Potential For Agile Digital Marketing Business Strategy	David Dalka worked at BlackRock (BLK) during the 80 to 800 person hyper growth phase redefining data structures, agile financial analysis and reducing decision making cycle times. After 9/11 events, David started studying businesses that were failing after not adopting emerging best practices using digital, search marketing and emerging media techniques. He advocates that agile BlackRock style techniques be applied to marketing processes to optimize business performance. David will discuss emerging digital marketing business strategy. Senior business leaders are encouraged to attend!	Business & Project Management	Demonstration	2011
8745	Building a Practice as a UX Team of One	UX teams of one have unique challenges. Fewer resources. Creative isolation. Organizational ignorance. Sometimes even hostility. This workshop will explore the real life agile team situations that solo UX practitioners work in, and show what you can do about them.\\n\\nThe goal of this workshop is to give every attendee the tools to be relevant and effective by creating a personalized plan for their UX practice. Your plan will include the methods, soft skills, and strategies that will help you build support for UX and do your best work in an agile environment.	User Experience & Interaction Design	Tutorial	2011
8747	Tightening the Feedback Loop	Agile methods bring individuals working together in a more intimate environment than other methods. It requires different skills to make it work. Giving and receiving effective feedback is a powerful tool  to improve collaboration in teams and organisations yet our organisations teach us little about this important topic. We are surrounded by poor examples all the time.We'll explore some simple rules for giving and receiving feedback, observe how most people give ineffective feedback to others and illustrate examples of applying the rules to make it more effective.	Collaboration Culture & Teams	Talk	2011
8750	Fluency over Proficiency: Accelerating Agile Learning and "Hunting Fluency"	While we value proficient knowledge of Agile practices, we value more the fluent, skillful expression of these practices and principles in daily use. \\n\\nExperience team and individual learning in this interactive session, via a toolkit of accelerated learning and teaching techniques. Used together, these techniques comprise a coaching and peer-to-peer mentoring language that drives ever-tighter cycles of improvement. \\n\\nCome to this experiential workshop for immersion in accelerated learning using the Language Hunting fluency game system.\\n	Hands-on Learning	Workshop	2011
8751	What are we supposed to do with these managers NOW?	Your organization has begun the journey of adopting agile. Most of the practices learned focus on the team. However, how do those teams become self-organized? Isn t some kind of leadership useful to help them along? Since teams represent all functional groups, where does that leave manager? Do we need them any more? In this session, we will explore areas where management can be valuable such as team organization, team space, mentorship and process optimization. If you are a manager, there is a place in an Agile organization if you are willing to look at responsibilities in a different way.	Leadership	Talk	2011
8752	Goad Testing: Guaranteeing that Tests Make Distinctions	Test Driven Development has reached maturity.  Goad Testing takes you a level deeper, examining what tests really are and using the outcome of that exercise to derive new ways of keeping software - both production and test - healthy, flexible, and on-specification.\\n\\nMaking distinctions is a critical aspect of a test: It allows a test to serve as an executable specification.  Sometimes this ability is lost in the course of maintenance.  Goad testing is a way to prevent that from happening without introducing significant extra work or complexity.	New Horizons & New Voices	Demonstration	2011
8760	SHU-HA-RI Applied to Agile Leadership Driving Your Agile Evolution	Far too many agile instances either fail or are challenged because leadership team members don t sufficiently understand the fundamentals of agility nor how to map them towards effective execution. In this presentation, we ll explore a basic assessment model for determining Agile Leadership Maturity as a means of assessing and improving their understanding and your overall effectiveness. Not as a means of stereotyping leadership, but simply as a tool for understanding the leadership maturity landscape within your organization. Then we'll develop context-based strategies for improvement.	Adoption & Transformation	Workshop	2011
8764	Manager as Scrum Master?	Self-managing is very important aspect in Agile change, in which manager transforms from command & control to leading and coaching. The experience report will share you a 3-year journey from one large-scale organizational Agile adoption, with the focus on the evolution of Scrum Master and manager role and the way they work together. It describes how the change regarding self-managing was introduced and adapted, then how they have tried to sustain the change by creating consistency between the values and principles behind Agile organization and the management capability to practice them.\\n	Insights - Experience Reports	Experience report	2011
8765	Apply systems thinking in large-scale Scrum transformation	In large-scale Scrum transformation, organizations experience gridlock after the initial success. System thinking is one important thinking tool that will help you see the dynamic view of the system and get over the challenges. Through the workshop, you will learn to recognize common system archetypes, so that you understand why you are getting certain undesirable effects; as well as common strategies to leverage in the situation, so that you direct your effort on the right place.	Adoption & Transformation	Workshop	2011
8773	The surprising science behind agile leadership	Not everyone is a fan of the self directed self organizing team. It flies in the face of traditional project management, and often conflicts with the traditional organization model. The benefits of self directed teams however are too big to ignore and now we have scientific proof as to why. \\n\\nIn this new talk on agile leadership, I explain:\\n\\n- how and why agile leadership works, \\n- the science behind why so many choose to work this way, and \\n- the impact it s going to have on you and your organization.	Leadership	Talk	2011
8774	Lean Startup: How Development Looks Different When You're Changing the World	How does development look different when you're creating things that no one has ever created before? Lean Startup is about creating from a BIG VISION, where we want to change the world & do something really significant. It combines Agile Development with _Customer_ Development so we can be disciplined about how we create our startups. Learning (rather than working software) becomes our most important measure of progress and agile practices are pushed to the next level. Come get a glimpse of the next level of agile and discover how development looks different when you're changing the world.	New Horizons & New Voices	Talk	2011
8780	Adaptive Leadership: Accelerating Organizational Agility	Leading agile organizations requires Adaptive Leadership that begins with understanding business agility and how practices like continuous delivery and a mindset of sustainable agility combine to create highly responsive IT organizations. Adaptive Leadership is two dimensional: Being and Doing Agile. Adaptive leaders embrace specific principles and practices, such as "doing" four key performance levers:  Do Less,   Speed-to-Value,   Quality,  and  Engage , and  Being  agile "adaptive", "riders of paradox", "exploring", and "facilitating." \\n\\n	Enterprise Agile	Tutorial	2011
8782	Dr W. Edwards Deming's famous Red Bead Experiment - For Software Teams	Participate in Dr W. Edwards Deming's famous Red Bead Experiment. This classic learning tool helps illustrate the impact that a system, and traditional management approaches, can have on individuals who work within an organisation. I will also relate this experiment to approaches to software development and the management of software development teams. \\n\\nThe experiment introduces many of Deming's ideas about management, including his 14 Points for Management. It also introduces the Statistical Process Control Chart.\\n\\nAfter the experiment there will be a discussion of the issues addressed. 	Open Jam	Demonstration	2011
8785	Becoming Agile in an Imperfect World	Taking a big bang approach to Agile is not a viable option for most organizations. Most successful adoptions of Agile are tailored to the strengths and limitations of the organization. This workshop will show you how to design a tailored roadmap to becoming Agile, despite the constraints around you. The roadmap includes 3 phases; Getting Ready, Piloting and Spreading Agile. If you re just starting your agile transition or in a transition stage, this workshop will equip you with practical techniques and strategies to move from your existing process without starting from scratch.\\n\\n	Adoption & Transformation	Tutorial	2011
8797	Hooray, We're Agile Testers! What's Next? Advanced Topics in Agile Testing	Your team successfully adopted Agile, you have traction on practices such as CI, TDD, maybe ATDD. Still, you see lots of room for improvement in testing. Do you sometimes miss or misunderstand customer needs? Is it sometimes hard to complete all testing activities each iteration? In this interactive tutorial, you'll practice ways to better understand and capture customer needs; collaborate more effectively and enjoyably with developers and other team members;  improve continuous integration and delivery; manage technical debt; plan and estimate in ways that ensure testing \\"keeps up\\". \\n\\n	Testing & Quality Assurance	Tutorial	2011
8798	Coaching at the Enterprise Level - Introducing the Agile Cafe	Agile coaches are leaders of change in an organization and we leverage things like training, direct coaching expertise on Agile, and facilitating peer-to-peer networks to help with this change.   There is a gap in the current literature on how to create such networks.  This talk will cover the Agile Cafe, my version of the World Cafe, in both theory & practice.   The World Cafe is a technique to gather groups of people together, ask them important questions, and draw out their knowledge.  Outcomes are shared knowledge, community creation, and visibility for Agile at the enterprise level.  \\n\\n	Coaching & Mentoring	Talk	2011
8800	Learning From Failure Overpowers Fear	You ve started with Agile, and you re doing ok, some lows, some deeper insights. During an agile transition most people come face to face with something they fear.  It may be a concept, thought, activity or belief that is challenged.\\nI m going to tell you about some fears and failures that teams, Product Owners and Scrum Masters encounter. Along the way you will hear about my agile transition journey and how embracing fear and failure has given me this overwhelming feeling of being free and full of energy!\\n\\n\\n\\n	Adoption & Transformation	Talk	2011
8801	The Speed To Cool: Agile Testing And Building Quality In	Ensuring that the approach to testing and quality is understood and appropriately valued in an agile world can be a struggle for many organisations, especially when resources are limited and our customers are expecting business value in a timely manner. In this session we will define what quality means and share a number of tools for measuring it, discuss approaches to improving the skills, empowerment and role of testing in the organisation and share why testing is the coolest role on the team and why it is everyones responsibility.	Testing & Quality Assurance	Talk	2011
8808	Designing a Kanban System for the Enterprise	Enterprise software and systems development typically involves complex mixes of teams, technologies, skills, architectures and organisational structures which must interact for the business to be successful. This tutorial will introduce an approach which designs the Enterprise as a Kanban System. The model is based on the central theme of Systems Thinking, the purpose of achieving Pull, Value and Capability, and aspects of Workflow, Visualisation, Work In Process, Cadence and Learning. The model is not a complete solution, but suggests key areas to consider when designing the Agile Enterprise.	Enterprise Agile	Tutorial	2011
8810	WIP and Kaizen:  Key Tools for Enabling Continuous Improvement 	Have you established an Agile or Lean software development approach including conducting retrospectives but you just don't seem to be able experience meaningful innovation and improvement in your process?  This talk will explore some of the reasons why this could be and provides a pragmatic approach to helping ensure your process can support innovation and continuous improvement\\n\\n\\n	Adoption & Transformation	Talk	2011
8821	Beyond Software: Adopting Agile Outside of Development	The challenges and benefits of adopting agile in software development are well known. Conceptually it makes a hell of a lot of sense for departments outside of dev to embrace agile as well. However, as organizations extend agile into sales, marketing, professional services and hr they need to leverage the experience of their software teams while understanding that not every agile practice translates exactly. This session will focus on how to help build an agile sales/marketing/professional services/hr team when no one has ever been on an agile sales/marketing/professional services/hr team.	Business & Project Management	Workshop	2011
8823	An Introduction to Non-Violent Communication (NVC) for Agile Coaches	NVC can dramatically improve our relationships by helping us focus our attention on\\n1) Empathic understanding of others without compromising our own values, and\\n2) Expressing our real feelings and needs openly and honestly, yet without blame or criticism.\\n\\nNVC delineates four components of communication:\\n     1) Observations free of evaluations;\\n     2) Feelings straight from the heart;\\n     3) Needs, values and longings; and\\n     4) Requests expressed clearly in positive action language.\\n\\nThis session will show how NVC can be an important addition to your Agile coaching tool kit.	Coaching & Mentoring	Workshop	2011
8831	Agile Decisions	Making the right choices is crucial. Decisions have generally been viewed as the prerogative of individuals - usually senior executive. The process employed, the information used, the logic relied on, have been left up to them, in something of a black box. Information goes in, decisions come out - and who knows what happens in between. Unlike other business processes, decision making has been rarely the focus of systemic thinking and analysis. This has left a significant opportunity to improve decision making as we would any other process through visibility, feedback and value.	Business & Project Management	Tutorial	2011
8832	Taming the customer support queue	In Aug 2010 we reduced the size of our development team. We needed to handle customer support issues and new development with the 3 remaining teams. We had over 600 open defects and the list was growing daily. On top of that our first clients were going live. Clearly some radical change was needed. We implemented Kanban. \\n\\nThe result? In Dec 2010 we had no open severity 1 issues. Our queue was down to 54 issues. SLAs are met in most cases, and our resolution rate exceeds our incoming rate.\\n\\nI d like to share our story, and inspire you to tame your support queue too!	Insights - Experience Reports	Experience report	2011
8838	Flirting With Your Customers	Flirting is about connecting. Some universities require their IT engineers take a flirting class not to attract a partner, but to learn how to interact better in the workplace. \\n\\nWe ve translated flirting techniques for use in a business setting. Discover how the  8 flirting steps  can help you  create stronger connections and greater understanding of your customers so that you work together better to deliver business value.  Flirting With Your Customers  creates the connections that can make a significant difference in your project s success.	Working with Customers	Workshop	2011
8840	Agile Management: creating a culture to help your team succeed	I'm the software development manager for a product company with 3 agile teams. My job is to foster the environment or culture that helps us be the best team we can be. In this talk I'll share a little about how I've done this, where I got my ideas, and how this works compared to other environments I've worked in which are.... well let's just say different :)\\n\\nI recently blogged about this: http://scrumcoaching.wordpress.com/2010/12/17/a-development-managers-strategy/	Agile Show & Tell - Lightning Talks	Talk	2011
8845	Creativity for Agile Teams	This is a refinement of our presentation at Agile2009. Creativity can manifest in several ways including creation of something new, refinement of something that exists and problem solving. How do we support, enable and enhance the creative abilities of Agile teams? There are many ways to shape the work environment for greater creativity. We will describe how creativity happens and can be enhanced by providing a safe, nurturing environment, enhancing group interactions, pacing activities that utilize different sensory modes and trusting in the power of subconscious integration.\\n	Collaboration Culture & Teams	Talk	2011
8848	Design Thinking	What does the US Military have in common with Apple? The both deal with increasing complexity by emphasizing design thinking. At Apple, design thinking starts by deciding, first of all, what NOT to do. In the military, design thinking precedes planning, and takes leaders through a series of steps that reframe their thinking about the environment they are dealing with. When you have competitors like Apple - or when your decisions are a matter of life or death - then you need to move beyond working software, beyond backlogs, even beyond agile - and focus like a laser on customers.	Working with Customers	Talk	2011
8849	Refactoring and Code Smells - An example of refactoring legacy code	Recognizing code smells and cleaning the code up by refactoring are essential skills of an agile developer. This session explains why these skills are so essential, introduces common code smells and shows refactorings that clean up the code. This will be demonstrated in the context of a piece of open-source legacy code (an accounting program in Java). I'll introduce code smells by identifying them in this piece of code, then apply refactorings to remove them. I'll keep identifying more code smells and refactor them until there is nearly nothing left of the original code.	Agile Boot Camp	Demonstration	2011
8854	Collaborating with Non-Collaborators	We understand the vital importance of collaboration among team members. However, how can we deal with non-collaborators people who won t work with us? Although we may not be able to change them, we may be able to work with them. This session describes how to identify non-collaborator and examine the system within which the non-collaborators work: their success factors, motivations and measurements. Using a Trust and Ownership Model, we considers tools and techniques to cope with each trait. Deal with non-collaborators by building a strategy that empowers you to collaborate no matter what.	Leadership	Tutorial	2011
8855	Teach Your Cucumber Scenarios to Speak "Business"	Cucumber can be a powerful tool to build a common, or ubiquitous, language between product people, developers, and testers. A common language leads to common understanding and, ultimately, more valuable software. Unfortunately, too many teams write Cucumber scenarios that use technical language and miss out on this benefit. In this interactive session, you'll learn how to use Cucumber to grow a ubiquitous language and how to refactor your existing scenarios to speak "business." (While the focus is on Cucumber, users of other tools will surely see ways to apply the lessons to their own tools.)	Testing & Quality Assurance	Tutorial	2011
8857	Removing Impediments with Drawings	Pictures convey ideas more clearly and have a greater impact than a simple conversation.  The ability to communicate, and perhaps sell, your ideas at a whiteboard is an essential skill for anyone on an Agile team.  In this hands-on session based on Dan Roam's book "The Back of the Napkin", we will learn the six types of diagrams used in business and how to select the right picture for your problem.  All you need for this session is an issue, your imagination and the ability to draw a circle, square, arrow and a stick figure.  Come on - give this a try.  It will be fun.	Coaching & Mentoring	Tutorial	2011
8858	Refactoring Conversation Smells	As an Agile practitioner, you probably communicate with many different people every day. Are all your conversations effective? Or do you sometimes find yourself or the other person explaining and re-explaining, arguing a position, fighting over  semantics , or cornered?\\n\\nThese conversations go awry in consistent ways, which arise from people's innate methods of processing and cataloguing information. Come to this tutorial to learn these "conversation smells" and systematic ways -- a simple set of patterns and questions -- to tackle them and get your conversations unstuck.	Collaboration Culture & Teams	Tutorial	2011
8859	Powerful Questions	Picking the right question or reframing an issue can introduce a profound shift in the conversation. In this hands-on workshop, we will discuss how to create your own powerful questions and practice this skill. Leave with a practical tool you can use with your Teams today.\\n\\n	Hands-on Learning	Workshop	2011
8860	Creaky Platforms: tackling legacy technology challenges	Yesterday s state-of-the-art system is today s legacy. The advent of SaaS, social, mobile, etc prevents the rapid rollout of new features. Large or small, aligning product or platform with ever-changing business strategy is critical.  \\n\\nLarge or small, it is critical to understand how to align product or platform with an ever-changing business strategy. \\n\\nWe discuss how to balance the cost pressures to use legacy assets with the need to keep up with the market. We also reveal how to remediate legacy systems quickly without investing in a massive and risky 'big-bang' re-platforming.\\n	Enterprise Agile	Talk	2011
8867	Team Swarming--Why and How	Agile teams are often asked to swarm over the work, applying as many people to each item of work as productively possible before starting the next.  Sometimes this magically works, and bystanders confidently describe the team as "gelled." Other times it looks like a train wreck, with people getting in each other s way and on each other s nerves. In the middle we find a continuation of the status quo. What re the advantages of swarming? How can we increase the odds of gaining those advantages? We ll explore the answers from your experience and mine.	Collaboration Culture & Teams	Workshop	2011
8873	Multi-sensory Kanban	NOTE: There is a size limit for 2MB for presentations, so tweet either @adhondt or @ravindar to get the full slide deck.\\n\\nVisual Kanban helps surface process problems--and our Multi-sensory Kanban surfaces even more by helping with soft skills, peer design, and increased collaboration outside the team. See, hear, feel, taste and smell your way to better system throughput with a hybrid of XP-style kanban story boards, Pomodoro-like audible timers, group scrums, and team meals/snacks.	Development Languages Practices & Techniques	Tutorial	2011
8876	Scaling Agile to the Enterprise with Lean	Lean is a journey, and Systematic began that journey five years ago. It started with an executive imperative, was kicked off with extremely successful Scrum pilots, spread to other teams using CMMI principles, then percolated up through middle management as success became obvious. This was certainly not easy! This is a story of a real lean journey taken by a large organization - the triumphs, the pitfalls, the honest results, the expansion as the company grew, the continuing saga of improvement. It's a story of lean theory, the struggle to implement that theory in practice, and the path ahead.	Enterprise Agile	Talk	2011
8877	Do you dare to ask your HR manager to practice KANBAN?	This is a true exercise.  We are a mid size software company in Sri Lanka.  Agile adoption of our development teams made our projects more profitable and sustainable. We got out of the  software factory  concept which is common in offshore business and built a professional software company. \\n But this didn t solve all our problems. With the rapid growth, we started to have a highly pressured situation in HR/operations depts. \\n This session covers how we introduced KANBAN to our HR/Op dept, the success, challenges and the difference I saw when applied them to dev teams.\\n	Insights - Experience Reports	Experience report	2011
8881	IEEE Best Paper - Lean as a Scrum Troubleshooter	Systematic has relentlessly improved how it does Scrum during the past 5 years using the A3 problem solving tool from Lean. This approach is behind  the learning and experience reported in the past 5 years. This talk will take a walk behind the scenes of years of successful experiences and show the management and mechanics driving this learning. The cumulative learning from major improvements are presented, including a small set of measures that for the past 3 years has proven to be very valuable in monitoring project progress while at the same time fostering a Lean mindset in the teams.	Insights - Experience Reports	Experience report	2011
8883	Test Driving and Unit Testing Thread Safety	It came as a shock to me when I tried to convince myself that the multithreaded code I was writing was not unit testable. It's too complex,  non-deterministic to be driven through tests, I told myself. I was so convinced I set out to show TDD does not apply here. But in the end, I proved myself wrong. In this zero-slides presentation, we will use TDD to drive the design of a multithreaded code. Along the way we'll hit some roadblocks, use those to learn some techniques and practices that'll help break the barriers. If you've confronted test driving for thread-safety this session is for you.	Development Languages Practices & Techniques	Talk	2011
8887	The Emperor's New Clothes - Meaningful Interactions in Stressful Situations	See the Emperor in all his glory! Which role will you play? We all interact with different types of characters in our daily lives which may lead to stressful situations. Together, we will learn how to communicate more effectively with others, especially at times of stress, by transforming our behavior from incongruence to congruence. We will learn to recognise incongruence by role-playing the 5 Coping Stances based on the Satir Model, then learn how to begin transforming our behavior from one of incongruence to congruence by thinking about interactions in terms of Self, Other and Context.	Hands-on Learning	Workshop	2011
8888	The Culture of Agility	Agility as a process is well understood today in feedback generating iterations or as a flow. Agility as a structure is becoming better understood through cross-functional teams working collaboratively. However, Agility as a culture has very little exposure - yet culture impacts every attempt at agility.\\n\\nThis session provides a language for organizational culture, its impact on agility, and examples where exposing culture has aided adoption. We explore cultures within single organizations, sub-cultures across boundaries within larger organizations, and cultures bridging a corporate merger.	Collaboration Culture & Teams	Tutorial	2011
8890	Embedded Testing Techniques	Contrary to widespread opinion, you *can* test on the target hardware. There are some challenges to doing so, though. This talk will focus on how I've been doing it since 2004.\\n\\nIn many cases, no modification to the target hardware is needed; in the remaining cases, the necessary modifications are quite minimal, well within the abilities of a programmer who's not afraid of soldering irons (adding one wire, usually).\\n\\nThe heavy-duty modifications will be to your test framework, and will be exclusively software. Example code from actual projects will be used to present them.	Agile for Embedded Systems Development	Talk	2011
8900	Selling the Investment to Pay Down Technical Debt - The Code Christmas Tree	Sharing our experience in making code complexity and unit coverage visible in the hallway adjoining our team room and the conversations that happened around it.  Not only did it help to focus the team on the high debt areas of the application, but its red (bad) and green (good) coloring combined with its high-foot-traffic location enabled executives in this Fortune 500 insurance company to invest in paying down debt as well.	Insights - Experience Reports	Experience report	2011
8901	Ten Tales of Positive Change	These tales relate successful attempts at making improvements. They are described mostly in the order in which they occurred, from my time working in an Agile culture. The tales are about: \\n\\nCreating the Motivation to Pair Program  \\nStaying Focused at Stand-up  \\nKeeping Progress High and Questions Low  \\nReassigning Points to Validate Estimation  \\nAdmitting to the Real Date  \\nDealing With an Overwhelming Amount of Work  \\nGauging the Rate of Progress  \\nFiguring Out How to Construct Teams  \\nFinding Predictability in the Velocity  \\nAllowing for Cross-Functional Teams  \\n	Insights - Experience Reports	Experience report	2011
8902	Deliberate Discovery Workshop	Ignorance is a constraint on many projects. We rarely know everything about our domain, processes, technology, politics, skills, expectations - the list goes on. As we progress we discover unexpected difficulties and find ourselves struggling to overcome them. Yet the unexpected always happens in different areas, no matter how much analysis we do. How much is enough? How can we target our greatest areas of ignorance to learn faster, and how can we keep our options open to cope with unknown unknowns? In this workshop we explore techiques for discovering, and handling, the unexpected.	Hands-on Learning	Workshop	2011
8912	Agile 2.0 - Rebooting A Raccoon In An Imperfect World	On this 10th anniversary of agile, our community is struggling to address the issue of how to take experienced agile practitioners to the next level, while still providing training and tools to support those who are beginning their journey. With the "agile" word getting so overloaded, the challenge is to continually innovate without assigning labels.\\n\\nIn this talk we will discuss how to use the best of traditional, lean and agile methods to suit any team and showcase numerous patterns that demonstrate the best process to use is often a mixture of traditional practices and new innovations.\\n	Adoption & Transformation	Talk	2011
8917	Reverting to Form   How to Make Sure That Agile  Sticks 	Whether the adoption of Agile takes place in a grass-roots  bottom-up  approach or a mandated  top-down  manner, it takes a change in culture, and a willingness to  give it a chance  that is the biggest determinate in making Agile stick in an organization.  In particular, it is the acceptance of using business value as a pivot point that can make an organization realize that Agile is their friend, so long as they are willing to avoid the pratfalls that can drive an organization back to where it started.	Adoption & Transformation	Talk	2011
8918	The Joy of Work:  Managing Performance, Innovation & Organizational Maturity	Do you find your work exciting and fulfilling?  Is your team rewarded for finding better ways to work? While many organizations have adopted Agile approaches at a project level, few have effectively aligned their HR processes with Agile values, or made finding better ways of working a truly rewarding and exciting proposition for their teams. Join us to explore the subject of creating a truly holistic performance management system that not only adheres to Agile principles, but actively promotes individual drive, team innovation and organizational maturity.	New Horizons & New Voices	Workshop	2011
8920	Sustaining Agility after the Coaches Leave	Transitioning to agile is hard. It involves learning new techniques, thinking in a different way, and stepping out of your comfort zone. No wonder so many agile transitions revert back to previous ways over time. A change in management or a loss of the agile champion is often a catalyst for this process. \\n\\nThis talk describes several mechanisms to help counteract these forces, and how to incorporate them into your organization. Presented through examinations of real-life examples, interactive exercises and open discussions, this talk provides guidance on how to create sustainable agility.\\n	Adoption & Transformation	Talk	2011
8921	'Super-Fresh' Code	The confluence of cloud computing, smart mobile devices, social networks and agile software methods transforms the nature of the business. The cloud enables offering everything as a service. Smart mobile devices consume those services and contribute to them in an  always on  mode. Social networks enable expert-sourcing on a per-task basis. When these three trends are combined in the right way with recent advances in Agile methods, the net result is  Super-Fresh  code. Such code serves as the source of competitive advantage for the modern company.\\n\\n	Business & Project Management	Workshop	2011
8923	Embedded TDD cycle - the first 3 years	James Grenning presented the embedded test-driven development (TDD) cycle already in 2004. Whispers on the hallways of conference hotels tell that somebody is actually implementing this idea. However, there are only few documented implementation details available. Schneider Electric s fire security team has been implementing TDD cycle as an integral part of the development process for 3 years. Come to learn from their real-life experience and mistakes in automated testing at different levels: unit testing, acceptance testing using simulation, and in real target hardware.	Agile for Embedded Systems Development	Talk	2011
8924	Technical Debt: Assessment and Reduction	Do you really govern the software development process in your IT organization or do its uncertainty and unpredictability leave you, your internal customers and your company's customers aghast? Will technical debt play havoc with deployment dates you committed to and keep your development and operations staff from responding quickly and effectively to customer requests? Do you know how much money is required to "pay back" your software's technical debt? Once you take this workshop you will know how to quantify technical debt, rein it in, and mitigate its unpleasant consequences.\\n	Testing & Quality Assurance	Workshop	2011
8925	The Kata In The Hat	Programming is insanely hard. It s discipline. It's learning your katas from inside out. It's overcoming fear that you might write something buggy in a piece of software that will cost its owner millions of dollars. It is also fun, however. And while we do talk about it, we seldom do code for fun, just as a celebration of how much we love our coder s life. This session is an attempt to change this. We re going to code for fun. With the secret hope that some of the attendees will like what they ll see, decide it s the coolest thing to do, and make it happen everywhere on the planet.	Development Languages Practices & Techniques	Demonstration	2011
8933	What's NXT? Agile Software/Hardware Integration	Developers never get to play with the cool toys. Now s your chance! This session explores architectural layering and unit testing strategies for a java application that controls a Lego® Mindstorms® NXT robot. Frequently teams that unit test utilize stub objects as substitutes for parts of the code that are not the focus of the test. Creating an architectural layer for the robot s hardware can be utilized for better unit tests and running the application without the hardware. Come get hands on and learn about these techniques using the robot and your pair partner.	Hands-on Learning	Tutorial	2011
8939	The Agile Leadership Kata: Discovering the Practice of Leadership	In software development, we use the term  practice  loosely compared to many other disciplines. It is as if by repeating the word  practice  we might somehow actually arrive at that professionalism that so many desire. How do you practice your skills as an agile team leader? What would that practice look like? \\n\\n\\nIn this tutorial, we will explore the techniques you can use to practice and hone your skills as a team leader. From individual exercises through collaborative games, we will explore how we can practice and improve our leadership skills.\\n	Leadership	Tutorial	2011
8945	How to Get Started with Agile When You Don't Know Where to Start	When transitioning to Agile, people often focus on how 'agile' you are instead of focusing on the reasons why you chose to 'go agile' in the first place. In this session we'll talk about a 3-step process to help you start or tune your adoption regardless if you're a 5 person or 5,000 person company. We'll talk about understanding the objectives for 'going agile', how to get educated about what that really means and how to create an execution strategy.  Attendees will create a worksheet to help them identify possible paths for transitioning based on their unique organizational parameters.	Adoption & Transformation	Workshop	2011
8950	Exploring Enterprise Agile Transformation Strategies	The goal of any enterprise agile adoption strategy is NOT to adopt agile. Companies adopt agile to achieve better business outcomes. Large organizations have no time for dogma and one-size-fits-all thinking when it comes to introducing agile practices. These companies need pragmatic guidance for safely and incrementally introducing structure, principles, and ultimately practices that will result in greater long term, sustainable business results. This talk will introduce a framework for safely, pragmatically, and incrementally introducing agile to help you achieve your business goals.  	Adoption & Transformation	Talk	2011
8954	Own Up: the Product Stewardship model for UX 	Who is your project's Product Owner? What does that even mean? Are they ultimately favoring the voice of the business, its customers, your end-users, or the technologists? Where is the UX voice in your team?\\n\\nUX designers are uniquely positioned to solicit and evaluate input from business stakeholders, developers, and the people (potentially) buying and using our products. The Product Stewardship model allows a business stakeholder to focus on business value while empowering a Product Steward to balance human goals, business needs, and technical constraints and opportunities.	User Experience & Interaction Design	Talk	2011
8955	Introduction to Agile Planning and Project Management	Agile introduces a number of tools and techniques designed to help the team figure out how much software we can build for the time we have, and the amount of money our customer is willing to spend.  This talk will introduce the fundamental concepts necessary to break down and estimate our product backlog, how to organize delivery of that backlog for early risk reduction and rapid customer feedback, and how to get stable throughput and predictability as you mature your agile practices.  This talk is for those looking to understand how (and why) agile methods lead to better business outcomes.	Agile Boot Camp	Tutorial	2011
8967	Agile Requirements: To User Stories and Beyond!	Can extensive written requirements be dispensed with in favor of lighter weight 'stories'? It sounds easier, but can it really be as good? We'll start this session by staging a showdown between traditional and agile requirements.  Participants will form teams, create requirements documents, do development (no technical skill or computers needed), and evaluate the results. Next, participants will learn by doing, as we build a 3-part model for agile requirements: User Story, Conversation, and Acceptance Criteria. Participants will leave with a solid understanding, and practical skills.	Agile Boot Camp	Tutorial	2011
8968	Process Increments: An Agile Approach to Software Process Improvement	Process Increments, is an iterative approach to manage process improvement projects. This approach builds upon Agile values and principles, and reuses some well known Agile techniques. It partitions the scope into user-story-like increments, and manages the project using agile estimating and planning techniques.\\n\\nThis approach has been applied to five enterprises transitioning from individual-driven/non-structured organization to a team-work/structured organization. The study shows sustained improvement velocity, good project visibility, and on-going learning experiences by project teams.	Insights - Experience Reports	Experience report	2011
8969	Scaling Software Agility: Advanced Practices for Large Enterprise	Dean Leffingwell describes how rapidly advancing agile methods are being successfully applied to enterprise-class software development. He describes emerging practices including: lean requirements practices that scale to the full needs of the enterprise, intentionally-emergent enterprise architectures, a kanban system for re-architecting large-scale systems, achieving strategic alignment and product development flow with the Agile Release Train, and strategies for agile portfolio management and governance.\\n\\nsee. www.scalingsoftwareagility.com for more information.	Enterprise Agile	Tutorial	2011
8970	From Development Agility to Business Agility	Scrum is an effective approach for Agile Development. Opportunity Engineering (OE) is a business approach that allows to leverage uncertain business opportunities. We will present an effective framework that uses existing Development Agility and OE to enable real Business Agility. This framework uses Scrum to discover the right product to build by assessing business value under conditions of high-uncertainty (where real profits are). These concepts being already used by successful Internet companies, this presentation shows a ready-to-use framework applicable to any industry.	Business & Project Management	Tutorial	2011
8972	Design by Community: Involving Everyone in UX Design using Design Studio	The Design Studio method lets the whole team get involved in sketching and critiquing product solutions.  It s emerged as one of the agile-UX best practices for rapid design ideation and building whole-team ownership.  This hands-on workshop is a good fit for all project roles - veteran and novice alike!  Everyone will learn by participating in a design studio - exploring ideas for a real product.  You ll learn the process mechanics along with tips and tricks from experienced practitioners - everything you ll need to try this on your own project.	User Experience & Interaction Design	Tutorial	2011
8973	Chasing the constraint beyond the development team	Successfully adopting agile methods creates a high likelihood that the constraint in your value chain will migrate from software development to another business process. As your agile journey proceeds, more agile won t necessarily deliver continued improvements! Unfortunately, systemic improvement often takes considerable time and effort, and your agile effort may be seriously impaired while you work to improve a constraint that lies beyond your control. This workshop will address methods for identifying, predicting, and responding to organizational constraints beyond the development team.	Business & Project Management	Workshop	2011
8975	The Agile Office: Cisco's Unified Communications Business Unit	Agile transition is a period not an event. Structures are needed that will ensure agile survives long after the initial transition period.  Mike Cohn's keynote at Agile 2010 mentioned the concept of an 'Agile Office'. At the time we were over 2 years into our agile journey and 9 months into a formal organization-wide agile transition program. We knew we needed to create the support structures necessary to make sure that agile survived after the transition period, but weren t yet sure what form that would take. In September 2010 we formally launched the Cisco UCBU Agile Office.	Insights - Experience Reports	Experience report	2011
8976	The Budgeting Black Hole: Predicting the Unpredictable	An organization cannot run well without a budget. But a budget doesn t have to be a frustrating futile exercise in prediction. Incremental budgeting, specific management actions, along with project portfolio management provides everyone the data they need.\\n\\nWe will explore incremental budgeting in the context of a project, where we will periodically deliver value to the organization. We will see which work actually delivers value and can help predict budgets, and which work does not deliver value that helps with budgets. 	Adoption & Transformation	Tutorial	2011
8977	Basic Principle of the TPS and its Practical Ideas for Agile Software Process!	TPS developed in the 1950 s is a business model and collection of tactical methods to pursue high quality, low cost and short lead-time. It emphasizes to eliminate non-value added activities (waste) and to construct continuous flow processes. The TPS tools such as Kanban, Andon are only the tip of the iceberg. TPS is people centric system. It is more critical issues how to0change culture to involve people in Kaizen. Several ideas for better agile software development are presented from my experience of enhanced TPS development at Toyota.	New Horizons & New Voices	Talk	2011
8985	Risk Management Game: Shared Accountability Through Collaborative Risk Analysis	As we scale, it is imperative that everyone remain involved.  We must not fall back on old habits.   Risk management is often viewed as a vestige of plan-driven approaches but our agile flavor has proven valuable for helping teams make hard decisions collaboratively and proactively.\\n\\nWe introduce our risk management game, a powerful, collaborative and fun exercise for better results through collaboration.  We demonstrate that release planning is more than just stuffing stories into iterations.   You will take away hands-on knowledge of a technique useful up and down your agile enterprise.	Enterprise Agile	Tutorial	2011
8989	Scrum as a Thinking Toolkit	Leave aside, for the moment, the How of Scrum, those familiar roles & rituals, and come with me on a journey to discover the Why of Scrum.\\n\\nTogether we ll break apart Scrum practices upon the anvil of principles and values arriving at a destination I call  Scrum Thinking ; a place from where you can apply the science & purpose behind Scrum to organise your work & solve problems in disciplines & circumstances typically considered unsuitable to the application of the Scrum practices as they are applied to Software Development.	Business & Project Management	Workshop	2011
8991	Putting  the Fun Back In Your Retrospectives	Retrospectives are a key mechanism of a continuously improving process.  However it is a challenge to implement them well.  Many are poorly facilitated and just downright dull.  It doesn't have to be this way.  Retrospectives can be a time for celebration, a time for fun and a time for team-building.\\n\\nIn this tutorial attendees will experience some of the techniques Rally coaches use to put the fun back in the retrospective including: Goldilocks and the Three Bears, The Break-Up Letter, Draw Me a Picture, Captions, Futurespectives, 5 Whys and Holding a Movie Conversation.	Collaboration Culture & Teams	Tutorial	2011
8994	Design Thinking - Does Your Company Need It to Survive?	Companies fail every day due to a lack of balance between  right now  need for profit and the need for R&D/innovation to survive and thrive long-term.  Design thinking has risen over the past decade as a loose body of thought addressing how to intentionally   by design   achieve this balance.  You should be acquainted with it because 1) your company may need it to survive; 2)  design thinking and agile address similar problems, and design thinking can be leveraged to improve agile success; and 3) agile is a great approach to practically implement design thinking for business success.	New Horizons & New Voices	Talk	2011
9001	Functional Management - There IS a place for it in Agile	With the adoption of Agile, many groups wonder whether functional managers are required any more. Even with self-organizing teams, functional managers are still an integral part of Agile, and their role has transformed into more of a coach than ever. This talk explores what I have seen as a traditional software manager and my experiences in leading Agile teams as their functional manager. It delves into the nuances that I have found that are required of this new form of manager, and how this needed leadership meshes well with and elevates self-directed teams.\\n\\n\\n 	Leadership	Talk	2011
9008	Fact or Fiction:  ERP Projects Can Be Delivered Using Agile?	Fact. ERP projects have successfully delivered quality products by leveraging lean and agile principles and techniques.  Learn about the common differences and challenges that are unique to an ERP initiative and its use of Agile.  Discover how there are varying models of how organizations have introduced Agile into their enterprise.  Transitioning from traditional waterfall to Agile is not easy....learn how to assess whether your Enterprise is ready for Agile.  Discover how other ERP customers have adopted Agile in their enterprise projects and the key lessons learned from their projects.  	Enterprise Agile	Tutorial	2011
9011	Silo Busting	Organizational silos are the source of the most pernicious dysfunctions you can find within any company. These divisions serve to isolate people in the organization within hyper-specialized roles. Ostensibly, we do this in order to help people succeed.\\n\\n\\nHowever, you can deliver a product successfully without compartmentalizing everyone and everything in an organization within an inch of its life. In this tutorial, we explore the causes of organizational silos, their impacts, and the strategies that you can employ to help mitigate their impact on your teams and within your organization.\\n	Adoption & Transformation	Workshop	2011
9021	Intro to Test Driven Design (TDD) & Pair Programming Dojo	If you ve never been on a team that s fully bought into Test Driven Development (TDD) and Pair Programming, then you re missing out.  These teams tend to learn much faster from each other, be more cohesive, write more modular software with fewer defects, refactor with confidence, and are generally more fun to be on.\\n\\nCome experience what it's like to work on a team that's using XP dev practices.\\n\\nBring a laptop with wifi, and expect to have some fun!\\n	Agile Boot Camp	Tutorial	2011
9025	Flow Games	Flow is a core part of Lean and an important concept for Agile teams and organisations to understand. Flow is what helps us deliver value, from concept to cash, as soon as possible. This session will use a selection of games to emphasise the importance of flow, and generate discussion on how to achieve flow through collaboration within and across teams.	Hands-on Learning	Workshop	2011
9029	Continuous Integration for the world: Agile code + Agile Infrastructure	With all the interest in Continuous Integration and  Delivery, we believe that organizations can greatly benefit from an 'Agile Infrastructure': this would enable frequent changes to happen both at the application level and at the infrastructural level. This session wants to explain and *demo* how the concept of 'Infrastructure as code' can help. We envision the OS and middleware build a second pipeline parallel, integrated in the traditional build process. \\n\\nThe concepts can be visualized as shown in this graphic: http://www.jedi.be/pages/ci-for-the-world/ci-for-the-world.png	New Horizons & New Voices	Demonstration	2011
9033	Agile Hardware and Co-design	Agile software development is getting attention also in embedded software development. Embedded system development on the other hand requires  different engineering disciplines working together. When embedded software team starts using agile methods, it affects also other disciplines. Agile development emphasizes continuous learning through experimenting and collaboration instead of following a detailed up-front plan. Agile embedded software team expects different behavior in system co-design. This talk discusses reasons and ways to adapt agile development to co-design of system development.\\n	Agile for Embedded Systems Development	Talk	2011
9038	Creating an Environment by Making, Keeping, and Amending Agreements	Software processes such as Scrum, XP, and Kanban are a set of practices that a team agrees to follow.  Making, keeping, and changing agreements is crucial to the success of any agile process.\\n\\nA team s agreements and their ability to make, keep, and renegotiate these agreements is fundamental to their success.  However, many times, team members are not all clear on their agreements.  They may not have the same understanding of the explicit agreements and are usually carrying around a set of implicit agreements that they expect their peers to execute.	Collaboration Culture & Teams	Tutorial	2011
9042	Dipping Your Toes Into Kanban	This lightning talk will illustrate how a real world agile team working within two week iterations began using work in progress limits to increase focus, foster collaboration and manage flow.	Agile Show & Tell - Lightning Talks	Talk	2011
9047	Agile Coaching Self-Assessment -- Where do you Stand on the Competencies?	As an agile coach, where do you stand? Where have you "got it down"? What more do you need to develop so that you can be the coach your teams truly need?  In this interactive workshop, thought-leaders in agile coaching Lyssa Adkins and Michael Spayd lead you through a self-assessment using an Agile Coaching Competency Model that covers both the *doing* and the *being* of agile coaching. You'll leave the session with a specific plan of action for improving your agile coaching and (likely) many insights about the nature and importance of agile coaching -- for yourself and for your teams. \\n\\n	Coaching & Mentoring	Workshop	2011
9048	Introduction to Behavior Driven Development	BDD helps development teams hold conversations about the behaviour of their system with non-technical stakeholders. BDD has changed from its early roots as a replacement to TDD and now encompasses Feature Injection, extending across the whole software lifecycle. In this tutorial we look at the original reasons for BDD, returning the focus to the language and conversations at its heart. We look at how BDD s patterns can be applied at multiple scales, from the initial project vision all the way to the code, to deliberately discover and address ignorance in every aspect of software development.	Working with Customers	Tutorial	2011
9051	Managing dependencies to create value	The normal dogma of agile execution is to avoid dependencies as they are perceived to disrupt flow and the ability to act with agility. But, why avoid a dependency that creates business value such as reusing customer information across products? Why add yet another framework which would increase the technical debt when there is one suitable already there?\\n\\nThis workshop will provide and refine a framework and practices to identify and manage the dependencies that truly create value while avoiding those that don't. This will ensure a more constructive way of dealing with dependencies.	Enterprise Agile	Workshop	2011
9052	How CSlim and Fitnesse Can Help You Test Your Embedded System	Imagine pushing a button and knowing within minutes that your entire embedded system works to its specifications. With open source tools, you can build into your embedded system the means to write automated tests that will aid communication between team members, verify your code, and allow the specification of functionality before it is implemented. This tutorial takes you through everything you need to write Fitnesse and CSlim tests in your C or C++ based embedded system. We'll also cover the bigger picture of how and why these tests are valuable. Bring a laptop!\\n	Agile for Embedded Systems Development	Tutorial	2011
9056	A Day in the Life of a Menlonian	Menlo Innovations is a fully agile shop. Our team is located in one open space - no cubes or offices. Our company s mission is to return the joy to inventing software. Everything about the space in which we work and the people we work with fosters collaboration and creativity. This talk will seek to answer the question  If we visited your team, what would we see that would blow us away?  We will simulate a day at Menlo by taking attendees through each hour of the day, showing them through photos and brief explanations what it is that makes Menlo such a unique environment to work in.	Agile Show & Tell - Lightning Talks	Talk	2011
9066	One earthquake, hundreds of volunteers and six days to build a website 	On February 27, 2010 Chile was struck by one of the most devastating earthquake. A team of of hundreds multidisciplinary professionals spontaneously arose to help people of our country. Although the abundance of talent, courage and determination, the team was not able to focus due to the stress, lack of information and chaos. We were called to coach this team and could experiment the power of agility in such an exceptional context. In only 6 days the team implemented a web portal and several other tools, helped by kanban, agile programming, holacracy and retrospectives.	New Horizons & New Voices	Talk	2011
9068	Agile Security:  They're Not Mutually Exclusive!	In the federal government, or in any industry where secure systems development is a concern, security requirements are typically considered at the end of development, right before transition into production.\\n    In this session, we will examine recent changes in security doctrine, and how these changes favor secure development and align well with agile methodologies.\\n    Based on work with the National Security Community over the last 3 years, the presenter will describe how to build security in throughout development, and how to put the emphasis on building a secure system.	Development Languages Practices & Techniques	Talk	2011
9074	Continuous Integration: The minimum viable product	What does it mean to 'do' Continuous Integration? It used to be enough to execute your unit tests in CI.  But the bar is steadily raising for engineering practices. In the last decade we've seen tremendous improvements in acceptance testing. JavaScript is now a platform in it's own right. Cloud computing is now vital. There's growing interest in deployment to prod.\\n\\nSo Continuous Integration is under more pressure than ever.  As the bar slowly raises for engineering practices, we ll present 2011's minimum viable feature set for Continuous Integration.	Development Languages Practices & Techniques	Talk	2011
9077	Democracy unleashed: bringing agility to citizen engagement	Empowered individuals. Creative, participatory decision making. Connectedness and care for each other. These words apply equally to an Agile organization as to a healthy community. What might happen if we applied Agile values and methods to transform communities? I will share my experiences over the past year and up to Agile 2011 to nurture engaged community in my home town - tools and methods, trials and triumphs, how Agile applied to community differs from organization. This is bleeding edge stuff, an area of opportunity for Agile consultants to do work that transforms the world.	Insights - Experience Reports	Experience report	2011
9082	Stories from my Experiences Learning Scrum	Stories of using Scrum as a distributed team to build a piece of software (Veracity) which helps distributed teams use Scrum.\\n\\nVeracity is an open source DVCS, somewhat like Git or Mercurial, except that it can manage record-and-field oriented data in the same "decentralized" manner as directory-and-file oriented data.  Its goal is to allow other kinds of team tools (such as agile planning) to be decentralized, not just version control.  Veracity includes a Scrum project module.\\n\\nNeither we nor Veracity are great at Scrum (yet!), but both are getting better with every iteration.	Insights - Experience Reports	Experience report	2011
9083	"It Depends on Context": You CAN get there from here, if you know where here is	Every Agile project must respond to organizational conditions and climate. Gaining awareness of context helps the core team and project community know how they fit into the larger organization. As a systems thinking approach, Agile Chartering and its focus on context enables better decision making, taking the whole system into account. In this session, we will share our experiences with chartering and demonstrate interactive tools and techniques for executive sponsors; portfolio, product, and project managers; and project teams to define and work with their specific project context. 	Business & Project Management	Demonstration	2011
9088	The Product Partnership: Using Structured Conversations to Deliver Value	A shared understanding of product needs is the basis for continual value delivery -- and requires a partnership of product stakeholders. In this tutorial attendees experience a technique that enables partners to collaboratively analyze needs and make just-in-time decisions on what to deliver next. The technique engages partners in structured conversions using seven question-sets to explore, evaluate, and decide on high-value options for the next cycle delivery. Attendees gain insights on how to use this technique to guide product need conversations at any level of agile product planning.   \\n	Working with Customers	Tutorial	2011
9089	Fear-Driven Impediments	In many cases fear is a reason for impediments of an agile team and can cause many effects: resistance to organizational change, procrastination of decisions, inability to surface the real issues in retrospectives. To successfully remove such impediments, the fears of all involved individuals must be understood. If fear is a reason to fail, it should be dealt with as fast as possible.\\n\\nExamples:  \\nI must not use TDD, my boss forbid it.  \\nI will be fired or removed from the team if I say  no .  \\nWe can t change this specific part of the organization because team X would get unhappy.	Collaboration Culture & Teams	Workshop	2011
9091	Whatever the problem, community is the answer	"What are the issues and organizations in this world too important to fail?" asked Lyssa Adkins at Agile 2010. Imagine if the Agile community banded together to tackle complex problems like a smart energy grid or reforming education. Our collective skills, knowledge and passion uniquely position us to make a difference. Whatever the problem, community is the answer. Come meet like-minded travellers. We'll use the engaging World Café conversation format to re-discover our gifts, the kind of world we seek, think beyond the usual debates, with actionable steps to make shifts on a massive scale.	Open Jam	Workshop	2011
9095	Creating a Team Culture to Navigate Conflict	Anyone who has spent solid time with an Agile team can attest to this one thing: conflict happens.  With Agile, we seek excellence and we see that conflicts arise one after the other. Harmony and disharmony are both normal.  But how can teams turn conflict into something productive and maybe even inspirational?  Models and tools to do just that are the core of this workshop.  Participants will leave the session with new ways of thinking about conflict on their teams as well as tools they can use right away to help their teams (and themselves) navigate conflict.	Collaboration Culture & Teams	Workshop	2011
9104	How Social Media in Agile Projects can drive innovation	According to Gartner Group: Companies that are trying to restrain their workforce Internet usages will be extinct within the next 5-10 years...\\n\\nChildren of today use Twitter, Facebook and much more as a normal part of their daily lives - It is their network and backbone! The social medias are to them, what email and phone was to us and our parents.\\n\\nWe call these children "Digital Natives"!\\n\\nHow do we overcome the need for exposure and social interaction - both regarding recruiting and keeping skilled people, BUT also in high regards how can we use social media in our agile projects?	New Horizons & New Voices	Talk	2011
9108	Business Rules Essentials for Quality Software	How and when do you elicit and specify business rules? Where do you look for business rule clues? How can you measure the value of business rules? What is the right level of business rule granularity for testing? When can you start testing business rules? Answering these questions is key to enable effective estimating, building and testing efforts. In this interactive session, you learn how a collaborative, cross-disciplinary approach to business rules provides just-enough, just-in-time detail to develop, test and deliver quality software.     	Testing & Quality Assurance	Tutorial	2011
9111	Facilitation & Communication in Agile Teams	While traditional projects expect most communication to take the forms of email and manager-led meetings, agile projects expect teams to self-organize, collaborate and participate in decision-making. But what is self-organization? How does it work? This 90-minute tutorial will focus on what it means to self-organize, how it occurs and how to help it along, and the hurdles that must be cleared in the process. See how the proper use of facilitation in agile meetings can be a key driver in the development of high-performing self-organizing teams. 	Agile Boot Camp	Tutorial	2011
9112	Everything I know about Leadership I learned from Russell Crowe	While the boss is the person you HAVE to follow, a leader is the person you WANT to follow.  But are leaders born or do they grown through the trials and tribulations of experience?  Who are the people you choose to follow and what are their leadership traits? \\n\\nIn this fun and interactive tutorial we will examine several familiar characters from popular films and discuss their effectiveness as leaders and how they use their own unique style to influence the people they lead. We will then discuss which styles are most effective when working with self-organizing, self-directing Agile teams.	Leadership	Tutorial	2011
9117	My Agile Suitcase	Imagine you are an agile consultant or coach. You are called by the inhabitants from waterfall island, who haven t heard about agility before and want to benefit from your advice. Which practices, principles and values would you pack in your agile suitcase for providing them guidance? What would you leave at home?\\nIn this session experienced agilists will deliver insights in their agile suitcases. Their short, concise and entertaining Pecha Kuchas may give you hints for your own suitcase. Afterwards you will work on your own agile suitcases. This may help you to travel lighter next time.	Coaching & Mentoring	Workshop	2011
9128	Agile Requirements Exploration with Tester Collaboration	Incorporating the testing mindset improves customer exploration of product needs. At the same time, agile test planning and delivery benefits from involvement in agile requirements analysis.  In this experiential tutorial, participants examine a subset of agile analysis models in tandem with specifying acceptance criteria to verify and validate requirements. Participants experience how incorporating the tester mindset during requirements exploration accelerates test planning and specification, enhances product quality, and uncovers missing, conflicting, erroneous and unnecessary requirements.	Testing & Quality Assurance	Tutorial	2011
9140	Coaching Success: Getting People to Take Responsibility & Demonstrate Ownership	Examine, practice, and apply thinking tools and communication strategies adopted by coaches worldwide for teaching, coaching, and inspiring ownership behavior the essence of personal agility.\\n\\nCome learn to apply and teach the Responsibility Process, to handle objections, and to know just what to do when another believes they're owning it and you believe they aren t.\\n\\nDoing so inspires far greater ownership behavior. You add more value as your charges take ownership. They learn, correct, and improve more easily, directly, and quickly. It's the empirical process at the individual level.	Coaching & Mentoring	Workshop	2011
9143	User Experience Teams Gone Agile	If an open collaborative space, short iterations, story-cards, and functional testing are good for software development, then why are software the developers the only ones who have to do it?  What would happen if user experience designers followed the same practices?  In this energetic hands-on tutorial you will explore practices that some user experience teams have adopted/adapted from agile developers.  The session will also share some success stories that demonstrate how these techniques resulted in greater project success.	New Horizons & New Voices	Tutorial	2011
9167	Negotiating Agile Contracts	Business managers and consultants alike are finding that their standard templates for corporate contracts do not support the Agile process.  Instead, these groups must work together to find a new way to define roles and responsibilities within an Agile framework.  This session will focus on practical considerations from both sides of the negotiation table those paying for the work and those providing it in developing these agreements. Session facilitators will help participants develop an Agile approach to writing contracts from requirements definition through project closure and auditing.	Working with Customers	Tutorial	2011
9170	Agile Transition in Trouble? Using the Kotter Change Model as a Diagnostic Tool	Agile transitions tend to imply organizational change. According to change expert John Kotter 70% of all major change efforts in organizations fail. Is it any wonder that so many agile transitions deliver only lukewarm results?\\n\\nThroughout the session, the speakers will use the lens of the 8 Step Kotter Change Model to share their experiences guiding four organizations through their agile transition.\\n\\nIn this session you will learn the 8 Step Kotter Change Model and see how it can be used to guide your agile transition.	Adoption & Transformation	Talk	2011
9172	Visual Portfolio Management - Putting the "Big" in Big visible tracking	In this interactive workshop we will explore the use of a Portfolio Alignment Wall (PAW) to track progress, visualize dependancies and increase collaboration on large portfolios. Experience the process of populating and managing the PAW through a portfolio simulation. \\n\\nWe combine Scrum-Of-Scrums, visual management, value streams and a simple set of rules to balance simplicity and sufficiency.  Bob and Mike have used this technique to manage delivery across 17 agile and waterfall teams, 11 major feature streams with cross team dependencies. 	Enterprise Agile	Workshop	2011
9173	Solving the 1-10-100 problem: Extending Continuous Delivery to QA and Ops	In many medium and large organizations, friction between Agile application development (Dev), Quality Assurance (QA), and Operation (Ops) teams kills productivity.  We ll discuss how the typical continuous delivery loop fails to take into account the need for bi-directional communication with QA.  The growing role of Ops in the application lifecycle means it needs to be connected to the same continuous delivery loop and be linked directly into Agile planning processes.  How does extending the collaboration loop to Ops potentially flatten the exponential 1-10-100 cost curve into a linear one?	Testing & Quality Assurance	Talk	2011
9176	Twelve Steps to Agility	**You're trying to do Agile & it isn't really taking.** You are running into problems at various levels, from naysayers on teams all the way up to C-level execs. At your company, everything is a  top priority  & frequent interruptions are the norm. \\n\\nExplaining  who does what when  is complicated, & there is no clear answer on how to simplify that story. Most meetings you attend are a waste of time in your view. You know Agile is part of the solution, but the results so far are NOT good.\\n\\n**You ask yourself: What steps can we can take now that are quick, cheap & effective?**	Adoption & Transformation	Workshop	2011
9178	Lean Fundamentals: Understanding Flow Through Games	The Lean concept of flow is the underpinning of Agile methodologies including Scrum and Kanban.\\n\\nThrough a series of games and simulations, you will get to experience the inefficiency of multi-tasking, measure the benefit of smaller batch size and start thinking about how bottlenecks impact your system.\\n\\nBy the end, you will understand flow and how it relates to agile practices such as stories and iterations.\\n\\nCome and learn through play.\\n\\n(We will play the Name Game and the Penny Flow Game)	Agile Boot Camp	Tutorial	2011
9182	Tell Me Why -- "The Golden Circle" of Agile Transformation	Simon Sinek s "Golden Circle" resonates with Agile adoptions. Often, we start with  What  as the core for our plans. Or, we may try to start with  How .  Why  can be conspicuous by its absence. I fell into this  What  trap when I was first guiding teams in Agile transformations. I hadn't first asked "Why" though I did embrace Lean principles for "How". I jumped to What the practices were: 5 steps of what to do, roadblocks to expect, and benefits to reap. In this tutorial, we'll create our own Agile "Golden Circles" of "Why How What" for successful transformations.	Adoption & Transformation	Tutorial	2011
9185	Lean Procrastination - How to Identify the Last Responsible Moment	Procrastination is the psychological behavior to needlessly and counter-productively defer tasks. Lean thinking recommends deferring decisions to the last responsible moment and delivering just-in-time. One is a burden, the other a management theory, yet both are concerned with deferring.\\n\\nMeet the Shu-Ha-Ri model of Lean Procrastination which gets you rid of management if applied to work you fully enjoy and master.\\n\\nPlay with us the new LRM complexity game to explore how complexity effects and changes the last responsible moment and how Lean Procrastination enhances flexibility.	Hands-on Learning	Workshop	2011
9186	Strategies for Agile Portfolio Management	Traditional portfolio management frequently uses principles that are at odds with agile thinking. For example, believing that people should be 100% utilized might lead to us to start many simultaneous projects leading to high levels of team-member multitasking. Managing a portfolio according to these principles all but guarantees a continuous stream of impediments that interfere with team-level agility and sub-optimizes delivered value. In this session I discuss strategies for aligning portfolio management with agile development to ensure a better end-to-end flow of value.	Business & Project Management	Tutorial	2011
9192	Collaboratively Chartering Success	How do you create the big picture for your projects or teams? If the big picture is missing, you are not alone but you are probably struggling. Collaborative chartering is a simple but powerful tool that bonds communities around "why they are building what they are building. Known to many project managers, but unknown to many agile teams, chartering builds the large context around product, community and a delivery cadence just to name a few. If you are looking to augment or replace kick off sessions, drop in and learn concretely how to get started in a valuable direction.	Business & Project Management	Workshop	2011
9197	Agile engineering practices and tools	Extreme Programming put strong emphasis on engineering practices to support agile execution and have in practice influenced how many of those practices have evolved. Scrum assumes such engineering practices are being used, without dictating specifically which practices. In this session, we will dive into the most important agile engineering practices and the kind of tools that supports them. We will also discuss the evolution of such tools, including those from both the open source community and commercial vendors.	Agile Boot Camp	Tutorial	2011
9207	Integrated Product Development	In this session, interaction designer Tim McCoy and agile coach and practitioner David Hussman introduce a new way of working. Integrated Product Development combines design skills with agile delivery. Drawing on their real world experience from a range of companies, David and Tim provide a cohesive and integrated process which iteratively draws out real value and context. You will learn goal driven design thinking that helps before and during iterative development. Stop in if you want to try tools that develop rich user experience during the iterative deliver better and timely products.	Hands-on Learning	Tutorial	2011
9210	Applying the Dreyfus Learning Model to Focus your Coaching Approach.	Acquiring any skill through instruction and experience (e.g. flying a plane, practicing yoga, or developing software using agile) involves progressing through common stages of learning. Understanding those stages, the behaviours people (and teams) exhibit at each stage, and how to effectively coach toward the next stage, is crucial for anyone tasked with assisting a team's agile transition. We will present the Dreyfus Model of Skill Acquisition, its 5 common learning stages as applied to agile transition, and coaching advice for each stage based on their common observable behaviours.	Coaching & Mentoring	Talk	2011
9212	Scrum and Kanban Like Chocolate and Peanut Butter	As you adopt Scrum across your enterprise, you will find that synchronizing the work of interdependent Scrum teams is a challenge. Kanban has a number of principles and practices that can aid this synchronization and thus smooth out your adoption.\\n\\nThis session will introduce Kanban from a Scrum perspective, show how the Lean practice of  One Piece Flow  is the key to both, and get into the nuts and bolts of specific practices and concepts from Kanban that can be adopted by an existing multi-team Scrum program.\\n\\n	Adoption & Transformation	Talk	2011
9213	Release your team's intelligent energy through five powerful conversations	With successful agile teams there is a vibrant team buzz present. Struggling teams often seem dispirited and anemic. As a Scrum Master, coach or manager, you'll learn the five key drivers of engagement: I fit, I'm clear, I'm supported, I'm valued, I'm inspired.\\n\\nYou will work with others, focusing on these drivers, to build the five key conversations that will tap & release the latent intelligent energy of the people on your teams.\\n\\nYou will also be able to apply the techniques in this session to your family or other group situations. Prepare to be energized and challenged! 	Coaching & Mentoring	Workshop	2011
9215	Applying Agile to IC Development... We're Not That Different After All!	Agile software development methods have been adapted to and applied in a number of other areas. ASIC/FPGA development, however, with its big bang development and delivery model is an area where agile is strangely absent. This talk examines how agile methods in the following areas may be used to gradually displace the big bang model:\\n\\n* feature based, incremental development\\n\\n* early/sustained collaboration between design, test, modeling and embedded software experts\\n\\n* regular retrospectives\\n\\nIncluded are ideas for how agile may best be introduced to hardware teams.	Agile for Embedded Systems Development	Talk	2011
9219	Enterprise Agile Visioning and Learning   from the Organization to the Person	Truly Agile organizations require new ways of creating and sharing knowledge.  In this session, Jean shares personal experiences and exercises in visioning & learning models. Each model targets a particular part of knowledge creation. For the organizational level, we look at PDCA coupled with Pascal Dennis's True North & Mother Strategies. For team learning, we work with ORID retrospectives. Finally, Peter Senge's personal visioning helps us dig into our own work within an Agile growth-oriented context. This regular cadence of visioning and learning truly sustains Enterprise Agile.	Enterprise Agile	Workshop	2011
9228	Distributed Scrum: Why some teams make it work well and others don't	How does a geographically-distributed team collaborate across distance, culture, and even language? What can an organization do to encourage successful teamwork? What technologies and practices increase collaboration?\\n\\nThis workshop will explore the patterns that enable companies to successfully deliver software with a distributed team. It will be co-presented by the VP Technology of a company that adopted Agile for teams in three time zones with two languages and cultures, and an Agile coach that assisted with the transition.\\n	Collaboration Culture & Teams	Workshop	2011
9231	Agile Isn't Enough	Agile isn't the destination, it isn't even everything you need to get there, at best it's a set of ideas that will help you find what you need along the way.   At this session, we'll explore other sources for some of the things you'll need.  \\n\\nWe'll look at a sampling of techniques, tools, and ideas from outside of agile that are extremely useful to agile teams :\\n\\n* Current Reality Tree - from Theory of Constraints\\n* Paper Prototyping - from IxD\\n* A/B Testing - from Lean Startup\\n* What's the next action? - from GTD\\n	New Horizons & New Voices	Workshop	2011
9238	To Deliver Faster, Build it in Reverse	Agile enables building a system in any order. To get business value faster, it may be better to deliver in the REVERSE order. Corporate waterfall starts with the foundation and the pipes, but on a large-scale Gap e-commerce program, we're flipping the approach:\\nStarting with the fulfillment of orders,  then the customer facing web site, from there to the content and data feeds and last to the tools and foundation.\\nIn the talk we'll discuss:\\n\\nAttributes of Agile that enable this approach\\n\\nBenefits / Disadvantages / Risks\\n\\nThe architecture requirements to support this reversed delivery\\n	Insights - Experience Reports	Experience report	2011
9241	Distributed 3d Conference Ready Rooms	Got Distance?\\n\\nCome learn about immersive tools for remote teams.  See how companies and government have used 3d platforms to save money and collaborate with distributed teams of 2 to 2,000.  \\n\\nVirtual Ready Rooms will be available throughout the conference for you to visit.     They are a speakers lounge where you can mingle with others.   We'll feature key platforms on rotating days.\\n\\nIn addition, a 60 minute slot will host a panel of Agile Luminaries in these virtual rooms.\\nGet ready at http://www.agiledimensions.com/blog/learn\\n\\nDo it.  Learn it.  Join us for Hands On Learning!  	Hands-on Learning	Demonstration	2011
9265	Routine Conflict Processing as a Cultural Norm	Regardless of the Agile techniques you employ, one thing is for sure: lots and lots of conflict is being generated. Questions about the current best idea, authority distribution,  identifying impediments, and impediment removal are just some of the sources of conflict and heat in Agile adoptions. \\n\\nConflict can kill your best intentions for your teams and organizations. Protocols- "structured interactions"-- are a useful tool for processing mistakes, differences and conflict. Attend this session to learn how to develop enterprise-wide norms for routinely processing conflict.	Collaboration Culture & Teams	Tutorial	2011
9269	Handling Product Management Across the Enterprise	The common model of a product owner works well for small to medium scale Agile adoption. However, for large scale Agile adoption one must expand the role to include a product manager that works with the business stakeholders while the product owner focuses on driving the teams. How proper product portfolio management that eases the handling of business dependencies by properly loading the backlogs of the teams involved is presented. The timeliness of this flow from business stakeholders to product managers to product owners to teams also demonstrates the need to keep backlogs to a minimum.	Enterprise Agile	Tutorial	2011
9271	Innovation Jams: Lessons in Agile Product Development - An Experience Report	Shortening time-to-market requirements have put software developers at product companies in a crunch. Many organizations need to cut their development time in half, yet the team is already working in overdrive. This talk reflects the experience of Accept Corporation in developing products in 3-4 day sprints dubbed  innovation jams . We ll share how we can make a set of new product features in under a week, using online customer submissions to guide development priorities and a process flow that accelerates collaboration so we can focus on coding.	Insights - Experience Reports	Experience report	2011
9314	Narrative Coaching	People problems - some we expect and have answers for, sometimes only ideas. Sometimes we just don t know. The narrative approach helps you collaboratively identify and draw out the solutions people have inside themselves.\\n\\nNarrative is a social or personal problem solving approach that shifts power and truth to the person wanting help. It strengthens areas of success. It is not prescriptive. It does not assume the coach has all the answers and needs only to talk with the client enough to identify the problem and prescribe a solution.	New Horizons & New Voices	Clinic	2011
9316	Planting the Power of Strengths-Based Teams	Why do you love or hate what you do? What difference does it make in productivity for your team? I'll share highlights from my experience with several groups, and Dan will share how the teams at Technicolor use it, as well as a quick how-to on ramping up teams on a strengths-based approach. We'll also cover several common strengths in IT and coaches, and how I've applied the test results to help team members find the niche on the team that plays to their strengths and brings out their best.	Agile Show & Tell - Lightning Talks	Talk	2011
9328	Facilitation Fun: BE the challenge you face!	Facilitation skills are essential for anyone. In fact, everyone facilitates whether they know it or not! Do you work on a team, manage an organization, or otherwise work with others? The opportunity to facilitate will come up.\\n\\nSteven  Doc  List leads you to explore the common patterns & antipatterns that come up in facilitation, for the facilitator and the participants. We ll have fun by taking on roles, and exploring the behaviors that work and that don t work. The session will include some time on specific activities and techniques that can be used for effective facilitation.	Open Jam	Tutorial	2011
9347	Integrating UX Into Agile: How To Ensure Your Sprints Result In Usable Software	Learn about the UXI Matrix, a modified version of the product backlog that integrates UX-related information to help the team consider UX impact when working the backlog. It helps you track user experience work and its impact. This is not a product. It s a simple set of techniques proven in multiple projects, that allow you to improve your ability to deliver great experiences to your customers in an Agile fashion. See the next generation in the evolution of the product backlog and find out how to overcome the weaknesses of traditional product backlogs that don t consider UX related work.	User Experience & Interaction Design	Demonstration	2011
9454	Evolving to Agile: A story of agile adoption at a small SaaS company	There are many sources of information about agile adoption in an enterprise environment.  However, I have not found similar material focusing on the challenges present at smaller companies.  This is the story of agile adoption at a small, organic growth, enterprise SaaS software company.  We will discuss what problems we were experiencing before adopting agile, what problems we experienced during adoption, and what problems we are still experiencing.  During the story we will also touch on what we did to address these problems, both successfully and unsuccessfully.	Insights - Experience Reports	Experience report	2011
9504	Vertical Slicing: Smaller is Better	Do your teams have trouble breaking down stories so that they always have demonstrable functionality at the end of a 2 or 3 week sprint?.  Enter "vertical slicing,"  the exercise of breaking a story down into smaller pieces that when completed individually, still offer demonstrable business value.   There is much mention of the concept of vertical slicing in literature, but there few published details on how to actually do it.  In this session, you will learn how we created a model for successful vertically sliced business value, and helped our teams toward hyper-productivity.	Insights - Experience Reports	Experience report	2011
9544	Moving development and testing out of their Proterozoic silos	For far too long development and testing have lived in silos, serving different masters. In most organizations, testing is the neglected child. 'Anyone can test' - and organizations hire accordingly.\\n\\nThe main message behind this session is how to handle testing organizationally and realize not only the skills needed for a successful testing organization but also how the interaction between development, product, and testing needs to evolve.\\n	Collaboration Culture & Teams	Workshop	2011
9574	The Origins of Agile	What is Agile Development, and how did it come about?  How was software done before agile, and why did we change?  In this talk we will trace the recent history of software processes starting with the grand misinterpretation that led to Waterfall and culminating with the revolution that led to the Agile Manifesto.  We'll talk about what software development was like before Agile, and what makes Agile so different. 	Agile Boot Camp	Talk	2011
9604	Agile in Academics	Our university bastardised Agile tools to give curriculum designers in an academic setting increased productivity and improved motivation. This allowed the designers to provide better quality and cutting edge courses in less time. The online educational team implemented and shared a personal kanban, dropped job descriptions, and saw massive improvements throughout. Scrum was then studied, dissected, and reassembled for our needs. Writers are now asking regularly to write for us, while designers have more free time for adding new dimensions to the curriculum in addition to normal expectations. 	Insights - Experience Reports	Experience report	2011
9615	Agile Thinking for Business Analysis   Going beyond user stories	The agile literature currently largely overlooks many of the existing tools and techniques of analysis, often with a focus on user stories as the primary tool for defining and presenting requirements in agile projects.  \\nThis workshop presents a variety of analysis techniques which can be used to identify and elaborate customer needs, to compliment the use of user stories and ensure that the right customer needs are effectively presented to the team at the right time in a way that ensures the right product gets built.  	Working with Customers	Tutorial	2011
9655	The Transformation Priority Premise	Transformations are like refactorings in that they are simple incremental changes to code.  They are unlike refactorings in that they change the behavior of code.  This talk presents a set of transformations sufficient to create any application.  It also suggests that when they are applied in a certain order developers can avoid many of the common problems with TDD such as painting yourself into a corner, or taking steps that are too large.  It also suggests that the ordering helps developers to find better algorithms.  See: http://cleancoder.posterous.com/the-transformation-priority-premise	Development Languages Practices & Techniques	Workshop	2011
9701	A Complete (and fun) Scrum Simulation	Whether you are new to Scrum or are looking for a quick and fun way to introduce Scrum concepts to others, this session is for you! Participants learn every Scrum role and activity by actually doing them in this fast paced simulation.(   \\nEach team starts by throwing together a very wide (and creative) backlog of features. A Product Owner reins in the backlog by prioritizing. The team commits to a micro-sprint&  and away we go! ( After three 'days' (minutes really) and lots of cutting, gluing, and discussing, the sprint ends with an actual product to demo and experiences to retrospect.	Agile Boot Camp	Tutorial	2011
9764	Yahoo! Sports: Sprint 100 & Beyond	Yahoo! Sports, the Web's leading sports' destination, began one week sprints and weekly releases with Sprint 100 in October 2010.  The experiences and learnings of the Yahoo! Sports team will demonstrate specific actions to take to overcome scrum fatigue and rejuvenate your teams.  Our exploration will focus on three transformative events: the implementation of daily code releases during the 2010 World Cup, the innovative Hacktacular event, and the data quality improvements of the Great Bug Sweep.  	Insights - Experience Reports	Experience report	2011
9906	Agile Game Incubator	Ever wanted to create a game but not sure how or where to start? \\nDo you prefer learning-by-doing? \\nDo you use games as a learning tool but haven't found the right game for a topic? \\n\\nLearn to create your own unique games for communicating complex topics and injecting some fun back into work. Come prepared with your own topics and ideas or join in on others'. \\nDon and Mike will kick things off by sharing their approach, valuable guidelines, and experience. They will facilitate the formation of teams around problem topics, then guide them through the creation of the ultimate Agile game!	Hands-on Learning	Workshop	2011
9925	Agile From the Top Down: Executives Practicing Agile	Organizations will have trouble sustaining a true Agile culture if the Sr. Management team does not live the same way.  IT Executives must practice what they preach. If they want teams to be transparent and agile, they need to practice themselves and lead by example. \\n\\nThis talk will share some Agile & Lean techniques, applied in a new way, to help organizations understand their constraints so they can transparently carry forward their journey to becoming Agile. \\n\\nYou can view the slides for my talk at jonstahl.com. I would upload a PDF of the slides but the file size is too large.\\n	Leadership	Talk	2011
9964	Agile Education by Object Game   most HISSATSU way to understand it.	Some people cannot understand  agile technique such as TDD and refactoring because these practices need "Object-Oriented" manner. This method can change non-OO brain into Object Oriented brain for only 4 hours by very easy way!  Learner can understand Why OO?  OO Application Behavior, OO Applications Architecture.\\n\\nIn Japan, Many people have gotten Object Oriented brain since 2006 by this method. and Join Agile Teams! even CEO can understand OO Application  behavior. AMAZING! In this hands-on, you can understand and experience that methods to make OO Brain!\\nSee: http://slidesha.re/ogo5mJ\\n	Hands-on Learning	Clinic	2011
10005	Making Metaphors that Matter	In this paper and talk we'll present our experiences with using architecture metaphors, how they helped us, and some tips we learned for making great metaphors that improve team communication and architectural discussions. Our experience grew out of the IVET project, a collection of software tools to help shoppers of a regional grocery store chain plan menus, find recipes, create shopping lists, and clip e-coupons.  The team built a set of web services in addition to a web client and iPhone app.	Insights - Experience Reports	Experience report	2011
10030	The Agile Scaling Model (ASM): Be as Agile as You Need to Be	The Agile Scaling Model (ASM) provides the context and advice for effectively tailoring agile strategies.  It describes how to extend the agile construction life cycle into a full-fledged disciplined agile delivery life cycle from project initiation to production.  It then describes how to tailor agile practices to address eight scaling factors: team size, geographical distribution, domain complexity, organizational distribution, regulatory compliance, organizational complexity, technical complexity, and enterprise disciplines (such as enterprise architecture, reuse, and governance).  	Enterprise Agile	Talk	2011
10113	Beyond Planning Poker - The Planning Poker Party	People across the world keep discovering Planning Poker. It's a helpful technique, but Planning Poker is not the only game in town.  By itself, it's not the right game when confronted with a large batch of un-estimated stories.  In this session we'll review Planning Poker and some of the underlying principles, and some other uses of them. Then we'll scale the ideas of planning poker and affinity grouping to handle large batches of stories in The Planning Poker Party. We'll walk through the steps needed to get a large backlog sized, and an initial release plan in place.	Working with Customers	Talk	2011
10150	Test-Driven Development in(bed) C	Test-Driven Development is for Java programmers, not for C!  Yes it is!  Roll up your sleeves and test-drive C with us.  We'll start with a short intro to TDD, and quickly get you doing TDD.  Bring your laptop.  If you don't have one,  we'll team you up with another programmer.  You'll see how to make TDD practical for embedded software development.  See <a href="http://cpputest.org/node/42">CppUTest Compilation Environment(http://cpputest.org/node/42)</a> for needed tools. We'll also have a bootable Linux DVD with all the tools so that you can join the experience.\\n	Agile for Embedded Systems Development	Workshop	2011
10201	How to design stuff that matters fast	Too much time is wasted creating that big design upfront only to find that users don't like what you have built once it has been released. Today we are in danger of not only over designing, but also designing solutions to the wrong problems. \\n\\nSee how I experiment with rapid design techniques to ensure design solutions for the **right business problems** are delivered to the **right target audiences** *rapidly* and *continuously*. Learn how to create design solutions fast as a team and work with a client to get products that really matter out into market early that will delight users.\\n\\n	User Experience & Interaction Design	Workshop	2011
10202	Cracking the Agile Big Rocks	Agile solves many problems with software, but presents a new set of challenges for management - the big rocks.  For example, personnel evaluation, agile in a waterfall business, agile and PMO, poor emergent design and more.\\n\\nThis is a highly interactive session.  Before the session, conference participants can post thier big rocks.  During the session the facilitator will present expert opinions on solving those problems.  Participants will form teams and pick their hot issues,  develop potential solutions by medling experience and expert opinions, and present thier solutions to the group.\\n	Enterprise Agile	Workshop	2011
10580	How Functional Programming Changes Developer Practices	Functional programming (FP) is going mainstream. First seen as a better approach for concurrency, we are finding that FP has pervasive benefits, often supplanting OOP for many purposes. This talk explores how FP aligns with, but also changes developer principles and practices.\\n\\n1. FP emphasizes mathematical rigor and rich types, which change TDD.\\n2. Capturing your domain model in code has serious drawbacks.\\n3. *Pure* functions and immutable data structures are more modular and reusable than objects.\\n4. FP introduces new "design patterns".\\n5. *But*, FP can be hard to master.	Development Languages Practices & Techniques	Talk	2011
10596	Exploratory Testing in an Agile Context	Exploratory Testing (ET) isn't new; the term was coined before "Agile." But ET and Agile fit together hand-in-glove. The disciplined Agile engineering practices like TDD and CI mean the code is constantly checked against expectations. But does it also do things we don't expect? Are there lurking risks and surprises? That's what ET can help us discover. And that's why stories aren't really Done until they're both checked and explored. This session explains ET in the context of Agile and gives participants an opportunity to try it out by exploring a hand held electronic game.	Testing & Quality Assurance	Clinic	2011
10636	Leadership Agility in a VUCA World 	Participants will apply leadership agility tools throughout this presentation that combine the leadership agility research and experience of an **Organizational Psychologist, Dr. Nick Horney** with **AGILE Expert, Jim Highsmith**.  Dr. Horney will share his 20+ years in the application of leadership agility with senior leaders from multiple industry sectors and global locations.  Jim Highsmith will provide the commentary and perspective from the AGILE community, reflecting his recommendations about combining the learning from AGILE methods with insights from strategic leadership agility.  	Leadership	Talk	2011
10686	Embedded Storycrafting: Key to controlling Risk and Schedule	In embedded development, much infrastructure must be built before the first user feature can be delivered. Customer-value stories will often be too big. But breaking them down risks losing the focus on delivering functionality. The answer? Let your evolving user stories be the catalyst that drives hardware-software co-development in the early iterations, and then draws in each related engineering discipline as naturally as an acorn develops into an oak tree. Many examples from real embedded teams will be given, and sessions will be offered in open space to practice the technique hands-on.	Agile for Embedded Systems Development	Talk	2011
10782	Acceptance testing in the land of the startup 	Songkick is a web based music startup which operates in a new market place full of unknowns, developing a free service. Focusing on user experience as one of the most critical features of the product. Continuously iterating and experimenting with features based on user observations and metrics. Unusually we adopted Acceptance tests and BDD while still in the early startup phase. Having spent more than 2 years growing our system and learning the pain points both technically and culturally we have lots of interesting lessons we would like to share about startups and Acceptance testing.	Testing & Quality Assurance	Talk	2011
10877	Kaizen Lego Game	After revolutionizing the automobile industry, Lean principles have been applied to different knowledge areas, such as software development. However, many people are using this ideas without having been introduced to the concepts that made Lean successful.\\n\\nIn this interactive session the participants will work in a small Lego production line, trying to improve their own process using different kaizen techniques. Up to 30 participants divided in small teams will learn about Kaizen, PDCA, standardized work, 5 Whys, Genchi Gembutsu, A3 reporting value stream mapping in a hands-on experience.	Hands-on Learning	Workshop	2011
10905	Agile Clojure	This session is a hand-on immersion into an agile development project using Clojure.  If you're new to Clojure, not a problem.  The nature of the project will educate you in the language as well as a toolkit for agile development.  If you're new to Agile, perfect!  You'll experience all the facets of an agile project possible in a half-day session.  If you're experienced in Agile and/or Clojure, awesome! \\n\\nWe'll work in micro-iterations, with customers, stories, acceptance tests, pair programming, etc...  It's sure to be a fun filled adventure that'll get you waist deep in Clojure action.	Development Languages Practices & Techniques	Tutorial	2011
10908	Tests as a Means of Abstraction	The different nature of functional languages can lead to a different perspective on test-driven design: 1) that the soul of the program is a network of relationships among facts-about-functions, 2) that tests are a usefully more abstract way of describing that network than is the program itself, and 3) that data structures should not be designed because they are better viewed as an epiphenomenon--froth thrown off by the network as it computes.\\n\\nIn this session, we'll show these claims in action and question them. The example will be in Clojure, but knowledge of Clojure is not required.	Development Languages Practices & Techniques	Talk	2011
10914	Experimentation: a Missing Agile Practice	Your initial Agile transition had great results. However, now you find the process has problems of its own. It doesn't fit your company, team, or domain perfectly. There's no advice for what to change. Now what?\\n\\nYou already know a safe, effective, and constructive way to explore an unknown domain: do explicit experiments.\\n\\nI will show how to identify the problem and contributing factors, develop and perform a set of experiments to see what might work better, and then follow through on any process changes that you deem fit. We will take on one or two problems from the audience as examples.	Collaboration Culture & Teams	Talk	2011
10915	Code Sense	Does reading code make us better?  Can we recognize good code when we see it?  Do developers agree on on what good code looks like?\\n\\nIn this session we'll try to answer these questions.  Together we'll take a momentary glance at dozens of code snippets and secretly decide if we like them or not.  Then, tempers will flare and fireworks will fly when we compare notes with each other.  There are endless lessons that you will learn and your foundational beliefs about code will be challenged as we develop our code sense.	Open Jam	Workshop	2011
10918	Simple Methods for Reliable User Involvement	One of the difficult problems faced by an Agile team is that of getting reliable user input. Since Agile projects depend on minimal up-front planning and specification, user feedback is critical. But product owners are rarely users themselves and the actual end-users are often located elsewhere and may be highly diverse. This session introduces participants to Contextual Inquiry (CI), a proven field research method for understanding users and their needs. We introduce CI, show how it fits into Agile development, and give participants practice in gathering data and then writing user stories.\\n	Working with Customers	Tutorial	2011
10932	Agile and Kanban In Coordination	A review of the results of running two teams side by side inside the same development organization one traditional Agile iterative development the other Kanban.  Both teams are fully coordinated with each other in a simple and effective system that optimizes responsiveness without compromising quality.  I will detail my experience taking a 30 person development team from a rudimentary agile implementation to a fully Agile organization running both Agile / Iterative and Lean / Kanban models of development side by side.	Insights - Experience Reports	Experience report	2011
10951	Courageous Curiosity: Agile from the Inside Out	Agile isn't just another methodology. 'Becoming agile' isn't about learning a set of tools. The _process_ is the easy part. Here, we'll tackle the hard part: putting love at the center of how you work.\\n\\nThe values of the Agile Manifesto & Extreme Programming encourage us to practice courageous curiosity, changing how we move in the world. In this workshop, we'll explore technologies--technique--for working compassionately.	Adoption & Transformation	Workshop	2011
10957	Writing Maintainable Automated Acceptance Tests	Test automation is software development. As with other software development efforts, most of the cost of test automation occurs during maintenance after the tests are first written. Automated tests can become brittle, so that a small change in a requirement or in the software renders scores of tests obsolete in the blink of an eye. How can we reduce the high cost of inevitable change? Dale Emery demonstrates key principles for writing adaptable automated tests: remove duplication, focus on the essence of the test, and name every important test idea.	Testing & Quality Assurance	Demonstration	2011
10959	Stages of Practice: the Agile Tech Tree	There are many stages of practice for each practice. These are the details that get lost in most discussions. What does it mean to practice Continuous Integration, TDD, or Pairing? If you use a CI server, are you doing CI?\\n\\nThat depends.\\n\\nThe Civiliation games have a "Tech Tree" that show the hundreds of technologies available. They are broken into branches (sea exploration, flight, etc), with dependencies between the branches. We will build a similar tech tree for agile practices, showing how the agile practices interleave and how they change as you develop each branch further.	Adoption & Transformation	Workshop	2011
11028	Breaking the Rules to Increase Customer Satisfaction	This is a story of on-going improvement in both process and culture.  With queue times upwards of 120 days, customers were becoming more upset and the divide between support and engineering seemed to be growing.  Nearly twice as many defect reports were being created than were able to be fixed with a few dedicated pairs.  In four months we have cut our lead time in half, established greater predicibility, and have continued to gain back the trust of our support organization.	Insights - Experience Reports	Experience report	2011
11031	Enter the Bubblesphere:  You and Your Agile Project Portfolio	Bubble charts, seriously?  Yes!  Even the best agile development teams may have yet to mind meld with a professional product portfolio manager, and vice versa.  This simulation gives product managers some new agile bubbles to use when charting their portfolio performance, and provides developers with new tools for collaborating with business owners.  All attendees will focus on how to maximize long- and short-term ROI for IT portfolios, along with learning to evaluate per-iteration team value delivery.\\n\\nThe simulation was be fine-tuned at Agile Games 2011 in Cambridge, MA.	Business & Project Management	Workshop	2011
11037	Teaching Kids Programming with Agile Techniques 	In this workshop, attendees will experience our Intentional Method of introducing children (ages 10+)\\n to programming using recipes (lessons at  www.TeachingKidsProgramming.org ).  We use Agile techniques such as pair programming, randoris, short iterations, re-factoring & test-driven development in teaching.  Pair instructors model Agile practices while teaching. \\nLearn how to teach technical processes using Agile techniques.  \\n\\nAlthough we ve mostly used our method with children, we have also successfully taught adults using similar methodologies.<img src="http://bit.ly/gSTsDY"/>  \\n  	Coaching & Mentoring	Workshop	2011
11055	Complexity at Cisco Voice Technology	In this article we'll tell our story of changing a waterfall culture into an iterative and incremental delivery system. We will talk about the principles of the agile software development life cycle we created, and the steps we had to take to embed this new process into the organization. We have managed portfolios and product teams, this article will tell you how we did it, and how we won't do it again. We have trained teams, project managers, product managers and saw how training an exec team can fail and cause disastrous results. \\n	Insights - Experience Reports	Experience report	2011
11062	Resistance as a Resource	When people resist change, change agents both new and experienced can become confused, stuck, and frustrated. Dale Emery describes how you can turn resistance into a resource. Whatever else it may be, resistance is information information about the values and beliefs of the people you are asking to change, about the organization, about the changes you propose, and about yourself as an agent of change. In this session, you will learn and create ways to tap into that information to translate resistance into effective action to move forward with change.	Coaching & Mentoring	Talk	2011
11074	What We Have Learned So Far: what we got right & what we got wrong	Many of the established ideas and practices of Agile had their first public exposure through Ron and Chet.  They helped take Agile from an underground movement to the mainstream.\\n\\nIn this talk, Ron and Chet will bring you up-to-date on their current thinking on how to best do software \\nin the Agile style.  They will explain why you should stop doing some of the things they recommended in \\nthe past and what to replace them with.  They will take one more run at getting you to do some of the \\nbasics of success that many teams neglect.\\n	Coaching & Mentoring	Talk	2011
11103	When the VP is a Scrum Master, You Hit the Ground Running	In early 2010, the new VP of Unisys Cloud Engineering was chartered with implementing agile methods in a department of engineers with decades of waterfall successes.  He was also an experienced Scrum Master.  One year later, we had completed over 200 sprints for 20 products across four geographies.  I ll tell the story of how we implemented Scrum, what we learned, and what we would have done differently.  	Insights - Experience Reports	Experience report	2011
11104	Applying the lean startup model to the Enterprise	Much is wrong with the way enterprises model the delivery of software projects, starting with the fact they use the project model. What if enterprises treated the software delivery lifecycle based on the concept of products instead of projects? A useful model exists for this paradigm - Eric Ries' lean startup movement.\\n\\nJez will discuss applying lean startups to the enterprise, using examples such as Amazon. He'll also demonstrate how oft-sited blockers to such a model (and to the DevOps vision) such as SOX, ITIL and COBIT, can in fact be made compatible with this model.	New Horizons & New Voices	Talk	2011
11105	Continuous Delivery	This talk will focus on the engineering practices required to achieve the goal of agile development: satisfying the customer through early and continuous delivery of valuable software. I'll cover the importance of good configuration management, automated testing at all levels, and continuous integration.\\n\\nThere will be a particular focus on why feature branching is considered harmful, and alternative techniques which allow for continuous deployment while developing functioanlity incrementally such as branch by abstraction, feature bits, and dark launching.	Open Jam	Talk	2011
11108	The empirical process - at the very core of Agile	Agile is all about empirical processes, controlled by feedback loops. But what does it mean?\\n\\nMost agile practices and principles are rooted in control theory. Knowing these concepts will improve the skills of any coach or mentor. In this  popular science -session, software development will be described as a (simplified) mathematical process. It will teach how feedback, sensors, noise and delays affect outcome, error, robustness and other properties of our process.\\n\\nBoth people with 10+ years of agile experience and absolute beginners are likely to get something out of this session.\\n	Coaching & Mentoring	Tutorial	2011
11110	Scrum in Sales	In the fall of 2010 the iSense sales and account management teams adopted Scrum for their sales processes. In this presentation, one of the sales managers will share his experiences by presenting the processes, lessons learned and main achievements, of using Scrum in sales. The most stringent effect of using Scrum in sales was the insight that the direct cause and effect for closing a sales deal, can be detected and as such controlled. 	Insights - Experience Reports	Experience report	2011
11121	CREATING  CUSTOMER  DELIGHT	The failure of traditional management has led to the reinvention of management: the whole organization must be focused on creating a stream of additional value to customers through continuous innovation. The reinvention reflects an application of Agile thinking to the whole organization.\\n\\nWith the growing power of customers, it is no longer enough to *satisfy* customers with early and continuous delivery of valuable software. Now customers must be *delighted*. In effect, the bar has been raised. The workshop will show how this more strenuous objective can be attained: http://bit.ly/ihcVL2 	Working with Customers	Workshop	2011
11122	MAKING THE ENTIRE ORGANIZATION AGILE 	The failure of traditional management has led to the reinvention of management: the whole organization must be focused on creating a stream of additional value to customers through continuous innovation. The reinvention reflects an application of Agile thinking to the whole organization. \\n\\nThe session shows how applying Agile thinking to the whole firm involves five fundamental shifts in terms of the firm's goal, the role of managers, the way work is coordinated, the shift from value to values and the shift in communications shift from command to conversation: http://bit.ly/bryJHX	Leadership	Workshop	2011
11136	Experiments: how does team structure affect behavior?	When several teams work within the same codebase they share a lot responsibilities. For example, all teams are equally responsible for keeping the build green. However, teams are also committed to sprint goals that are independent from each other. So what happens when the build breaks and the sprint is nearing its end? Let's experiment how structure affects behavior and try to find structures that enhance responsibility. 	Collaboration Culture & Teams	Workshop	2011
11137	Three Months from Idea to Implementation: Jumpstarting Agile in Nuclear Power	We had 3 months to plan the production for 80 control systems intended for a Westinghouse nuclear power plant simulator.  We were on the critical path and our delivery dates were quickly approaching.  A chance introduction to agile principles offered a beam of light.  Within 3 months we held our first Sprint planning meeting, and, in 3 months, we delivered our first software release on-time. It was a significant team achievement that combined Scrum with complex embedded systems development.  Join us to learn what we did and what we learned from our mistakes.  \\n	Adoption & Transformation	Talk	2011
11140	The Fundamental Agile Apologetic	A talk based on the "big four" series by Jeff Langr and Tim Ottinger (from Pragmatic Bookshelf: http://agileinaflash.blogspot.com/2011/02/big-four.html ), this session tells us why the fundamental concepts of software design virtually require us to adopt agile practices.  The fourth in the series shows how software volatility further motivates automated testing, pair programming, continuous testing, continuous integration and constant attention to code quality.	Open Jam	Talk	2011
11141	How a Traditional Project Leader Transitions to Scrum	Transitioning from a traditional project manager to Scrum is challenging. The PMI Project Manager manages the project by ensuring that intermediate deliverables are delivered at various stages of the project. Agile development emphasizes the need for producing tangible results as soon as possible and as often as possible. The resulting role of an Agile project manager is fundamentally different from a PMI Project Manager. We will map the PMI responsibilities to Scrum and show a project manager how to more easily make the transition to an agile practice.	Adoption & Transformation	Talk	2011
11142	To Make a Long Story Short: Splitting User Stories	Large stories mix different levels of functionality, risk, and value. Large stories are disproportionately hard for teams to understand, estimate, and implement. There _is_ a way out: split stories to a manageable size, while keeping them valuable to customers. \\n\\nWe'll examine splitting and merging stories using a variety of concrete techniques. We'll see why splitting on technical lines sounds easy, but gives poor results. Finally, we'll practice applying splitting techniques. You will leave with a toolkit of 20 or more ways to split stories, directly applicable to your project.	Hands-on Learning	Tutorial	2011
11144	Applying Agile to the Operations of a Training Organization	ThoughtWorks Studios Workshops group has decided to  eat its own dog food  by running its training group using Agile practices.   This session will discuss the challenges of a training organization and how we successfully applied Agile practices to our operations.  Our training organization has two distinct tracks of work:  1) creating and managing our content and 2) managing training engagements.  Each track has its challenges, but we have found a way to apply Agile practices to both tracks of work.\\n	Business & Project Management	Talk	2011
11146	Seeing and Steering Systems:  Three Pragmatic Tools	When managers get out of the day to day work and focus on leading and improving the organization, they need a different set of tools.  These tools aren t new; but, they haven t been widely taught in management training programs. These tools help leaders at all levels move beyond "telling & selling," and provide a way to influence patterns of behavior, understand causes and effects, and generate options for action..\\n\\nIn this session, I ll cover three pragmatic tools:  Eoyang CDE, Expand the Problem Horizon, and Finding Factors.\\n	Leadership	Tutorial	2011
11147	Team Traps	Some teams soar; others wallow, bicker and slog their way to uncertain results.  Teams that soar have a few things in common: they have a shared goal, interdependent work, complimentary skills, mutual accountability.  Slogging teams have a few things in common, too.  They fall into predictable traps.  What are those traps and how can you help your team climb out of them?  That s what Esther is here to talk about.\\n	Collaboration Culture & Teams	Talk	2011
11152	The Vision Thing: How Do _You_ Charter?	User stories describe features - _how_ a system will work - and may even describe value or purpose ("in order to..."). But stories are not the starting point: there's a deeper reason and deeper context for projects, often framed as some sort of _charter_. Charters (by whatever name) define projects' vision and mission, measures of success, boundaries.\\n\\nHow do you handle the chartering aspects of _your_ projects? Come to this peer-to-peer workshop, prepared to share what you do, and prepared to learn from others.  We'll work in small groups, then share results with the larger group. 	Open Jam	Workshop	2011
11165	A Transformation Path to Enterprise Agility: Change Levers, Leaders & Culture	Organizational transformation is a journey, not a destination. It requires discipline, patience & courage, leaders at every level, insight on culture, a stomach for change. It requires real teams & the will to endure for years.\\n\\nIn a fishbowl style consultation, one organization (will you volunteer?) will provide a realistic context to explore models of leadership, team dynamics, culture & change: the framework for deep, ongoing enterprise transformation. Meanwhile, participants organized into table teams will craft their own transformation plan, using a template & feedback from colleagues.	Adoption & Transformation	Tutorial	2011
11166	Agile and Kanban Work Together to Deliver Maintenance Releases	Agile and Kanban together to create maintenance releases separates the unpredictable job of fixing defects from the predictable work to validate them. Defect resolution times are hard to forecast because the environment may be hard to recreate and a safe fix may take analysis. Very short Agile sprints manage the constant prioritization of defects and team coordination. Defect validation time is more predictable and Kanban provides a reliable way to verify small batches of fixes for a maintenance release. Come learn how to use these processes together to improve your maintenance deliveries.	Agile Show & Tell - Lightning Talks	Demonstration	2011
11176	Leading Continuous Improvement in Established Agile Organizations	Many organizations believe they have successfully completed the transition to agile thinking. They follow a standardized "agile" process by rote, and they boast of horrifying process smells, like "We never miss a commitment!" Lost in the flurry of self-congratulation: The notion of continuous improvement. Lean thinking brings new models and analytical tools to the table. In this session we examine conventional agile practices through a lean lens to discover opportunties for improvement (mura, muda, muri) that are hiding within the canonical ceremonies of first-generation agile practice. 	Leadership	Talk	2011
11210	Overcoming Self-organization Blocks	We know that self-organization is a critical aspect of every successful Agile project and we know that it takes trust, respect, openness and responsibility; so why many teams have a hard time to achieve it? Self-organization changes the manager/team dynamics and the teammate/teammate ones. Resistance may arise and the source is frequently rooted in mental habits, such as  a latent blaming culture, confusing guidance and command, fear of taking responsibility or losing status, unconscious agendas. Attend this session to learn, through demos and exercises, how to deal with these kind of issues.	Collaboration Culture & Teams	Talk	2011
11212	Geek Leadership in Deep Legacy	The overwhelming majority of development is legacy work, and much of that is deep: 4 years or more. Geek leaders in legacy need reliable techniques for helping teammates develop skills and attitudes to tame the legacy Cthulhu.\\n\\nHere are five proven techniques geek leaders can use to slay the beast: __Tight-Focus Refactoring__, __Lottery Learning__, __Noob Spinning__, __Pressure Bottlenecking__, and __Blind Baby Stepping__.\\n\\nAs a technical leader in a legacy setting, you get to charm your team toward agile practice. Here are some tricks to bring with you.\\n	Leadership	Tutorial	2011
11215	Enterprise Scrum at Belgacom	Belgacom (Euronext: BELG), the largest telecommunications company in Belgium, is transitioning to Agile with sponsorship from senior management. In this session we will give a recount of the fronts that have been successfully tackled so far: Running pilot projects, building an Enterprise Scrum transition team, combining waterfall with Agile, distributed Agile, financial governance, fix-priced projects and RFPs (agile contracts), PMO, project governance, training, technical practices, busting silo thinking within operations, and Agile with large packages such as Siebel, PeopleSoft and SAP.	Enterprise Agile	Talk	2011
11219	Agile Adoption in a non-Western cultural context: Is it any different?	The Agile Manifesto s values and principles need to be applied differently in different cultural contexts. Raya Software made the decision to transform its practices to those of agile software development in early 2008. As an Egyptian company, it was faced with challenges specific to Egypt s cultural context.\\n\\nThis session aims to share adoption insights with non-US companies that want to embark on the journey towards becoming an agile organization, describing a mental model to plan for such a transformation. It also has relevance for US-based companies working with offshore partners.\\n	Adoption & Transformation	Talk	2011
11254	Zero to Agile in 3 to 5 years - It's a Marathon, not a Sprint	Transforming mid-to-large-sized organizations requires much more than an introduction of agile principles and practices to teams.  Any agile introduction is the start of a cultural, structural, political, and personal transformation, and to be successful requires understanding, commitment  to focus on all of these dimensions...and...time.\\n\\nStories abound about large companies starting agile transformations and resulting in reversion to the old ways, or some other state of "hybrid" agility.  This talk is about an effort to change a large company holistically.	Adoption & Transformation	Talk	2011
11266	Architecture and Design Evolution	How do we evolve the architecture and design of a product iteratively and incrementally in Agile? Without a complete and robust architecture and design upfront, would the product not run significant risks? These are some of the questions that challenge a team that is new to Agile. In this talk, we shall learn the practices and principles of agile architecture and design.\\n\\nWith examples taken from real projects, the talk will illustrate how incremental architecture and design decisions are built into a product across iterations, through stories where they are required.	Agile Boot Camp	Talk	2011
11270	Anatomy and Physiology of an Agile Transition	Starting as a coach of a team with almost no agile experience and an release pending was quite daunting. Change was slow and at first it seemed like we might not succeed in converting the team and delivering the product. It took patience, support at many different levels of the organization, and hard work from many different people to put this team on the path to becoming a functional and productive agile team. Now the team is growing as a successful and productive agile team. I am proud to have been a part of going from mostly offshore waterfall development to a local agile development team.	Insights - Experience Reports	Experience report	2011
11272	Undoing Performance Review Damage - Coaching towards Customer Purpose	The Performance Review survives almost intact in most organizations despite the ever increasing rate of adoption of agile and lean techniques. Unfortunately attempts at motivating and engaging employees from such a mindset is more likely to cause damage. Help your coaching clients to understand the pain of the Mass Production mindset with an experiential simulation. And then see within the simulation how coaching can help adjust the process to use intrinsic motivation through more deep understanding of customer purpose.	Coaching & Mentoring	Workshop	2011
11304	Building Great Teams	In coaching, I generally find teams assembled with some thought to colocation and skills. At best they ve been through agile training, picked a team name, and created team norms. Then it s time to get to work.\\n\\nThese steps can produce high performing teams. More often they produce average performance. \\n\\nRather than hope for greatness, helping teams form can ensure team members become equipped to deal with identity, trust, and task issues thereby generating agreement and commitment between the team members.\\n	Collaboration Culture & Teams	Tutorial	2011
11305	Making Hard Choices about Technical Debt	The technical debt metaphor acknowledges that teams sometimes accept compromises to meet an urgent demand. Although unmanaged debt can have disastrous results, strategically managed debt can help businesses take advantage of time-sensitive opportunities. During this session,we will play the Hard Choices game. In your quest to release a quality product, you must decide in the face of uncertainty whether to take shortcuts and incur penalties, or to traverse more of the board to potentially earn more value. At the end, we ll compare strategies and share practices to help make these choices.	Hands-on Learning	Workshop	2011
11309	What Makes Agile Great and How Can We Get More Of It?	As a successful practitioner of Agile, you are interested in the events that created our fantastic community. You have success stories to share. You are interested in future improvements. Come share your unique successes and help shape the future of agile.\\n\\nImagine it is the year 2022. What happened in 2011 that created the second, golden decade of agile? What monumental successes have we had since 2011?\\n\\nIn this workshop, inspired by the events at Snowbird in 2001 and 2011, you will create a manifesto or a call to action that will inspire our future community. \\n\\n	Hands-on Learning	Workshop	2011
11321	Growing Embedded Applications Organically with Ceedling and Friends	Our group of scientists have formulated a suite of open-source tools that make growing robust C applications an enjoyable endeavor. These tools facilitate organic growth of robust and maintainable applications. Unity, Ceedling, CMock and CException are open-source projects whose aim is to make setting up and growing embedded C applications a trivial effort so that developers can focus on features and content. A full overview of these tools will be given, followed by a demonstration of how these tools are used collaboratively to facilitate an efficient TDD workflow in C.	Agile for Embedded Systems Development	Demonstration	2011
11326	There is No Spoon: When Agile Becomes One with the World of Work	When we look at the Agile Manifesto we talk about people, interactions, collaboration and responding to change.  However, we fail by only relating it to software and customers.  It is time we started to embrace entire organizations being agile.  Even then it requires entire communities, systems and society to collaborate towards a common purpose.  When we move in that direction there is no agile only evolution.	New Horizons & New Voices	Talk	2011
11327	Getting beyond 'good enough' - a user goal based framework for Agile Delivery	Agile delivery typically focuses on the prioritisation and development of atomic user stories. Often the focus is on developer throughput and misses the overall value proposition of the software from the perspective of the end user. This session will introduce a user goal based framework for setting up and managing Agile projects for success. It will introduce an approach to Goal Driven Development that will allow stakeholders/Product Owners to take a user centered approach to delivery from requirements capture, through planning and into development to deliver software that delights the user.	User Experience & Interaction Design	Talk	2011
11343	The PO Role - Can you hear me now?	Transition from the PM & BA role to the PO role can be challenging but rewarding. In our organization, the PO role has tremulously evolved and we have made it a role that does not have very specific boundaries. The PO role has empowered and enabled traditional PM & BA to take ownership and be decision makers.  When they speak teams and sponsors listen.  However, with great power, comes great  responsibility.  In this session, I will highlight how the PO role has evolved in our organization and some lessons learned of the role .\\n	Agile Show & Tell - Lightning Talks	Talk	2011
11344	Managers vs. Agile Teams: Who Makes the Decisions?	Agile teams face daily decisions in a dynamic environment. Participants in this workshop will learn key strategic & tactical decisions agile teams make, including how they draw on experience to drive decisions. This is an interactive session that reviews how decision quality is assessed, how decision quality metrics are implemented and how metrics can be improved on their teams. Participants will rate their own levels of decision quality around particular agile activities. Participants should have some experience working on agile teams,e.g. as scrum master, product owner, tester, developer.	Collaboration Culture & Teams	Workshop	2011
11350	Get to CMMI ML3 Using Agile Development Processes For Large Projects	This session will discuss how VSTI, a SAS Company, obtained their CMMI Maturity Level 3 rating while doing agile development processes for large projects (over 30 developers). This will cover automation of documentation and best practices for obtaining a rating of CMMI ML 3 with a large development project, while adopting Agile and Scrum processes. Agenda:\\n\\n1) The major points where Agile and CMMI seem to conflict \\n2) How to get past this conflict and still be productive by: \\n   a) Using proper tools to help save time \\n   b) Automating documentation \\n   c) Daily scrums are critical!	Agile Show & Tell - Lightning Talks	Talk	2011
11352	Increasing Learning in an Agile Environment: Lessons Learned in an Agile Team	Learning and agile are highly related. In the last 3 years, the knowledge of the team increased in all aspects: technically and socially. Everyone in the team, from interns to more experienced programmers, ended up as high-skilled programmers, using (and understanding) all recommended best practices. In this report we will present some techniques we used to enhance learning in our work environment, such as Book Club, Brown Bags, Dojo sessions, Pair Programming, Open Spaces, etc.	Insights - Experience Reports	Experience report	2011
11369	Next Generation Model-Driven Development for Agile Projects	An overview of model-driven development and the new concept of "continuous model transformation" within the context of agile projects accompanied by real-world examples based on an open source MDD toolkit.  A discussion of how using MDD and Agile together results in higher quality results though continual shortening of the development-feedback loop and template-based evolutionary architecture methods. How to use MDD to generate automated tests to jump-start test development. This talk will present a case study of two successful projects that demonstrate the MDD-Agile value proposition.	Development Languages Practices & Techniques	Talk	2011
11370	Cultural Architecture	If our business culture was a product, how would we re-architect it? Culture influences everything. So how can we influence culture? What tools help us understand cultural influences, from the implicit, the elements we don't even think about, to the visible, the artifacts that lead to stereotypes? Adopting an Agile culture, when it is under-laid with the cultures of the world is challenging. Reconciling cultural dilemmas drives collaboration and innovation. Culture is the core of it all. Knowing this, you can create a pull for cultural change in your organization.\\n\\n	Collaboration Culture & Teams	Talk	2011
11376	Why Can t We All Just Get Along? Improving Designer/Developer Collaboration	The relationship between designers and developers is often portrayed as adversarial but it doesn t have to be that way! User experience (UX) professionals and engineers have a golden opportunity to work closely throughout the entire Agile development cycle to build better products. In this session Agile team members will identify breakdowns in their own teams  collaboration and learn practical solutions that help designers and developers work more efficiently and more happily. Through interactive exercises attendees will share their own experiences and learn from other practitioners.  	User Experience & Interaction Design	Talk	2011
11379	The Only Agile Tools You'll Ever Need	Do you need a high-end agile project management tool to support your growing agile adoption? Or do you need a high-end tool because your adoption has strayed from agile values?\\n\\nLow-tech tools such as information radiators and index cards can provide great results, but how do you use them most effectively? What's the sweet spot for high-end tools, and how do you prevent them from sapping productivity? What tools are missing from the spectrum of software-based tools? \\n\\nDisclaimer: This is *not* a vendor pitch, and the speaker owns no stock in companies that produce index cards. :-)	Adoption & Transformation	Tutorial	2011
11382	Agile Office Spaces - Enabling Collaboration and Agility	Your Agile team has the right processes, engineering practices, tools, people, and technology, but what about your office space? Sure, you have a prominently displayed Scrum board, but does your physical environment enhance your collective Agility? \\n\\nDrawing from experiences at Agile shops and government offices, and in collaboration with his wife (Conni Gutierrez Cheng, a professional interior designer specializing in collaborative office spaces), Richard Cheng will lead a workshop session to bring together experiences of the attendees to create a shared learned experience.\\n\\n\\n	Collaboration Culture & Teams	Talk	2011
11391	Will Pair Programming Ruin Your Team?	A lightning talk based on the article at :\\nhttp://agileotter.blogspot.com/2011/01/pairing-competence-and-recognition.html\\n\\n	Agile Show & Tell - Lightning Talks	Talk	2011
11393	Acceptance Test Design Principles	Are you designing your agile acceptance tests (ATs) well? I've derived (with the help of Tim Ottinger) and used a list of seven principles to vet the quality of ATs. I've found these principles very useful in helping agile teams improve their tests. Good ATs are:\\n\\n* Abstract\\n* Bona fide\\n* Cohesive\\n* Decoupled\\n* Expressive\\n* Free of duplication\\n* Green\\n\\nYou'll see ATs (based on real agile team examples) that show violation of the principles and subsequently improved tests that adhere to the principles. One minute per principle, and one minute to wrap up!	Agile Show & Tell - Lightning Talks	Tutorial	2011
11431	Beyond Metrics	NOTE: There is a size limit for 2MB for presentations, so tweet either @adhondt or @ravindar to get the full slide deck.\\n\\nMetrics should only be used to measure progress until a specific goal is reached, after which we no longer track it. Instead, we learn to focus on more holistic goals and intangible indicators that keep a team humming along smoothly. Team energy, communication patterns, slack and reflection are much more important to increasing productivity than any myopic set of metrics.	Adoption & Transformation	Tutorial	2011
11432	Definition of Ready	Definition of Ready is a set of agreements that lets everyone know when something is ready to begin, e.g., when a user story is ready to be taken into a sprint, or when all necessary conditions are right for a team to start a sprint. Definition of Ready does not attempt to turn a user story into a specification, but instead creates an interesting social agreement between the various stakeholders involved in delivering a product or system. 	Agile Show & Tell - Lightning Talks	Talk	2011
11436	The Story of the Wall	Do agile teams really still use index cards, PostIt notes and walls for planning and managing projects? Yes, absolutely. Even in this age of sophisticated tool support it is hard to beat the raw power and efficiency of working with physical media and using walls to display information. Using photos, videos and music, this talk describes the experiences of several teams from the perspective of the walls in the room. From architecture, requirements, planning, and sizing, to tracking project progress, see how teams use paper, markers and walls to foster collaboration, innovation and teamwork. 	Agile Show & Tell - Lightning Talks	Talk	2011
11440	From 'Team' to 'Wow team': an agile team's journey	Our department had been practicing Agile for three years. In the first two years, we learnt how to be really good. Then we began to plateau...complacency crept in, we drifted away from the spirit of agile and began to skip the basics. In this talk we describe we overcame this. How we went from being a team on the slide to a "wow team" by seeing every problem as an opportunity, converting small thoughts into great ideas and finding innovative solutions for problems.\\n\\nDo you want to know the simple yet powerful basics that can make a huge impact and make your team a Wow Agile Team?	Insights - Experience Reports	Experience report	2011
11447	Refactoring in the 4th Dimension	Time is the 4th dimension. We don't pay enough attention to it. We \\nmake assumptions about how changes occur in our code based upon static analysis \\nand tools like the Open/Closed Principle, but we can make our decisions \\nbased on actual data: we have version control histories of our code.\\n\\nIn this workshop, we will mine several projects and look for \\nearly indicators of souring code and evidence of effective refactoring.  We will \\nexplore the notion that we can learn from the history of our own code.\\n\\nParticipants should bring a laptop with git and Ruby 1.8.7 or higher installed	Development Languages Practices & Techniques	Workshop	2011
11449	10 Minutes to a Better Standup	OK, you know the standup is supposed to last 15 minutes, but yours' last 45 minutes or more.  You wonder, how can we say anything useful in 15 minutes? \\n\\nIn this 10 minute lighting session, which by the way is shorter than your standup, we will use a sample Team Board (I did say Team Board, not Task Board) to demonstrate how to hold an effective standup that will allow your team to quickly coordinate, and thus self manage their efforts.\\n\\nWe will also learn more about the Almost Daily Sit Down, and learn how sit downs, can be the cure for your sick standups!\\n	Agile Show & Tell - Lightning Talks	Demonstration	2011
11452	Scaling and Failing - The Human Limits of Effective Software Development	In this lightning talk, Michael Feathers will make the argument that most Agile adoption problems are fundamentally scaling problems. He will then relate two case studies which point toward the sort of advantage we might gain if we thoroughly embrace the limits of scale rather than trying to finesse them away.	Agile Show & Tell - Lightning Talks	Talk	2011
11455	Enterprise Coaching - Practical Lessons Learned	Coaching in the enterprise requires creative initiatives and appreciation of the long view of organizational change. This discussion reveals the story of one company's ongoing agile adoption from a coaching perspective and invites participation from attendees to add to the conversation, ask questions and challenge ideas. I intend to provide several practical concepts for other coaches and attendees from large organizations to take back with them to try in their own context.	Coaching & Mentoring	Talk	2011
11473	Building an Agile Culture in a Regulated Environment	Omnyx, a GE Healthcare venture, has implemented scrum ground up, intentionally shaping the organization, cadence, and office space and focusing strongly on culture, core values, and team building activities. Writing a new Quality System allowed bridging the traditional divide between agile and regulated environments. Using a continuous Alpha/Beta process, we effectively incorporated stakeholder feedback while still working on our initial product launch for 2+ years. We firmly believe that culture is the most underestimated aspect of agile and it needs to be #1 priority for any agile leader.	Collaboration Culture & Teams	Talk	2011
11479	Slackers and Debtors: Meet Commitments, Reduce Debt, and Improve Performance	Does your team have trouble finishing its stories every iteration? Is your "done done" actually a "maybe maybe?" Are you constantly removing stories from your plan? If so, this session will help. We take a close look at the relationship between technical debt, velocity, and iteration slack. We teach you how to use slack to achieve a stable iteration velocity, increase team performance, and get your stories "done done" every time.	Hands-on Learning	Tutorial	2011
11482	Raconteur: luring programmers into testing and testers into coding	Raconteur is an acceptance test framework inspired by Fitnesse and Cucumber. Its goal is to help shorten the developer-tester gap. It lures programmers into writing ATs in the comfort of their IDE and favorite xUnit. The testers get to share the same tool, enjoying intellisense and refactorings, while keeping the test syntax that they are used to.\\n\\nThis session will demonstrate the main capabilities of the tool from the perspective of what is innovative in the approach. Fundamentally, we will provide a glimpse at how IDE integration blurs the boundaries between testing and coding.\\n\\n\\n	Testing & Quality Assurance	Talk	2011
11493	Faster Usability Testing in an Agile World	The sheer speed of an Agile project can be frightening to even the most experienced UX practitioner. In this session you will learn how usability testing can be conducted very quickly, without sacrificing quality. We will cover strategies and techniques that can be used for speeding up traditional usability testing, on-site, remote and Rapid Iterative Testing and Evaluation (RITE) methods. We will cover usability testing from planning through analysis, and ways to provide useful and usable recommendations to the team. 	User Experience & Interaction Design	Tutorial	2011
11494	10 Minutes to Testable Specifications	Come to one of Agile 2011's fastest paced workshop and learn the basics of creating testable specifications that drive requirements clarity, engender collaboration, increase estimation accuracy, and cure many of the ills that plague agile projects today.  \\n\\nWe won't make you an expert, but our acceptance criteria for this session is that you will leave with an understanding of how testable specifications improve your requirements and how the approach varies from the Test Drive Development that developers do.	Agile Show & Tell - Lightning Talks	Workshop	2011
11502	Bad-Assed Double-Loop Learning: From Judgmental to Good Judgement	"We all know" Agile leaders foster self-organization, so why do many have little effect on their teams, or worse, actually harm their effectiveness?\\n\\nPeople act in ways that are rational to them, but differences in mental models can make people seem irrational. By uncovering your team s mental models, you can help them achieve a common rationale. This leads to stronger, integrated teams.\\n\\nScrumMasters, Coaches, Managers, & Team Members will participate in robust scenarios based on team simulation in aviation and healthcare. You will leave experience directly applicable in your workplace.	Coaching & Mentoring	Workshop	2011
11517	Agile and the 21st Century Corporation	**The new economic and social century** is pressing on organizations from every side. What conditions will make demands and how will we adapt? Will Agile provide a long term delivery capability and business solution in the face of a frantic economic reality? Will our competitive nature give us the freedom to build partnerships, even with those outside of our organizations who have heretofore been our enemies? Can we build a creative ecosystem that will last beyond fads and overcome fear of change? Join us for a dialog & workshops on preparing to meet these challenges in our own organizations.	Business & Project Management	Workshop	2011
11536	Telling Better Stories with User Story Mapping	User story maps help us understand the product we're building, break in down into small pieces to build iteratively and incrementally, and effectively plan minimal viable product releases in holistic product slices.  In this quick tutorial participants will learn the basics of user story mapping by building their own story map quickly and collaboratively.  They'll see examples and hear stories of a wide variety companies who've used story maps to simplify backlog building, planning, and delivery.\\n	Working with Customers	Tutorial	2011
11537	Agile Methods Influencing Non-IT Projects	One software development team has found that its agile team practices have been emulated by several of its clients and admirers for non-software projects.  Learn how practices such as short iterations, daily standup, storycards, early releases, and pairing have been adopted in organizations for projects that might surprise you.  These organizations include a law office, manufacturing plant reconfiguration, architecture, industrial lighting, and book publishing.	Business & Project Management	Talk	2011
12633	Making team flow and progress business readable	The last two years we adopted BDD/ATDD, including automated acceptance criteria validation while preserving their business readability (using specification-by-example). \\nAs a side effect of this practice, progress became more transparent:instead of just seeing remaining work and stories done, we track individual ACs showing progress in a business readable form.  This helps testing and early feedback.\\nThe talk shows how automated AC validation increased transparency in our project and briefly walks through our AC refinement flow, how we monitored progress and merged into living documentation.	Agile Show & Tell - Lightning Talks	Talk	2011
12637	Agile won't work here... really?	In this session, the presenters will share their experiences implementing Agile in what many people believe to be incompatible environments. In the first half of this session, Candi Rai will discuss how they adopted Agile in their mainframe COBOL environments in order to save $500,000 in costs while simultaneously increasing customer satisfaction. In the second half of this session, Marc-Ellan Begin will discuss how the European Space Agency (ESA) is adopting Scrum with industrial contractors in a fixed-price contracts context, replacing their traditional waterfall processes.	Adoption & Transformation	Talk	2011
12639	Refactor Your Wetware	You are used to working with software and hardware, but what about working with wetware your own brain? Do you know the best ways to learn, or to think about solving problems? In this one workshop we ll journey through bits of cognitive science, neuroscience, learning and behavioral theory.\\nYou ll see surprising aspects of how brains work and see how to beat the system, improving your own learning and thinking skills.\\n	Collaboration Culture & Teams	Tutorial	2011
12642	Climbing and Governing the Enterprise Agile Mountain	   It s too risky for our financial institution customers; No requirements - no way!, Regulatory auditors will eat us alive ,&   2 Years Later:  these concerns & more were solved to move to Enterprise Agile.  With a strong vision, a worker-derived roadmap, heavy change management lifting, and internal agile coaches, we did it.  What did those look like?  How were  hearts & minds  won?  What teams, tools, training, & rewards, drove the change through?\\n	Enterprise Agile	Talk	2011
12643	New Ideas and Emerging Results workshop	The workshop will provide an excellent opportunity to present and discuss opinions, ideas and suggestions for future research. We aim to bridge the gap between research and practice through presentation of position papers, alongside partners from the agile practitioner community.\\nSix position papers will add to the body of knowledge on agile methods and processes, agile teams and people, and the tools and practices that support them. Presentations of position papers with first authors: Mark Mahoney, Morgan C. Benton, Celio Santana, Yaser Ghanam, Renan de Melo Oliveira and Bill Curtis.	Research at Work	Workshop	2011
12644	Research Methods Workshop	To produce research results of importance it is crucial to apply the right research method. This workshop focuses on the challenges of applying research methods to study agile software development. Authors of accepted full papers in studies of agile software development are invited to give a short presentation of their research method, and there will be discussions on how to apply case studies, experiments, surveys and literature reviews. This workshop is intended for researchers.	Research at Work	Workshop	2011
12646	The home ground of Automated Acceptance Testing: Mature use of FitNesse	The concept of automated acceptance testing (AAT) has had nearly a decade to mature. While it has their score of supporters, it has not been embraced as a silver bullet for software development. The problem is that knowledge of when and where to fruitfully apply such a tool and method is scarce. In this article we describe a project group where the developers by their own account successfully use FitNesse. By describing how they select the appropriate places to use FitNesse, and how they use it, other practitioners can apply this to their domain. This corresponds and adds to recent research.\\n	Research at Work	Talk	2011
12647	Reconciling Perspectives: How People Manage the Process of Software Development	Social factors are the significant cost driver for software development and in this field study we develop a grounded theory of how people manage the process of software development. We discovered the main concern of those involved in the process of software development is getting the job done and to get the job done, people engage in a constant process of Reconciling Perspectives.  What this theory reveals is the importance of individuals  ability to reach out and engage in negotiations to the success of a software project.	Research at Work	Talk	2011
12648	Collaborative Events and Artefacts in Agile Teams with Interaction Designers	We studied 4 agile teams including interaction designers, since the integration of interaction designers on agile teams is an open issue. We found some designer-developer collaborations were for planning, but most were for enacting plans.  These latter collaborations took three forms:  scheduled, impromptu and chats. Regardless of the form, all designer-developer collaborations were mediated by twelve categories of artefacts.  These helped to determine, more precisely what to create.   We discuss implications of our observations for theory and practice. 	Research at Work	Talk	2011
12649	User-Centered Design and Agile Methods: A Systematic Review	This paper presents the results of a systematic review of existing literature on the integration of agile software development with user-centered design approaches. Through systematic and rigorous research methods and data analysis, this paper shows that a common process model underlies such approaches and discusses which artifacts are used to support the collaboration between designers and developers.	Research at Work	Talk	2011
12650	There's Something About Lean: A Case Study	An idea gaining significant interest at the moment is  how can we apply lean manufacturing principles to software development?  There is however, limited information on how Lean is being used by industry practitioners and if the principles and practices are as effective as current interest levels suggest it might be. We have used a case study to explore the practicalities of how one high-performing, open source team, has adopted Lean practices. We found that the existing\\nmeritocratic culture of the team under study appears to have greatly assisted the team s adoption of Lean principles.	Research at Work	Talk	2011
12652	An Agile approach to optimising our digital strategy	 Today, the most popular way people prefer to make contact with organizations is online as customers embrace new digital channels. We needed to modernize our digital presence to take the conversation to the channels where those conversations are taking place. Utilizing an Agile approach allowed us to increase site usability and responsiveness to consumer needs.	Agile Show & Tell - Lightning Talks	Talk	2011
12653	Understanding Post-Adoptive Agile Usage   an Exploratory Cross-Case analysis 	The widespread adoption of agile methodologies raises the question of their continued and effective usage in organizations. An agile usage model consisting of innovation, sociological, technological, team, and organizational factors is used to inform an analysis of post-adoptive usage of agile practices in two major organizations. Analysis of the two case studies found that a methodology champion and top management support were the most important factors influencing continued usage. Both horizontal and vertical usage was found to have significant impact on the effectiveness of agile usage. 	Research at Work	Talk	2011
12655	The Combination of Agile and Lean in Software Development 	Recently there has been a noticeable focus shift from agile methods such as XP and Scrum to lean, indicated as  from agile to lean . However, the reality may not be as linear as the term implies. To better understand the combined use of both, the experience reports published in the past agile conferences were examined. The study shows that the two can be combined in different manners for different purposes. Lean is often applied as guiding principles for agile development. When combined at the practice level, flow-based lean processes tend to substitute time-boxed agile processes.	Research at Work	Talk	2011
12656	IEEE Best Paper - Decision Making in Agile Development: A Focus Group Study	Abstract This research defines decisions made across four periods of the sprint cycle based on input from a focus group conducted with 43 people on agile teams. Results indicate that Sprint Planning includes decisions about planning work for the subsequent sprint, Sprint Execution includes tactical implementation and development decisions, Sprint Review includes decisions about continuing future sprints based on customer product satisfaction, and Sprint Retrospective includes decisions for improving the sprint process. Six key decision making obstacles were also identified.	Research at Work	Talk	2011
12657	Enacted Routines in Agile and Waterfall Processes	Agile methods form an alternative to waterfall methodologies. Little is known about activity composition, the proportion of varying activities in agile processes and the extent to which the proportions of activities differ from  waterfall  processes. In the current study, we examine the variation in performative routines in one large agile and traditional lifecycle project using an event sequencing method. Our analysis shows that the enactment of waterfall and agile routines differ significantly suggesting that agile process is composed of fewer activities which are repeated iteratively.	Research at Work	Talk	2011
12659	Survey of Agile Tool Usage and Needs	The usage of and satisfaction with tools supporting Agile methods has been and remains an unexplored area. Most existing tool surveys have been subjectively conducted by tool vendors, clearly focusing on company structure and a specific Agile method rather than on tool usage and needs. In this paper, we report on a vendor-independent survey on tool usage covering 121 responses from 35 countries. Our results show that the most and least satisfactory tool aspects are ease of use and lack of integration with other systems, respectively. We report on desired tool features and received comments.	Research at Work	Talk	2011
12661	Rule-Based Exploratory Testing of Graphical User Interfaces	This paper introduces rule-based exploratory testing, an approach to GUI testing that combines aspects of manual exploratory testing with rule-based test automation. This approach uses short, automated rules to increase the bug-detection capability of recorded exploratory test sessions. A preliminary evaluation found that this approach can be used to detect both general and application-specific bugs, but that rules for general bugs are easier to transfer between applications. Also, despite the advantages of keyword-based testing, it interferes with the transfer of rules between applications.	Research at Work	Talk	2011
12662	Agile Team Perceptions of Productivity Factors	In this paper, we investigate agile team perceptions of factors impacting their productivity. We here conducted two case studies\\nin the industry and analyzed data from two projects that we followed for six months. From the perspective of agile team members, the three most perceived factors impacting on their productivity were appropriate team composition and allocation, external dependencies, and staff turnover. Pair programming and collocation were the main agile practices impacting productivity. Finally, most team members did not share the same understanding of the concept of productivity.	Research at Work	Talk	2011
12665	Why Scrum works	Scrum seems to work extremely well as an agile project management approach. An obvious question is why. To answer that question, we carried out a longitudinal case study of a distributed project using Scrum across Denmark and India. In our analysis of case study data we used three selected theoretical frameworks. We conclude that Scrum works so well because it provides communication, social integration, control, and coordination mechanisms that are especially useful for distributed and agile project management.	Research at Work	Talk	2011
12666	How to Save Your Industry $1.9B using Agile Methods	My Industry was faced with Legislation to reduce Govt Rebates to the Health Industry by $1.9B. As the key lobby group, we embarked on a digital strategy to support the campaign. We adopted an Agile approach in order to have a skinny website and mobile app up and running as soon as possible. Weekly sprint planning allowed us to build iterative changes into the release strategy in order to respond to stakeholders and the political debate. Kanban was utilised to prioritize widgets we required on the website and ensure our campaign remained responsive to stakeholders.	Agile Show & Tell - Lightning Talks	Talk	2011
12692	Why Care about Positive Emotions?	Dr. Barbara Fredrickson and her colleagues have found that positive emotions literally change the way the human brain works, widening people's perspectives, and their outlooks on life. According to Fredrickson s broaden-and-build theory of positive emotions, this shift in mindset drives people to discover and build new traits, skills, and resources, and over time become better versions of themselves. In this presentation, Dr. Fredrickson will describe the science that backs up these claims and and describe the nonconscious upward spiral processes that enable people to thrive with agility.	Keynote	Talk	2011
12693	Code	Code is the stuff of software. It is the definition of the software. It is the enabler of functionality, the realizer of business value, the expression of understanding. It is also an expression of misunderstanding, a resister of change, a source of sunk costs.\\n\\nBut the word code has meanings beyond source and binary. In a broader sense, code and codes are also the stuff of software development. There are cultures of programming, principles of practice, manifestos of desire. Code refers to a set of conventions by which a group of people will govern themselves.\\n\\n	Keynote	Talk	2011
12694	 The Power of an Agile Mindset	I've wondered for some time whether much of Agile's success was the result of the placebo effect, that is, good things happened because we believed they would. The placebo effect is a startling reminder of the power our minds have over our perceived reality. Now cognitive scientists tell us that this is only a small part of what our minds can do.\\n\\nResearch has identified what I like to call "an agile mindset," an attitude that equates failure and problems with opportunities for learning, a belief that we can all improve over time, that our abilities are not fixed but evolve with effort. 	Keynote	Talk	2011
12706	Making the most of manual testing in a quality focused Agile team	Atlassian is an agile shop, with heavy emphasis on the quality of our products. With the increased focus on great UX, we have focused in the past few years on growing a QA testing function which complemented the automated testing in development. In this talk, I will share some of the challenges we faced, including:\\n\\n* Incorporating manual testing into two-week iterations, while achieving the goal of having shippable products at every iteration.\\n* Ensuring clear communications between QA, developers and PMs, and providing visibility of testing in a script-free testing environment.	Agile Show & Tell - Lightning Talks	Talk	2011
12709	Leading the Agile Release Train	The Agile Release Train (ART) is a scaling model for enterprise Agile programs.  How can the key event -- the Release Train Planning Meeting -- be kept on track?  Enter: The Release Train Conductor, a strong leader with the tools to run a two day meeting of 100+ people to synchronize large-scale planning!	Agile Show & Tell - Lightning Talks	Talk	2011
12711	The Three Ingredients of a GREAT Product Owner	One of the most important components of successfully applying an Agile approach is ensuring that the right product owner is identified.  This attempt to find the right business representative has proven to be challenging in most organizations because they are uncertain about what they should be looking for.  This short session will review the 3 most important ingredients you should consider when seeking to fill the role of product owner.	Agile Show & Tell - Lightning Talks	Talk	2011
12712	When User Stories Just Don't Fit in a Short Sprint	In a complex environment, it can be impossible to write user-valued, end-to-end user stories that fit in a short sprint. In this talk, we'll understand the potential waste of trying to make stories _too_ small. I'll explain ways for teams to keep the value and fast feedback of short sprints without sacrificing the goal of having end-to-end user stories. Hint: you may have to set aside some of your Scrum dogma.	Agile Show & Tell - Lightning Talks	Talk	2011
12715	Design, Style, and Flavors   Their Influence on Agility (BoF)	Join us for a group discussion on how languages and coding idioms influence agility. Bring your favorite examples that influence your code, in any language. We'll set up a projector so we can demonstrate our ideas to the group.\\n\\nHere are some of our favorites:\\n\\n1) Filter, Map, and Fold: the power tools of modular, reusable code.   \\n2) Alternatives to the Visitor Pattern\\n3) Avoiding Nulls with the Option Type\\n4) Concurrency Models: Actors, Software Transactional Memory, etc.\\n\\n	Development Languages Practices & Techniques	Workshop	2011
12716	Three Ways UX Gives You Better Story Sizing and Coverage	Stories give the customer what they asked for, but not always what they really wanted. Learn three practical tips for how to integrate UI design work with story development, to both get more realistically sized stories, and the user experience that the customer wanted but didn't know how to ask for.	Agile Show & Tell - Lightning Talks	Talk	2011
12718	Does Agile Focus on Value Delivery	Lean process has an exceptional focus on providing value to the customer. I ve often seen when groups are considering an agile transformation they are focusing on faster iterations, but faster iterations of what? An agile team can certainly deliver faster iterations of what the customer doesn t want. This lightning talk shows simple methods to ensure that Agile teams are focusing on value delivery along with speed. I will show how the user story/acceptance process can also focus on customer value. We will focus on Kanban and Kaizen as methods to utilize in the Agile value stream.	Agile Show & Tell - Lightning Talks	Talk	2011
12719	Are Agilists the Bonobos of Software Development?	The chimpanzees and the bonobos are the animals whose genetic make-up is closest to that of human beings, but their “cultures” (and, yes, animals definitely do have well-defined cultures) are very different.  The chimpanzees are aggressive, and operate in a strict alpha male-dominated hierarchy, while the bonobos are gentle and promiscuous!  What sort of tie-in could this have for those of us who favor agile development over plan-driven?	Main	Talk	2006
12720	Overview of Agile	In this talk Hubert Smits provides a broad introduction to concepts of agile software development and agile methods. The talk is based on his experience as an agile coach and Certified Scrum Master. Traditional concepts from waterfall or plan-driven development are transformed to an agile perspective. Examples are release and iteration planning, progress reporting, meeting formats and scaling projects from 10 people teams to 300 people teams. 	Beginners	Tutorial	2006
12721	Agile Practices I	This session will contain four presentations which cover key aspects of agile development: planning and tracking, writing and telling user stories, testing, and project management. Each presenter will speak for 45 minutes, providing introductions, examples, and experiences helping communities employ agile techniques. All the presenters have published on the topics, and they are currently helping project communities of all sizes and shapes transition to agile. This session will be beneficial to people new to agile, or using agile and those looking for more guidance or insight from working professionals. 	Beginners	Tutorial	2006
12722	Is Agile Software Development Still Agile?: A fishbowl discussion to decode the mixed messages in the Agile Manifesto and our observations about Agile Development 5 years later	Agile Software Development has now been around for five years. The term Agile along with the Agile Manifesto united processes such as XP, Scrum, Crystal, Adaptive, and FDD under a common name and mostly common cause. But after the shine starts to dull on our freshly discovered common cause, one has to take a closer look back at the Agile Manifesto as it relates to what we've actually been doing over the past five years. If Individuals and Interactions are valued over Process and tools, why is it we have so many books and conference tutorials about process along with so many neat tools to support those well documented processes? The irony doesn't stop there. You'll find Agile books on documenting better user stories, tutorials on writing better customer contracts, and expert guidance on increasing the rate and efficiency of our planning activities. Oddly, we seem to be doing all out innovation on the right side of the Agile Manifesto statements - presumably the side we value less. Are we becoming the process dependent junkies we originally feared? These questions and more will be discussed and argued as we look back at Agile development over the past 5 years and ask "Is Agile Development still Agile?"	Discovery Sessions	Workshop	2006
12723	Agile Web Development	Agile web development using “standard” frameworks – such as .NET or J2EE – is difficult, mainly because the environments have test-averse constraints such as runtime code generation.  Over the past two to three years, a series of lightweight technologies have radically changed the landscape in the Java world. This session is a fully hands-on guided opportunity to test-drive real software changes using both unit and acceptance level tests working with these frameworks. The specific technologies to be used include Java, Spring, Hibernate, Velocity and FitNesse. People attending this session are highly recommended to also attend Test-Driven J2EE: Life Outside the Container with J.B. Rainsberger for a more in-depth understanding of the principles and techniques involved.	Hands-on	Workshop	2006
12724	Agile Software Development: The Current State of the Union	In March 2006, Scott ran an online survey via Software Development and Dr. Dobb’s Journal, two magazines which were recently combined into the new Dr. Dobb’s Journal.  The survey explored whether organizations were adopting agile methods and techniques, which ones they were adopting, and how successful they were in doing so.  Over 4,200 people responded to the survey, representing a range of organization sizes as well as various positions within those organizations.  This talk will share the results of this survey.	Main	Talk	2006
12725			Main	Talk	2006
12726	Agile Software Development in the Large	A lot of people still believe that agile software development is for small teams only. However, the agile value system and the principles behind as stated in the agile manifesto don't say anything about team or project size. Furthermore the projects I'm working on are typically large, distributed and mission-critical. Therefore, several years ago I took the challenge and tried agile software development in the large. Meanwhile I made the similar experience on many large projects: Also large and even distributed teams can benefit from a value system that is beneficial for small teams. In this tutorial I want to show how to scale agile processes to teams of 200. In fact, the same techniques are also relevant to teams of ten or more developers, especially within large organizations.	Tutorials	Tutorial	2006
12727	Intro to the Agile Manifesto	The agile manifesto was created to succinctly capture the common aspects of agile development. The presenters in this session will each spend 20 minutes talking about one of the four items from the agile manifesto: 1) Individuals and interactions over processes and tools, 2) Working software over comprehensive documentation, 3) Customer collaboration over contract negotiation, and 4) Responding to change over following a plan. Along with being key players in the agile community, several of the presenters we among the group that crafted the original manifesto.	Beginners	Tutorial	2006
12728	Exploratory Testing is Really Agile Testing	Traditional lore in the agile world holds that testing is essentially a process of confirmation, asserting the product works properly and that it can be refactored with greatly reduced risk. Yet to be effective, testing must also be a process of investigation - asking challenging questions about the product, and answering them by operating and observing the product. Exploratory testing is a simultaneous process of designing tests, executing them, and learning is key to serving this part of the testing mission. There are many misconceptions about exploratory testing - that it is sloppy, random, unaccountable, or unstructured. (Interestingly, agile processes are sometimes accused of the same things.) This tutorial explains exploratory testing, shows its structure and discipline that may not be apparent to the untrained eye, and engages participants in exercises that give a feel for the process and some experience with it. Since it involves rapid learning, adaptation to new information, and lowered documentation overhead, participants should recognize that exploratory testing is a truly agile process, and should leave the presentation knowing how to do it better. Exploratory testing exemplifies the agile preferences for working software over comprehensive documentation, and for responding to change over following a plan.	Tutorials	Tutorial	2006
12729	Making movies and software at the speed of thought!	Director Robert Rodriguez (Spy Kids, El Mariachi, Sin City) is an Agile Director. He enjoys making highly creative movies quickly and cheaply. His ambition is to make movies "at the speed of thought". To achieve this goal, he works in small teams to develop the ideas, visualize them quickly, shoot the movie fast, and build the movie in layers. This workshop will introduce Rodriguez's approach to filmmaking by screening several of his "10 minute flick school" featurettes and we will explore if and how these techniques translate to software development in a lively group discussion.	Discovery Sessions	Workshop	2006
12730	Incremental Releases Your Users Will Love: How to deliver functionally complete releases without blowing your brains out	One of the benefits of Agile Software Development is early and continuous delivery of valuable software. Dividing development work up into small pieces (user stories or backlog items) then building the most valuable parts first sounds like a simple idea, but there's often a bit more to it. Sometimes it takes a few not-so-valuable parts to allow users to take advantage of the most valuable parts. At times the most valuable parts may show well, but without a sufficient amount of software implemented, users may be unwilling to set aside legacy software or even manual processes to actually put the new software into use and earn the return on investment incremental release should bring. In this short tutorial participants will learn the basics of planning incremental releases that are useful to their users. We'll discuss strategies for splitting user stories into the small but useful parts that allow releases to contain more user stories. You'll learn more about the myth of the finished user story and why, if you're not cautious, your stories may inflate while you're not looking.	Tutorials	Tutorial	2006
12731	Refactoring Games	Learning code smells and refactorings can aid in our communication and deepen our understanding of design and how to evolve it. But many developers fail to find the time to study code smells and refactorings on their own. In this session, you will learn to play several games that teach code smells and refactorings. We will use decks of refactoring playing cards that include cards for code smells, refactorings, and qualities of good code. These games have been used in many workshops and have proven to be both effective and fun. You will also get your own deck of cards so that you can play these games with your friends and project teams.	Discovery Sessions	Workshop	2006
12732	The Role of the Customer Team	Agile processes require that developers have a close working relationship with their customers. What is the nature of this relationship? This tutorial explores this question, and defines and explains the set of responsibilities the customer has. Two things that are certain are: 1. The existence of a good customer is a primary success factor; and 2. Being a good customer is one of the hardest things to do. The exploration starts small. The two most popular small-team agile methods are eXtreme Programming (XP) and Scrum. Superficially, one would suppose that XP's Customer and Scrum's ProductOwner were "one and the same", but closer inspection shows that there are both similarities and differences. By studying these (and other) processes' views of customers, we arrive at a small set of primary responsibilities for the customer: - Determine what the stakeholders want / need from the System; - Prioritize what will actually be developed; - Refine the requirements with the development team; and - Validate that the System delivered is the one agreed upon. To get all of this done usually takes a collection of people we call the CustomerTeam. In this tutorial we describe the challenges in detail and give some tentative solutions.	Tutorials	Tutorial	2006
12733	Functional Acceptance Testing: The Essentials	Functional testing is challenging whether you are working on an agile project that develops tests before developing system code, or working on a more traditional project that has left functional testing until the end. Different choices must be made in each situation in order to develop a successful functional testing strategy. It is crucial that automated functional test suites employ established testing best practices in order to avoid common pitfalls. Topics covered include: 1. Context: How functional tests fit into the overall spectrum of testing. Where functional tests fit into the overall project development cycle. 2. Strategy: A functional testing strategy is a collection of decisions relating to creating, maintaining, and executing functional tests. Various project characteristics drive these decisions. 3. Specification: Functional tests can be textual, graphical, tabular, or storyboarded. Emphasis is placed on developing a domain specific testing language, and other best practices for making your tests a valuable project asset. 4. Automation: Several tools are compared with respect to readability, maintainability, declarativeness, effort, results reporting, etc. 5. Case-Study: Description of a project that evolved its focus over time (from porting to enhancements), and how the functional testing strategy was developed to evolve successfully.	Tutorials	Tutorial	2006
12734	Agile Before They Know It: Tips for Agilists in a Non-Agile World	"If only my project were more agile!" How many times have we heard, and made, this plea? As Agilists, we long for something better than what we have. We try to influence our projects to be more agile. Sometimes we have great success, but other times it just doesn't seem to click. This workshop is an opportunity to share simple, practical tips for Agile conversion that work. Imagine a swap meet where tools for Agile adoption are shared, explained, demonstrated and practiced. We will diversify our toolboxes so that when we go home to our respective projects, we can be a little less frustrated and get a little more done. We may back off the wrecking ball in favor of the surgeon's scalpel. In fact, our coworkers may find that they're Agile Before They Know It!	Discovery Sessions	Workshop	2006
12735	Agile Architecture	Let's say your team has been Listening Testing Coding and Refactoring along for years. You've said everything there is to say Once and Only Once. You check your velocity from the burndown on your information radiator at the end of every sprint, so you've got that process thing down...and all of a sudden that's just not nearly good enough any more. How could a Lego model of a steam locomotive provide deeper insights into architectural choice in an agile environment that could get you out of that fix? Join this interactive tutorial to experiment, challenge and develop ideas about "architecture" and "merciless refactoring". You'll come away with a new insight into the techniques that long established Agile teams are discovering to obtain the step-changes in productivity that business demands.	Discovery Sessions	Workshop	2006
12736	Earned Value and Agile Reporting	This paper reviews the concepts of Earned Value Reporting established in traditional project management, and determines whether and how they can be applied to software development projects following an Agile methodology. First the origins and concepts of Earned Value, are reviewed followed by its application in traditional projects. Then the application of Earned Value Management to Agile software projects is investigated.	Research	Research Paper	2006
12737	An Empirical Study of Using Planning Poker for User Story Estimation	Group estimation of user stories is an important part of most agile processes, used for both planning and pricing. Research has shown that although group estimates in many cases are superior to individual estimates, there is still a need for improvement. For instance, group estimation performance can be reduced by dominant personalities and anchoring effects. Through the analysis of 101 user story estimates made by an agile development team, we investigate whether the introduction of a voting process, derived from Wideband Delphi, improved the estimation ability of the team. The results show that the voting technique improved the team's estimation ability in most cases, but that it increased estimation error in the extreme cases. We believe that the voting technique can improve agile teams' ability to deliver promised functionality on time, improving time-to-market.	Research	Research Paper	2006
12738	AgileEVA - Earned Value Management in Scrum Projects	AgileEVA is a simplified set of earned value calculations. Adding AgileEVA to Scrum yields simple and effective what if scenarios for balancing scope, schedule and budget. The balanced information helps keep focus on "return on investment." Using only five initial values and four data points, AgileEVA adds almost no overhead to a Scrum Project and adds particularly valuable cost performance information which is important for helping measure productivity improvements. For organizations required to use Earned Value Analysis (EVA), AgileEVA provides additional support to assert that Scrum is a viable project management method. Using AgileEVA will help organizations familiar with traditional project management interpret the results of Scrum projects. For organizations running Agile projects, AgileEVA contributes to balanced practices. AgileEVA is intended to help ScrumMasters, Project Managers, Product Managers and Key Stakeholders involved in project delivery. This is especially true for organizations struggling with the implementation of Agile software development.	Research	Research Paper	2006
12739	Extreme Test Makeover	Are your tests disheveled, flabby, or unfocused? Bring them in for a makeover! We’ll have makeover artists who are experts in unit and acceptance testing, with tools such as Fit, JUnit, NUnit, Watir, and more. This is a hands-on session – bring your laptop with your tests and a development environment, running and ready to test. Or just come and observe how the experts work. Your application can be a toy or a real application, though we really encourage you to bring a real application. We’ll have two tables with multiple sessions per day—90 minutes each (including a little overhead time). We’ll have sign-up sheets for each slot. At the end of each session, we’ll capture “lessons learned” and share them with others at the conference.	Hands-on	Workshop	2006
12740			Main	Talk	2006
12741	Demonstrating Responsibility: The Mindset of An Agile Leader	Demonstrating personal responsibility is the first step in leading anybody, changing anything, solving any problem, and managing every relationship. Everybody knows that. But not everybody knows how to take responsibility. More importantly, even highly responsibility people do terribly irresponsible things on a frequent basis because they don't understand the Responsibility Process. The failure to take responsibility stalls projects. And it's a leading reason why smart executives fail. This tutorial will show you: - why agile leaders success soars when they take 100% responsibility - the inner workings of personal responsibility and how to tap into it at work, and - exactly what to do to take personal responsibility for your agile projects and to build responsible leaders, teams, and communities.	Tutorials	Tutorial	2006
12742	Overview: Agile Styles	There are many ways to practice agile development. The speakers in this session will each spend 30 minutes talking about a specific style of agile development. This session will provide insights that may help you determine which agile style might be a good fit for your company and culture. The speakers and the topics are: Kent Beck on XP, Ken Schwaber on SCRUM, Mary Poppendieck on Lean, Jean Tabaka on DSDM, David Anderson on FDD, and Alistair Cockburn on Crystal. If you are new to agile, do not miss this session - a gathering of this group of speakers is a unique experience.	Beginners	Tutorial	2006
12743	Rapid Testing Approaches for Agile Development	Agile processes are sometimes disparaged by traditionalists because agile teams prefer working software to comprehensive documentation. Yet some agile adherents, in their choices of testing strategies and tools, may themselves run the risk of producing more documentation and doing less testing than they might. Rapid Testing, a complete methodology designed by James Bach, shares the anti-clerical, anti-bureaucratic point of view espoused by agile proponents, and focuses on providing feedback quickly through rigorous, aggressive, mission-focused testing. Rapid Testing also encourages teams to expand ideas about testing, to make pragmatic choices about test automation, and to investigate the product to find important bugs quickly. In this Discovery Session, Michael Bolton provides an introduction to Rapid Testing - defined as the fastest, least expensive testing that fulfills the mission. Rapid Testing is built on thinking skills-general systems thinking, critical thinking, and context-driven thinking - but it's also focused on action, lightweight tools, and rapid cognition. Michael will highlight the central skills and practices of the approach, show how it fits in an agile environment, challenge some dogma, welcome discussion and debate, demonstrate quick tests that provide some information at minimal cost, and present several exercises from the Rapid Software Testing course.	Tutorials	Tutorial	2006
12744	Is Your Organization Ready for Agile?	Topic: How to assess organizational readiness and lead the change to agile development Agile software development sounds really great. Higher productivity, better return on investment, quicker delivery of software, motivated and energetic developers are all appealing. Are you willing and able to do what is required to get these benefits? Some people think all you have to do is read books, take courses, and then implement Agile. But the work is much deeper and harder and has many aspects of organizational change management. This tutorial will help you understand how to assess your organization and determine whether the conditions are right to make a change to agile a success.	Tutorials	Tutorial	2006
12745	The Lego XP Game	This variation on the classic XP game has been used effectively as a teaching tool within ThoughtWorks and with our clients. Unlike the traditional XP game, where the tasks being worked on are unrelated and repetitive, instead each team will iteratively develop a series of models. Whilst we talk specifically about XP, many of the topics covered are generic to all agile development methodologies.	Tutorials	Tutorial	2006
12746	Agile Practices II	Adding to the introduction series, the speakers in this session will each talk for 45 minutes, diving deeper into various agile topics. Scott Ambler will discuss agile modeling and how it fits into agile development. Joshua Kerievsky will talk about the challenging and important concept of evolutionary design. Esther Derby will talk about the many team dynamics that lead to successful adoption of agile, and Mike Hill will conclude the session with an overview of essential todos associated with healthy transitions to agile development.	Beginners	Tutorial	2006
12747	Speed Boats & Jacuzzis: Innovation Games(sm) For Customer Understanding	Modern product development practices, especially those that focus on innovative products and services, place great emphasis on having development teams work directly with customers. This is good news, for the foundation of innovation is a genuine understanding of your customers. This tutorial tackles the challenge of developing customer understanding head on by providing you with a fresh perspective on how to use a variety of games with your customers to develop the understanding you need to create innovative, successful products and services. You'll find that if you use them, you'll come to understand what your customers really want. You'll have fun doing it. Perhaps more importantly, they'll have fun doing it.	Tutorials	Tutorial	2006
12748	Tracer Bullets Reloaded	It's not about hitting a target, but rather constantly checking that you are heading in the right direction. It is better to include early attempts and take small steps to improve your aim. In this workshop attendees will experience an extreme simulation of building software using the principle of extensive feedback and evolution, which is at the core of XP. Teams will have to build a product from things like wood, sticky tape and pins in a non-software game within a short timeframe. In our experience of working within agile teams, we have found that it is just as important to apply the principle of extensive feedback and evolution to the development process as it is to the software itself. The XP values and core practices can be used as a recipe to create a specific XP flavour within a team environment. Using feedback, one can then adjust the recipe to taste. The workshop is structured in such a way that we investigate and apply this principle and, through coaching and reflection, we expect to draw conclusions that show how to make the process itself as agile as the software developed.	Discovery Sessions	Workshop	2006
12749	Skills for the Agile Designer	What makes an agile designer effective? Agile designers need to quickly see the essence of a problem, shape reasonable solutions, and communicate complex ideas. When things don't exactly go according to plan, they must react, readjust their thinking, and try again. This tutorial introduces several techniques and vocabulary for articulating the nature of design problems and their solutions: Problem frames identify the typical structure of software tasks. Designer stories set the stage for collaborative design. Role stereotypes are useful for assigning or assessing object behaviors. Control styles can help characterize and communicate control center designs. Trust regions can aid in spotting places where defensive programming is needed. Seasoned designers strike a balance. They know the difference between core and revealing design tasks and plan accordingly. When unanticipated difficulties crop, they adapt their work rhythms. We'll outline strategies for identifying and tackling wicked problems that can't be solved by sheer effort alone. Finally, we conclude by introducing argument moves so you can analyze others' positions, think critically, and hopefully hold your own in a heated discussion.	Tutorials	Tutorial	2006
12750	Do Less and Deliver More; Lessons from Lean Production.	For everyone new to agile methods, this workshop will give you hands on experience with how agile methods work. For individuals experienced with agile, this workshop will give you deeper insights into why agile methods work and how to accelerate your results. Participants will run a business simulation, where teams compete to produce products in a marketplace. The simulation will surface issues that recur in the real world, giving participants an opportunity to try out new behaviors and beliefs to resolve these issues. As teams review financial and operational metrics, they will iteratively refine their approach and discover key principles from lean production, theory of constraints, and product development. The group will link these principles to software development and understand how higher performance demands agile practices. Attendees should dress comfortably as this experiential learning activity will require a great deal of movement around the room. The presenters have run this simulation many times for audiences ranging from executive management to development teams adopting agile. Attendees have described this workshop as "illuminating, an eye opening way to accelerate software development."	Discovery Sessions	Workshop	2006
12751	Refactoring with Contracts	Design by contract is a practical methodology for developing code together with its specification. The contract consists of class invariants and method pre- and postconditions. As the code is refactored, specifications of internal units change with the code. There are mutual influences between the code and the contract. The assertions that constitute the contract are Java expressions; refactorings such as Rename Method must change these assertions as well as the code. The contract has methodological implications, which serve as preconditions on some refactorings; these must be checked before performing those refactorings. In addition, some contract modifications follow from certain refactorings, and can be done automatically. Development environments that support design by contract must take these influences into account. We report on the implementation in Eclipse of several refactorings that involve both code and contract. These show how contracts are modified in response to code changes, how contracts prevent certain changes, and how new contracts are computed for newly-generated methods and classes.	Research	Research Paper	2006
12752	Executable Acceptance Tests for Communicating Business Requirements: Customer Perspective	The study investigates capability of executable acceptance test (storytest)-based specifications to communicate and validate functional business requirements. The central hypothesis of whether customers in partnership with an IT professional can effectively specify acceptance tests was supported. Learnability and ease of use analysis indicates that an average customer may experience difficulties learning the technique. Several additional propositions are evaluated and usage observations made.	Research	Research Paper	2006
12753	On Agile Performance Requirements Specification and Testing	Underspecified performance requirements can cause performance issues in a software system. However, a complete, upfront analysis of a software system is difficult, and usually not desirable. We propose an evolutionary model for performance requirements specifications and corresponding validation testing. The principles of the model can be integrated into agile development methods. Using this approach, the performance requirements and test cases can be specified incrementally, without big upfront analysis. We also discuss a rare experience in the field and how our model relates to the results of the case study.	Research	Research Paper	2006
12754	Implementing Agile Methods in Large Organizations	In the last couple of years agile methods have become increasingly mainstream. Whereas several years ago agile methods were being implemented in a few project teams in an organization, today CIOs and VPs of engineering are funding initiatives to implement agile methods widely in their organizations. This tutorial is about one such implementation at Kronos, a 500+ person software engineering organization, and how what we learned from this engagements can help others facing this opportunity. The presenters for this unique tutorial are Peter George, VP of Engineering at Kronos, Inc. a worldwide provider of workforce management software, Jim Highsmith, Sr. VP of Agile Practices at the Cutter Consortium, and Josh Kerievsky, Founder of Industrial Logic. This tutorial will cover this major agile implementation initiative from: Peter's initial investigations into improving software development; to a 6-week in depth qualitative and quantitative assessment done by Jim and Josh (and Michael Mah, a metrics consultant); to Peter's rationale for such a momentous change; to creating an implementation strategy and action plan; to the training and coaching of 40 project teams, to the results achieved by Kronos in the first year of this transition. There will be ample time during this tutorial for interaction with participants to discuss how this experience, and others, could help your organization's transition to agile.	Tutorials	Tutorial	2006
12755	A Case Study on the Impact of Customer Communication on Defects in Agile Software Development	Effective communication and feedback are crucial in agile development. This has been emphasized especially in Extreme Programming (XP) which embraces both communication and feedback as interdependent process values which are essential for the project to achieve successful results. Our research presents empirical results from three different case studies with partially onsite customer and one with onsite customer. The case studies applied face-to-face communication to different extent and used email and telephone to manage customer-developer communication inside the development iterations. Our results indicate that increased reliance on less informative iteration time communication channels resulted in higher defect rates. These results suggest that the selection of communication methods to be used inside development iterations must be paid significant attention by agile organizations working with partially available customers. This paper also proposes some guidelines for selecting proper communication methods.	Research	Research Paper	2006
12756	The Role of Story Cards and the Wall in XP teams: a distributed cognition perspective	Much of the knowledge used within an XP team is tacit, i.e. it is hidden and intangible. Two tangible artefacts that carry information about the team's work are the index cards which capture stories and tasks to be implemented and the wall where they are displayed (which we refer to as the "Wall"). It is widely acknowledged that these are key elements supporting the work of the XP team, but no systematic investigation of their role has been reported to date. In this paper, we focus on the use of these artefacts within one XP team. We use distributed cognition, a framework for analysing collaborative work, to explicate the information flows in, around and within the team that are supported by the index cards and the Wall. We then interrogate the models produced using this analysis to answer "what if" questions.	Research	Research Paper	2006
12757			Main	Talk	2006
12758	Context Driven Agile Leadership	Agile approaches have become increasingly popular among teams looking to shed unnecessary process overhead in order to maximize the velocity of business value delivery. However, it is a challenge to understand just what is "sufficient" and what is an appropriate leadership style for any given project. One thing that has become quite apparent is that what is "barely sufficient" for one project may be insufficient for another, or overhead for yet another. When looking at our project history, we observed two primary attributes that influenced the type of leadership process used: complexity and uncertainty. Starting from a core set of common practices, the assessment of these complexity and uncertainty attributes enable us to craft a process generally suitable for a given project. One benefit of this approach has been identifying these project drivers and providing earlier guidance to project teams so that they can start with a process that is close to appropriate.	Tutorials	Tutorial	2006
12759	Introducing agile practices to your team or organization	Those who attend conferences or read articles see new ideas they want to take back to their organizations, but then struggle to make it happen. This struggle has become especially apparent of late as enthusiastic agile development proponents want to encourage their teams to apply these new approaches. The intent of this tutorial is to provide successful change management strategies to help these agile proponents.	Tutorials	Tutorial	2006
12760	Delivering Flawless Tested Software Every Iteration	Are you delivering software iteratively, but still struggling with bugs and poor customer satisfaction? Many teams leap feet-first into agile development only to discover that it's not always easy to write good software without detailed requirements. Sometimes it seems like testers are running an iteration behind the rest of the team and are constantly playing catch-up. This tutorial introduces the agile acceptance testing process. Automating acceptance testing is a big part of the picture, but even more important is agreeing as a team on key attributes of the system being built. This tutorial heavily emphasizes building consensus so that by the end of the Iteration Planning Meeting, the whole team agrees on exactly what to build. We'll discuss what makes a good user story, how and when to elaborate your stories with detailed acceptance criteria, and how to use Fit/FitNesse to turn those criteria into automated acceptance tests. We'll work through exercises and specific examples, so that participants leave knowing what they need to get started with agile acceptance testing.	Tutorials	Tutorial	2006
12761	Systems Thinking - drawing causal loop diagrams to effect change	This session introduces systems thinking using causal loop diagrams (a.k.a. diagrams of effects). Systems thinking is a methodology independent tool for understanding team and project dynamics and for finding effective interventions. This tutorial is for software developers, project leaders, coaches, customers, anybody involved in (IT) projects. Participants are not required to have any knowledge or experience in systems thinking. In our work as software development coaches, we have noticed that changing your software development method changes your organisation. We have run into questions like: why can't the customer keep up with the programming team and what can be done about it? How can we get a team to start unit testing? Is the lack of unit testing really the team's biggest problem? We have found that systems thinking is a simple but powerful technique for finding answers to these questions. Participants will learn to apply the Diagram of Effects (or Causal Loop Diagrams) technique, to different situations in projects, teams, and organisations; they also have an opportunity to share experiences in a structured way. After this workshop, participants can apply systems thinking to effectively influence the dynamics of their software development projects, teams, and organisations.	Tutorials	Tutorial	2006
12762	Agile Metrics and Diagnostics: Knowing When and What to Measure	Little has been written to date by the Agile community on metrics. Or, more precisely: few hard-and-fast Agile Metrics have emerged as effective measures. This might seem surprising, but perhaps the temporary and contextual nature of agile metrics explains the emergence of a more heuristic approach. Teams are creating metrics on demand, in support of their goals, applying their understanding of Agile principles and values to create useful measurement tools on the fly. We propose to call these local, contextual measurement tools diagnostics to distinguish them from more long-term metrics used to measure contribution to overall organizational goals. Since Team metrics or diagnostics are highly contextual, they need to be evaluated carefully to know if they are useful. We will present both long term metrics used by the business, and potential diagnostic measures used by the team. We will present our tool for evaluating diagnostic metrics for Agile teams, and invite participants to bring their own team metrics to evaluate with this tool. Together we will discuss both the agile diagnostics workshopped and the value of the tool itself.	Discovery Sessions	Workshop	2006
12763	Test Driven Development in C++ Hands-on Tutorial	Test Driven Development is a state of the art software development practice. When using TDD, programmers get instant feedback that the code they are writing does what they intend. An open source test harness is used to collect, organize and automate unit tests for your C++ code. This class shows the motivations behind TDD, but does not stop there. Attendees get first hand experience at TDD. You will write code that has extremely high test coverage. You will see how tests can prevent many bugs. You will see how TDD can help programmers prevent memory leaks.	Tutorials	Tutorial	2006
12764	Storytelling with FIT	This workshop is about how to write acceptance tests that are meaningful, focused, and understandable. On an Agile project, the acceptance test suite is the medium that bridges between the technical and business members of the team to ensure that the right functionality is delivered. The tests must be clear and understandable by both sides, which implies building a common language within the team. This was the original motivation of the FIT framework, and our workshop focuses on the communication aspects of writing acceptance tests. We will not be implementing or running any code during this session. The tutorial is designed to: * motivate readable acceptance tests (as specifications) * show the importance of declarative style testing vs. procedural testing * provide experience in growing an acceptance test language * pass on our experience of using FIT for acceptance testing on multiple projects.	Tutorials	Tutorial	2006
12765	Running an Agile User Group	The local Agile User Groups around the world are playing a very important role in the Agile movement. They have been an important source of knowledge about Agile Software Development - and they have inspired a large number of individuals and organizations to lighten up their heavy processes. But how do you start a User Group?. Where do you find the members? How do you get people to sign up? Where do you meet - and how often? How do you run the meetings? Do you charge a fee - or is it for free? And last but not least - how do you find the time and energy to keep running your User Group. In this highly interactive workshop, we will share our experiences and ideas about starting and running an Agile User Group.	Discovery Sessions	Workshop	2006
12766	Tool Words, Weapon Words	Like many other fields, software development uses jargon. IT is filled with terms borrowed from industry, architecture, and other work cultures. Such words are not just tools that help us describe what we do. Words also shape the context in which we work, in ways that serve definite (but unmentioned) agendas. In this session, we present models and tools to detect the use of such weapon words. We show how to deconstruct their meaning, understand the agendas they promote, and disarm them through their use in new, provocative ways.	Discovery Sessions	Workshop	2006
12767	The Planning Game	This course will use the release planning game to explore various project planning strategies. The game is played in small groups of approximately four players. Both programmers and customers may play, in any combination. In each cycle of the game, the players plan and "implement" a product. Each time through, they learn some new lessons enabling them to plan and implement better next time. Scoring is based upon each team's total return on investment.	Tutorials	Tutorial	2006
12768	The Agile Marathon	Many companies today are facing the challenges of moving their project teams to use agile development methods. Much of the discussion these days centers on dealing with the issues and hurdles that must be cleared for teams to achieve success on their agile projects. This paper is about our experience in what we're calling the Agile Marathon. The long-term view of how to maintain success after your team begins to see that they have achieved the benefits of using agile techniques. Our focus and experience is in commercial product software development. We hope to shed some light on the challenge of keeping agile success going over a long period of time. We have faced the challenge to keep our teams motivated and focused on releases lasting over 18 months; the same product, same people, just new releases. Once the team recognizes its success, a new phase begins where it becomes difficult to hold everything in place knowing you've got a long road to travel.	Experience Reports	Experience Report	2006
12769	Formalizing Agility, Part 2: How an Agile Organization Embraced the CMMI	Most large IT organizations need the best of both worlds - working software that supports ever-changing business needs, and a process for delivering software that is predictable, trainable, and auditable. Organizations with agile software teams often receive timely, cost-effective solutions of sufficient quality. Organizations with formal processes often benefit from industry-recognized certifications and robust process improvement mechanisms. Rarely does a single large organization achieve both. DTE Energy has such a combination; its lightweight yet CMMI-compatible methodology is now used across its 600+ person IT organization to deliver and support working software. Its small teams embrace core agile principles as they provide "just enough" solutions that satisfy maturing business needs. Yet they passed two formal SCAMPI appraisals toward CMMI Level III accreditation, scheduled for mid-2006. This report continues last year's popular experience report on the journey of DTE Energy's agile IT organization toward CMMI accreditation. This report briefly recaps their seven years of agile experience, presents governance mechanisms and change management techniques, and highlights their three-release, nine-month plan for CMMI Level III accreditation. Finally, this report offers suggestions on embracing a formal process framework that are applicable to any agile organization.	Experience Reports	Experience Report	2006
12770	A Tale of Two Projects	Why do some agile initiatives meet with resistance while others march on to success? How do agile techniques gain a foothold in traditional corporate environments? While the answers to these questions are undoubtedly complex and varied, we had a unique opportunity to experience and analyze the adoption of agile practices on two projects at a major car rental company which, although sharing many similarities including staff, professed commitment to agile process, architecture, and programming environment, experienced two drastically different outcomes. The first became bogged down and eventually went to production late, over budget, with fewer features than expected, and only reluctantly embraced by its user community. The second reached its first production milestone after only 12 weeks, was enthusiastically embraced by its users, and went on to become an unqualified success and a model for other software development projects at this company. In this presentation we will analyze the similarities between these two projects, highlight the differences, and draw conclusions about the factors critical to the success of agile projects in large corporate environments.	Experience Reports	Experience Report	2006
12771	Extreme Construction	Get a jumpstart on the basics of Agile Development and Extreme Programming (XP) in a day, without programming. This workshop will use non-programming construction techniques to teach most of the XP practices in a fun and interesting format. Build a non-software artifact using practices of XP. See how the synergy of the XP practices brings benefits to you and your organization. Many people have an interest in agile methodologies, and XP in particular. Managers need a way to evaluate XP from an institutional benefits perspective and knowing how it actually works can be a help in this. Programmers need to learn the practices before they can begin to effectively use them. They also need a way to see how their current development habits may be in conflict with XP practices. Educators and coaches want effective ways to introduce XP and build teams. This workshop can provide required background for all of these needs in a fun and informative way. This workshop has been given many times in industrial, conference, and academic settings. It has proven to be an effective way to train individuals and teams, and also to help a new agile team coalesce into an effective working unit.	Hands-on	Workshop	2006
12772	Homer’s Odyssey or My Year of Living Dangerously (Monsters, Magicians, and Domestic Enemies) in Agile Software Projects	In 850 B.C. the literary genius, Homer, captured the adventures of the well-meaning Greek, Odysseus, a young, who fought magicians, monsters, and even domestic enemies in order to return successfully to his home. In 1922, James Joyce, recounted the tale of Buck Mulligan echoing those Odyssean trials in his Dublin home. In 2000 A.D., the Coen brothers out of Minneapolis Minnesota, applied this same classical framework to their wacky film "Oh Brother, Where Art Thou?" In 2005 A.D., an agile mentor (me) out of Boulder Colorado dealt with her own cadre of magicians, monsters, and domestic enemies in order to return successfully to her home. In this offbeat presentation, I will compare the impediments and obstacles encountered by an agile mentor (me) with those detailed in Homer's classical reference. Through the presentation and dialogue, we will discover who plays which classical roles in an organization's effort to adopt agile practices: Cyclops, the Sirens, Poseidon, Circe, Cicones, the Lotus-Eaters, and even the good-and-faithful dog Argus. Each has its modern-day equivalents in agile adoption. We'll confront these pesky impediments and obstacles in agile projects along with advice about: how to recognize them; how to navigate around or through them; and how to know what actions work best in defeating them.	Tutorials	Tutorial	2006
12773	Extreme Teams	This tutorial will examine some of the ways size, feedback, and communication effect how people work together in teams as well as how teams work with each other. The tutorial format consists of gaming, lecture, and discussion. Real life examples of various team collaboration strategies will be presented with guidelines for building communities of practice.	Tutorials	Tutorial	2006
12774	The Pairing Session as the Atomic Unit of Work	We have an Extreme Programming team at a small company dedicated to the Agile approach. Our team of 7 developers decided to use the pairing session as the fundamental unit of work for all organizing, planning, estimating, tracking, and of course, pair programming. It's been a great way to structure the day, provide rhythm and facilitate partner swaps. Estimating and tracking in pairing sessions provides us real feedback for improving estimates, resulting in highly effective planning and an extremely stable velocity. We have been working in this way for about a year with wonderful results.	Experience Reports	Experience Report	2006
12775	Multiple Simultaneous Projects With One XP Team	Why take on multiple simultaneous projects with one XP team? Many people feel that too much time would be wasted task-switching, that the team would suffer too much from fractured thinking, or that a sense of team would be lost. For our group, multiple simultaneous projects is a reality that we needed to face. This presentation will describe some of the reasons why we feel working on only one project wasn't an option for our team, some of the problems we struggled with initially, and what approaches we've developed over the past year to deal with this situation.	Experience Reports	Experience Report	2006
12776	Value-Based Extreme Programming	Agile methods, such as Scrum and XP, are not known for carefully tracking to time and cost estimates. On most Agile projects, schedule slips are expected and cost increases are predictable. Every slip and increase has a large impact on total value delivered and we need to start acknowledging this fact. Furthermore, project overruns cause other high-value projects to be delayed or canceled, creating a negative value impact. What is missing in these methods is the concept of financial responsibility. Agile needs a better way to measure total value delivered and Agile methods should be more focused on on-time delivery. To ensure that the development process only generates software that provides the highest value for our customers, we need to schedule, prioritize, and deliver the highest value features without any waste. A research study by Jim Johnson at XP2002 showed that 64% of the features in a typical system are rarely or never used. Lowering the percentage of unused features would hugely boost the value generated.	Experience Reports	Experience Report	2006
12777			Main	Talk	2006
12778	A Canary in a Coal Mine	Why has top management started to really, really care about Scrum. Scrum	Main	Talk	2006
12779	Agile Estimating and Planning	is a leading indicator about the overall health of the enterprise, its investment of funds, and - most importantly - its ability to effectively compete. Scrum provokes the most fundamental changes within an organization, changes that reverse over thirty years of waterfall thinking. This is extremely hard for customers and product management to understand and accept, much less for engineering to facilitate. However, when an enterprise's ability to survive is at stake, top management makes the change happen. This head talk will discuss this topic.	Tutorials	Tutorial	2006
12780	Example-Based Specifications	Some tests are thinly-disguised walkthroughs of a user interface. Other tests are so voluminous that you suspect that even their author didn't read them. But some tests seem designed to facilitate conversations about the key objects and processes in a domain. How can we foster the latter style, to create specifications useful to both machines and people-including end users, product owners, testers, and programmers?	Discovery Sessions	Workshop	2006
12781	The Truth about Programmers and Testers	Most of today's process definitions mandate separating programmers from testers, not only to different teams, but often to different physical locations. This separation leads to testers and programmers treating one another as adversaries, rather than as members of the same project community. When members of the project community see each other as adversaries, the project can only succeed in spite of, rather than because of, their efforts. Project success, then, depends more on luck than anything else unless testers and programmers work together. In this workshop, participants share experiences and discuss how to create a harmonious relationship among testers and programmers, as well as trace project problems back to a lack of cooperation between these groups. We hope to gather ideas for how to detect and fix problems in communication and cooperation among programmers and testers.	Discovery Sessions	Workshop	2006
12782	DSDM - What is it?	Dynamic Systems Development Method (DSDM) - What is it and why is it different from other Agile Approaches- what are its key features? The Tutorial will summarise the essential elements of DSDM. It will explore the DSDM principles and approach and give the audience practical experience of timeboxing, prioritization, user involvement and team empowerment.	Tutorials	Tutorial	2006
12783	XUnit Test Patterns and Smells; Improving Test Code and Testability Through Refactoring.	XUnit is the generic name name given to the family of tools/frameworks used by developers when developing automated unit tests. The community has now had enough experience with using XUnit to start cataloging "best practices" and "not so best practices" as patterns and smells. This tutorial introduces a number of these "test smells", describes their root causes, and suggests possible solutions expressed in the form of a pattern.	Tutorials	Tutorial	2006
12784	Agile Requirements Workshops: Essentials for Planning, Design, and Facilitation	This experience-based tutorial will share effective, time-tested practices for planning, designing, and facilitating agile requirements workshops. Requirements are the foundation of all the software work that follows. It is both an art and a science to arrive at a shared understanding of those requirements efficiently and with "just enough" precision to begin prototyping or developing. Well-designed and well-run requirements workshops are one of the best ways to overcome the myriad of problems that arise from inadequate customer involvement and ambiguous requirements. The objective of this tutorial is to give attendees a toolkit of practices, reinforced with brief practice sessions and group discussions, that they can apply immediately to improve the quality of their project requirements efforts without lengthening the development effort.	Tutorials	Tutorial	2006
12785	Coaching 101: A Role-Playing Session	The role of coach is an important one on a software development team that is trying to adopt or improve their use of agile practices. The coach's job is to teach new skills, offer encouragement, and provide feedback to team members as they experiment with new ways of working. Being an effective coach is difficult. Whether the coach is an external consultant, a regular employee, or just a team member acting the part, they often finds themselves in the position of trying to influence change and behavior without having the specific authority to do so. The successful coach is able to gain buy-in and to inspire others to follow their example. This discovery session allows participants to practice the "softer skills" that are essential in being an effective coach. It consists of a series of role-playing exercises in which participants struggle to decide what coaching interventions (if any) would be most effective in a variety of situations. In a safe environment, participants can give and receive feedback on their coaching style. The role plays are based on specific scenarios encountered by our Digital Focus coaches as they have worked with new teams adopting agile development.	Discovery Sessions	Workshop	2006
12786	Simple Tools for Communication - A Balancing Act	The Agile Manifesto states: "we have come to value individuals and interactions over processes and tools". Tools and techniques are not enough for running your projects, you need "people tools" as well. We all know that for instance developers and customers fighting about who did what wrong doesn't make our projects finish early, yet it is hard to stop doing it. Especially when the pressure is on. This session provides tools and processes for individuals and interactions, to help you take a step towards peaceful, effective projects. This session is meant for anyone who wants to become more effective through: - awareness of how our way of communicating influences others and vice versa - consciousness of the change processes in self, others and the context so that we can surf the waves of change, rather than drowning in the surf of the waves This tutorial is based on the work of the family therapist Virginia Satir.	Tutorials	Tutorial	2006
12787	Distributed Agile Game	The Distributed Agile Game is meant to be played by people who are interested in agile tools and practices as they are applied to a distributed team environment. The participants may have prior experience in distributed development, but this is not required. In fact, no software development experience is required. The game will be played by several small teams. Each team consists of analysts, developers, a customer, and a project manager. The team is subdivided into two parts; an onsite team, with developers, a customer, and a project manager, and a remote team with only analysts and developers. The remote team must communicate with the customer and onsite team via tin cans (no joke.) The game will start out with the most basic of communication and no toolset progressing through several iterations until finally reaching a full suite of tools and processes for improved communication and team "gel."	Discovery Sessions	Workshop	2006
12788	What Lessons Can the Agile Community Learn from a Maverick Fighter Pilot?	For the agile software development community, agility is defined by the values expressed in the agile manifesto. But in concrete terms, what does it mean for a software project to be agile? US Air Force Colonel John Boyd defined agility as the ability to operate the Observation-Orientation-Decision-Action (OODA) loop faster than an adversary. Agility therefore depends on the tempo at which we can exploit the OODA loop, and it is culture, not methodologies or tools that determine our OODA loop speed. This definition of agility has implications for the software development community. This short paper introduces Colonel Boyd, the OODA loop, the factors which influence OODA loop speed and the possible research opportunities into software engineering culture we are considering.	Research	Research Paper	2006
12789	Reflections on Reflection in Agile Software Development	This paper analyzes the reflections of an agile team, developing a large-scale project in an industry setting. The team uses an Iteration Summary Meeting practice, which includes four elements: The customer's summary, a formal presentation of the system, review of metrics and a reflection. The technique for the entire meeting and for the reflection element in particular is described, and empirical evidence is given to show that it is assessed as highly effective, achieving its intended goals, and increasing team satisfaction. Further, the proposed practice supports tracking of ongoing decisions. It is shown to be valuable to stabilizing a new project as well as a continuous improvement forum for a stable one. It also incurs a lower overhead than existing alternative reflection practices.	Research	Research Paper	2006
12790	Critical Personality Traits in Successful Pair Programming	Pair Programming (PP) is a common practice in Extreme programming, in which two programmers work together using a single computer. The close interaction required by PP makes it difficult to apply. The hypothesis is that certain personality traits are crucial for the success of PP, and PP partners should be chosen based on these personality traits. In this research, we first survey the programmers in industry to identify the perceived important personality traits for PP, and then conduct experiments to determine the significance of these personality traits in successful PP.	Research	Research Paper	2006
12791	The Principles of Agile Design	It has been said that Agile Software Development improves the design of software. What are the principles of that improvement? How do we know that certain refactorings should be undertaken? How do we know when certain patterns should be used. In this set of tutorials we will discuss the principles of Object Oriented Agile Development. These principles guide software developers in the management of module and component dependencies so that they can create systems that are highly flexible, expressive, maintainable, and decoupled.	Tutorials	Tutorial	2006
12792	Coaching Software Development Teams	When we first get into software development, we concentrate on technical skill. We learn how to program, how to debug, and how to design effectively. If we are lucky, we work in an environment where most of that work isn't wasted effort. Most of us gradually realize that we are sensitively dependent on our team. The way that we interact with our coworkers, and they interact with each other, can make work productive and fun, or wasteful and hellish. In this tutorial, I'll outline techniques you can use to help software development teams overcome obstacles, gain confidence, and work well with their surrounding organization. You'll learn when to use them, and more importantly, when not to as you work with your coworkers to make your team more fun, effective, and humane.	Tutorials	Tutorial	2006
12793	The Deployment Production Line	Testing and deployment can be a complex and time consuming process in complex environments such as application servers, messaging infrastructure and interfaces to external systems. We have seen deployments take several days, even in cases where teams have used automated builds to ensure their code is fully tested. In this paper we describe principles and practices which allow new environments to be created, configured and deployed to at the click of a button. We show how to fully automate your testing and deployment process using a multi-stage automated workflow. Using this "deployment production line", it is possible to deploy fully tested code into production environments quickly and with full confidence that you can fall back to a previous version easily should a problem occur.	Research	Research Paper	2006
12794	The Cost of Code Quality	The paper investigates the limitations of different agile coding methodologies and finds the boundaries within which those methodologies are effective. Using data from 80 development projects, the paper attempt to answer the question: How much effort should be invested into code quality? It is shown that a "quick and dirty" approach is actually preferable in some situations. Requirements volatility, expected breadth of usage, customers' defect tolerance, cost of defect fixing and system lifespan are suggested as the main factors determining how much effort to spend on improving code. The conclusions are used to demonstrate situations where XP coding practices are inefficient and to find boundaries within which simpler, less expensive methods give better results.	Research	Research Paper	2006
12795	Appropriate Agile Measurement: Using Metrics and Diagnostics to Deliver Business Value	Agile Software Development continually measures both our product and the process used to create it, to allow improvement. With increased popularity, more risk-averse groups are being drawn to Agile, bringing with them modes of evaluation incompatible with Agile values and principles. These outmoded metrics drive dysfunctional behaviors which threaten the integrity of an emerging Agile culture. This paper collects some of the current thinking on appropriate Agile metrics, and proposes simple tools which organizations or teams may use to develop more congruent ways to measure Agile work.	Research	Research Paper	2006
12796			Main	Talk	2006
12797	by TBD	In order for a business to respond to rapid changes in its competitive environment, application development must be able to provide rapid and sometimes daily turnaround on changes, enhancements, and new functions. The agility the business requires from application development organizations is not exactly the same capability as described in most books on agile methods.  This talk will review the demands application developers must satisfy to support agile businesses.  It will compare these demands to the current practices and principles of agile methods to suggest where they are aligned and where they may conflict.  Some problems in business process management will be discussed in relation to whether they are helped or hindered by agile methods, and some new perspectives on agility will emerge.	Main	Talk	2006
12798	From Concept to Cash: Managing the Pipeline	Deciding what collection of development opportunities will be funded is one of the most challenging problems that development managers face. Not only are these decisions are crucial for the long term health of the organization, they have a huge impact on the ability of development teams to adopt lean principles and agile practices. This tutorial will look first of all at innovation: discovering and nurturing brilliant ideas that delight customers. Then it will consider how to keep the pipeline flowing with new applications and features without exceeding the capacity of the development teams to deliver.	Tutorials	Tutorial	2006
12799	Project Status: Writing on the Walls	How is your project doing ? How long does it take to find out what's going on? Where is the essential information? Is it hidden, squirreled away inside thousand-line code files, spreadsheets and Word documents ? Or is it "in your face", shown where you can't help but see it every day ? A successful project isn't successful because the team makes no mistakes, or suffers no setbacks. Whether your project sinks or swims is determined not by circumstance but by the speed and quality of your team's response. This tutorial presents simple techniques to make project status visible early and continuously, so a team can respond effectively. The techniques can be implemented with simple office tools: flipcharts, markers and yellow stickies.	Tutorials	Tutorial	2006
12800	Agile Factors	When a team sets out to apply agile software development on a project, there are a bunch of parameters and variables that need to be set. For example, how long will their development cycles be, when pair programming makes sense, who maintains tracking information, etc. This workshop aims to provide a guide to teams on topics that they will need to develop working agreements on and help team get clear about how they want to apply agile techniques.	Discovery Sessions	Workshop	2006
12801	Dispersed Agile Development	Until very recently the only way of learning how best to operate a dispersed team was to try it. This tutorial provides a shortcut: the presenter has been part of several dispersed project teams, and has learnt the hard way what works and what doesn't. He has also benefited from extensive communication with others who have gained similar experience. The tutorial explains why dispersed agile development might be attractive and appropriate, how best to organize a dispersed team, what tools to use, and how agile practices fit with dispersion (or not).	Tutorials	Tutorial	2006
12802	How BMC is Scaling Agile Development	Title: Successfully Scaling Agile: Tales from the Trenches at BMC Software Sure, agile development works for small teams. But what happens when you use agile development for a project that involves 200+ developers and testers spread from India to Houston to Israel? In less than a year, BMC Software's Infrastructure Management division transformed their development organization using agile development practices to deliver a major replacement product to the market in less time with and higher quality than previously possible. Along the way, we encountered significant challenges - from skepticism on the agile approach to coordinating distributed teams to less-than-optimal organizational structures. We learned how to expand agile beyond the development team to advance the relationship between product management; and how to meld the existing engineering practices and business processes we still valued with changes required by our new agile world. Most importantly, we got our first taste of how agile can enhance the value we deliver to our customers. Using the format of a release retrospective, we will share our firsthand experience and hard-learned lessons on how to successfully scale agile to transform a large and distributed development organization, and how we're expanding these successes to create a highly responsive agile enterprise.	Experience Reports	Experience Report	2006
12803	Lessons Learned from an eXtremely Distributed Project	Distributed projects are fraught with problems of visibility, communication and tacit knowledge flow. These combine to reduce productivity and increase project risks and setup costs. The potential savings of distributed development can be all but wiped out by these problems. Before embarking on a distributed project we should evaluate the potential project risks against the financial benefits and determine the best approach to establishing the distributed teams and processes for supporting delivery. On a recent 30 person, multi-site, urgent project we saw a number of serious problems arising from the distribution of our team. The most serious problems we saw were with tacit knowledge, communication and visibility. To combat these we tried a number of techniques including stand-ups, story boards, video documentation, remote desktops, instant messaging, voice-over-ip and continuous integration. We will describe each problem area we faced, and the lessons learned applying each technique to the problem. Conclusion: Despite using these techniques, the impacts of a distributed team out-weighed the financial benefits. Looking back, we believe that this project was not suitable for distribution, and would generalise that many distributed projects would be in a similar situation.	Experience Reports	Experience Report	2006
12804	Agile Testing of Web Applications using WebTest	WebTest is an open source acceptance testing tool which extends upon the Apache Ant declarative build tool to allow declarative specification of tests using an XML syntax. No extensive programming is required to make use of WebTest however programming skills can be used to customise and extend the tool. In addition scripting languages such as Ruby, Python or Groovy can be used within your tests. WebTest has a main focus on testing web applications but can also test PDFs, Excel Spreadsheets, XML Web Services, files and Email delivery systems.	Tutorials	Tutorial	2006
12805	Enhancing Diversity in Agile Software Development Environments	Diversity can be expressed in different ways, such as nationalities, worldviews, gender and minorities, cultures, skills and life styles. In general, studies tell us that no matter how diversity is expressed, it benefits with societies that foster it. In this panel we highlight the notion of diversity in agile software development environments. The panelists will present their perspective at the topic, each one based on his/her own professional experience (academia, industry and consultation), specifying how diversity can be expressed and fostered.	Discovery Sessions	Workshop	2006
12806	XP Geography: A Guide to Mapping Your First Steps	We will start by discussing why and when to use XP and how to jump into the pool and get started. Next we will explore the primary practices of XP in detail using mind mapping exercises. You will examine your needs and find practices to address them. We will discuss the change process, how to reach agreement on goals and principles, how to implement new practices and how to sustain them. You will make a plan to share with your team and set up incentives for accountability. This tutorial will be interactive and involve many colored felt pens.	Tutorials	Tutorial	2006
12807	Agile User Interface Development	Graphical User Interfaces (GUIs) have become an almost universal way of interacting with computer programs. GUIs provide a front-end to the underlying application code that makes software easy to use. Since most of the software development is GUI-centric, testing user interfaces is vital to ensure the system's safety, robustness and usability. Despite the fact that GUI testing is an essential part of software development, most developers don't do test-driven development (TDD) of the user interface because it is complex and error-prone. This hands-on tutorial presents techniques to develop user interfaces using TDD, as well as testing existing user interfaces. The audience will learn how to test Swing GUIs using Abbot and Costello and web user interfaces using Selenium. While the principles for testing rich GUIs are focused on Java, the techniques for testing web user interfaces are applicable to many technologies such as static HTML pages or dynamically generated web user interfaces created in Java, .Net, PHP, etc.	Tutorials	Tutorial	2006
12808	Engaging the Customer: Empowering and Engaging customers and end-users in Agile projects	Agile approaches have long touted frequent "customer" involvement and feedback. But, in fact many organizations commonly use the term "Agile customer" to refer to the individual or team of people that guide developers by writing user stories, making decisions about development priority, and describing acceptance criteria. The demands of the Agile customer role don't always match up with the skills and availability of actual users of the software. Consequently the role is often filled by someone standing in for the user. On many Agile projects it may be difficult to find and successfully engage a system's actual end-users. But without them, we lose much of the benefit we'd gain from their frequent input and feedback. This discovery session will explore the involvement, successful and otherwise, of actual customers and users in the day-to-day software development process. Participants will learn about: * The range of approaches that can be used to involve customers and users; * Pitfalls common to those approaches; * Possible strategies to avoid those pitfalls. The discovery session will be hands-on, with participants collaborating together in small groups, then sharing and discussing results with all participants.	Discovery Sessions	Workshop	2006
12809	Do You Get What You Measure?	In this workshop, we will work with the audience to explore the use of metrics to influence the evolution of development teams in a genuinely agile approach to Software Process Improvement. We will experiment with a selection of established performance and quality metrics and test their design to see what kind of behaviours they might encourage when they're applied. We will also explore "gaming" of metrics by development teams to hit performance targets without achieving the desired effects, and try to propose changes to the design of each metric which might make it more robust.	Discovery Sessions	Workshop	2006
12810	Agile Estimation Techniques	Many software teams face planning and estimation with a sense of fear and loathing. Their feelings are hardly surprising considering that they are required to generate numbers based on relatively little information and are then held accountable to the accuracy of these guesses. However, it need not be this way. This tutorial presents some concrete, Agile tools and techniques for helping teams improve the accuracy of their estimates, while simultaneously making estimation faster and more fun. The tutorial is designed to be interactive, giving attendees the opportunity to share their experiences and participate in hands-on activities.	Tutorials	Tutorial	2006
12811	Integrating Agile with the PMO	Agile Project Management techniques and tools are often at odds with those specified by the traditional Project Management Office (PMO). PMO's frequently prescribe, and check for adherence to traditional waterfall techniques; yet when projects have high risk and/or high exploration characteristics they better suit an agile approach. Both traditional and agile techniques strive for successful projects, but their differences in values, techniques and terminology can lead to conflict and confusion. The purpose of this Workshop is to identify and record practical processes, tools & techniques for integrating Agile project management into the PMO environment. Through the collection of existing successful approaches, capture of group contributions and open space problem solving a comprehensive arsenal of PMO alignment/transformation tools will be established.	Discovery Sessions	Workshop	2006
12812	Ssh, we are adding a process...	Google is very successful in maintaining its startup culture which is very open and engineering-centric. In terms of the Agile Manifesto Google is almost entirely on the "left hand side" (with the exception of "Working Software"). Project teams don't have a project manager, but organize themselves and communicate directly with all stakeholders. Most feature decisions are made by the engineering teams themselves. As well as this works for products like search, gmail - it creates issues for the AdWords frontend (AWFE) application. AWFE is much more product management and release date driven then other Google applications. This presentation discusses how we carefully introduced agile practices to coordinate the AWFE development teams and made the process more efficient and predictable.	Experience Reports	Experience Report	2006
12813	Self-Similarity Applied: Agile and Britain's Largest Telecoms Company (Global Fortune 150)	What happens when the United Kingdom's largest telecoms company decides to go Agile? In this presentation, we will look at BT's journey to reform its IT capabilities. We'll look at the significant challenges or as we like to describe them opportunities that we encountered and the journey we needed to take, and are still taking, to resolve them. Some of the journeys we'll discuss include People Issues (transforming an overall organisation of 100,000 people with 8,000 in IT alone, low morale due to outsourcing and previous change initiatives, and strained relationships between IT and business); dealing with strict job roles in a large corporation; tackling project issues from the size of a team (8 to 800 people) through to the pragmatic application of Agile techniques in mature (not green-field) projects; solving the lack of Agile experience in a large organisation; constructively dealing with immensely distributed teams and, finally, addressing the need to understand cultural issues involved in outsourcing.	Experience Reports	Experience Report	2006
12814	Something to Believe In	In 2005, we initiated the Agile Workstream to enable an agile development process in one of the major divisions of our company. Our strategy was to prove out the process with an initial project and extend it other projects and teams around the group. At the time of this writing, development is still underway, but we are nearing the launch of this new product and the business remains enthusiastic about the agile process. The journey has not been easy, however. We had to learn how to integrate other disciplines in the process, work with teams that are not agile, learn hard lessons about keeping release plans up to date, and educate senior management about the process while meeting their expectations about budget and delivery - all of this under an intense spotlight in a very large organization. We still have a lot to learn and do, but what we discovered was that Agile became a beacon of light, a rallying call - it gave the group something real to believe in. Emboldened by the promise of what Agile could do, the organization began to change at multiple levels. We are now in the process of leveraging the results of the first project for other projects, learning new lessons about scaling up and institutionalizing the process.	Experience Reports	Experience Report	2006
12815	Coders' Dojo	If I want to learn judo, I will enroll at the nearest dojo, and show up for one hour every week for the next two years, at the end of which I may opt for a more assiduous course of study to progress in the art. Years of further training might be rewarded with a black belt, which is merely the sign of ascent to a different stage of learning. No master ever stops learning. If I want to learn object programming... my employer will pack me off to a three-day Java course picked from this year's issue of a big training firm's catalog. Nuts to that -- acquiring coding skills is not an "instant gratification" process.  The Coder's Dojo offers a way of teaching and learning programming in a more appropriate manner, respecting the depth and subtlety of the craft. A Dojo is a weekly meeting between programmers of varying skill levels. They come together as equals - in physical, not virtual space - around an ongoing series of coding challenges called "code kata". The first Dojo originated in Paris; others have started up in the US (Pittsburgh, PA), Finland, the UK... The intent of this workshop is to reproduce the mechanics of one Dojo session, to encourage participants to start their own !	Hands-on	Workshop	2006
12816	User Stories for Agile Requirements	The technique of expressing requirements as user stories is one of the most broadly applicable techniques introduced by the agile processes. User stories are an effective approach on all time constrained projects and are a great way to begin introducing a bit of agility to your projects. In this session, we will look at how to identify and write good user stories. The class will describe the six attributes that good stories should exhibit and present thirteen guidelines for writing better stories. We will explore how user role modeling can help when gathering a project's initial stories. Because requirements touch all job functions on a development project, this tutorial will be equally suited for analysts, customers, testers, programmers, managers, or anyone involved in a software development project.	Tutorials	Tutorial	2006
12817	Humans: Designed for Interaction (Dynamic Intelligence in Agile Communication)	Customer meetings, planning meetings, design meetings, pair programming... You've reduced a lot of that written electronic and paper correspondence with the intent of providing more "face time" with each other... but is the project team up to the challenge? Unfortunately, difficult personalities, hidden agendas, and lack of participation are getting in the way. Sound familiar? Software development is rife with miscommunication and misunderstood intentions leading misdirected solutions, wasted time and fruitless effort. In this session you will explore new, revolutionary methods being used by psychologists and educators to peer inside the minds of those with social deficits, autism, and asperger's syndrome (http://www.wired.com/wired/archive/9.12/aspergers_pr.html). With consistent application of six principles of Dynamic Intelligence (http://www.rdiconnect.com/RDI/DynamicIntelligence.asp), latent abilities can be drawn out of even the most reticent (or overly enthusiastic) communicators: - Emotional Referencing - Social Coordination - Declarative Language - Flexible thinking â€¢ Relational Information Processing - Foresight and Hindsight Together we will discover how to best employ these principles in the many face-to-face communication opportunities afforded by all agile methodologies, with a nod toward the XP values of "Communication", "Simplicity, "Feedback", "Courage", and most recently (and importantly), "Respect".	Discovery Sessions	Workshop	2006
12818	Cynefin - Making Sense of Agile	People don't make rational decisions - it's not the way the brain evolved. Instead they make first fit (not best fit) pattern matches with prior experience and then retrospectively justify them as "rational". This is no way to run a development effort. This fact means that you either have to convey a new message in such a way that it "resonates" with an existing prior pattern of success, or disrupt those patterns so that people see things from a different perspective, with a disposition to act. The Cynefin sense-making framework provides an unbiased, pre-hypothetical basis for analyzing situations, issues and problems, and serves as a basis for discovering novel, oftentimes optimal solutions to them. This tutorial will introduce parts of the Cynefin framework, drawing on a decade of theoretical research and practical experiments to work with the reality of human decision making, and will cover: * Complex systems approaches to the forced evolution of systems. * New approaches to project management based on the ideas of social complexity, which legitimize formal, rapid and agile design methods within boundaries. * Gaining senior management acceptance to radical ideas. * The application of the Cynefin framework for problem-solving in the Agile domain.	Tutorials	Tutorial	2006
12819	Agile Practices and challenges in the embedded world	Agile practices originated in companies and the minds of thought leaders that primarily engage in enterprise software development. Consequently, there is limited treatment or published material on how well agile methods map to companies that deliver embedded software. Of particular interest are companies that routinely develop hardware in parallel with software to run on that hardware. Companies like this tend to think their environments are distinctly different than pure software companies and thus can be skeptical of adopting agile practices for this reason. This session seeks to explore this topic in an informal way and will generate a prioritized list of issues that highlight the specific areas that make embedded software development unique and identify which agile practices are most important in this environment	Discovery Sessions	Workshop	2006
12820	What Are We Arguing About? A Framework for Defining Agile in our Organization	How do we implement Agile? Is Agile a good thing for my organization? What barriers will I have to overcome? All of these are important questions when deciding whether and how to apply Agile Software Development to an organization that is used to working in a different way. To enable a good discussion, the language of that discussion must be established. As Medtronic adopted Agile, we realized how important it was to put effort into the language. We established a framework for that language, organizing our thoughts into three areas: Principles, Practices, and Benefits. When talking with visionaries, evangelists, or Stage 4 learners, we speak in terms of Principles to understand WHY Agile is the way it is. With practitioners, pragmatists, or Stage 1 learners, we speak in terms of Practices to understand HOW to do Agile. With skeptics, we speak in terms of Benefits to determine whether Agile is a good thing for us. In most cases, an effective conversation needs to address all three perspectives. The framework and language help us determine whether issues are related simply to communication barriers, or are related to the decisions of whether and how to apply Agile to our world.	Experience Reports	Experience Report	2006
12821	Trouble in Paradise: The Open Source Project PyPy: EU-funding and Agile Practices	Can agile methods be employed in an Open Source project with a distributed/dispersed development style while also being funded by European Commission, following a fixed price contract model with structural requirements much more similar to plan-driven approaches? In this paper we will present the agile methods that made this hybrid structure not only possible but that formed the basis of a successful first year of the PyPy project. The PyPy project started as a grass root effort in the Python Community, building a highly flexible and fast Python implementation purely written in Python. After less than a year of work the community and the core developers started to work on a proposal for EU-funding (summer 2003). The partially funded EU-project started in December 2004 and have, in January 2006, successfully passed the EU review of the results of the first year. A consortium of seven companies and one university was created around and within the original community in order to fulfill the EU-contract.	Experience Reports	Experience Report	2006
12822	Introducing Lean Principles with Agile Practices at a Fortune 500 company	Why is the introduction of Agile software practices within a large corporation pose a difficult and challenging prospect? How can Lean principles mitigate and enhance your success? The intent of this report is to share the experience of implementing Agile at a Fortune 500 company and how the deliberate merging of Lean principles with Agile practices lead to a well-received pilot and launched successive roll-out efforts.	Experience Reports	Experience Report	2006
12823			Main	Talk	2006
12824	A History of Lean	Topic: This tutorial traces the history of Lean Thinking from 1800 to the present. It gives an historical perspective on the Toyota Production System and examines the thinking of its founders. The tutorial traces the route of lean thinking as it moved from manufacturing through operations and product development to software development. The principles of Lean Software Development are summarized in the light of this history. Benefits: Lean initiatives are spreading rapidly throughout the business community as executives look for competitive levers in an increasingly fast-paced business environment. Because lean thinking is popular with business managers and executives, it creates a framework for understanding agile software development that senior managers can relate to and support. This tutorial will take you down the historical trail of lean thinking and show how that trail inevitably leads to the best practices of agile software development.	Tutorials	Tutorial	2006
12825	Organizing People Patterns for Improvement	This workshop is designed to engage participants in understanding and applying pattern languages in organizational settings. Participants will classify organizational, fearless change, experiential learning, feedback, communication, and active learning pattern languages (as well as others suggested by the attendees) against an improvement model that allows the relationships among the patterns to emerge. The starting model is “Autochthony,” a developmental model that shows how cultural aspects (i.e., history, beliefs and intent) combine with organizational/structural aspects (i.e., definition, collaboration and management), and delivery/action-oriented aspects (i.e., process, roles and methods/tools) to define a holistic approach to group advancement. By using, customizing or replacing this model, we hope the workshop will show how these “people patterns” interrelate and support each other with the goal of helping people who design their own future to “learn how to learn” to create it. The model is generic enough to support a complete agile overhaul, introduction of a few new agile practices, or adoption of a specific management technique like Scrum that requires cultural support. The output of the workshop is intended to be a set of “pattern dialects” that address scenarios for improvement in particular environments suggested by the participants.	Discovery Sessions	Workshop	2006
12826	Scripting Web Tests	Abstract: This workshop is a hands-on introduction to automated testing using Ruby, Watir and a web-based application, all of which are open-source. It presumes no prior knowledge with these tools. It allows key issues related to automated acceptance testing to be raised in a natural environment. Please see detailed submission.	Tutorials	Tutorial	2006
12827	Crushing Fear under the Iron Heel of Action	Emotions can run high during a project; quite often these emotions are reflections of or related to fear. How much of what happens in your project is motivated by fear? Is your code full of type checks? Are there magical implementations that everyone knows are faster, even if we don't measure their performance? Is there code that no one dares to touch? Are there things you can't possibly tell the boss? Are there things that no one can say, or people that no one can work with? Do team members resort to sarcasm as opposed to honest and direct communication? Are project reports unclear or untrue? Is the real status hidden in a mountain of process-dictated forms, or buried in vague terminology of your own invention? We've been there, and done that, and we'll talk with you about it. It'll be interesting, it'll be entertaining, it'll be worth your time. In this tutorial we will discuss how to recognize when we are acting out of fear, and what to do about it. We will explore how fear impacts our projects and what actions we can take to crush it.	Discovery Sessions	Workshop	2006
12828	Test-Driven J2EE	Experience Test-Driven Development by building J2EE components! Many students of Test-Driven Development are introduced to the subject through simple problems, such as the classic "Money" example from Kent Beck's Test-Driven Development: By Example. Although some people enjoy exploring new topics by tackling simple problems, there are those who would rather dive into the deep end, than merely get their feet wet. This tutorial is for those people. Test-Driven J2EE gives you the opportunity to practice the techniques of Test-Driven Development with J2EE components, including servlets, JMS and page templates. The goal is to build a small, but useful slice of a J2EE application while following the cardinal rule of Test-Driven Development: Never write a line of production code unless somewhere, a test fails. You will add a feature to an online Coffee Shop application, giving you an opportunity to see how to test-drive new features for existing systems, complete with typical end-to-end concerns, such as performance and security in a multi-tier application.	Tutorials	Tutorial	2006
12829	Programmers are from Mars, Customers are from Venus: A practical guide to working with customers on XP Projects	This interactive and informative tutorial will introduce you to practices that will increase the effectiveness of the customer on your XP project. Customers have one of the most complex and difficult roles on a project, yet XP includes very few practices that support the customer in their role - the aim of this tutorial is to change that. Over the last three years, we have investigated many projects around the world to identify how customers succeed in this complex and difficult task - discovering not what people think should have happened, but what really happened and what actually worked! This tutorial distils this research, grounded in practical experience, into a 3 hour session, so that by the end of this tutorial you will have gained: * A realistic understanding of the complexity and difficulty of the XP Customer role. * An understanding of the key roles required on a customer team, both what they are and why they matter. * An understanding of the nine practices that enable customers to sustainably drive XP projects to successful completion - think XP practices BUT for customers.	Tutorials	Tutorial	2006
12830	Community Reflections	The agile community / movement is growing and changing faster every day. As the initial agile flavors blend, the community continues to reach out, gathering new ideas from other communities and disciplines. One such practice, retrospectives / reflections, is an example of the agile community embracing an idea that harmonizes with the core principles of agile. As retrospectives and reflections are now a mainstay for many agile communities, this session is a way for the community to share in this practice. Using the fishbowl format, the session will start with a discussion among long time players in the agile community. Once the conversation is rolling, anyone interested may join the discussion, sharing their experiences or opinions. The moderator will be gathering questions for the fishbowl and keep the conversation flowing through the many topics present at the conference and during the session. Over all, this is a place for the community to meet and reflect on where we have been, what we have learned, and discuss topics and paths for the future.	Discovery Sessions	Workshop	2006
12831	Introducing Agile Concepts in “Traditional” Environments	This session will explore how to present agile concepts to those unfamiliar with agile methods, but who follow some process probably based on waterfall concepts (possibly with iteration). A keynote and one Open Space session from Agile 2005 suggested that introducing, and selling, agile concepts was a topic worth addressing. Ideally, attendees would have some experience in trying to introduce agile concepts into their (or someone else's) environment. The key is how they explained and tried to adopt/adapt agile principles and values to an environment employing other methods/approaches. It would be very helpful for attendees to bring written positions/ideas with them (200-250 words) so they come with some pre-conference thought in place. The submissions would be collected at the start of the session and read during the session. Open Space would be used to continue the work/discussion started at this session throughout the week. Introducing Adopting Explaining	Discovery Sessions	Workshop	2006
12832	T3 - Tool for Monitoring Agile Development	The T3 tool is a lightweight framework based on JUnit that provides visibility into project progress to support rapid development. Using story-centric views, Agile teams can quickly assess status, determine dependencies and identify pain-points. We were inspired to create T3 to report realistic project status and improve communication among geographically distributed team members1 without incurring a lot of extra baggage. This report describes T3, highlights the benefits, and demonstrates its application in a project.	Experience Reports	Experience Report	2006
12833	Optimizing Major Release Frequency Using Agile Practices	My experience report focuses on the Image Processing Toolbox story, how we transitioned to agile practices to address the problem of needing more frequent major releases of our shrink-wrapped product, and how we have continually adapted our processes in the context of an evolving business environment. Over the last three major releases of the product, we have evolved from being primarily scope-driven to finely balancing scope and schedule over the entire span of the release. The most recent major release was planned to be diversified in scope and was delivered right on its planned schedule, fifteen months after the previous major release.	Experience Reports	Experience Report	2006
12834	Three-way Cultural Change: Introducing Agile within Two Non-Agile Companies and a Non-Agile Methodology	This paper describes our experience iteratively developing an agile methodology within the context of two professional services companies, each with its own non-agile methodology and culture. By being sensitive to the distinction between values and practices, which imperfectly express those values, we were able to implement agile without unnecessary cultural friction. The result has been one of the most successful projects in our region.	Experience Reports	Experience Report	2006
12835	The Agile/Waterfall Cooperative	In large organizations, it's simply not practical to just "flip a switch" and have your IT department start doing agile all at once. In these situations, agile pilot teams and existing waterfall teams find themselves having to figure out how to work together during the transition. In this tutorial, attendees will learn to factor their company's business needs into their existing agile procedures, and management will learn how to begin the investigative work of determining how to streamline these requirements and activities so that they don't hamper the project. Whether your agile project is dealing with waterfall-up-front (project approval process, for example), waterfall-at-end (separate system testing, for example), or waterfall-in-tandem (products so complex that multiple teams are required to work together to complete a release), you'll learn specific techniques that will make coexisting less painful. Attendees will learn specific points in the project where agile and waterfall teams must plan, coordinate, and review progress - both in the development of the product and in the viability of the transition plan. As not all companies will choose to move every single software development project to an agile paradigm, the agile/waterfall cooperative becomes even more important to master.	Tutorials	Tutorial	2006
12836	Discussing the need for Agile Certification	Since software products are affecting the most critical areas in our lives, e.g. medical systems, security systems, financial systems, etc., shouldn't the Agile teams developing these systems be certified in similar ways? Those developers who have a college degree have often studied in non-software disciplines such as electrical engineering and mathematics. How do we know software teams made-up of diverse individuals have the proper background and skills to build a mission critical system using Agile techniques? With certain organizations being obligated to use a certified process, why isn't certified Agile one of their options? How should we go about creating a means for certifying Agile processes and teams? Should the Agile Alliance or similar body be responsible for certifying Agility? Is Agile ready for certification? Bring your ideas and we will facilitate an open discussion.	Discovery Sessions	Workshop	2006
12837	Making Process and People Congruent	Agile processes suggest that they work better if developers and customers have particular characteristics, such as the capability to handle rapid change or to pair program. Members of an agile team cannot always be selected to insure that they possess these capabilities. The implementation of a process may need to be adapted so that team members can work effectively. This workshop investigates people issues that agile team members have faced and ways that those issues have been approached or could be approached.	Discovery Sessions	Workshop	2006
12838	Adventures in Promiscuous Pairing: Seeking Beginner's Mind	Agile development practices are coming into the mainstream with a vengeance. This is evident by the number of books released annually as well as the exponential attendance growth seen at conferences such as Agile 2005 (and expected in 2006). This growth brings with it a lot of questions and a lot of experimentation as organizations figure out what works best for them and their projects. My team was no different. We were constantly experimenting with new techniques and approaches to problems. Some approaches worked, some did not. This paper discusses the adoption and experimentation of an Agile 2005 XR titled "Promiscuous Pairing and Beginner's Mind" by Arlo Belshee. It highlights the key success and unexpected problems that our team encountered while trying to implement the practices outlined in the paper, specifically around pair churn & team owned tasks, seeking Beginner's Mind and utilizing the least qualified person to do tasks. It also validates the unanticipated side affect Belshee identifies in his paper, introducing new team members and getting them up to speed.	Experience Reports	Experience Report	2006
12839	Automating Functional Tests with Selenium	Ever in search of a silver bullet for automated functional testing for Web Applications, many folks have turned to Selenium. Selenium is an open-source project for in-browser testing, originally developed by ThoughtWorks and now boasting an active community of developers and users. One of Selenium's stated goals is to become the de facto open-source replacement for proprietary tools such as WinRunner. Of particular interest to the agile community is that it offers the possibility of test-first design of web applications, red-green signals for customer acceptance tests, and an automated regression test bed for the web tier. This experience report describes the standard environment for testing with Selenium, as well as modifications we performed to incorporate our script pages into a wiki. It includes lessons we learned about continuous integration, script writing, and using the Selenium Recorder. We also discuss how long it took to write and maintain the scripts in the iterative development environment, how close we came to covering all of the functional requirements with tests, how often the tests should be (and were) run, and whether additional automated functional testing below the GUI layer was still necessary and/or appropriate.	Experience Reports	Experience Report	2006
12840	Presenter First: Organizing Complex GUI Applications for Test-Driven Development	Presenter First is a scalable strategy for producing fully unit tested GUI applications directly from user stories in a test-driven development fashion. Testing through the GUI by inserting events and making assertions on the state of the application is expensive and increases the burden of test maintenance. Presenter First uses a variant of Model View Presenter (MVP), a particular means of composing MVP triads, and a strategy for the order in which the elements of the triad are developed and tested. We have used Presenter First on projects ranging in size from several to several hundred MVP triads. This report and presentation will reveal the difficulties we encountered in scaling the use of MVP, discuss the approaches we tried and rejected, and describe our GUI application development best practices. It will also show how MVP triads can be effectively combined, and how and why they may be extended into more than three cooperating objects with the adaptor pattern. Finally, we'll demonstrate how particular tools decrease the burden of creating and maintaining hundreds of MVP triads in large applications.	Experience Reports	Experience Report	2006
12841			Main	Talk	2006
12842	Agile Meets Offshore	While Agile methodologies and values are getting more and more attention in the software development world - many companies are starting to outsource parts of their development activities to countries like India and China. Based on my own experiences offshoring in India, Pakistan and Ukraine and based on others experience reports from both India and Europe - I will try to answer the following questions:  Why offshore your development activities - What to offshore - and what to keep "at home"  - Where are the biggest challenges - Why did some outsourcing projects fail - What about the infrastructure - What about collaboration and communication when you are thousands of kilometers apart \nKey Points : If you think it is hard to make up your mind about maybe offshoring some of your own companies development activities - come and get some input for your decision.  \nHear about offshoring from a person who has tried it himself.  Get an overview of experiences with outsourcing from a number of companies Participants will walk away from this tutorial with an overview of challenges and best practices from 8-10 offshore projects.	Tutorials	Tutorial	2006
12843	Refactoring Databases: Evolutionary Database Design	For years the norm for object developers was to work in an evolutionary (iterative and incremental) manner but for database developers to work in a more serial manner. The predominance of evolutionary development methodologies such as Extreme Programming (XP), Feature Driven Development (FDD), the Agile Unified Process (AUP), and the Rational Unified Process (RUP) it is clear that the two groups need to work in the same manner to be productive as a team. This workshop is organized into parts: A presentation where Scott and Pramod describe evolutionary database development techniques and a discussion where participants will describe their experiences with evolutionary database development. The presentation will describe database refactoring, evolutionary data modeling, database testing, the need for sandboxes, and configuration management of database assets. During the discussions attendees will be prompted to share their experiences with adopting and applying evolutionary database development techniques. Potential discussion topics include: Tool support for database refactoring; How to test your database schema; How to convince traditionalists to adopt these techniques; How can DBAs and agile developers work together effectively; and The challenges/impediments to adopting these techniques.	Tutorials	Tutorial	2006
12844	Getting the Software You Need:  A Practical Approach for Stakeholders	You're a tester, business expert, project manager or analyst with an agile (or even not-so-agile) software development team. You write the stories/requirements/use cases and/or the acceptance tests. You're the judge of whether the delivered software accomplishes what you specified. You own or share responsibility for the success or failure of a software development project. How do you make sure you get what you and your business require? This tutorial will use a combination of hands-on exercises and lecture/discussion to teach practical skills that help you define clear goals for your team, define team roles, help different players work together, help business experts understand technical issues, measure progress, clearly communicate business priorities, clearly define and communicate stories and requirements, design tests to migitage risks, estimate realistically, plan at the project, release and iteration levels, leverage business experts' domain knowledge, and more. The tutorial will be tailored as much as possible to the needs of the actual attendees by means of polling them at the start and adjusting the content and focus accordingly. Participants will also learn from each others' experiences.	Tutorials	Tutorial	2006
12845	Collaborative Workplaces: Creating an Open Environment for Agile/Adaptive Projects	Agile flourishes in collaborative workplaces with open environments. Self-organizing teams thrive in organizational climates that stimulate communication, foster working relationships, encourage feedback and strengthen innovative thinking. Creating these open environments requires attention to a collaborative model as well as continuing focus on small, daily interactions and information flows. Business prospers where teams can collaborate and contribute.	Tutorials	Tutorial	2006
12846	Enterprise Scrum	Scrum is spreading through enterprises, either through bottom-up adaptation or through top-down management initiative. Either way, the depth and difficulty of the implementation is greater than might be anticipated. Our industry is used to planned "rollouts" of new approaches, but spreading Scrum throughout an enterprise is an extensive change process, focusing mostly on engineering/software development and customers and product management. It turns out that Scrum can't be used in isolation, but rather most of the dysfunctional behavior that organizations have garnered through years of waterfall development must be corrected The correction is made more difficult because the habits are deeply ingrained and unconscious.	Tutorials	Tutorial	2006
12847	The Drawing Carousel - a Pair Programming Experience	Working in a single pair is different from working on your own: You have to articulate what you want to do, the other person (probably) has some different insights, and the result will be different from what you would have done on your own. But... this is only half of the story: working in a Pair Programming Team has many more advantages: knowledge is spread, the team creates an own style, parallel development becomes easy, truck factor is reduced. The team creates the product (instead of individual programmers creating the parts), the product is a whole, not a mixture of individual results. You will learn about the necessity of agile tools like daily standup meetings, pair rotation, coding standards and collective code ownership, how they work, and what their effects are. You will experience improvements for the quality of you product, and for the productivity of the team.	Discovery Sessions	Workshop	2006
12848	The Agile Product Owner and Customer Field Guide	Effective product management has always been important to any successful development effort. The definition of requirements, prioritization of deliveries and alignment with business goals are no less crucial in agile processes. All of the most popular agile processes define roles responsible that perform these activities, most often call the Product Owner or Customer. Working through mechanisms such as the Product Backlog, User Stories and Release Plans, the Product Owner ensures the agile team receives a solid pipeline of well-conceived requirements. This intensive, hands-on tutorial provides you with a comprehensive toolbox of practices and techniques for agile product management. As each of the major responsibilities are explored, you will participate in exercises and simulations that enable you to gain direct experience to apply to your projects. This is participation-based tutorial, so prepare yourself to be actively engaged creating product backlogs and user stories, mapping requirements to agile project plans, working with stakeholders, and guiding a project to deliver the most value for your business. This half-day tutorial is intended for team members who are interested in gaining hands-on expertise in agile requirements management practices. Although no prerequisites are required, knowledge of the business, strategic product planning, and product management aspects of the overall development cycle is recommended. Familiarity with Agile development processes such as Extreme Programming or Scrum may be helpful.	Tutorials	Tutorial	2006
12849	Ready, Set, Go Agile: A step-by-step guide for managers and executives	"You need to improve product development!" Maybe you are hearing this from your customers. Maybe your prospects. Maybe your staff, boss, CEO or Board. Maybe you are saying this to another. Maybe you are feeling the pain of missed released dates. Maybe it's poor product quality. Maybe even the wrong product. Maybe your best people are leaving. There are as many reasons as there are paths that lead people to exploring the benefits of Agile. If you're like most, you'll have many more questions than answers at this point. When is it right to become Agile? What does becoming Agile really mean? Is Agile an all or none proposition? How much will Agile cost? What are the likely benefits and risks of Agile on customers and the P&L? How will the organization maintain and scale Agility? For managers and executives, becoming Agile means numerous questions and decisions. This tutorial takes a few steps back and scrutinizes the big picture of contemplating and then successfully executing a transition to Agile. Using real world examples, managers and executives will be presented with and engaged in the realities, options and decision-making involved in becoming and remaining Agile.	Tutorials	Tutorial	2006
12850	Hiring for an Agile Team	We work in all kinds of teams at work, and an Agile team and environment can be very different from other kinds of teams and environments. In successful Agile teams, people work differently, treat each other differently, can discuss certain issues more openly, and may be rewarded differently. All of those factors are part of hiring for a particular cultural fit, a key part of hiring for an Agile team. In this session, Johanna will facilitate your discovery of your unique characteristics and environment at your culture. Armed with that information, we will discuss how to ask questions and use auditions to hire for your team. We will create an environment in which you can practice your questions and auditions.	Tutorials	Tutorial	2006
12851	Adding Usability Testing to an Agile Project	The PRI project consisted of two releases. The first release of the application did not incorporate any usability testing of the software and that resulted in the number of UI enhancements we had to build before the users would accept the release. For the second release of the project we incorporated paper prototyping, "wizard of oz testing" and usability testing of the nearly finished UI. This resulted in a dramatic reduction in the number of usability issues raised during acceptance testing.	Experience Reports	Experience Report	2006
12852	A Tale of Two Writing Teams	This presentation is intended to provide participants with insight and experience related to technical writers' transition to and scaling with Agile teams. The session will focus on two case studies. Sometimes considered an "afterthought" in the product development lifecycle, writers often struggle to become part of a performing Agile team. Plagued with thoughts of inferiority, self-doubt and perceived (or real!) lack of recognition, tech writers can become lost when trying to transition from waterfall to Agile.	Experience Reports	Experience Report	2006
12853	How Not to do Agile Testing	When our team adopted Extreme Programming and Scrum, there were a number of challenges. Integrating an Agile team in a "traditional" organization created friction and conflict with management. The team consisted of volunteers new to Agile practices. We had difficulties with planning and estimation, task breakdown, managing requirements and working together in a collocated space. However, the biggest challenge the team encountered was not in any of these other areas, but in one that most of the team figured was simple: Testing.	Experience Reports	Experience Report	2006
12854	Keynote	TBD	Main	Talk	2006
12855	Agile Simulation	This course is a simulation of our agile software development process.  Its purpose is to show anyone who is associated with software development why agility works by simulating a software project.  No coding experience (or even direct experience of development) is needed.  The core game includes the roles of customers, business analysts, project managers and developers and is easily extended to include the role of testers and business owners. The simulation works by “building” an imaginary software product.  Each team works in an agile fashion, using simulated 2-week iterations.  “Event” cards create challenges and opportunities for the team.  They also include instructions on how to deal with good and bad events on an agile project..	Hands-on	Workshop	2006
12856	eXtreme Project Management Applied: How to deliver value in the face of volatility	No sooner do you say the word “plan,” when something else has changed.  Instead of managing priorities, you often find yourself prioritizing crises.  Traditional project management practices simply don’t cut in on today’s volatile, high-change, high-speed, high-stress ventures.  To succeed on these extreme projects, the new breed project manager needs to be able to unleash motivation and innovation, keep the project under control, deliver value to the customer each step of the way, and at the same time, ensure an acceptable quality of life in the process.  Based on his work with over 250 project teams from around the world, Doug, with the help of his African drum, will share proven principles, practices and tools that have been captured in his book, eXtreme Project Management: Using Leadership, Principles and Tools to Deliver Value in the Face of Volatility.	Main	Talk	2006
12857	Clean Code	This tutorial is about CODE. We will put code on the screen and we will READ it and CRITIQUE it. And then, one tiny step at a time, we will CLEAN it. In this tutorial you will participate in the step by step improvement of a module. You will see the techniques of the Prime Directive (Never Be Blocked), and Agile Design Principles brought into play. You will witness the decision making process that Agile Developers employ to write code that is expressive, flexible, and CLEAN.	Tutorials	Tutorial	2006
12858	Offshore Agile Maintenance	Predominantly the Agile literature covers applying the values and practices to a green field project using a co-located team. However, offshore/distributed development is the reality of the software industry. Offshore organizations have started with maintenance of non-critical business applications and moved over to green field development of business critical applications in a distributed fashion. Maintaining and enhancing business critical applications is the key to an organization's success. The existing literature states the following as challenges with distributed/offshore team: 1. Decrease in communication bandwidth 2. Lack of visibility into project status 3. Configuration management 4. Art of Command and Control structure 5. Cultural difference But based on my experience the above points are by-product of something more important. The root causes according to me are the following: 1. Lack of trust 2. Loss of context, both business and technical 3. Offshore team/s not getting equal stakeholder status 4. Abstraction of business and technical problems and decision In this discussion I would like to explain how we address the above issues and turned a failing project into a success story.	Experience Reports	Experience Report	2006
12859	Extreme Construction: Making Agile Accessible	In recent years agile software development methodologies have become important. Extreme Programming (XP) is perhaps the best known of these. XP involves about a dozen key practices that work synergistically to provide quality software in an environment in which change is likely to occur. Here we present an exercise that we have developed and used successfully to train novices in the techniques. This exercise is novel in that it is accessible to programmers and non-programmers alike. In an industrial setting, this makes it available to managers and customers. In the educational setting, it becomes possible to teach the techniques to novices before they have learned any programming. It is intended for those who intend to develop object-oriented (OO) software. Extreme Construction is a game that is both fun and informative. It teaches the fundamentals of any agile methodology while helping build a closely-knit team.	Educator's Symposium	Research Paper	2006
12860	Forming Successful eXtreme Programming Teams	XP is a lightweight process that provides principles for guiding projects and relies on the participants for its success. However, despite these guidelines, projects can be unsuccessful. We have previously identified that participants' levels of buy-in into the ethos of the methodology is a significant determinant of project success. This paper investigates how team formation influences buy-in and how buy-in, in turn, affects success, learning and working attitude within an academic environment. The empirical study shows that teams comprised of people with similar understandings of, and attitudes towards, the process tend to have a higher level of buy-in and, as a result, exceed their expected performance potential.	Educator's Symposium	Research Paper	2006
12861	The Impact of Agility on a Bachelors Degree in Computer Science	Shippensburg University offers a Computer Science degree with the choice of five concentrations including Software Engineering. We first introduced agility as an XP component in part of our two-semester product development sequence. Within the software engineering concentration, agile concepts spread into our course on Software Metrics and Process Management. With that experience, our faculty have become interested in including agile concepts into other courses. This paper describes how a number of our undergraduate courses, the content of our computer science core, and our department's general health have been affected by agile techniques and philosophies.	Educator's Symposium	Research Paper	2006
12862	Using Agile Management to Share Course Projects Among Multiple Classes	Project based courses have become popular as a way of engaging students and providing practical experiences. Sharing a single project between two course provides advantages of permitting more focus on the subject of each class, larger projects (more help and expertise is available) and greater opportunities for coordinated team work, and to appreciate how disciplines interact. A disadvantage is scheduling and managing class activities and risk to assure that useful project work is done at a pace benefiting both classes. This paper describes an experience in which an Agile approach was used to successfully coordinate project activities among a Software Development course and a User Interaction Design course.	Educator's Symposium	Research Paper	2006
12863	Examining the Compatibility of Student Pair Programmers	Pair programming has been shown to be beneficial for both students and teaching staff in university courses. A two-phased study of 1350 students was conducted at North Carolina State University from 2002-2005 to determine if teaching staff can proactively form compatible pairs based upon any of the following factors: personality type, learning style, skill level, programming self esteem, work ethic, or time management preference. We examined compatibility among freshmen, advanced undergraduate and graduate student pair programmers. We have found that overall 93% of students are compatible with their partners. Students notably preferred to pair with a partner that he or she perceived to be of similar or higher skill level to them, which can be predicted by grouping students with similar grade point average. Additionally, pairs comprised of a sensor and an intuitor learning style seem to be compatible, and pairs with differing work ethic are generally not compatible.	Educator's Symposium	Research Paper	2006
12864			Main	Talk	2006
12865	Ward's Top 10 Favorite Wiki Postings Explained	Ward created Wiki because that is how he wanted to write.  He had the wisdom to let others finish his sentences and that gave his wiki much of its early charm.  But that doesn’t mean he doesn’t have strong opinions.  For this talk he will choose 10 mostly agile topics and tell you what he really thinks.	Main	Talk	2006
12866	The Crystal Methods, or How to Make a Methodology Fit	Just as projects vary in size, criticality and priorities, and so should your methodology. The strengths and weaknesses of the organization, the specific people, even the office layout affects how the team best works, and should influence the methodology. Crystal is a family of highly tolerant, lightweight methodologies built from core principles, techniques for tuning them to your specific situation, and specific examples to copy from. Inside the rule set for a Crystal methodology may be any topic or convention the team agrees to, including level of document detail and formality, reviews used, office seating and even quasi-unofficial parties. The Crystal methodology family aspires to be the most tolerant, habitable and yet effective methodology for any particular project team. Besides the Crystal family genetic code, this tutorial describes the principles and techniques for shaping a methodology to the project-team combination, introduces the colors in the Crystal family, compares different examples of the Crystal family to each other relative to the principles, and shows the differences between Crystal Clear and XP. Expect to learn the methodology tuning principles, and experience how easy and fruitful a methodology-tuning session can be.	Tutorials	Tutorial	2006
12867	Introduction to Automated Acceptance Testing	This tutorial will provide in depth answers to the following questions. * What is Automated Acceptance Testing. Why do we need? * Where does Acceptance Testing fit in an agile process? * What does the term Automated Specification mean? * What roles do QA's play? What roles do developers play? * What impact does Acceptance Testing have on quality and productivity? * What tools are available? (FIT and FitNesse) * How do you write Acceptance Tests first, before the code executes? * What is the best way to organize the tests.	Tutorials	Tutorial	2006
12868	Tuning Up: A Team Leader’s Guide to Retrospectives for Agile Development	Agile development teams learn and improve by inspecting and adapting. High performing teams inspect and adapt not only their code and tests, but also their methods and interactions. Through regular retrospectives they become skilled at acquiring and using collective wisdom, accessing best practice thinking, devising meaningful experiments, and increasing opportunities for successful innovations. For teams to reap these benefits, Retrospective Leaders employ skills in design and facilitation for teams to reap these benefits. In this interactive workshop, based on a forthcoming book by the presenters, the participants will apply a framework for retrospective design and obtain experiential understanding of retrospectives from both a participant's and a retrospective leader's point of view. Participant will practice designing an iteration or release retrospective. Workshop topics include:  Overview of Retrospectives for Agile Development --Preparing for a Retrospective -- Retrospective Simulation -- Design Practice and Feedback: Choosing Retrospective Exercises and Activities	Tutorials	Tutorial	2006
12869	Discovering Whole-System Approaches to Enterprise Agile Adoption	More and more large companies are beginning to adopt Agile practices. However, many companies are facing new challenges in implementation. The project management and software development focus of Agile, as it is largely construed both in practice and in the literature, is often puzzling to senior corporate leaders and middle managers alike. The goal of this highly interactive and participant-driven Discovery Workshop is to gather insights, knowledge, and experience from among the participants that will advance thinking and practice for Enterprise Agile adoption. Of particular interest are "whole system" approaches that engage multiple management levels and diverse functional areas of the enterprise, from C-level managers to developers to support staff. The final output of the session will be a concrete artifact - something which others in the Agile community could learn from, and something which could be a foundational contribution to an emerging set of principles and patterns for Agile adoption in the large enterprise. This could be collection of Wiki entries, an article, or a white paper. Meanwhile, participants will also have gained a wealth of knowledge and insight which they can bring back to their workplace environments, as well as a support network of new friends and colleagues.	Discovery Sessions	Workshop	2006
12870	Working Effectively with Legacy Code	Test Driven Development and Refactoring are powerful tools in the XP/Agile arsenal. With them you can add new code to systems and make existing code more maintainable. However, refactoring code without having tests in place can be hazardous. This tutorial presents a collection of dependency breaking and test writing techniques that can be used to get existing OO code safely under test for refactoring and enhancement. These techniques can be used in conjunction with Test Driven Development to breathe new life into large existing code bases.	Tutorials	Tutorial	2006
12871	Multi-level Planning in Agile Environments	Participants will learn that extending the planning horizon beyond the iteration does not violate agile principles and can help project teams to set clear goals for a project. They will learn that estimation, prioritization and commitment is required for all people involved in the development of a product. They will walk away with a clear chart that summarizes which planning activities (prioritizing, estimating, committing) happen when, by whom and how. They will have built this chart themselves, adding understanding to the words, gained through discussions with each other and with the coaches.	Tutorials	Tutorial	2006
12872	Facilitating Lasting Change: A Cornucopia of Tools, Tricks, Tips, and Techniques	Title: Facilitating Lasting Change: A Cornucopia of Tools, Tricks, Tips, and Techniques for Transforming Your Enterprise using Agile Making the move to Agile across an organization is an ambitious undertaking. This highly interactive and participative session will provide you a basic framework for understanding how organizations change. It will then allow a small group to drill down on several aspects of this change framework to provide each other hard won tips, generate or share tools, discuss techniques, talk about lessons learned, all while having fun. By the end of the session, we will have collectively created a complete toolset from over 30 concurrent such sessions for sharing with each other and the world.	Discovery Sessions	Workshop	2006
12873	The Psychology of Build Times: Keeping the Tests Fast Enough	Build times matter. Agile development methodologies rely heavily on the practices of continuous integration, automated testing, and frequent builds. As build times grow, it becomes increasingly difficult to maintain the effective use of these practices. A slow set of automated tests, for example, prevents many teams from running any tests often enough to get the kind of feedback that agile development demands. This tutorial introduces the psychology of build times and provides practical approaches for making tradeoffs in running builds and tests. We provide a guidance model for enterprise builds and discuss how distinguishing between different kinds of builds can be helpful. Common pitfalls encountered by agile development teams in automating builds and tests will be discussed. During the second half of the tutorial, participants will be challenged to revisit their understanding of different kinds of automated tests. Guidelines for helping teams distinguish between "slow" and "fast" tests will be given, and concrete coding examples will be provided to show how to improve the fast/slow ratio.	Tutorials	Tutorial	2006
12874	Introduction to Holacracy™: A Framework for Agile Leadership & Decision Making	Agile software development harnesses self-organizing teams that adapt rapidly to change. This requires highly effective team decision making, the ability to rapidly evolve policy and process decisions as feedback arrives, and leaders that add expertise without resorting to autocratic fiat. This differs considerably from the usual top-down predict-and-control corporate model, and a more agile replacement for autocratic decision-making and management can dramatically improve productivity and quality of life for all involved. This session introduces Sociocracy, a system of decision-making and governance that harnesses self-organization and facilitates rapid adaptation to change. Sociocracy fills a gap in most Agile methods, by adding an agile decision making process and management structure that values self-organization and integrates with agile software development processes. Sociocracy adds significant value when applied on a single agile team, and its fractal structure can integrate agile decision-making and leadership across multiple teams, a large department, or an entire company. Attendees will leave with an understanding of the benefits and practices of Sociocracy, as well as hands-on experience applying the model to enhance agility, improve decision-making, and more easily integrate feedback into decisions, processes, and practices.	Tutorials	Tutorial	2006
12875	Agile Project Initiation Techniques - The Inception Deck and Boot Camp	Expecting new teams to pick up and apply Agile software development practices without any training or guidance is unrealistic. Just as an army wouldn't send its soldiers to battle without basic training, nor should we begin Agile projects under similar circumstances. If team members new to Agile become frustrated and struggle while trying to learn how to apply the techniques, there is a risk they will revert back into their old bad habits. All Agile projects should begin with a boot camp. Boot camps help teams gel, decide on a code of conduct, and set expectations appropriately. Teams that use boot camps also have less internal conflict, apply the Agile practices at a higher level, and experience greater productivity.	Experience Reports	Experience Report	2006
12876	A Self Funding Agile Transformation	How can a developer bring about change within their team. How can a development team influence the processes outside their direct control? A consultant will tell you to hire a consultant or go on an immersion course. But Big-Up-Front-Training doesn't seem to be in the spirit of agile. What is more, having to get authorization and capital investment up front in order to act is counter to Kaizen principles. An alternative is to bootstrapped agile practices using your own people. Then pay for further improvement by using funds freed from efficiency savings generated by Agile. This experience report will describe the benefits and drawbacks of a DIY agile implementation, and what kind of time-line you can expect. We will also explain how the developers sold agile to management and the rest of the company. We want to motivate other individuals and teams to act independently and find ways of moving forward in their own organizations, with or without the help of external consultants.	Experience Reports	Experience Report	2006
12877	Embedded Agile Project by the Numbers With Newbies	This session will present detailed metrics from a three year long agile project where a newly formed development team produced a new spectrometer product from scratch. The team experimented with various agile practices while recording data on bug rates, bug root causes, code size, schedule compliance, and labor expended. What makes this project even more unusual is that most of the team members lacked important technical skills for this work but they outperformed far more experienced teams. The natural learning environment and safety net that Agile provides allowed them to learn fast while keeping them from serious mistakes.	Experience Reports	Experience Report	2006
12878	Workshop: Teaching Agile -- Agile Teaching: Creating an Holistic Learning Environment	Teaching and learning agile principles and practices is more than teaching pair programming and test-driven development, yet that is typically where the focus lies in programming and software engineering courses. We want to consider the challenges and opportunities for creating a holistic teaching-learning environment for agile principles and practices: * When to introduce agile into the curriculum (learning experience) - at beginning (perhaps coordinated with OO) or later after they have had some "traditional" software development education o Where in the curriculum - put in a single course or distribute throughout program. * Which methodologies to introduce and use - does it matter - XP, scrum, etc. * Agile think first, then agile software development? What is best way to instill the principles? * Apply agile approach to teaching - don't teach it all in one lump. * How to teach (transfer) experience? Students and faculty come with different levels of experience in software development. How to capitalize on this diversity of skill, experience and interest? * How should traditionally educated faculty get the required skills? * Team teaching team learning - building the community. * Text and materials * Retrospectives * Agile development projects - infrastructure, platform, programming language(s), open source o Games, tools, techniques	Main	Talk	2006
12879	Burning Down the House	Abstract pending	Main	Talk	2006
12880	The Test-Driven Development Pairing Game: Making Pairing Fun	The Test-Driven Development (TDD) Pairing Game is a fun approach for introducing software engineers to TDD and pair-programming. The structure of the game encourages a higher level of pair-wise collaboration when compared to traditional pairing. The foundation of the game allows the pair to improve upon the TDD experience by creating an environment in which the two developers compete, in a fun way, to write better tests and better code. In the end, the winner is the customer. What results is always a mystery, but one thing is for sure, the collaboration between the pair encourages a careful negotiation of the scope as both the tests and the implementation are created. In the end, this results in higher quality software and a more collaborative experience when compared with traditional approaches. Use this game to introduce test-driven development and pair programming to your organization. Keep using the game to keep the team engaged and excited to come to work.	Tutorials	Tutorial	2006
12881	Selling Agile Project Management to Bean Counters	CFOs, COOs, and CEOs make decisions based on a simple algorithm. Every initiative the company launches should contribute to increasing the company's revenues or decreasing the company's costs. As the agile evangelist in your company, you must arm yourself with the correct data and understand what arguments will convince the bean counters that an APM initiative makes economic sense. This presentation will introduce you to the language and formulas used by upper management to make decisions and how APM measures up.	Tutorials	Tutorial	2006
12882	Using an Agile Approach in a Large Traditional Organization	Can Agile approaches be used successfully in large organisations, where traditional methods and governance are the norm? In this presentation, we will discuss some of the challenges we faced in bringing in DSDM to OCLC, Dublin , Ohio. Founded in 1967, OCLC Online Computer Library Center is a nonprofit, membership, computer library service and research organization dedicated to the public purposes of furthering access to the world's information and reducing information costs. We will concentrate on how we were able to incorporate DSDM into a development culture that was deeply-routed in "traditional" software development methods. We will use examples from multiple projects to illustrate how DSDM helped OCLC change its culture. We will give an example of the current development cycle and show how OCLC's TLC dashboard is used to track the effectiveness of the development cycle, showing metrics back to 2003	Experience Reports	Experience Report	2006
12883	Using An Agile Approach To Free The Organization From "R&D Paralysis"	This experience report describes how an agile development methodology approach was used to sell a major R&D undertaking within a Swedish technology organization dominated by traditional waterfall projects. By offering management the combination of early and continuous delivery of value and the possibility to change their minds along the way, it became possible to get past the problems of a prohibitively large price tag and too long time to market. The report deals with the entire life cycle of the project, including the initial sales pitch, team setup, challenges related to introducing agile development and project execution. Conclusions include that selling agile methodology takes time, needs to be an ongoing activity within an organization, and that it may actually be easier to convince higher management than developers of the virtues of agility.	Experience Reports	Experience Report	2006
12884	Extreme Selling in the Early Stage Space	Agile Development may be used as an effective software development methodology as well as a marketing differentiator. Ternary Software has implemented a two-tiered marketing strategy in the early stage space, with Agile Development at the hub. At one level, Ternary attracts early stage entrepreneurs with the adaptability of the development process, and ability to get to market quickly. At a second level, Ternary appeals to supporting organizations, such as angel investors and law firms with emerging stage practices with the risk minimization inherent in an Agile Process. The two tiers intersect. Not only do the supporting organizations provide exposure to Ternary Software, but they also provide valuable investment dollars to the early stage firms who embrace agile development.	Experience Reports	Experience Report	2006
12885	Panel: Give it your best shot: Favorite lectures from agile teachers	Panel: Give it your best shot: Favorite lectures from agile teachers	Main	Talk	2006
\.


--
-- Data for Name: speakers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY speakers (name, id) FROM stdin;
	412
Aaron Sanders	52
Abby Fichtner	12
Adam Geras	337
Adam Light	78
ADM	451
Adrian Smith	22
Agustín Villena	105
Ahmed Sidky	15
Ainsley Nies	110
Alan Airth	317
Alan Cameron Wills	439
Alan Harriman	407
Alan Padula	259
Alan Shalloway	148
Alistair Cockburn	311
Alistair Cockburn & Jeff Patton	431
Alistair McKinnell	128
Ali Zewail	219
Allen Ho	420
Allison Corbett	240
Amr Elssamadisy	95
Amr Noaman	72
Amy Law	419
Ananth Srinivasan	272
Anders Ramsay	292
Andrea Provaglio	216
Andrew Hunt	258
Angela Druckman	126
Angela Harms	187
Angela Martin	268
Ann Anderson	301
Annie Antón	393
Anuja Shukla	392
ards Committee	443
arlen bankston	57
Arlen Bankston	295
Arlo Belshee	184
Arto Eskelinen	206
Ashley Johnson	123
Barbara Fredrickson	285
Barninder Khurana	246
Barry Boehm	330
BARRY BOEHM	309
Bas Vodde	32
Belkis Vasquez	233
Bernd Schiffer	121
Bill Gaiennie	290
Bill Greene	410
Bill Kleb	324
Bill Wake	210
Bob Evans	429
Bob Galen	10
Bob Payne	129
Børge Haugset	262
Brad Swanson	291
Bret Pettichord and Brian Marick	302
Brian Boelsterli	358
Brian Marick	182
Brian Sobus	89
Bruce Eckfeldt	413
Bryan Beecham	142
B Veeresh Thummadi	275
candi rai	256
Cap Gemini	435
Caribou Lake	409
Carlton  Nettleton	35
Carol Morton	124
Carol Smith	251
Carsten Jakobsen	43
Catherine Clark	235
Cathrine Lippert	117
CC Pace	422
Charles Roman	207
Charles Suscheck	173
Chet Hendrickson	197
Chris OConnor	223
Chris Sims	71
Christian Hassa	255
Christian Sepulveda	363
Christian Vindinge Rasmussen	116
Christine Moore	365
Christopher Avery	122
Christ Vriens	359
Clarke	406
Claudia Melo	281
Clement "James" Goebel	125
Clyde Cutting	366
Colin Jones	181
Colin R	411
Cory James Hohs	191
Craig Larman	342
Craig Smith	21
Cunningham	349
Curtis Cooley	364
Dale Emery	188
Damon Poole	140
D. André Dhondt	42
Daniela S. Cruzes, Fabio Kon and Reidar Conradi	282
Daniel Brolund	201
Daniel Steinberg	315
Dan LeFebvre	58
Dan Mezick	132
Dan North	423
Darin Cummins	418
Darius Kumana	231
Dave Nicolette	215
Dave Thomas	329
Dave West	312
David Bland	96
David Bulkin	245
David Chilcott	25
David Dalka	4
David Hussman	137
David Kane	362
David Socha	379
David Stotts and Laurie Williams	335
Dean Leffingwell	74
Dean Wampler	174
Debbie Utley	428
Declan Whelan	141
Dennis Stevens	69
Denny de Waard	202
Derek  Neighbors	230
Derek W. Wade	252
Diana Larsen	111
Don Gray	225
Don McGreal	162
Doug Bradbury	102
Drew Jemilo	289
Driver	405
Duff O'Melia	339
Edwin Wong	288
Eewei Chen	172
Elena M Yatzeck	192
Elisabeth Hendrickson	175
Elisabeth Hendrickson & Brian Marick	385
Elizabeth Keogh	54
Ellen Gottesdiener	113
Emerson Mills	167
Emmanuel Gaillot	62
Eric Evans	387
Eric Sink	109
Eric Willeke	87
Esther Derby	212
Esther Derby Associates	452
Fast401k Inc	438
Fernando Naveda	323
Forrest Shull	381
Francisco Trindade	179
Frank Maurer	280
Gary Bernhardt	91
Gary Jedynak	367
Gary Pollice	318
Gayane Azizyan	277
Geir Kjetil Hanssen	263
George Dinwiddie	40
George Schlitz	220
Gerry Kirk	108
Gery Derbier	361
Gil Broza	36
Gitte Lindgaard and Robert Biddle	266
Google	433
Gourav Tiwari	243
Granville Miller	319
Gray	404
Greg Luck	401
Greg Smith	16
Greg Williams	229
Grigori Melnik	336
Guilherme Silveira	237
Guy Royse	51
Hakan Erdogmus	321
Harold Shinsato	224
Helen Sharp	368
Holger Breitling and Martin Lippert	308
Howard Deiner	55
Hubert Smits	196
Hugh Beyer	185
Hugh Robinson	369
Ian Ratner	154
IEEE SW Engineering St	442
Isel Fernandez Diez	250
Israel Gat	59
Jack Harvey	155
Jackson	402
James Caristi	325
James Grenning	171
James Noble	397
James Shore	189
Janet E. Danforth	348
Janet Gregory	18
Jan Pries-Heje	284
Jari Vanhanen	354
Jaron Lambert	139
Jason Dean	253
Jason Fair	90
Jason Little	67
Jason Tanner	247
Jean Tabaka	134
Jeff De Luca	343
Jeff Gothelf	1
Jeff Grover	426
Jeff Langr	241
Jeff McKenna	380
Jeff Patton	254
Jeff Sutherland	203
Jenni Jepsen	28
Jennitta Andrea	2
Jeremy Brown	446
Jeremy Lightsmith	92
Jeremy Sutherland	232
Jez Humble	200
J. Frenando Naveda	314
Jim Highsmith	340
Jim  Highsmith	13
Jimi Fosdick	127
Jim Little	353
Jim McCarthy	147
Jim Newkirk	391
Jim Ungar	76
Joe Fecarotta	19
Joel Tosi	157
Joe Walnes	436
Johanna Rothman	80
John Brewer	432
John Daniels	449
John Goodsen	331
John Haniotis	149
John Maxwell	49
John Nolan	371
Jonathan Perret	63
Jonathan Rasmusson	3
Jon Innes	152
Jonny LeRoy	38
Jon Stahl	165
Joseph Blotner	356
Joseph Wilk	178
Joshua Kerievsky	344
Joshua Kerievsky and Diana Larsen	299
Judith Brown	265
Judy Wankerl	107
Julian Simpson	94
Julie Chickering	85
Julien Mazloum	75
Jutta Eckstein	333
Karen Greaves	27
Karl Scotland	14
Katherine Kirk	99
Kathleen  Rilliet	195
Kay Johansen	448
Kazumasa Ebata	83
Kealy Opelt	65
Keith Nottonson	163
Ken Auer	327
Ken Clyne	84
Kenji Hiranabe	400
Kenny Rubin	136
Ken Power	79
Ken Schwaber	304
Ken Schwaber -- Scott Ambler	320
Ken Scott-Hlebek	430
Kevlin Henney	286
Kieran Conboy and Ken Power	274
Kuryan Thomas	294
Larry Constantine	345
Lars Skaar	101
Laura Bocock	269
Laura Hill	376
Laurie Williams	306
Leah Buley	5
Leeann Berner	24
Lene Pries-Heje	283
Leslie Ekas	213
Linda Rising	287
Lisa Crispin	17
Lisa Ho	103
Llewellyn Falco	194
Lockwood	346
Lowell Lindstrom	303
Lucas Layman	394
Lucy Lockwood	347
Luiz Claudio Parzianello	37
Luke Hohmann	390
Lynn Cowan	199
Lynn Cunningham	395
Lynn Langit	193
Lyssa Adkins	97
Mali Senapathi	271
Manish Shah & Damian Guy	382
Marc Bless	115
Marc-Elian Begin	257
Marian Willeke	159
Marjorie Farmer	417
Markku Åhman	60
Mark Levison	30
Martin Fowler	296
Martin Heider	120
Mary Gorman	112
Mary Lynn Manns	351
Mary Poppendieck	31
Mary Poppendieck & Tom Poppendieck	386
Matt Block	153
Matt Simons	39
Mauricio Aniche	236
Max Guernsey	9
Measuring velocity with Earned Value	360
Meghann Drury	234
Mia Horrigan	270
Micah Martin	180
Michael DePaoli	23
Michael Elbaz	145
Michael Feathers	183
Michael Hill	217
Michael Kaiser	50
Michael Keeling	168
Michael Leo	408
Michael McCullough	164
Michael  Meissner	248
Michael Royle	416
Michael Sahota	133
Michael Spayd	98
Michael Van de Vanter	377
Michele Sliger	118
Microsoft	440
Miganoush Magarian and  Mira Kajko-Mattsson	278
Mike Cohn	383
Mike Cottmeyer	68
Mike Prior	190
Mike Russell	88
Mike Suarez	249
Mike Velichansky	169
Mik Kersten	131
Mohamed Amr	73
Nafis Ahmad	209
Nancy Van Schooenderwoert	177
Nanette Brown	226
neil johnson	143
Nick Horney	176
Nils Brede Moe	260
Olaf Lewitz	135
Ole Jepsen	434
Omri Shiv and Kalle Lyytinen	276
Pat Maddox	53
Patrick Debois	93
Patrick Kua	6
Patrick Phillips	293
Patti Mandarino	211
Paul Dolman-Darrall	26
Paul Hodgetts	300
Perry Reid	119
Pete Behrens	48
Pete McBreen	378
Peter Schuh	298
Philippe Camacho	106
Philippe Kruchten	264
Pippin Barr	445
Pollyanna Pixton	33
Portia Tung	47
Pradyumn Sharma	222
Pramod Sadalage	297
Rachel Davies	372
Raj Mudhar	239
Ralph Miarka	114
Randy Miller	326
Randy Stafford	375
Ravindar Gujral	41
Rebecca Wirfs-Brock	388
Richard Cheng	242
Richard Hightower	334
Richard Lawrence	34
Richard P. Gabriel	313
Richard Watt	424
Rick Mugridge	355
Rilla Khaled	444
Robert Biddle	396
Robert C. Martin	341
Robert Kessler	307
Robert Martin	158
Robert Nord	227
Roger Brown	29
Ron Crocker	384
Ronen Rubinfeld	130
Ron Jeffries	198
Ron Jeffries & Chet Hendrickson	389
Ron Morsicato	421
Russell Hill	357
Russ Rufer	373
Ryan Polk	186
Samantha Laing	20
Sami Honkonen	205
Sanjiv Augustine	56
Satoshi Kuroiwa	82
Scott Ambler	170
Scott Duncan	441
Scott Dunn	150
Scott Henninger and Frank Maurer	338
Scott Will	214
Sean Buck	221
Shane Hastie	160
Simon Bennett	86
Simon Orrell	138
Skip Angel	8
Sonya Lowry	100
Stephen Denning	204
Steve Adolph	161
Steve Andrews	238
Steve Berczuk	350
Steven "Doc" List	151
Steven Fraser and Rachel Reinitz	328
Steve Ropa	156
Symantec	427
Syntropy Ltd	450
Ted Layher	64
Theodore Hellmann	279
Thoughtworks	425
Thushara Wijewardena	44
Tiago Silva	267
Tim Mackinnon	415
Tim McCoy	70
Timo Punkka	61
Tim Ottinger	208
Tip House	332
Todd Little	414
Todd Zaki Warfel	77
Tom Kubit	316
Tom Perry	66
Tom Poppendieck	45
Torgeir Dingsøyr	261
Tracy Beeson	104
Tracy Bialik	374
Tsang	403
Tsuyoshi Ushio	166
Tuomo Kähkönen	398
Utah State University	447
Val Scott	144
Venkat Subramaniam	46
Ward Cunningham	322
Watts S. Humphrey	310
Willem Larsen	7
William C. Wake	352
William E. Caputo	370
William Krebs	146
William Rowden	81
William Wake and Ron Jeffries	305
Wireless-Matrix Corporation	437
Xavier Quesada Allue	218
xiaofeng wang	273
Yi Lv	11
Yoshihito Kuranuki	399
Zainab Alikhan	244
Zhon Johansen	228
Julias Shaw	453
Gareth Powell	454
J. B. Rainsberger	455
Michael Bolton	456
Barg Upender	457
Dan Rawsthorne	458
Keith Braithwaite	459
Anthony Cabri	460
Mike Griffiths	461
Nils C. Haugen	462
Tamara Sulaiman	463
Brent Barton	464
Kent Beck	465
Ken Schwaber, ScrumAlliance Mary Poppendieck, Poppendieck, LLC	466
Bob Schatz	467
Sam Newman	468
Rob Westgeest	469
Tjakko Kleinhuis	470
Rich Phillips	471
Maayan Goldstein	472
Yishai Feldman	473
Chih-Wei Ho	474
Michael J. Johnson	475
Peter George	476
Mikko Korkala	477
Pekka Abrahamsson	478
Alex Pukinskis	479
Willem Van Den Ende	480
Marc Evers	481
Deborah Hartmann	482
Robin Dymond	483
Steve Freeman	484
Mike W Hill	485
Laurent Bossavit	486
Ibrahim Abdelshafi	487
Steven Baker	488
Rod Coffin	489
Joseph Bergin	490
Erik Meade	491
Carlton Nettleton	492
Troy Frever	493
Paul Ingalls	494
Jason Nocks	495
Monica Yap	496
Dorothy Tudor	497
Gerard Meszaros	498
Geoff Hardy	499
Dave McMunn	500
Jeff Nielsen	501
Desi McAdam	502
Aslak Hellesoy	503
David Talby	504
Orit Hazzan	505
Joseph Chao	506
Gulgunes Atli	507
Chris Read	508
Yuri Khramov	509
Bill Curtis	510
Ben Hogan	511
Paul King	512
Cynthia Andres	513
Alex Ruiz	514
Naresh Jain	515
Owen Rogers	516
Mark Striebeck	517
Linsley Meadows	518
Laura Waite	519
Jeff Honious	520
Jonathan Clark	521
Joseph Pelrine	522
Dan Pierce	523
Eric Sivertson	524
Kelly Weyrauch	525
Beatrice Düring	526
Emma Parnell-Klabo	527
Pam Rostal	528
David Williams	529
Chris McMahon	530
Valerie Trapa	531
Santhpur Rao	532
Mara Yale	533
Blas Yslas	534
Lance Young	535
Ken Pugh	536
Mitch Lacey	537
Antawan Holmes	538
Marc Kellogg	539
Micah Alles	540
David Crosby, Carl Erickson	541
Jeff McClure	542
Janice Aston	543
Stacia Heimgartner	544
Melody Locke	545
Michael Puleio	546
Doug DeCarlo	547
Joe Bergin	548
Fred Grossman	549
Shiu Lun Tsang	550
Alan Gray	551
Carol Wellington	552
Thomas Briggs	553
Michael Wainer	554
Michael Hamman	555
David DeWolf	556
Brian Robertson	557
Daniel Poon	558
Tim Lister	559
Brad Wilson	560
Kevin Taylor	561
George Walter	562
Jonas Hult	563
Wade Lee	564
Dr. Gareth Powell	565
\.


--
-- Name: records_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY records
    ADD CONSTRAINT records_pkey PRIMARY KEY (url);


--
-- Name: sessions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: speakers_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres; Tablespace: 
--

ALTER TABLE ONLY speakers
    ADD CONSTRAINT speakers_pkey PRIMARY KEY (name);


--
-- Name: index_records_session; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE INDEX index_records_session ON records USING btree (session_id);


--
-- Name: speakers_id_key; Type: INDEX; Schema: public; Owner: postgres; Tablespace: 
--

CREATE UNIQUE INDEX speakers_id_key ON speakers USING btree (id);


--
-- Name: public; Type: ACL; Schema: -; Owner: postgres
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM postgres;
GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- PostgreSQL database dump complete
--

